{
  "address": "0x36bEA80773E1b7fc8D88852a47Ab89a1150e0f93",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burningTime",
          "type": "uint256"
        }
      ],
      "name": "BurnByLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addingTime",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removingTime",
          "type": "uint256"
        }
      ],
      "name": "CollateralRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addingTime",
          "type": "uint256"
        }
      ],
      "name": "LockerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teleBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateTime",
          "type": "uint256"
        }
      ],
      "name": "LockerLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTUnlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenUnlockedAmount",
          "type": "uint256"
        }
      ],
      "name": "LockerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isForCCBurn",
          "type": "bool"
        }
      ],
      "name": "LockerSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teleBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingTime",
          "type": "uint256"
        }
      ],
      "name": "LockerSlashedCollateralSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintingTime",
          "type": "uint256"
        }
      ],
      "name": "MintByLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "RequestAddLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTUnlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenUnlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        }
      ],
      "name": "RequestRemoveLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "RevokeAddLockerRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCKER_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN_DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TeleportDAOToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPPER_HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addingNativeTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "addLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "buySlashedCollateralOfLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccBurnRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getLockerCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getLockerLockingScript",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "getLockerTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfLockers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TeleportDAOToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minRequiredTDTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRequiredTNTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockerPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "isLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libConstants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "OneHundredPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "HealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "UpperHealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "MaxLockerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "NativeTokenDecimal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "NativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "teleportDAOToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ccBurnRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minRequiredTDTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minRequiredTNTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockerPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockerLeavingAcceptance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockerLeavingRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lockerTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockersMapping",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "lockerRescueType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "lockerRescueScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slashingTeleBTCAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservedNativeTokenForSlash",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLocker",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCandidate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isScriptHash",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRequiredTDTLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRequiredTNTLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "ownerRemoveLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceWithDiscountRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_removingNativeTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_candidateLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_lockedTDTAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedNativeTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_lockerRescueType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerRescueScript",
          "type": "bytes"
        }
      ],
      "name": "requestToBecomeLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestToRemoveLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfRemoveLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ccBurnRouter",
          "type": "address"
        }
      ],
      "name": "setCCBurnRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        }
      ],
      "name": "setExchangeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockerPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setLockerPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minRequiredTDTLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinRequiredTDTLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minRequiredTNTLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinRequiredTNTLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "slashIdleLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slashTheifLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfLockers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x361aa09dcf41fe3e47bbbb7e3a82af9f1019c3cc0fbf3d7a12cda6e14bf64d87",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0x36bEA80773E1b7fc8D88852a47Ab89a1150e0f93",
    "transactionIndex": 0,
    "gasUsed": "5217851",
    "logsBloom": "0x
    "blockHash": "0x396a335504339e7154f77705875e9d4a07a1dea17596d2698f0eca8813e387f0",
    "transactionHash": "0x361aa09dcf41fe3e47bbbb7e3a82af9f1019c3cc0fbf3d7a12cda6e14bf64d87",
    "logs": [],
    "blockNumber": 13029826,
    "cumulativeGasUsed": "5217851",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "26638c471352e26dd0e6e105b6c7435b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burningTime\",\"type\":\"uint256\"}],\"name\":\"BurnByLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addingTime\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removingTime\",\"type\":\"uint256\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addingTime\",\"type\":\"uint256\"}],\"name\":\"LockerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateTime\",\"type\":\"uint256\"}],\"name\":\"LockerLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTUnlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenUnlockedAmount\",\"type\":\"uint256\"}],\"name\":\"LockerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isForCCBurn\",\"type\":\"bool\"}],\"name\":\"LockerSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingTime\",\"type\":\"uint256\"}],\"name\":\"LockerSlashedCollateralSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingTime\",\"type\":\"uint256\"}],\"name\":\"MintByLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"}],\"name\":\"RequestAddLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTUnlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenUnlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"}],\"name\":\"RequestRemoveLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"}],\"name\":\"RevokeAddLockerRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCKER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeleportDAOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPPER_HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addingNativeTokenAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"addLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"buySlashedCollateralOfLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccBurnRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getLockerCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getLockerLockingScript\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"getLockerTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfLockers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TeleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libConstants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerLeavingAcceptance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerLeavingRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lockerTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockersMapping\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"lockerRescueType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"lockerRescueScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingTeleBTCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedNativeTokenForSlash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isScriptHash\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequiredTDTLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequiredTNTLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"ownerRemoveLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWithDiscountRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_removingNativeTokenAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_candidateLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_lockedTDTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedNativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_lockerRescueType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerRescueScript\",\"type\":\"bytes\"}],\"name\":\"requestToBecomeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestToRemoveLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfRemoveLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccBurnRouter\",\"type\":\"address\"}],\"name\":\"setCCBurnRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"}],\"name\":\"setExchangeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setLockerPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRequiredTDTLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredTDTLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRequiredTNTLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredTNTLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"slashIdleLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slashTheifLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfLockers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBurner(address)\":{\"details\":\"Give an account access to burn.\"},\"addCollateral(address,uint256)\":{\"params\":{\"_addingNativeTokenAmount\":\"Amount of added collateral\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if collateral is added successfully\"}},\"addLocker(address)\":{\"details\":\"Only owner can call this                                       When a candidate becomes locker, isCandidate is set to false\",\"params\":{\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if candidate is added successfully\"}},\"addMinter(address)\":{\"details\":\"Give an account access to mint.\"},\"burn(bytes,uint256)\":{\"details\":\"Burn teleBTC and also get the locker's fee\",\"params\":{\"_amount\":\"Amount of the teleBTC which is minted, including the locker's fee\",\"_lockerLockingScript\":\"Locking script of a locker\"},\"returns\":{\"_0\":\"uint                  The amount of teleBTC burned the\"}},\"buySlashedCollateralOfLocker(address,uint256)\":{\"details\":\"Users buy the slashed collateral using TeleBTC with discount                                   The paid TeleBTC will be burnt to keep the system safe                                   If all the needed TeleBTC is collected and burnt,                                   the rest of slashed collateral is sent back to locker \",\"params\":{\"_collateralAmount\":\"Amount of collateral (TNT) that someone is intend to buy with discount\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True is buying was successful\"}},\"getLockerCapacity(address)\":{\"details\":\"Net minted amount is total minted minus total burnt for the locker\",\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"The net minted of the locker\"}},\"getLockerLockingScript(address)\":{\"details\":\"@param _lockerTargetAddress         Address of locker on the target chain\",\"returns\":{\"_0\":\"Bitcoin public key of locker\"}},\"getNumberOfLockers()\":{\"details\":\"@return                           Number of lockers\"},\"isActive(address)\":{\"details\":\"An active locker is not in the process of being removed and has enough capacity to mint more tokens (minted - burnt << their collateral)\",\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"True if the locker is active and accepts mint requests\"}},\"isLocker(bytes)\":{\"details\":\"@param _lockerTargetAddress       Address of locker on the target chain\",\"returns\":{\"_0\":\"True if user is locker\"}},\"liquidateLocker(address,uint256)\":{\"details\":\"Anyone can liquidate a locker which its health factor                                   is less than 10000 (100%) by providing a sufficient amount of teleBTC\",\"params\":{\"_collateralAmount\":\"Amount of collateral (TNT) that someone is intend to buy with discount\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True is liquidation was successful\"}},\"mint(bytes,address,uint256)\":{\"details\":\"Mint teleBTC for an account and got the locker fee as well\",\"params\":{\"_amount\":\"Amount of the teleBTC which is minted, including the locker's fee\",\"_lockerLockingScript\":\"Locking script of a locker\",\"_receiver\":\"Address of the receiver of the minted teleBTCs\"},\"returns\":{\"_0\":\"uint                  The amount of teleBTC minted for the receiver\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerRemoveLocker(address)\":{\"details\":\"Only owner can call this function                               Removing conditions should be satisfied\",\"params\":{\"_lockerTargetAddress\":\"Target address of locker to be removed\"},\"returns\":{\"_0\":\"True if locker is removed successfully\"}},\"pauseLocker()\":{\"details\":\"@param\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"priceOfOneUnitOfCollateralInBTC()\":{\"details\":\"Returns the price of one native token (1*10^18) in teleBTC\",\"returns\":{\"_0\":\"uint\"}},\"removeBurner(address)\":{\"details\":\"Remove an account's access to burn.\"},\"removeCollateral(uint256)\":{\"params\":{\"_removingNativeTokenAmount\":\"Amount of removed collateral\"},\"returns\":{\"_0\":\"True if collateral is removed successfully\"}},\"removeMinter(address)\":{\"details\":\"Remove an account's access to mint.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)\":{\"details\":\"Users mint TeleBTC by sending BTC to locker's locking script                                         In case of liqudation of locker's bond, the burn TeleBTC is sent to                                         locker's rescue script                                         A user should lock enough TDT and TNT to become candidate\",\"params\":{\"_candidateLockingScript\":\"Locking script of the candidate\",\"_lockedNativeTokenAmount\":\"Bond amount of locker in native token of the target chain\",\"_lockedTDTAmount\":\"Bond amount of locker in TDT\",\"_lockerRescueScript\":\"Rescue script of the locker\",\"_lockerRescueType\":\"Type of locker's rescue script (e.g. P2SH)\"},\"returns\":{\"_0\":\"True if candidate is added successfully\"}},\"requestToRemoveLocker()\":{\"details\":\"Deactivates the status of the locker so that no                        one is allowed to send mint requests to this locker.                        It gives time to the locker to burn the required amount                        of teleBTC to make itself eligible to be removed.                        Sets isActive of locker to false\",\"returns\":{\"_0\":\"True if deactivated successfully\"}},\"revokeRequest()\":{\"details\":\"A user who is still a candidate can revoke his/her request\",\"returns\":{\"_0\":\"True if candidate is removed successfully\"}},\"selfRemoveLocker()\":{\"details\":\"Only locker can call this function                               Removing conditions should be satisfied\",\"returns\":{\"_0\":\"True if locker is removed successfully\"}},\"setCCBurnRouter(address)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_ccBurnRouter\":\"The new cc burn router contract address\"}},\"setCollateralRatio(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_collateralRatio\":\"The new collateral ratio\"}},\"setExchangeConnector(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_exchangeConnector\":\"The new exchange router contract address\"}},\"setLiquidationRatio(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_liquidationRatio\":\"The new liquidation ratio\"}},\"setLockerPercentageFee(uint256)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_lockerPercentageFee\":\"The new locker percentage fee\"}},\"setMinRequiredTDTLockedAmount(uint256)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_minRequiredTDTLockedAmount\":\"The new required bond amount\"}},\"setMinRequiredTNTLockedAmount(uint256)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_minRequiredTNTLockedAmount\":\"The new required bond amount\"}},\"setPriceOracle(address)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_priceOracle\":\"The new price oracle\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new wrapped token contract address\"}},\"slashIdleLocker(address,uint256,address,uint256,address)\":{\"details\":\"Only cc burn router can call this                                   Locker is slashed since doesn't provide burn proof                                   before a cc burn request deadline.                                   User who made the cc burn request will receive the slashed bond\",\"params\":{\"_amount\":\"Amount of TeleBTC that is slashed from lockers\",\"_lockerTargetAddress\":\"Locker's target chain address\",\"_recipient\":\"Address of user who receives the slashed amount\",\"_rewardAmount\":\"Address of slasher who receives reward\"},\"returns\":{\"_0\":\"True if the locker is slashed successfully\"}},\"slashTheifLocker(address,uint256,address,uint256)\":{\"details\":\"Only cc burn router can call this                                   Locker is slashed because he/she moved BTC from                                    locker's Bitcoin address without any corresponding burn req                                   The slashed bond will be sold with discount\",\"params\":{\"_amount\":\"Value of slashed collateral (in TeleBTC)\",\"_lockerTargetAddress\":\"Locker's target chain address\",\"_rewardAmount\":\"Value of slashed reward (in TeleBTC)\",\"_rewardRecipient\":\"Address of slasher who receives reward\"},\"returns\":{\"_0\":\"True if the locker is slashed successfully\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPauseLocker()\":{\"details\":\"@param\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateral(address,uint256)\":{\"notice\":\"Increases TNT collateral of the locker\"},\"addLocker(address)\":{\"notice\":\"Approves a candidate request to become locker\"},\"burn(bytes,uint256)\":{\"notice\":\"Burn teleBTC of an account\"},\"buySlashedCollateralOfLocker(address,uint256)\":{\"notice\":\"Sells lockers slashed collateral\"},\"getLockerCapacity(address)\":{\"notice\":\"Get how much net this locker has minted\"},\"getLockerLockingScript(address)\":{\"notice\":\"Give Bitcoin public key of locker\"},\"getNumberOfLockers()\":{\"notice\":\"Give number of lockers\"},\"isActive(address)\":{\"notice\":\"Tells if a locker is active or not\"},\"isLocker(bytes)\":{\"notice\":\"Checks whether an address is locker\"},\"liquidateLocker(address,uint256)\":{\"notice\":\"Liquidates the locker whose collateral is unhealthy\"},\"mint(bytes,address,uint256)\":{\"notice\":\"Mint teleBTC for an account\"},\"ownerRemoveLocker(address)\":{\"notice\":\"Removes a locker from lockers list\"},\"pauseLocker()\":{\"notice\":\"Pause the locker, so only the functions can be called which are whenPaused\"},\"removeCollateral(uint256)\":{\"notice\":\"Decreases TNT collateral of the locker\"},\"requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)\":{\"notice\":\"Adds user to candidates list\"},\"requestToRemoveLocker()\":{\"notice\":\"Requests to remove a locker from lockers list\"},\"revokeRequest()\":{\"notice\":\"Removes a candidate from candidates list\"},\"selfRemoveLocker()\":{\"notice\":\"Removes a locker from lockers list\"},\"setCCBurnRouter(address)\":{\"notice\":\"Changes cc burn router contract\"},\"setCollateralRatio(uint256)\":{\"notice\":\"Changes collateral ratio\"},\"setExchangeConnector(address)\":{\"notice\":\"Changes exchange router contract address and updates wrapped avax addresses\"},\"setLiquidationRatio(uint256)\":{\"notice\":\"Changes liquidation ratio\"},\"setLockerPercentageFee(uint256)\":{\"notice\":\"Changes percentage fee of locker\"},\"setMinRequiredTDTLockedAmount(uint256)\":{\"notice\":\"Changes the required bond amount to become locker\"},\"setMinRequiredTNTLockedAmount(uint256)\":{\"notice\":\"Changes the required bond amount to become locker\"},\"setPriceOracle(address)\":{\"notice\":\"Changes the price oracle\"},\"setTeleBTC(address)\":{\"notice\":\"Changes wrapped token contract address\"},\"slashIdleLocker(address,uint256,address,uint256,address)\":{\"notice\":\"Slashes lockers for not executing a cc burn req\"},\"slashTheifLocker(address,uint256,address,uint256)\":{\"notice\":\"Slashes lockers for moving BTC without a good reason\"},\"unPauseLocker()\":{\"notice\":\"Un-pause the locker, so only the functions can be called which are whenNotPaused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lockers/LockersLogicTestnet.sol\":\"LockersLogicTestnet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0xb834a5d2bb6e15bb0d76c8251460532874e9d00153c024233d1d46b1baebdf2c\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n\\n    event Mint(address indexed to, uint value);\\n\\n    event Burn(address indexed to, uint value);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function mintTestToken() external; // Just for test\\n\\n}\",\"keccak256\":\"0x5f3a1b40b46df7ac9c69ded4bf254e85142dcd6731c37d4ef0663100e50927b3\",\"license\":\"MIT\"},\"contracts/libraries/LockersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"../types/DataTypes.sol\\\";\\n\\nlibrary LockersLib {\\n\\n    function maximumBuyableCollateral(\\n        DataTypes.locker memory theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) external view returns (uint) {\\n\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint teleBTCDecimal = IERC20(libParams.teleBTC).decimals();\\n\\n        uint antecedent = (libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** libConstants.NativeTokenDecimal)) -\\n        (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        uint consequent = ((libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent) -\\n        (_priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        return antecedent/consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        DataTypes.locker memory theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) external view returns (uint) {\\n        return (_priceOfOneUnitOfCollateral * theLocker.nativeTokenLockedAmount * \\n            (10 ** (1 + IERC20(libParams.teleBTC).decimals())))/\\n                (theLocker.netMinted * libParams.liquidationRatio * (10 ** (1 + libConstants.NativeTokenDecimal)));\\n    }\\n\\n    function neededTeleBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount,\\n        uint _priceOfCollateral\\n    ) external pure returns (uint) {\\n        return (_collateralAmount * _priceOfCollateral * libParams.priceWithDiscountRatio)/\\n            (libConstants.OneHundredPercent*(10 ** libConstants.NativeTokenDecimal));\\n    }\\n\\n    function addToCollateral(\\n        DataTypes.locker storage theLocker,\\n        uint _addingNativeTokenAmount\\n    ) external {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: account is not a locker\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount + _addingNativeTokenAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral,\\n        uint _removingNativeTokenAmount\\n    ) internal {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: account is not a locker\\\"\\n        );\\n\\n        // Capacity of locker = (locker's collateral value in TeleBTC) * (collateral ratio) - (minted TeleBTC) \\n        uint lockerCapacity = (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * \\n            libConstants.OneHundredPercent)/\\n                (libParams.collateralRatio * (10 ** libConstants.NativeTokenDecimal)) - theLocker.netMinted;\\n\\n        uint maxRemovableCollateral = (lockerCapacity * (10 ** libConstants.NativeTokenDecimal))/_priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingNativeTokenAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount;\\n    }\\n\\n\\n    function slashTheifLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _equivalentNativeToken,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint, uint) {\\n        uint rewardInNativeToken = _equivalentNativeToken*_rewardAmount/_amount;\\n        uint neededNativeTokenForSlash = _equivalentNativeToken*libParams.liquidationRatio/libConstants.OneHundredPercent;\\n\\n        if ((rewardInNativeToken + neededNativeTokenForSlash) > theLocker.nativeTokenLockedAmount) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInNativeToken = rewardInNativeToken*theLocker.nativeTokenLockedAmount/\\n                (rewardInNativeToken + neededNativeTokenForSlash);\\n            neededNativeTokenForSlash = theLocker.nativeTokenLockedAmount - rewardInNativeToken;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n            = theLocker.nativeTokenLockedAmount - (rewardInNativeToken + neededNativeTokenForSlash);\\n\\n        theLocker.netMinted\\n            = theLocker.netMinted - _amount;\\n\\n        theLocker.slashingTeleBTCAmount\\n            = theLocker.slashingTeleBTCAmount + _amount;\\n\\n        theLocker.reservedNativeTokenForSlash\\n            = theLocker.reservedNativeTokenForSlash + neededNativeTokenForSlash;\\n\\n        return (rewardInNativeToken, neededNativeTokenForSlash);\\n    }\\n\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0x4965ed9d86717af4cca08fc2b3e525a15c65d92716ce25ac1354b3b7d624aa7b\",\"license\":\"MIT\"},\"contracts/lockers/LockersLogicTestnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../routers/interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ILockers.sol\\\";\\nimport \\\"../types/DataTypes.sol\\\";\\nimport \\\"../libraries/LockersLib.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LockersLogicTestnet is ILockers, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n\\n    using LockersLib for *;\\n\\n    // Constants\\n    uint public constant ONE_HUNDRED_PERCENT = 10000;\\n    uint public constant HEALTH_FACTOR = 10000;\\n    uint public constant UPPER_HEALTH_FACTOR = 12000;\\n    uint public constant MAX_LOCKER_FEE = 10000;\\n    uint public constant NATIVE_TOKEN_DECIMAL = 18;\\n    address public constant NATIVE_TOKEN = address(1);\\n\\n    // Public variables\\n    address public override TeleportDAOToken;\\n    address public override teleBTC;\\n    address public override ccBurnRouter;\\n    address public override exchangeConnector;\\n    address public override priceOracle;\\n\\n    uint public override minRequiredTDTLockedAmount;\\n    uint public override minRequiredTNTLockedAmount;\\n    uint public override lockerPercentageFee;\\n    uint public override collateralRatio;\\n    uint public override liquidationRatio;\\n    uint public override priceWithDiscountRatio;\\n    uint public override totalNumberOfCandidates;\\n    uint public override totalNumberOfLockers;\\n\\n    mapping(address => DataTypes.locker) public lockersMapping; // locker's target address -> locker structure\\n    mapping(address => bool) public lockerLeavingRequests;\\n    mapping(address => bool) public lockerLeavingAcceptance;\\n    mapping(bytes => address) public lockerTargetAddress; // locker's locking script -> locker's target address\\n    mapping(address => bool) minters;\\n    mapping(address => bool) burners;\\n\\n    DataTypes.lockersLibConstants public libConstants;\\n    DataTypes.lockersLibParam public libParams;\\n\\n    function initialize(\\n        address _TeleportDAOToken,\\n        address _exchangeConnector,\\n        address _priceOracle,\\n        uint _minRequiredTDTLockedAmount,\\n        uint _minRequiredTNTLockedAmount,\\n        uint _collateralRatio,\\n        uint _liquidationRatio,\\n        uint _lockerPercentageFee,\\n        uint _priceWithDiscountRatio\\n    ) public initializer {\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        require(\\n            _TeleportDAOToken != address(0) && _exchangeConnector != address(0) && _priceOracle != address(0),\\n            \\\"Lockers: address is zero\\\"\\n        );\\n\\n        require(\\n            _minRequiredTDTLockedAmount != 0 || _minRequiredTNTLockedAmount != 0,\\n            \\\"Lockers: amount is zero\\\"\\n        );\\n\\n        require(\\n            _collateralRatio >= _liquidationRatio && _liquidationRatio >= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: problem in CR and LR\\\"\\n        );\\n\\n        require(\\n            _priceWithDiscountRatio <= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: less than 100%\\\"\\n        );\\n\\n        TeleportDAOToken = _TeleportDAOToken;\\n        exchangeConnector = _exchangeConnector;\\n        priceOracle = _priceOracle;\\n        minRequiredTDTLockedAmount = _minRequiredTDTLockedAmount;\\n        minRequiredTNTLockedAmount = _minRequiredTNTLockedAmount;\\n        collateralRatio = _collateralRatio;\\n        liquidationRatio = _liquidationRatio;\\n        lockerPercentageFee = _lockerPercentageFee;\\n        priceWithDiscountRatio= _priceWithDiscountRatio;\\n\\n        libConstants.OneHundredPercent = ONE_HUNDRED_PERCENT;\\n        libConstants.HealthFactor = HEALTH_FACTOR;\\n        libConstants.UpperHealthFactor = UPPER_HEALTH_FACTOR;\\n        libConstants.MaxLockerFee = MAX_LOCKER_FEE;\\n        libConstants.NativeTokenDecimal = NATIVE_TOKEN_DECIMAL;\\n        libConstants.NativeToken = NATIVE_TOKEN;\\n\\n        libParams.teleportDAOToken = TeleportDAOToken;\\n        libParams.teleBTC = teleBTC;\\n        libParams.ccBurnRouter = ccBurnRouter;\\n        libParams.exchangeConnector = exchangeConnector;\\n        libParams.priceOracle = priceOracle;\\n        libParams.minRequiredTDTLockedAmount = minRequiredTDTLockedAmount;\\n        libParams.minRequiredTNTLockedAmount = minRequiredTNTLockedAmount;\\n        libParams.lockerPercentageFee = lockerPercentageFee;\\n        libParams.collateralRatio = collateralRatio;\\n        libParams.liquidationRatio = liquidationRatio;\\n        libParams.priceWithDiscountRatio = priceWithDiscountRatio;\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Lockers: address is zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"Lockers: value is zero\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(_isMinter(_msgSender()), \\\"Lockers: only minters can mint\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to mint.\\n     */\\n    function addMinter(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(!_isMinter(_account), \\\"Lockers: account already has role\\\");\\n        minters[_account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to mint.\\n     */\\n    function removeMinter(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(_isMinter(_account), \\\"Lockers: account does not have role\\\");\\n        minters[_account] = false;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(_isBurner(_msgSender()), \\\"Lockers: only burners can burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to burn.\\n     */\\n    function addBurner(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(!_isBurner(_account), \\\"Lockers: account already has role\\\");\\n        burners[_account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to burn.\\n     */\\n    function removeBurner(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(_isBurner(_account), \\\"Lockers: account does not have role\\\");\\n        burners[_account] = false;\\n    }\\n\\n    /// @notice                 Pause the locker, so only the functions can be called which are whenPaused\\n    /// @dev\\n    /// @param\\n    function pauseLocker() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                 Un-pause the locker, so only the functions can be called which are whenNotPaused\\n    /// @dev\\n    /// @param\\n    function unPauseLocker() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getLockerTargetAddress(bytes calldata  _lockerLockingScript) external view override returns (address) {\\n        return lockerTargetAddress[_lockerLockingScript];\\n    }\\n\\n    /// @notice                           Checks whether an address is locker\\n    /// @dev\\n    /// @param _lockerTargetAddress       Address of locker on the target chain\\n    /// @return                           True if user is locker\\n    function isLocker(bytes calldata _lockerLockingScript) external override view returns(bool) {\\n        return lockersMapping[lockerTargetAddress[_lockerLockingScript]].isLocker;\\n    }\\n\\n    /// @notice                           Give number of lockers\\n    /// @dev\\n    /// @return                           Number of lockers\\n    function getNumberOfLockers() external override view returns (uint) {\\n        return totalNumberOfLockers;\\n    }\\n\\n    /// @notice                             Give Bitcoin public key of locker\\n    /// @dev\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             Bitcoin public key of locker\\n    function getLockerLockingScript(\\n        address _lockerTargetAddress\\n    ) external override view nonZeroAddress(_lockerTargetAddress) returns (bytes memory) {\\n        return lockersMapping[_lockerTargetAddress].lockerLockingScript;\\n    }\\n\\n    /// @notice                             Tells if a locker is active or not\\n    /// @dev                                An active locker is not in the process of being removed and has enough\\n    /// capacity to mint more tokens (minted - burnt << their collateral)\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             True if the locker is active and accepts mint requests\\n    function isActive(\\n        address _lockerTargetAddress\\n    ) external override view nonZeroAddress(_lockerTargetAddress) returns (bool) {\\n        return lockersMapping[_lockerTargetAddress].isActive;\\n    }\\n\\n    /// @notice                             Get how much net this locker has minted\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The net minted of the locker\\n    function getLockerCapacity(\\n        address _lockerTargetAddress\\n    ) public override view nonZeroAddress(_lockerTargetAddress) returns (uint) {\\n        return (_lockerCollateralInTeleBTC(_lockerTargetAddress)*ONE_HUNDRED_PERCENT/collateralRatio) - lockersMapping[_lockerTargetAddress].netMinted;\\n    }\\n\\n    /// @notice                       Changes percentage fee of locker\\n    /// @dev                          Only current owner can call this\\n    /// @param _lockerPercentageFee   The new locker percentage fee\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external override onlyOwner {\\n        require(_lockerPercentageFee <= MAX_LOCKER_FEE, \\\"Lockers: invalid locker fee\\\");\\n        lockerPercentageFee = _lockerPercentageFee;\\n        libParams.lockerPercentageFee = lockerPercentageFee;\\n    }\\n\\n    /// @notice         Changes the required bond amount to become locker\\n    /// @dev            Only current owner can call this\\n    /// @param _minRequiredTDTLockedAmount   The new required bond amount\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external override onlyOwner {\\n        minRequiredTDTLockedAmount = _minRequiredTDTLockedAmount;\\n        libParams.minRequiredTDTLockedAmount = minRequiredTDTLockedAmount;\\n    }\\n\\n    /// @notice         Changes the required bond amount to become locker\\n    /// @dev            Only current owner can call this\\n    /// @param _minRequiredTNTLockedAmount   The new required bond amount\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external override onlyOwner {\\n        minRequiredTNTLockedAmount = _minRequiredTNTLockedAmount;\\n        libParams.minRequiredTNTLockedAmount = minRequiredTNTLockedAmount;\\n    }\\n\\n    /// @notice                 Changes the price oracle\\n    /// @dev                    Only current owner can call this\\n    /// @param _priceOracle     The new price oracle\\n    function setPriceOracle(address _priceOracle) external override nonZeroAddress(_priceOracle) onlyOwner {\\n        priceOracle = _priceOracle;\\n        libParams.priceOracle = priceOracle;\\n    }\\n\\n    /// @notice                Changes cc burn router contract\\n    /// @dev                   Only current owner can call this\\n    /// @param _ccBurnRouter   The new cc burn router contract address\\n    function setCCBurnRouter(address _ccBurnRouter) external override nonZeroAddress(_ccBurnRouter) onlyOwner {\\n        ccBurnRouter = _ccBurnRouter;\\n        libParams.ccBurnRouter = ccBurnRouter;\\n    }\\n\\n    /// @notice                 Changes exchange router contract address and updates wrapped avax addresses\\n    /// @dev                    Only owner can call this\\n    /// @param _exchangeConnector  The new exchange router contract address\\n    function setExchangeConnector(address _exchangeConnector) external override nonZeroAddress(_exchangeConnector) onlyOwner {\\n        exchangeConnector = _exchangeConnector;\\n        libParams.exchangeConnector = exchangeConnector;\\n    }\\n\\n    /// @notice                 Changes wrapped token contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new wrapped token contract address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        teleBTC = _teleBTC;\\n        libParams.teleBTC = teleBTC;\\n    }\\n\\n    /// @notice                     Changes collateral ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _collateralRatio     The new collateral ratio\\n    function setCollateralRatio(uint _collateralRatio) external override onlyOwner {\\n        require(_collateralRatio >= liquidationRatio, \\\"Lockers: CR must be greater than LR\\\");\\n        collateralRatio = _collateralRatio;\\n        libParams.collateralRatio = collateralRatio;\\n    }\\n\\n    /// @notice                     Changes liquidation ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _liquidationRatio    The new liquidation ratio\\n    function setLiquidationRatio(uint _liquidationRatio) external override onlyOwner {\\n        liquidationRatio = _liquidationRatio;\\n        libParams.liquidationRatio = liquidationRatio;\\n    }\\n\\n    /// @notice                                 Adds user to candidates list\\n    /// @dev                                    Users mint TeleBTC by sending BTC to locker's locking script\\n    ///                                         In case of liqudation of locker's bond, the burn TeleBTC is sent to\\n    ///                                         locker's rescue script\\n    ///                                         A user should lock enough TDT and TNT to become candidate\\n    /// @param _candidateLockingScript          Locking script of the candidate\\n    /// @param _lockedTDTAmount                 Bond amount of locker in TDT\\n    /// @param _lockedNativeTokenAmount         Bond amount of locker in native token of the target chain\\n    /// @param _lockerRescueType                Type of locker's rescue script (e.g. P2SH)\\n    /// @param _lockerRescueScript              Rescue script of the locker\\n    /// @return                                 True if candidate is added successfully\\n    function requestToBecomeLocker(\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        require(\\n            !lockersMapping[_msgSender()].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: is locker\\\"\\n        );\\n\\n        require(\\n            _lockedTDTAmount >= minRequiredTDTLockedAmount,\\n            \\\"Lockers: low TDT\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= minRequiredTNTLockedAmount && msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low TNT\\\"\\n        );\\n\\n        require(\\n            lockerTargetAddress[_candidateLockingScript] == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        require(IERC20(TeleportDAOToken).transferFrom(_msgSender(), address(this), _lockedTDTAmount));\\n        DataTypes.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n\\n        lockersMapping[_msgSender()] = locker_;\\n\\n        totalNumberOfCandidates = totalNumberOfCandidates + 1;\\n\\n        emit RequestAddLocker(\\n            _msgSender(),\\n            _candidateLockingScript,\\n            _lockedTDTAmount,\\n            _lockedNativeTokenAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a candidate from candidates list\\n    /// @dev                          A user who is still a candidate can revoke his/her request\\n    /// @return                       True if candidate is removed successfully\\n    function revokeRequest() external override nonReentrant returns (bool) {\\n\\n        require(\\n            lockersMapping[_msgSender()].isCandidate,\\n            \\\"Lockers: no req\\\"\\n        );\\n\\n        // Loads locker's information\\n        DataTypes.locker memory lockerRequest = lockersMapping[_msgSender()];\\n\\n        // Removes candidate from lockersMapping\\n        delete lockersMapping[_msgSender()];\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).transfer(_msgSender(), lockerRequest.TDTLockedAmount);\\n        Address.sendValue(payable(_msgSender()), lockerRequest.nativeTokenLockedAmount);\\n\\n        emit RevokeAddLockerRequest(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                               Approves a candidate request to become locker\\n    /// @dev                                  Only owner can call this\\n    ///                                       When a candidate becomes locker, isCandidate is set to false\\n    /// @param _lockerTargetAddress           Locker's target chain address\\n    /// @return                               True if candidate is added successfully\\n    function addLocker(\\n        address _lockerTargetAddress\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonReentrant onlyOwner returns (bool) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isCandidate,\\n            \\\"Lockers: no request\\\"\\n        );\\n\\n        // Updates locker's status\\n        lockersMapping[_lockerTargetAddress].isCandidate = false;\\n        lockersMapping[_lockerTargetAddress].isLocker = true;\\n        lockersMapping[_lockerTargetAddress].isActive = true;\\n\\n        // Updates number of candidates and lockers\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n        totalNumberOfLockers = totalNumberOfLockers + 1;\\n\\n        lockerTargetAddress[lockersMapping[_lockerTargetAddress].lockerLockingScript] = _lockerTargetAddress;\\n\\n        emit LockerAdded(\\n            _lockerTargetAddress,\\n            lockersMapping[_lockerTargetAddress].lockerLockingScript,\\n            lockersMapping[_lockerTargetAddress].TDTLockedAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                Requests to remove a locker from lockers list\\n    /// @dev                   Deactivates the status of the locker so that no\\n    ///                        one is allowed to send mint requests to this locker.\\n    ///                        It gives time to the locker to burn the required amount\\n    ///                        of teleBTC to make itself eligible to be removed.\\n    ///                        Sets isActive of locker to false\\n    /// @return                True if deactivated successfully\\n    function requestToRemoveLocker() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        lockersMapping[_msgSender()].isActive = false;\\n\\n        lockerLeavingRequests[_msgSender()] = true;\\n\\n        emit RequestRemoveLocker(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            lockersMapping[_msgSender()].netMinted\\n        // TODO: adding more fields to this event\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Only owner can call this function\\n    ///                               Removing conditions should be satisfied\\n    /// @param _lockerTargetAddress   Target address of locker to be removed\\n    /// @return                       True if locker is removed successfully\\n    function ownerRemoveLocker(\\n        address _lockerTargetAddress\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonReentrant onlyOwner returns (bool) {\\n        _removeLocker(_lockerTargetAddress);\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Only locker can call this function\\n    ///                               Removing conditions should be satisfied\\n    /// @return                       True if locker is removed successfully\\n    function selfRemoveLocker() external override nonReentrant whenNotPaused returns (bool) {\\n        _removeLocker(_msgSender());\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes lockers for not executing a cc burn req\\n    /// @dev                              Only cc burn router can call this\\n    ///                                   Locker is slashed since doesn't provide burn proof\\n    ///                                   before a cc burn request deadline.\\n    ///                                   User who made the cc burn request will receive the slashed bond\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _rewardAmount              Amount of TeleBTC that slasher receives\\n    /// @param _rewardAmount              Address of slasher who receives reward\\n    /// @param _amount                    Amount of TeleBTC that is slashed from lockers\\n    /// @param _recipient                 Address of user who receives the slashed amount\\n    /// @return                           True if the locker is slashed successfully\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentNativeToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount, // Total amount of TeleBTC that is slashed\\n            IERC20(teleBTC).decimals(), // Decimal of teleBTC\\n            NATIVE_TOKEN_DECIMAL, // Decimal of TNT\\n            teleBTC, // Input token\\n            NATIVE_TOKEN // Output token\\n        );\\n\\n        if (equivalentNativeToken > lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount) {\\n            equivalentNativeToken = lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount\\n        = lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount - equivalentNativeToken;\\n\\n        // Transfers TNT to user\\n        payable(_recipient).transfer(equivalentNativeToken*_amount/(_amount + _rewardAmount));\\n        // Transfers TNT to slasher\\n        uint rewardAmountInNativeToken = equivalentNativeToken*_rewardAmount/(_amount + _rewardAmount);\\n        payable(_rewardRecipient).transfer(rewardAmountInNativeToken);\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardAmountInNativeToken,\\n            _rewardRecipient,\\n            _amount,\\n            _recipient,\\n            equivalentNativeToken,\\n            block.timestamp,\\n            true\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                           Slashes lockers for moving BTC without a good reason\\n    /// @dev                              Only cc burn router can call this\\n    ///                                   Locker is slashed because he/she moved BTC from \\n    ///                                   locker's Bitcoin address without any corresponding burn req\\n    ///                                   The slashed bond will be sold with discount\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _rewardAmount              Value of slashed reward (in TeleBTC)\\n    /// @param _rewardRecipient           Address of slasher who receives reward\\n    /// @param _amount                    Value of slashed collateral (in TeleBTC)\\n    /// @return                           True if the locker is slashed successfully\\n    function slashTheifLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentNativeToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _amount, // Total amount of TeleBTC that is slashed\\n            IERC20(teleBTC).decimals(), // Decimal of teleBTC\\n            NATIVE_TOKEN_DECIMAL, // Decimal of TNT\\n            teleBTC, // Input token\\n            NATIVE_TOKEN // Output token\\n        );\\n\\n        (uint rewardInNativeToken, uint neededNativeTokenForSlash) = LockersLib.slashTheifLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            equivalentNativeToken,\\n            _rewardAmount,\\n            _amount\\n        );\\n\\n        payable(_rewardRecipient).transfer(rewardInNativeToken);\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardInNativeToken,\\n            _rewardRecipient,\\n            _amount,\\n            address(this),\\n            neededNativeTokenForSlash + rewardInNativeToken,\\n            block.timestamp,\\n            false\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                           Liquidates the locker whose collateral is unhealthy\\n    /// @dev                              Anyone can liquidate a locker which its health factor\\n    ///                                   is less than 10000 (100%) by providing a sufficient amount of teleBTC\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral (TNT) that someone is intend to buy with discount\\n    /// @return                           True is liquidation was successful\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonZeroValue(_collateralAmount)\\n    nonReentrant whenNotPaused returns (bool) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        DataTypes.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC();\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            LockersLib.calculateHealthFactor(\\n                theLiquidatingLocker,\\n                libConstants,\\n                libParams,\\n                priceOfCollateral\\n            ) < HEALTH_FACTOR,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint _maxBuyableCollateral = LockersLib.maximumBuyableCollateral(\\n            theLiquidatingLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLiquidatingLocker.nativeTokenLockedAmount) {\\n            _maxBuyableCollateral = theLiquidatingLocker.nativeTokenLockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of TeleBTC to buy collateralAmount\\n        uint neededTeleBTC = LockersLib.neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        // Burns TeleBTC for locker rescue script\\n        // note: user should give allowance for TeleBTC to cc burn router\\n        ICCBurnRouter(ccBurnRouter).ccBurn(\\n            neededTeleBTC,\\n            theLiquidatingLocker.lockerRescueScript,\\n            theLiquidatingLocker.lockerRescueType,\\n            theLiquidatingLocker.lockerLockingScript\\n        );\\n\\n        // Updates net minted and TNT bond of locker\\n        lockersMapping[_lockerTargetAddress].netMinted = lockersMapping[_lockerTargetAddress].netMinted - neededTeleBTC;\\n        lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount = lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount - _collateralAmount;\\n\\n        Address.sendValue(payable(_msgSender()), _collateralAmount);\\n\\n        emit LockerLiquidated(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededTeleBTC,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                           Sells lockers slashed collateral\\n    /// @dev                              Users buy the slashed collateral using TeleBTC with discount\\n    ///                                   The paid TeleBTC will be burnt to keep the system safe\\n    ///                                   If all the needed TeleBTC is collected and burnt,\\n    ///                                   the rest of slashed collateral is sent back to locker \\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral (TNT) that someone is intend to buy with discount\\n    /// @return                           True is buying was successful\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external nonZeroAddress(_lockerTargetAddress) nonZeroValue(_collateralAmount)\\n        nonReentrant whenNotPaused override returns (bool) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        DataTypes.locker memory theSlashedLocker = lockersMapping[_lockerTargetAddress];\\n\\n        require(\\n            _collateralAmount <= theSlashedLocker.reservedNativeTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        // Finds needed amount of TeleBTC to buy collateral with discount\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC();\\n        uint neededTeleBTC = LockersLib.neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        // Users cannot buy more than total slashed TeleBTC\\n        require(\\n            neededTeleBTC <= theSlashedLocker.slashingTeleBTCAmount,\\n            \\\"Lockers: cant slash\\\"\\n        );\\n\\n        // Updates locker's slashing info \\n        lockersMapping[_lockerTargetAddress].slashingTeleBTCAmount =\\n            lockersMapping[_lockerTargetAddress].slashingTeleBTCAmount - neededTeleBTC;\\n\\n        lockersMapping[_lockerTargetAddress].reservedNativeTokenForSlash =\\n            lockersMapping[_lockerTargetAddress].reservedNativeTokenForSlash - _collateralAmount;\\n\\n        // Burns user's TeleBTC\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), neededTeleBTC);\\n        ITeleBTC(teleBTC).burn(neededTeleBTC);\\n        \\n        // Sends bought collateral to user\\n        Address.sendValue(payable(_msgSender()), _collateralAmount);\\n\\n        emit LockerSlashedCollateralSold(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededTeleBTC,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                                 Increases TNT collateral of the locker\\n    /// @param _lockerTargetAddress             Locker's target chain address\\n    /// @param _addingNativeTokenAmount         Amount of added collateral\\n    /// @return                                 True if collateral is added successfully\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        require(\\n            msg.value == _addingNativeTokenAmount,\\n            \\\"Lockers: msg value\\\"\\n        );\\n\\n        LockersLib.addToCollateral(\\n            lockersMapping[_lockerTargetAddress],\\n            _addingNativeTokenAmount\\n        );\\n\\n        emit CollateralAdded(\\n            _lockerTargetAddress,\\n            _addingNativeTokenAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n\\n\\n    /// @notice                                 Decreases TNT collateral of the locker\\n    /// @param _removingNativeTokenAmount       Amount of removed collateral\\n    /// @return                                 True if collateral is removed successfully\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        uint priceOfOnUnitOfCollateral = priceOfOneUnitOfCollateralInBTC();\\n\\n        LockersLib.removeFromCollateral(\\n            lockersMapping[_msgSender()],\\n            libConstants,\\n            libParams,\\n            priceOfOnUnitOfCollateral,\\n            _removingNativeTokenAmount\\n        );\\n\\n        Address.sendValue(payable(_msgSender()), _removingNativeTokenAmount);\\n\\n        emit CollateralRemoved(\\n            _msgSender(),\\n            _removingNativeTokenAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the price of one native token (1*10^18) in teleBTC\\n     * @return uint\\n     */\\n    function priceOfOneUnitOfCollateralInBTC() public override view returns (uint) {\\n\\n        return IPriceOracle(priceOracle).equivalentOutputAmount(\\n            (10**NATIVE_TOKEN_DECIMAL), // 1 Ether is 10^18 wei\\n            NATIVE_TOKEN_DECIMAL,\\n            IERC20(teleBTC).decimals(),\\n            NATIVE_TOKEN,\\n            teleBTC\\n        );\\n\\n    }\\n\\n    /// @notice                       Mint teleBTC for an account\\n    /// @dev                          Mint teleBTC for an account and got the locker fee as well\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _receiver              Address of the receiver of the minted teleBTCs\\n    /// @param _amount                Amount of the teleBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of teleBTC minted for the receiver\\n    function mint(\\n        bytes calldata _lockerLockingScript,\\n        address _receiver,\\n        uint _amount\\n    ) external override nonZeroAddress(_receiver)\\n    nonZeroValue(_amount) nonReentrant whenNotPaused onlyMinter returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerLockingScript];\\n\\n        uint theLockerCapacity = getLockerCapacity(_lockerTargetAddress);\\n\\n        require(\\n            theLockerCapacity >= _amount,\\n            \\\"Lockers: insufficient capacity\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted =\\n        lockersMapping[_lockerTargetAddress].netMinted + _amount;\\n\\n        // Mints locker fee\\n        uint lockerFee = _amount*lockerPercentageFee/MAX_LOCKER_FEE;\\n        if (lockerFee > 0) {\\n            ITeleBTC(teleBTC).mint(_lockerTargetAddress, lockerFee);\\n        }\\n\\n        // Mints tokens for receiver\\n        ITeleBTC(teleBTC).mint(_receiver, _amount - lockerFee);\\n\\n        emit MintByLocker(\\n            _lockerTargetAddress,\\n            _receiver,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return _amount - lockerFee;\\n    }\\n\\n    /// @notice                       Burn teleBTC of an account\\n    /// @dev                          Burn teleBTC and also get the locker's fee\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _amount                Amount of the teleBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of teleBTC burned the\\n    function burn(\\n        bytes calldata _lockerLockingScript,\\n        uint _amount\\n    ) external override nonZeroValue(_amount)\\n    nonReentrant whenNotPaused onlyBurner returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerLockingScript];\\n\\n        // Transfers teleBTC from user\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        uint lockerFee = _amount*lockerPercentageFee/MAX_LOCKER_FEE;\\n        uint remainedAmount = _amount - lockerFee;\\n        uint netMinted = lockersMapping[_lockerTargetAddress].netMinted;\\n\\n        require(\\n            netMinted >= remainedAmount,\\n            \\\"Lockers: insufficient funds\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted = netMinted - remainedAmount;\\n\\n        // Burns teleBTC and sends rest of it to locker\\n        ITeleBTC(teleBTC).burn(remainedAmount);\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, lockerFee);\\n\\n        emit BurnByLocker(\\n            _lockerTargetAddress,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return remainedAmount;\\n    }\\n\\n    /**\\n     * @dev Check if an account is minter.\\n     * @return bool\\n     */\\n    function _isMinter(address account) private view nonZeroAddress(account) returns (bool) {\\n        return minters[account];\\n    }\\n\\n    /**\\n     * @dev Check if an account is burner.\\n     * @return bool\\n     */\\n    function _isBurner(address account) private view nonZeroAddress(account) returns (bool) {\\n        return burners[account];\\n    }\\n\\n    /// @notice                             Get the locker collateral in terms of TeleBTC\\n    /// @dev\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The locker collateral in TeleBTC\\n    function _lockerCollateralInTeleBTC(address _lockerTargetAddress) private view returns (uint) {\\n        // note: we assume that 1 BTC = 10 ETH\\n        return lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount*(10**8)/(10**18)/10;\\n        /*\\n            note: below lines are commented for testing purpose\\n        */\\n        // return IPriceOracle(priceOracle).equivalentOutputAmount(\\n        //     lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n        //     NATIVE_TOKEN_DECIMAL,\\n        //     IERC20(teleBTC).decimals(),\\n        //     NATIVE_TOKEN,\\n        //     teleBTC\\n        // );\\n    }\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Checks that net minted TeleBTC of locker is zero\\n    ///                               Sends back available bond of locker (in TDT and TNT)\\n    /// @param _lockerTargetAddress   Target address of locker to be removed\\n    function _removeLocker(address _lockerTargetAddress) private {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            lockerLeavingRequests[_lockerTargetAddress],\\n            \\\"Lockers: no remove req\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].netMinted == 0,\\n            \\\"Lockers: 0 net minted\\\"\\n        );\\n\\n        DataTypes.locker memory _removingLokcer = lockersMapping[_lockerTargetAddress];\\n\\n        // Removes locker from lockersMapping\\n        delete lockersMapping[_lockerTargetAddress];\\n        totalNumberOfLockers = totalNumberOfLockers - 1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).transfer(_lockerTargetAddress, _removingLokcer.TDTLockedAmount);\\n        Address.sendValue(payable(_lockerTargetAddress), _removingLokcer.nativeTokenLockedAmount);\\n\\n        emit LockerRemoved(\\n            _lockerTargetAddress,\\n            _removingLokcer.lockerLockingScript,\\n            _removingLokcer.TDTLockedAmount,\\n            _removingLokcer.nativeTokenLockedAmount\\n        );\\n\\n    }\\n}\\n\",\"keccak256\":\"0x4986ccf94186109af983dac8efca560749f0916c3f0b34c2f1264d7602cbdeba\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockers {\\n\\n    // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestRemoveLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount,\\n        uint netMinted        //   = totalMinted  - totalBurnt which needs to be burnt\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address rewardRecipient,\\n        uint amount,\\n        address recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestToRemoveLocker() external returns (bool);\\n\\n    function ownerRemoveLocker(address _lockerTargetAddress) external returns(bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashTheifLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x20e76d07b93be89fbd000fe70d35c09a073b654e33ff82065dc5453a7a72132b\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address exchangeRouter, address exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives price proxy address for a pair of tokens\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _firstToken, address _secondToken) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0xe3d068b7ac931f03318f0b47b3ace494b576ad81c9b8bbd44b5b6cdf4ab6b2dc\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice                 \\tStructure for recording cc burn requests\\n    /// @param amount         \\t\\tAmount of tokens that user wants to burn\\n    /// @param burntAmount   \\t    Amount that user will receive (after reducing fees from amount)\\n    /// @param sender       \\t\\tAddress of user who requests burning\\n    /// @param userScript    Locking script of the user on Bitcoin\\n    /// @param deadline         \\tDeadline of locker for executing the request\\n    /// @param isTransferred    \\tTrue if the request has been executed\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets submitted\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userScript        Locking script of user on Bitcoin\\n    /// @param amount         \\t\\t\\tToral requested amount\\n    /// @param burntAmount   \\t\\t    Amount that user will receive (after reducing fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n    /// @param deadline         \\t\\tDeadline of locker for executing the request\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\tuint amount, \\n\\t\\tuint burntAmount, \\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint index, \\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a burn proof is provided\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userScript        Locking script of the user on Bitcoin\\n    /// @param burntAmount   \\t\\t    Amount that user received\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed userTargetAddress, \\n\\t\\tbytes userScript, \\n\\t\\tuint burntAmount, \\n\\t\\taddress indexed lockerTargetAddress, \\n\\t\\tuint index\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\t\\t\\t\\tBlock number of the malicious tx\\n\\t/// @param txId\\t\\t\\t\\t\\t\\tTransaction ID of the malicious tx\\n\\t/// @param amount\\t\\t\\t\\t\\tSlashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\t// Read-only functions\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0xf676029b3098a3ce56b34c916675293442f9f74a9361a9e68eff30309a23a12f\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash\\n    /// @param isActive                     Shows if a locker is active (has not requested for removal and\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n        bool isActive;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n    }\\n}\",\"keccak256\":\"0xe2ad0369a53edd8edcc21f4ae2339cbe49dd10049876e4949efd9ad3afd975f3\",\"license\":\"MIT\"},\"contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH // 32 bytes               \\n    }\",\"keccak256\":\"0xaf156812745457f17c2fcec64687bf4ebfef5587725731becfe26849e5a2f1ed\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103d95760003560e01c806388aa0a52116101fd578063bd60e79411610118578063dd0081c7116100ab578063ee1f1c701161007a578063ee1f1c7014610bd9578063ef69a7bc14610bf9578063f2fde38b14610c0e578063f44637ba14610c2e578063ffc9f70414610c4e576103d9565b8063dd0081c71461066a578063e85501d814610b99578063e955de4514610bae578063ed110a9c14610bc3576103d9565b8063ca666b84116100e7578063ca666b8414610ada578063cab1344e14610aef578063cdcbc87914610b0f578063d5a38a9114610b79576103d9565b8063bd60e794146109bf578063c0924b8014610a7a578063c4d10b6a14610a9a578063c6de080e14610aba576103d9565b8063a839db2411610190578063b291ec131161015f578063b291ec131461095d578063b4eae1cb14610973578063bb4a250914610989578063bc805d1d146109a9576103d9565b8063a839db24146108d2578063af1ea795146108f2578063aff2faa31461092a578063b1016bdf1461094a576103d9565b806396ec39e8116101cc57806396ec39e814610852578063983b2d56146108725780639bf09882146108925780639f8a13d7146108b2576103d9565b806388aa0a52146107de5780638d3d78cd146107f45780638da5cb5b14610814578063946ce8cd14610832576103d9565b806343b93707116102f8578063613e2e1e1161028b5780636d75b9ee1161025a5780636d75b9ee14610766578063715018a614610779578063768ebb121461066a5780637da5f0da1461078e5780637f0f1817146107be576103d9565b8063613e2e1e14610705578063639080201461071a5780636600203d146107305780636d32395c14610750576103d9565b80635a8d80b8116102c75780635a8d80b8146106805780635c975abb146106a05780635d6464ba146106b85780636060663e146106e5576103d9565b806343b937071461060a57806345cc58901461062a578063530e784f1461064a57806354509b971461066a576103d9565b8063264db4ae1161037057806333c99e1d1161033f57806333c99e1d1461057357806338463cff1461059357806341f3ec11146105b357806341fae579146105f4576103d9565b8063264db4ae146105165780633092afd51461052b57806331f7d9641461054b5780633237c15814610560576103d9565b80631697565b116103ac5780631697565b146104a05780631775765f146104c05780631fcfe19c146104d65780632630c12f146104f6576103d9565b806302846858146103de578063043fd54b146104005780630c42cbc914610445578063108f438d14610468575b600080fd5b3480156103ea57600080fd5b506103fe6103f9366004614fb1565b610c63565b005b34801561040c57600080fd5b5061043061041b366004614fb1565b60d76020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561045157600080fd5b5061045a601281565b60405190815260200161043c565b34801561047457600080fd5b5060c954610488906001600160a01b031681565b6040516001600160a01b03909116815260200161043c565b3480156104ac57600080fd5b506104306104bb3660046150b1565b610ce2565b3480156104cc57600080fd5b5061045a60d25481565b3480156104e257600080fd5b5061045a6104f1366004615167565b611051565b34801561050257600080fd5b5060cd54610488906001600160a01b031681565b34801561052257600080fd5b5061045a61139c565b34801561053757600080fd5b506103fe610546366004614fb1565b6114d5565b34801561055757600080fd5b50610488600181565b61043061056e36600461534d565b61154b565b34801561057f57600080fd5b5061043061058e36600461506e565b6116d4565b34801561059f57600080fd5b5061045a6105ae3660046151c1565b6119f1565b3480156105bf57600080fd5b506104886105ce3660046152a3565b805160208183018101805160d9825292820191909301209152546001600160a01b031681565b34801561060057600080fd5b5061045a60ce5481565b34801561061657600080fd5b50610430610625366004615045565b611d7f565b34801561063657600080fd5b50610430610645366004614fb1565b612384565b34801561065657600080fd5b506103fe610665366004614fb1565b61253c565b34801561067657600080fd5b5061045a61271081565b34801561068c57600080fd5b5060cb54610488906001600160a01b031681565b3480156106ac57600080fd5b5060975460ff16610430565b3480156106c457600080fd5b506106d86106d3366004614fb1565b61259b565b60405161043c9190615665565b3480156106f157600080fd5b506103fe61070036600461534d565b61266e565b34801561071157600080fd5b506103fe6126de565b34801561072657600080fd5b5061045a60d05481565b34801561073c57600080fd5b506103fe61074b36600461534d565b6126f0565b34801561075c57600080fd5b5061045a60cf5481565b610430610774366004615045565b612754565b34801561078557600080fd5b506103fe6128ad565b34801561079a57600080fd5b506104306107a9366004614fb1565b60d86020526000908152604090205460ff1681565b3480156107ca57600080fd5b506103fe6107d9366004614fb1565b6128bf565b3480156107ea57600080fd5b5061045a60d45481565b34801561080057600080fd5b5060ca54610488906001600160a01b031681565b34801561082057600080fd5b506033546001600160a01b0316610488565b34801561083e57600080fd5b506103fe61084d36600461534d565b61291e565b34801561085e57600080fd5b5061043061086d366004615045565b612930565b34801561087e57600080fd5b506103fe61088d366004614fb1565b612fd1565b34801561089e57600080fd5b506103fe6108ad36600461534d565b61304b565b3480156108be57600080fd5b506104306108cd366004614fb1565b61305d565b3480156108de57600080fd5b506103fe6108ed36600461534d565b6130b0565b3480156108fe57600080fd5b5061091261090d366004614fb1565b6130c2565b60405161043c9c9b9a99989796959493929190615678565b34801561093657600080fd5b50610430610945366004615127565b613243565b61043061095836600461520b565b613291565b34801561096957600080fd5b5061045a60d35481565b34801561097f57600080fd5b5061045a60d15481565b34801561099557600080fd5b506103fe6109a4366004614fcb565b6137ef565b3480156109b557600080fd5b5061045a612ee081565b3480156109cb57600080fd5b5060e25460e35460e45460e55460e65460e75460e85460e95460ea5460eb5460ec54610a109a6001600160a01b039081169a811699811698811697169594939291908b565b604080516001600160a01b039c8d1681529a8c1660208c0152988b16988a0198909852958916606089015297909316608087015260a086019190915260c085015260e08401526101008301939093526101208201929092526101408101919091526101600161043c565b348015610a8657600080fd5b5060cc54610488906001600160a01b031681565b348015610aa657600080fd5b50610488610ab5366004615127565b613b6b565b348015610ac657600080fd5b50610430610ad5366004614fb1565b613ba0565b348015610ae657600080fd5b50610430613c11565b348015610afb57600080fd5b506103fe610b0a366004614fb1565b613cf6565b348015610b1b57600080fd5b5060dc5460dd5460de5460df5460e05460e154610b439594939291906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c00161043c565b348015610b8557600080fd5b5061045a610b94366004614fb1565b613d55565b348015610ba557600080fd5b50610430613dce565b348015610bba57600080fd5b506103fe6141dd565b348015610bcf57600080fd5b5061045a60d55481565b348015610be557600080fd5b506103fe610bf4366004614fb1565b6141ed565b348015610c0557600080fd5b5060d55461045a565b348015610c1a57600080fd5b506103fe610c29366004614fb1565b61424c565b348015610c3a57600080fd5b506103fe610c49366004614fb1565b6142c5565b348015610c5a57600080fd5b5061043061433f565b806001600160a01b038116610c935760405162461bcd60e51b8152600401610c8a906158aa565b60405180910390fd5b610c9b614384565b610ca4826143de565b610cc05760405162461bcd60e51b8152600401610c8a90615765565b506001600160a01b0316600090815260db60205260409020805460ff19169055565b600060026065541415610d075760405162461bcd60e51b8152600401610c8a9061592c565b6002606555610d14614427565b60cb546001600160a01b0316336001600160a01b031614610d475760405162461bcd60e51b8152600401610c8a906157a8565b6001600160a01b038616600090815260d6602052604090206008015460ff16610d825760405162461bcd60e51b8152600401610c8a9061582e565b60cd546000906001600160a01b03166316fac92a610da08689615b52565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dee57600080fd5b505afa158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2691906153a0565b60ca5460405160e085901b6001600160e01b0319168152600481019390935260ff9091166024830152601260448301526001600160a01b031660648201526001608482015260a40160206040518083038186803b158015610e8657600080fd5b505afa158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe9190615365565b6001600160a01b038816600090815260d66020526040902060040154909150811115610f0257506001600160a01b038616600090815260d660205260409020600401545b6001600160a01b038716600090815260d66020526040902060040154610f29908290615cbd565b6001600160a01b03808916600090815260d6602052604090206004019190915583166108fc610f588887615b52565b610f628785615c9e565b610f6c9190615b6a565b6040518115909202916000818181858888f19350505050158015610f94573d6000803e3d6000fd5b506000610fa18786615b52565b610fab8884615c9e565b610fb59190615b6a565b6040519091506001600160a01b0387169082156108fc029083906000818181858888f19350505050158015610fee573d6000803e3d6000fd5b50876001600160a01b03167fab522c1322c34ea455e8f541ecfe1b73a29039f3658bff658cf12c9fd26dc01682888888874260016040516110359796959493929190615ace565b60405180910390a2600192505050600160655595945050505050565b6000826001600160a01b03811661107a5760405162461bcd60e51b8152600401610c8a906158aa565b826000811161109b5760405162461bcd60e51b8152600401610c8a9061587a565b600260655414156110be5760405162461bcd60e51b8152600401610c8a9061592c565b60026065556110cb614427565b6110d43361446d565b6111205760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206d696e746572732063616e206d696e7400006044820152606401610c8a565b600060d98888604051611134929190615581565b908152604051908190036020019020546001600160a01b03169050600061115a82613d55565b9050858110156111ac5760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e73756666696369656e7420636170616369747900006044820152606401610c8a565b6001600160a01b038216600090815260d660205260409020600501546111d3908790615b52565b6001600160a01b038316600090815260d6602052604081206005019190915560d054612710906112039089615c9e565b61120d9190615b6a565b9050801561129d5760ca546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401602060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b9190615107565b505b60ca546001600160a01b03166340c10f19896112b9848b615cbd565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156112ff57600080fd5b505af1158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113379190615107565b50826001600160a01b03167f8ad706b338c5d2a20b0d038b5cfdaf2b2f943f43048723bde0dccdf129598a11898984426040516113779493929190615600565b60405180910390a26113898188615cbd565b60016065559a9950505050505050505050565b60cd546000906001600160a01b03166316fac92a6113bc6012600a615bd0565b60ca546040805163313ce56760e01b815290516012926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561140157600080fd5b505afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143991906153a0565b60ca5460405160e086901b6001600160e01b03191681526004810194909452602484019290925260ff166044830152600160648301526001600160a01b0316608482015260a40160206040518083038186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d09190615365565b905090565b806001600160a01b0381166114fc5760405162461bcd60e51b8152600401610c8a906158aa565b611504614384565b61150d8261446d565b6115295760405162461bcd60e51b8152600401610c8a90615765565b506001600160a01b0316600090815260da60205260409020805460ff19169055565b6000600260655414156115705760405162461bcd60e51b8152600401610c8a9061592c565b6002606555600061157f61139c565b33600090815260d66020908152604091829020825160c0808201855260dc54825260dd548285015260de548286015260df5460608084019190915260e0805460808086019190915260e1546001600160a01b0390811660a080880191909152895161016081018b5260e2548316815260e35483169981019990995260e45482169989019990995260e55481169388019390935260e6549092169186019190915260e7549585019590955260e8549084015260e9549383019390935260ea5461010083015260eb5461012083015260ec5461014083015292935061166592919084876144b6565b61166f3384614613565b33600081815260d660209081526040918290206004015482518781529182015242918101919091527f93ae1c71197ee1bd2ad44b7d57e7b34ca946aeb88fdb4fc4a45211dbeb2c3cc7906060015b60405180910390a260019150506001606555919050565b6000600260655414156116f95760405162461bcd60e51b8152600401610c8a9061592c565b6002606555611706614427565b60cb546001600160a01b0316336001600160a01b0316146117395760405162461bcd60e51b8152600401610c8a906157a8565b6001600160a01b038516600090815260d6602052604090206008015460ff166117745760405162461bcd60e51b8152600401610c8a9061582e565b60cd5460ca546040805163313ce56760e01b815290516000936001600160a01b03908116936316fac92a938893919092169163313ce567916004808301926020929190829003018186803b1580156117cb57600080fd5b505afa1580156117df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180391906153a0565b60ca5460405160e085901b6001600160e01b0319168152600481019390935260ff9091166024830152601260448301526001600160a01b031660648201526001608482015260a40160206040518083038186803b15801561186357600080fd5b505afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b9190615365565b6001600160a01b038716600090815260d66020526040808220905163abb4649b60e01b81529293509091829173__$c4b8709fc407821a47433b8892c1b612a0$__9163abb4649b916118fb9160dc9060e29089908e908d90600401615a5c565b604080518083038186803b15801561191257600080fd5b505af4158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a919061537d565b60405191935091506001600160a01b0387169083156108fc029084906000818181858888f19350505050158015611985573d6000803e3d6000fd5b506001600160a01b0388167fab522c1322c34ea455e8f541ecfe1b73a29039f3658bff658cf12c9fd26dc016838888306119bf8488615b52565b4260006040516119d59796959493929190615ace565b60405180910390a2600193505050506001606555949350505050565b60008160008111611a145760405162461bcd60e51b8152600401610c8a9061587a565b60026065541415611a375760405162461bcd60e51b8152600401610c8a9061592c565b6002606555611a44614427565b611a4d336143de565b611a995760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206275726e6572732063616e206275726e00006044820152606401610c8a565b600060d98686604051611aad929190615581565b9081526040519081900360200190205460ca546001600160a01b039182169250166323b872dd611ada3390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401602060405180830381600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190615107565b50600061271060d05486611b749190615c9e565b611b7e9190615b6a565b90506000611b8c8287615cbd565b6001600160a01b038416600090815260d6602052604090206005015490915081811015611bfb5760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e73756666696369656e742066756e647300000000006044820152606401610c8a565b611c058282615cbd565b6001600160a01b03858116600090815260d66020526040908190206005019290925560ca549151630852cd8d60e31b8152600481018590529116906342966c6890602401602060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9b9190615107565b5060ca5460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529091169063a9059cbb90604401602060405180830381600087803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d229190615107565b506040805188815260208101859052428183015290516001600160a01b038616917f66fb54322c407b04a077a306e72cdd780f0f374ba5dac9f6901a56a6255bc34a919081900360600190a2506001606555979650505050505050565b6000826001600160a01b038116611da85760405162461bcd60e51b8152600401610c8a906158aa565b8260008111611dc95760405162461bcd60e51b8152600401610c8a9061587a565b60026065541415611dec5760405162461bcd60e51b8152600401610c8a9061592c565b6002606555611df9614427565b6001600160a01b038516600090815260d6602052604090206008015460ff16611e345760405162461bcd60e51b8152600401610c8a9061582e565b6001600160a01b038516600090815260d6602052604080822081516101808101909252805482908290611e6690615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9290615cd4565b8015611edf5780601f10611eb457610100808354040283529160200191611edf565b820191906000526020600020905b815481529060010190602001808311611ec257829003601f168201915b5050509183525050600182015460209091019060ff166004811115611f1457634e487b7160e01b600052602160045260246000fd5b6004811115611f3357634e487b7160e01b600052602160045260246000fd5b8152602001600282018054611f4790615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054611f7390615cd4565b8015611fc05780601f10611f9557610100808354040283529160200191611fc0565b820191906000526020600020905b815481529060010190602001808311611fa357829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e08086019190915262010000840483161515918501919091526301000000909204161515610120909201919091528101519091508511156120b05760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b6572733a206e6f7420656e6f75676820736c617368656420636f6c6c60448201526c61746572616c20746f2062757960981b6064820152608401610c8a565b60006120ba61139c565b9050600073__$c4b8709fc407821a47433b8892c1b612a0$__63d061362360dc60e28a866040518563ffffffff1660e01b81526004016120fd9493929190615a9e565b60206040518083038186803b15801561211557600080fd5b505af4158015612129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214d9190615365565b90508260c001518111156121995760405162461bcd60e51b8152602060048201526013602482015272098dec6d6cae4e67440c6c2dce840e6d8c2e6d606b1b6044820152606401610c8a565b6001600160a01b038816600090815260d660205260409020600601546121c0908290615cbd565b6001600160a01b038916600090815260d6602052604090206006810191909155600701546121ef908890615cbd565b6001600160a01b03898116600090815260d6602052604090206007019190915560ca54166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b15801561226757600080fd5b505af115801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f9190615107565b5060ca54604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401602060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231e9190615107565b506123293388614613565b6001600160a01b0388167fd03400b15a5f4cddbc57f0e81bca31db33e4d1ed1390211eade3518bce70562e338984426040516123689493929190615600565b60405180910390a2600195505050505050600160655592915050565b6000816001600160a01b0381166123ad5760405162461bcd60e51b8152600401610c8a906158aa565b600260655414156123d05760405162461bcd60e51b8152600401610c8a9061592c565b60026065556123dd614384565b6001600160a01b038316600090815260d66020526040902060080154610100900460ff166124435760405162461bcd60e51b8152602060048201526013602482015272131bd8dad95c9cce881b9bc81c995c5d595cdd606a1b6044820152606401610c8a565b6001600160a01b038316600090815260d66020526040902060080180546301000000600161ffff19909216821763ff00000019161790915560d4546124889190615cbd565b60d45560d554612499906001615b52565b60d5556001600160a01b038316600090815260d66020526040908190209051849160d9916124c79190615591565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b03958616179055928616600081815260d690935291206003810154600482015492937f3840128cd2c146a0ea7739b8440e824c6d2d498ae32274812561d689d751e75e936116bd9392914290615736565b806001600160a01b0381166125635760405162461bcd60e51b8152600401610c8a906158aa565b61256b614384565b5060cd80546001600160a01b03199081166001600160a01b03938416179182905560e68054929093169116179055565b6060816001600160a01b0381166125c45760405162461bcd60e51b8152600401610c8a906158aa565b6001600160a01b038316600090815260d66020526040902080546125e790615cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461261390615cd4565b80156126605780601f1061263557610100808354040283529160200191612660565b820191906000526020600020905b81548152906001019060200180831161264357829003601f168201915b505050505091505b50919050565b612676614384565b60d2548110156126d45760405162461bcd60e51b815260206004820152602360248201527f4c6f636b6572733a204352206d7573742062652067726561746572207468616e60448201526210262960e91b6064820152608401610c8a565b60d181905560ea55565b6126e6614384565b6126ee614731565b565b6126f8614384565b61271081111561274a5760405162461bcd60e51b815260206004820152601b60248201527f4c6f636b6572733a20696e76616c6964206c6f636b65722066656500000000006044820152606401610c8a565b60d081905560e955565b6000600260655414156127795760405162461bcd60e51b8152600401610c8a9061592c565b60026065553482146127c25760405162461bcd60e51b81526020600482015260126024820152714c6f636b6572733a206d73672076616c756560701b6044820152606401610c8a565b6001600160a01b038316600090815260d6602052604090819020905163015d95e560e01b815260048101919091526024810183905273__$c4b8709fc407821a47433b8892c1b612a0$__9063015d95e59060440160006040518083038186803b15801561282e57600080fd5b505af4158015612842573d6000803e3d6000fd5b505050506001600160a01b038316600081815260d6602090815260409182902060040154825186815291820152428183015290517f2d2b4797badefe26cd5674f9bc2b8f5ed98e2a663e1a977af971254cfefd15ad9181900360600190a25060018060655592915050565b6128b5614384565b6126ee6000614783565b806001600160a01b0381166128e65760405162461bcd60e51b8152600401610c8a906158aa565b6128ee614384565b5060ca80546001600160a01b03199081166001600160a01b03938416179182905560e38054929093169116179055565b612926614384565b60d281905560eb55565b6000826001600160a01b0381166129595760405162461bcd60e51b8152600401610c8a906158aa565b826000811161297a5760405162461bcd60e51b8152600401610c8a9061587a565b6002606554141561299d5760405162461bcd60e51b8152600401610c8a9061592c565b60026065556129aa614427565b6001600160a01b038516600090815260d6602052604090206008015460ff166129e55760405162461bcd60e51b8152600401610c8a9061582e565b6001600160a01b038516600090815260d6602052604080822081516101808101909252805482908290612a1790615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054612a4390615cd4565b8015612a905780601f10612a6557610100808354040283529160200191612a90565b820191906000526020600020905b815481529060010190602001808311612a7357829003601f168201915b5050509183525050600182015460209091019060ff166004811115612ac557634e487b7160e01b600052602160045260246000fd5b6004811115612ae457634e487b7160e01b600052602160045260246000fd5b8152602001600282018054612af890615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2490615cd4565b8015612b715780601f10612b4657610100808354040283529160200191612b71565b820191906000526020600020905b815481529060010190602001808311612b5457829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e0850152620100008304821615159084015263010000009091041615156101209091015290506000612bf861139c565b905061271073__$c4b8709fc407821a47433b8892c1b612a0$__6329bb9f998460dc60e2866040518563ffffffff1660e01b8152600401612c3c9493929190615963565b60206040518083038186803b158015612c5457600080fd5b505af4158015612c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8c9190615365565b10612ccf5760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206973206865616c74687960681b6044820152606401610c8a565b604051634d69520760e01b815260009073__$c4b8709fc407821a47433b8892c1b612a0$__90634d69520790612d1190869060dc9060e2908890600401615963565b60206040518083038186803b158015612d2957600080fd5b505af4158015612d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d619190615365565b90508260800151811115612d76575060808201515b80871115612dd45760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206e6f7420656e6f75676820636f6c6c61746572616c20746044820152646f2062757960d81b6064820152608401610c8a565b60405163d061362360e01b815260009073__$c4b8709fc407821a47433b8892c1b612a0$__9063d061362390612e169060dc9060e2908d908990600401615a9e565b60206040518083038186803b158015612e2e57600080fd5b505af4158015612e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e669190615365565b60cb5460408087015160208801518851925163218a4edd60e11b81529495506001600160a01b03909316936343149dba93612ea693879392600401615b0f565b602060405180830381600087803b158015612ec057600080fd5b505af1158015612ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef89190615365565b506001600160a01b038916600090815260d66020526040902060050154612f20908290615cbd565b6001600160a01b038a16600090815260d660205260409020600581019190915560040154612f4f908990615cbd565b6001600160a01b038a16600090815260d66020526040902060040155612f753389614613565b6001600160a01b0389167fd63782183ccef603c2adba105774db58e1701ea5e7b3e23eded1b5e967a3654c338a8442604051612fb49493929190615600565b60405180910390a260019650505050505050600160655592915050565b806001600160a01b038116612ff85760405162461bcd60e51b8152600401610c8a906158aa565b613000614384565b6130098261446d565b156130265760405162461bcd60e51b8152600401610c8a906157ed565b506001600160a01b0316600090815260da60205260409020805460ff19166001179055565b613053614384565b60ce81905560e755565b6000816001600160a01b0381166130865760405162461bcd60e51b8152600401610c8a906158aa565b50506001600160a01b0316600090815260d660205260409020600801546301000000900460ff1690565b6130b8614384565b60cf81905560e855565b60d6602052600090815260409020805481906130dd90615cd4565b80601f016020809104026020016040519081016040528092919081815260200182805461310990615cd4565b80156131565780601f1061312b57610100808354040283529160200191613156565b820191906000526020600020905b81548152906001019060200180831161313957829003601f168201915b5050506001840154600285018054949560ff90921694919350915061317a90615cd4565b80601f01602080910402602001604051908101604052809291908181526020018280546131a690615cd4565b80156131f35780601f106131c8576101008083540402835291602001916131f3565b820191906000526020600020905b8154815290600101906020018083116131d657829003601f168201915b5050506003840154600485015460058601546006870154600788015460089098015496979396929550909350919060ff80821691610100810482169162010000820481169163010000009004168c565b600060d6600060d9858560405161325b929190615581565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206008015460ff169392505050565b6000600260655414156132b65760405162461bcd60e51b8152600401610c8a9061592c565b600260655533600090815260d66020526040902060080154610100900460ff161561331b5760405162461bcd60e51b81526020600482015260156024820152744c6f636b6572733a2069732063616e64696461746560581b6044820152606401610c8a565b33600090815260d6602052604090206008015460ff16156133735760405162461bcd60e51b81526020600482015260126024820152712637b1b5b2b9399d1034b9903637b1b5b2b960711b6044820152606401610c8a565b60ce548610156133b85760405162461bcd60e51b815260206004820152601060248201526f131bd8dad95c9cce881b1bddc815111560821b6044820152606401610c8a565b60cf5485101580156133c957508434145b6134085760405162461bcd60e51b815260206004820152601060248201526f131bd8dad95c9cce881b1bddc815139560821b6044820152606401610c8a565b60006001600160a01b031660d98989604051613425929190615581565b908152604051908190036020019020546001600160a01b03161461348b5760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a2075736564206c6f636b696e6720736372697074000000006044820152606401610c8a565b60c9546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101899052606401602060405180830381600087803b1580156134eb57600080fd5b505af11580156134ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135239190615107565b61352c57600080fd5b6135996040805161018081019091526060815260208101600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581526020016000151581525090565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250606081018790526080810186905260016101208201526020810185600481111561360c57634e487b7160e01b600052602160045260246000fd5b9081600481111561362d57634e487b7160e01b600052602160045260246000fd5b8152505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408681019590955233815260d660209081529490208551805187969295506136929450859350910190614e82565b50602082015160018083018054909160ff19909116908360048111156136c857634e487b7160e01b600052602160045260246000fd5b0217905550604082015180516136e8916002840191602090910190614e82565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820155610100808301516008909201805461012085015161014086015161016090960151151563010000000263ff00000019961515620100000262ff00001992151590950261ff001996151560ff1990941693909317959095169190911716919091179290921617905560d454613790906001615b52565b60d455336001600160a01b03167fe5f7957016a87f9d7bacdd371a516d7f2c5667aa5676c7e07cc8c0bbc6e5067b8a8a8a8a6040516137d29493929190615626565b60405180910390a260019150506001606555979650505050505050565b600054610100900460ff161580801561380f5750600054600160ff909116105b80613830575061381e306147d5565b158015613830575060005460ff166001145b6138935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c8a565b6000805460ff1916600117905580156138b6576000805461ff0019166101001790555b6138be6147e8565b6138c6614817565b6138ce614846565b6001600160a01b038a16158015906138ee57506001600160a01b03891615155b801561390257506001600160a01b03881615155b61391e5760405162461bcd60e51b8152600401610c8a906158aa565b8615158061392b57508515155b6139775760405162461bcd60e51b815260206004820152601760248201527f4c6f636b6572733a20616d6f756e74206973207a65726f0000000000000000006044820152606401610c8a565b83851015801561398957506127108410155b6139d55760405162461bcd60e51b815260206004820152601d60248201527f4c6f636b6572733a2070726f626c656d20696e20435220616e64204c520000006044820152606401610c8a565b612710821115613a275760405162461bcd60e51b815260206004820152601760248201527f4c6f636b6572733a206c657373207468616e20313030250000000000000000006044820152606401610c8a565b60c980546001600160a01b03808d166001600160a01b0319928316179283905560cc80548d8316908416179081905560cd80548d8416908516179081905560ce8c905560cf8b905560d18a905560d289905560d088905560d387905561271060dc81905560dd819055612ee060de5560df55601260e05560e180548516600117905560e2805485169584169590951790945560ca5460e38054851691841691909117905560cb5460e48054851691841691909117905560e58054841691831691909117905560e68054909216921691909117905560e787905560e886905560e983905560ea85905560eb84905560ec8290558015613b5f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600060d98383604051613b7f929190615581565b908152604051908190036020019020546001600160a01b0316905092915050565b6000816001600160a01b038116613bc95760405162461bcd60e51b8152600401610c8a906158aa565b60026065541415613bec5760405162461bcd60e51b8152600401610c8a9061592c565b6002606555613bf9614384565b613c0283614875565b60019150506001606555919050565b600060026065541415613c365760405162461bcd60e51b8152600401610c8a9061592c565b600260655533600090815260d6602052604090206008015460ff16613c6d5760405162461bcd60e51b8152600401610c8a9061582e565b33600081815260d66020818152604080842060088101805463ff0000001916905560d7835293819020805460ff1916600117905591905260038201546004830154600584015492517f2cf13a17a26f23ac9b786e628031eac7ebf6bb0b34e3f477f340079eb68d9a3e94613ce49490939291615736565b60405180910390a25060018060655590565b806001600160a01b038116613d1d5760405162461bcd60e51b8152600401610c8a906158aa565b613d25614384565b5060cc80546001600160a01b03199081166001600160a01b03938416179182905560e58054929093169116179055565b6000816001600160a01b038116613d7e5760405162461bcd60e51b8152600401610c8a906158aa565b6001600160a01b038316600090815260d6602052604090206005015460d154612710613da986614d1a565b613db39190615c9e565b613dbd9190615b6a565b613dc79190615cbd565b9392505050565b600060026065541415613df35760405162461bcd60e51b8152600401610c8a9061592c565b600260655533600090815260d66020526040902060080154610100900460ff16613e515760405162461bcd60e51b815260206004820152600f60248201526e4c6f636b6572733a206e6f2072657160881b6044820152606401610c8a565b33600090815260d6602052604080822081516101808101909252805482908290613e7a90615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054613ea690615cd4565b8015613ef35780601f10613ec857610100808354040283529160200191613ef3565b820191906000526020600020905b815481529060010190602001808311613ed657829003601f168201915b5050509183525050600182015460209091019060ff166004811115613f2857634e487b7160e01b600052602160045260246000fd5b6004811115613f4757634e487b7160e01b600052602160045260246000fd5b8152602001600282018054613f5b90615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054613f8790615cd4565b8015613fd45780601f10613fa957610100808354040283529160200191613fd4565b820191906000526020600020905b815481529060010190602001808311613fb757829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e08501526201000083048216151590840152630100000090910416151561012090910152905060d66000336001600160a01b03168152602081019190915260400160009081209061407c8282614f06565b60018201805460ff19169055614096600283016000614f06565b506000600382018190556004820181905560058201819055600682018190556007820155600801805463ffffffff1916905560d4546140d790600190615cbd565b60d45560c9546001600160a01b031663a9059cbb3360608401516040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561413757600080fd5b505af115801561414b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061416f9190615107565b5061417e338260800151614613565b33600081815260d66020526040908190206003810154600482015492517f10f84ef0773ba7ade3714f4e500ca17436e6df2b0feb99c754c04f889290cbd4936141c8939291615723565b60405180910390a26001915050600160655590565b6141e5614384565b6126ee614d6b565b806001600160a01b0381166142145760405162461bcd60e51b8152600401610c8a906158aa565b61421c614384565b5060cb80546001600160a01b03199081166001600160a01b03938416179182905560e48054929093169116179055565b614254614384565b6001600160a01b0381166142b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c8a565b6142c281614783565b50565b806001600160a01b0381166142ec5760405162461bcd60e51b8152600401610c8a906158aa565b6142f4614384565b6142fd826143de565b1561431a5760405162461bcd60e51b8152600401610c8a906157ed565b506001600160a01b0316600090815260db60205260409020805460ff19166001179055565b6000600260655414156143645760405162461bcd60e51b8152600401610c8a9061592c565b6002606555614371614427565b61437a33614875565b5060018060655590565b6033546001600160a01b031633146126ee5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c8a565b6000816001600160a01b0381166144075760405162461bcd60e51b8152600401610c8a906158aa565b50506001600160a01b0316600090815260db602052604090205460ff1690565b60975460ff16156126ee5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c8a565b6000816001600160a01b0381166144965760405162461bcd60e51b8152600401610c8a906158aa565b50506001600160a01b0316600090815260da602052604090205460ff1690565b600885015460ff1661450a5760405162461bcd60e51b815260206004820181905260248201527f4c6f636b6572733a206163636f756e74206973206e6f742061206c6f636b65726044820152606401610c8a565b600085600501548560800151600a6145229190615bd0565b8561010001516145329190615c9e565b86516004890154614544908790615c9e565b61454e9190615c9e565b6145589190615b6a565b6145629190615cbd565b90506000838660800151600a6145789190615bd0565b6145829084615c9e565b61458c9190615b6a565b9050808311156145f25760405162461bcd60e51b815260206004820152602b60248201527f4c6f636b6572733a206d6f7265207468616e206d61782072656d6f7661626c6560448201526a0818dbdb1b185d195c985b60aa1b6064820152608401610c8a565b8287600401546146029190615cbd565b876004018190555050505050505050565b804710156146635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c8a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146146b0576040519150601f19603f3d011682016040523d82523d6000602084013e6146b5565b606091505b505090508061472c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c8a565b505050565b614739614da8565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381163b15155b919050565b600054610100900460ff1661480f5760405162461bcd60e51b8152600401610c8a906158e1565b6126ee614df1565b600054610100900460ff1661483e5760405162461bcd60e51b8152600401610c8a906158e1565b6126ee614e21565b600054610100900460ff1661486d5760405162461bcd60e51b8152600401610c8a906158e1565b6126ee614e4f565b6001600160a01b038116600090815260d6602052604090206008015460ff166148d55760405162461bcd60e51b81526020600482015260126024820152712637b1b5b2b9399d103737903637b1b5b2b960711b6044820152606401610c8a565b6001600160a01b038116600090815260d7602052604090205460ff166149365760405162461bcd60e51b81526020600482015260166024820152754c6f636b6572733a206e6f2072656d6f76652072657160501b6044820152606401610c8a565b6001600160a01b038116600090815260d66020526040902060050154156149975760405162461bcd60e51b8152602060048201526015602482015274131bd8dad95c9cce880c081b995d081b5a5b9d1959605a1b6044820152606401610c8a565b6001600160a01b038116600090815260d66020526040808220815161018081019092528054829082906149c990615cd4565b80601f01602080910402602001604051908101604052809291908181526020018280546149f590615cd4565b8015614a425780601f10614a1757610100808354040283529160200191614a42565b820191906000526020600020905b815481529060010190602001808311614a2557829003601f168201915b5050509183525050600182015460209091019060ff166004811115614a7757634e487b7160e01b600052602160045260246000fd5b6004811115614a9657634e487b7160e01b600052602160045260246000fd5b8152602001600282018054614aaa90615cd4565b80601f0160208091040260200160405190810160405280929190818152602001828054614ad690615cd4565b8015614b235780601f10614af857610100808354040283529160200191614b23565b820191906000526020600020905b815481529060010190602001808311614b0657829003601f168201915b5050509183525050600382015460208083019190915260048301546040808401919091526005840154606084015260068401546080840152600784015460a084015260089093015460ff808216151560c08501526101008083048216151560e086015262010000830482161515908501526301000000909104161515610120909201919091526001600160a01b038516600090815260d6909152908120919250614bcd8282614f06565b60018201805460ff19169055614be7600283016000614f06565b506000600382018190556004820181905560058201819055600682018190556007820155600801805463ffffffff1916905560d554614c2890600190615cbd565b60d55560c954606082015160405163a9059cbb60e01b81526001600160a01b038581166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b158015614c7e57600080fd5b505af1158015614c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cb69190615107565b50614cc5828260800151614613565b816001600160a01b03167f628f3d67160bc1a892a1779c6475e128010a54df63af5dcdbf3c7b06ca5dfa97826000015183606001518460800151604051614d0e939291906156fe565b60405180910390a25050565b6001600160a01b038116600090815260d66020526040812060040154600a90670de0b6b3a764000090614d51906305f5e100615c9e565b614d5b9190615b6a565b614d659190615b6a565b92915050565b614d73614427565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586147663390565b60975460ff166126ee5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c8a565b600054610100900460ff16614e185760405162461bcd60e51b8152600401610c8a906158e1565b6126ee33614783565b600054610100900460ff16614e485760405162461bcd60e51b8152600401610c8a906158e1565b6001606555565b600054610100900460ff16614e765760405162461bcd60e51b8152600401610c8a906158e1565b6097805460ff19169055565b828054614e8e90615cd4565b90600052602060002090601f016020900481019282614eb05760008555614ef6565b82601f10614ec957805160ff1916838001178555614ef6565b82800160010185558215614ef6579182015b82811115614ef6578251825591602001919060010190614edb565b50614f02929150614f3e565b5090565b508054614f1290615cd4565b6000825580601f10614f2457506142c2565b601f0160209004906000526020600020908101906142c291905b5b80821115614f025760008155600101614f3f565b80356001600160a01b03811681146147e357600080fd5b60008083601f840112614f7b578081fd5b50813567ffffffffffffffff811115614f92578182fd5b602083019150836020828501011115614faa57600080fd5b9250929050565b600060208284031215614fc2578081fd5b613dc782614f53565b60008060008060008060008060006101208a8c031215614fe9578485fd5b614ff28a614f53565b985061500060208b01614f53565b975061500e60408b01614f53565b989b979a5097986060810135985060808101359760a0820135975060c0820135965060e08201359550610100909101359350915050565b60008060408385031215615057578182fd5b61506083614f53565b946020939093013593505050565b60008060008060808587031215615083578384fd5b61508c85614f53565b9350602085013592506150a160408601614f53565b9396929550929360600135925050565b600080600080600060a086880312156150c8578081fd5b6150d186614f53565b9450602086013593506150e660408701614f53565b9250606086013591506150fb60808701614f53565b90509295509295909350565b600060208284031215615118578081fd5b81518015158114613dc7578182fd5b60008060208385031215615139578182fd5b823567ffffffffffffffff81111561514f578283fd5b61515b85828601614f6a565b90969095509350505050565b6000806000806060858703121561517c578384fd5b843567ffffffffffffffff811115615192578485fd5b61519e87828801614f6a565b90955093506151b1905060208601614f53565b9396929550929360400135925050565b6000806000604084860312156151d5578283fd5b833567ffffffffffffffff8111156151eb578384fd5b6151f786828701614f6a565b909790965060209590950135949350505050565b600080600080600080600060a0888a031215615225578283fd5b873567ffffffffffffffff8082111561523c578485fd5b6152488b838c01614f6a565b909950975060208a0135965060408a0135955060608a013591506005821061526e578485fd5b90935060808901359080821115615283578384fd5b506152908a828b01614f6a565b989b979a50959850939692959293505050565b6000602082840312156152b4578081fd5b813567ffffffffffffffff808211156152cb578283fd5b818401915084601f8301126152de578283fd5b8135818111156152f0576152f0615d1f565b604051601f8201601f19908116603f0116810190838211818310171561531857615318615d1f565b81604052828152876020848701011115615330578586fd5b826020860160208301379182016020019490945295945050505050565b60006020828403121561535e578081fd5b5035919050565b600060208284031215615376578081fd5b5051919050565b6000806040838503121561538f578182fd5b505080516020909101519092909150565b6000602082840312156153b1578081fd5b815160ff81168114613dc7578182fd5b60008151808452815b818110156153e6576020818501810151868301820152016153ca565b818111156153f75782602083870101525b50601f01601f19169290920160200192915050565b6000815461541981615cd4565b808552602060018381168015615436576001811461544a57615478565b60ff19851688840152604088019550615478565b866000528260002060005b858110156154705781548a8201860152908301908401615455565b890184019650505b505050505092915050565b600581106154a157634e487b7160e01b600052602160045260246000fd5b9052565b8054825260018101546020830152600281015460408301526003810154606083015260048101546080830152600501546001600160a01b031660a090910152565b615508826154fb83546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154811660608401526004820154166080830152600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a015461014090910152565b6000828483379101908152919050565b600080835461559f81615cd4565b600182811680156155b757600181146155c8576155f4565b60ff198416875282870194506155f4565b8786526020808720875b858110156155eb5781548a8201529084019082016155d2565b50505082870194505b50929695505050505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6000606082528460608301528486608084013780608086840101526080601f19601f870116830101905083602083015282604083015295945050505050565b600060208252613dc760208301846153c1565b6000610180825261568d61018083018f6153c1565b61569a602084018f615483565b82810360408401526156ac818e6153c1565b606084019c909c525050608081019890985260a088019690965260c087019490945260e08601929092521515610100850152151561012084015215156101408301521515610160909101529392505050565b60006060825261571160608301866153c1565b60208301949094525060400152919050565b600060608252615711606083018661540c565b600060808252615749608083018761540c565b6020830195909552506040810192909252606090910152919050565b60208082526023908201527f4c6f636b6572733a206163636f756e7420646f6573206e6f74206861766520726040820152626f6c6560e81b606082015260800190565b60208082526025908201527f4c6f636b6572733a206d6573736167652073656e646572206973206e6f74206360408201526431a13ab93760d91b606082015260800190565b60208082526021908201527f4c6f636b6572733a206163636f756e7420616c72656164792068617320726f6c6040820152606560f81b606082015260800190565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b6020808252601690820152754c6f636b6572733a2076616c7565206973207a65726f60501b604082015260600190565b60208082526018908201527f4c6f636b6572733a2061646472657373206973207a65726f0000000000000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006102608083528651610180828501526159826103e08501826153c1565b9150506020870151615998610280850182615483565b50604087015183820361025f19016102a08501526159b682826153c1565b91505060608701516102c084015260808701516102e084015260a087015161030084015260c087015161032084015260e0870151610340840152610100870151615a0561036085018215159052565b50610120870151151561038084015261014087015115156103a084015261016087015115156103c08401529050615a3f60208301866154a5565b615a4c60e08301856154e6565b8261024083015295945050505050565b8681526102a08101615a7160208301886154a5565b615a7e60e08301876154e6565b846102408301528361026083015282610280830152979650505050505050565b6102608101615aad82876154a5565b615aba60c08301866154e6565b610220820193909352610240015292915050565b9687526001600160a01b0395861660208801526040870194909452919093166060850152608084019290925260a0830191909152151560c082015260e00190565b600085825260806020830152615b2860808301866153c1565b615b356040840186615483565b8281036060840152615b4781856153c1565b979650505050505050565b60008219821115615b6557615b65615d09565b500190565b600082615b8557634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611615b9c5750615bc7565b818704821115615bae57615bae615d09565b80861615615bbb57918102915b9490941c938002615b8d565b94509492505050565b6000613dc76000198484600082615be957506001613dc7565b81615bf657506000613dc7565b8160018114615c0c5760028114615c1657615c43565b6001915050613dc7565b60ff841115615c2757615c27615d09565b6001841b915084821115615c3d57615c3d615d09565b50613dc7565b5060208310610133831016604e8410600b8410161715615c76575081810a83811115615c7157615c71615d09565b613dc7565b615c838484846001615b8a565b808604821115615c9557615c95615d09565b02949350505050565b6000816000190483118215151615615cb857615cb8615d09565b500290565b600082821015615ccf57615ccf615d09565b500390565b600281046001821680615ce857607f821691505b6020821081141561266857634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122059aff9fe83345f6415c6cb9247d7645a84ad4170a40d352575189b4d6516440764736f6c63430008020033",
  "libraries": {
    "LockersLib": "0x8A9fB38F2555AdDe58c5A3a9bA32d83c347d938A"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBurner(address)": {
        "details": "Give an account access to burn."
      },
      "addCollateral(address,uint256)": {
        "params": {
          "_addingNativeTokenAmount": "Amount of added collateral",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if collateral is added successfully"
        }
      },
      "addLocker(address)": {
        "details": "Only owner can call this                                       When a candidate becomes locker, isCandidate is set to false",
        "params": {
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if candidate is added successfully"
        }
      },
      "addMinter(address)": {
        "details": "Give an account access to mint."
      },
      "burn(bytes,uint256)": {
        "details": "Burn teleBTC and also get the locker's fee",
        "params": {
          "_amount": "Amount of the teleBTC which is minted, including the locker's fee",
          "_lockerLockingScript": "Locking script of a locker"
        },
        "returns": {
          "_0": "uint                  The amount of teleBTC burned the"
        }
      },
      "buySlashedCollateralOfLocker(address,uint256)": {
        "details": "Users buy the slashed collateral using TeleBTC with discount                                   The paid TeleBTC will be burnt to keep the system safe                                   If all the needed TeleBTC is collected and burnt,                                   the rest of slashed collateral is sent back to locker ",
        "params": {
          "_collateralAmount": "Amount of collateral (TNT) that someone is intend to buy with discount",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True is buying was successful"
        }
      },
      "getLockerCapacity(address)": {
        "details": "Net minted amount is total minted minus total burnt for the locker",
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "The net minted of the locker"
        }
      },
      "getLockerLockingScript(address)": {
        "details": "@param _lockerTargetAddress         Address of locker on the target chain",
        "returns": {
          "_0": "Bitcoin public key of locker"
        }
      },
      "getNumberOfLockers()": {
        "details": "@return                           Number of lockers"
      },
      "isActive(address)": {
        "details": "An active locker is not in the process of being removed and has enough capacity to mint more tokens (minted - burnt << their collateral)",
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "True if the locker is active and accepts mint requests"
        }
      },
      "isLocker(bytes)": {
        "details": "@param _lockerTargetAddress       Address of locker on the target chain",
        "returns": {
          "_0": "True if user is locker"
        }
      },
      "liquidateLocker(address,uint256)": {
        "details": "Anyone can liquidate a locker which its health factor                                   is less than 10000 (100%) by providing a sufficient amount of teleBTC",
        "params": {
          "_collateralAmount": "Amount of collateral (TNT) that someone is intend to buy with discount",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True is liquidation was successful"
        }
      },
      "mint(bytes,address,uint256)": {
        "details": "Mint teleBTC for an account and got the locker fee as well",
        "params": {
          "_amount": "Amount of the teleBTC which is minted, including the locker's fee",
          "_lockerLockingScript": "Locking script of a locker",
          "_receiver": "Address of the receiver of the minted teleBTCs"
        },
        "returns": {
          "_0": "uint                  The amount of teleBTC minted for the receiver"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerRemoveLocker(address)": {
        "details": "Only owner can call this function                               Removing conditions should be satisfied",
        "params": {
          "_lockerTargetAddress": "Target address of locker to be removed"
        },
        "returns": {
          "_0": "True if locker is removed successfully"
        }
      },
      "pauseLocker()": {
        "details": "@param"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "priceOfOneUnitOfCollateralInBTC()": {
        "details": "Returns the price of one native token (1*10^18) in teleBTC",
        "returns": {
          "_0": "uint"
        }
      },
      "removeBurner(address)": {
        "details": "Remove an account's access to burn."
      },
      "removeCollateral(uint256)": {
        "params": {
          "_removingNativeTokenAmount": "Amount of removed collateral"
        },
        "returns": {
          "_0": "True if collateral is removed successfully"
        }
      },
      "removeMinter(address)": {
        "details": "Remove an account's access to mint."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)": {
        "details": "Users mint TeleBTC by sending BTC to locker's locking script                                         In case of liqudation of locker's bond, the burn TeleBTC is sent to                                         locker's rescue script                                         A user should lock enough TDT and TNT to become candidate",
        "params": {
          "_candidateLockingScript": "Locking script of the candidate",
          "_lockedNativeTokenAmount": "Bond amount of locker in native token of the target chain",
          "_lockedTDTAmount": "Bond amount of locker in TDT",
          "_lockerRescueScript": "Rescue script of the locker",
          "_lockerRescueType": "Type of locker's rescue script (e.g. P2SH)"
        },
        "returns": {
          "_0": "True if candidate is added successfully"
        }
      },
      "requestToRemoveLocker()": {
        "details": "Deactivates the status of the locker so that no                        one is allowed to send mint requests to this locker.                        It gives time to the locker to burn the required amount                        of teleBTC to make itself eligible to be removed.                        Sets isActive of locker to false",
        "returns": {
          "_0": "True if deactivated successfully"
        }
      },
      "revokeRequest()": {
        "details": "A user who is still a candidate can revoke his/her request",
        "returns": {
          "_0": "True if candidate is removed successfully"
        }
      },
      "selfRemoveLocker()": {
        "details": "Only locker can call this function                               Removing conditions should be satisfied",
        "returns": {
          "_0": "True if locker is removed successfully"
        }
      },
      "setCCBurnRouter(address)": {
        "details": "Only current owner can call this",
        "params": {
          "_ccBurnRouter": "The new cc burn router contract address"
        }
      },
      "setCollateralRatio(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_collateralRatio": "The new collateral ratio"
        }
      },
      "setExchangeConnector(address)": {
        "details": "Only owner can call this",
        "params": {
          "_exchangeConnector": "The new exchange router contract address"
        }
      },
      "setLiquidationRatio(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_liquidationRatio": "The new liquidation ratio"
        }
      },
      "setLockerPercentageFee(uint256)": {
        "details": "Only current owner can call this",
        "params": {
          "_lockerPercentageFee": "The new locker percentage fee"
        }
      },
      "setMinRequiredTDTLockedAmount(uint256)": {
        "details": "Only current owner can call this",
        "params": {
          "_minRequiredTDTLockedAmount": "The new required bond amount"
        }
      },
      "setMinRequiredTNTLockedAmount(uint256)": {
        "details": "Only current owner can call this",
        "params": {
          "_minRequiredTNTLockedAmount": "The new required bond amount"
        }
      },
      "setPriceOracle(address)": {
        "details": "Only current owner can call this",
        "params": {
          "_priceOracle": "The new price oracle"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new wrapped token contract address"
        }
      },
      "slashIdleLocker(address,uint256,address,uint256,address)": {
        "details": "Only cc burn router can call this                                   Locker is slashed since doesn't provide burn proof                                   before a cc burn request deadline.                                   User who made the cc burn request will receive the slashed bond",
        "params": {
          "_amount": "Amount of TeleBTC that is slashed from lockers",
          "_lockerTargetAddress": "Locker's target chain address",
          "_recipient": "Address of user who receives the slashed amount",
          "_rewardAmount": "Address of slasher who receives reward"
        },
        "returns": {
          "_0": "True if the locker is slashed successfully"
        }
      },
      "slashTheifLocker(address,uint256,address,uint256)": {
        "details": "Only cc burn router can call this                                   Locker is slashed because he/she moved BTC from                                    locker's Bitcoin address without any corresponding burn req                                   The slashed bond will be sold with discount",
        "params": {
          "_amount": "Value of slashed collateral (in TeleBTC)",
          "_lockerTargetAddress": "Locker's target chain address",
          "_rewardAmount": "Value of slashed reward (in TeleBTC)",
          "_rewardRecipient": "Address of slasher who receives reward"
        },
        "returns": {
          "_0": "True if the locker is slashed successfully"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unPauseLocker()": {
        "details": "@param"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateral(address,uint256)": {
        "notice": "Increases TNT collateral of the locker"
      },
      "addLocker(address)": {
        "notice": "Approves a candidate request to become locker"
      },
      "burn(bytes,uint256)": {
        "notice": "Burn teleBTC of an account"
      },
      "buySlashedCollateralOfLocker(address,uint256)": {
        "notice": "Sells lockers slashed collateral"
      },
      "getLockerCapacity(address)": {
        "notice": "Get how much net this locker has minted"
      },
      "getLockerLockingScript(address)": {
        "notice": "Give Bitcoin public key of locker"
      },
      "getNumberOfLockers()": {
        "notice": "Give number of lockers"
      },
      "isActive(address)": {
        "notice": "Tells if a locker is active or not"
      },
      "isLocker(bytes)": {
        "notice": "Checks whether an address is locker"
      },
      "liquidateLocker(address,uint256)": {
        "notice": "Liquidates the locker whose collateral is unhealthy"
      },
      "mint(bytes,address,uint256)": {
        "notice": "Mint teleBTC for an account"
      },
      "ownerRemoveLocker(address)": {
        "notice": "Removes a locker from lockers list"
      },
      "pauseLocker()": {
        "notice": "Pause the locker, so only the functions can be called which are whenPaused"
      },
      "removeCollateral(uint256)": {
        "notice": "Decreases TNT collateral of the locker"
      },
      "requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)": {
        "notice": "Adds user to candidates list"
      },
      "requestToRemoveLocker()": {
        "notice": "Requests to remove a locker from lockers list"
      },
      "revokeRequest()": {
        "notice": "Removes a candidate from candidates list"
      },
      "selfRemoveLocker()": {
        "notice": "Removes a locker from lockers list"
      },
      "setCCBurnRouter(address)": {
        "notice": "Changes cc burn router contract"
      },
      "setCollateralRatio(uint256)": {
        "notice": "Changes collateral ratio"
      },
      "setExchangeConnector(address)": {
        "notice": "Changes exchange router contract address and updates wrapped avax addresses"
      },
      "setLiquidationRatio(uint256)": {
        "notice": "Changes liquidation ratio"
      },
      "setLockerPercentageFee(uint256)": {
        "notice": "Changes percentage fee of locker"
      },
      "setMinRequiredTDTLockedAmount(uint256)": {
        "notice": "Changes the required bond amount to become locker"
      },
      "setMinRequiredTNTLockedAmount(uint256)": {
        "notice": "Changes the required bond amount to become locker"
      },
      "setPriceOracle(address)": {
        "notice": "Changes the price oracle"
      },
      "setTeleBTC(address)": {
        "notice": "Changes wrapped token contract address"
      },
      "slashIdleLocker(address,uint256,address,uint256,address)": {
        "notice": "Slashes lockers for not executing a cc burn req"
      },
      "slashTheifLocker(address,uint256,address,uint256)": {
        "notice": "Slashes lockers for moving BTC without a good reason"
      },
      "unPauseLocker()": {
        "notice": "Un-pause the locker, so only the functions can be called which are whenNotPaused"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 798,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 469,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 513,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 349,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 454,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11105,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "TeleportDAOToken",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 11108,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "teleBTC",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 11111,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "ccBurnRouter",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 11114,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "exchangeConnector",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 11117,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "priceOracle",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 11120,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "minRequiredTDTLockedAmount",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 11123,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "minRequiredTNTLockedAmount",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 11126,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "lockerPercentageFee",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 11129,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 11132,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "liquidationRatio",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 11135,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "priceWithDiscountRatio",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 11138,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "totalNumberOfCandidates",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 11141,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "totalNumberOfLockers",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 11146,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "lockersMapping",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_address,t_struct(locker)24914_storage)"
      },
      {
        "astId": 11150,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "lockerLeavingRequests",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11154,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "lockerLeavingAcceptance",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11158,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "lockerTargetAddress",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      },
      {
        "astId": 11162,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "minters",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11166,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "burners",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11169,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "libConstants",
        "offset": 0,
        "slot": "220",
        "type": "t_struct(lockersLibConstants)24927_storage"
      },
      {
        "astId": 11172,
        "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
        "label": "libParams",
        "offset": 0,
        "slot": "226",
        "type": "t_struct(lockersLibParam)24950_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)24959": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(locker)24914_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.locker)",
        "numberOfBytes": "32",
        "value": "t_struct(locker)24914_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(locker)24914_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.locker",
        "members": [
          {
            "astId": 24890,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "lockerLockingScript",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 24893,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "lockerRescueType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScriptTypes)24959"
          },
          {
            "astId": 24895,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "lockerRescueScript",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 24897,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "TDTLockedAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 24899,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "nativeTokenLockedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24901,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "netMinted",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 24903,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "slashingTeleBTCAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24905,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "reservedNativeTokenForSlash",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 24907,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "isLocker",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 24909,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "isCandidate",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 24911,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "isScriptHash",
            "offset": 2,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 24913,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "isActive",
            "offset": 3,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(lockersLibConstants)24927_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.lockersLibConstants",
        "members": [
          {
            "astId": 24916,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "OneHundredPercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24918,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "HealthFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24920,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "UpperHealthFactor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24922,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "MaxLockerFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 24924,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "NativeTokenDecimal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24926,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "NativeToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(lockersLibParam)24950_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.lockersLibParam",
        "members": [
          {
            "astId": 24929,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "teleportDAOToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24931,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "teleBTC",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 24933,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "ccBurnRouter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 24935,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "exchangeConnector",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 24937,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "priceOracle",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 24939,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "minRequiredTDTLockedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 24941,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "minRequiredTNTLockedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24943,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "lockerPercentageFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 24945,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "collateralRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 24947,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "liquidationRatio",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 24949,
            "contract": "contracts/lockers/LockersLogicTestnet.sol:LockersLogicTestnet",
            "label": "priceWithDiscountRatio",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}