{
  "address": "0x8dc9ADC41465a768e1755EC14bE6024393946741",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bitcoinFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "CCBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockerDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PaidCCBurn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bitcoinFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnReqIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_voutIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "burnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTransferred",
          "type": "bool"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "ccBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burntAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "disputeBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "bytes4[]",
          "name": "_versions",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes",
          "name": "_inputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_inputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4[]",
          "name": "_locktimes",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes",
          "name": "_inputIntermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexesAndBlockNumbers",
          "type": "uint256[]"
        }
      ],
      "name": "disputeLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isTransferred",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isUsedAsBurnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bitcoinFee",
          "type": "uint256"
        }
      ],
      "name": "setBitcoinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        }
      ],
      "name": "setLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        }
      ],
      "name": "setSlasherPercentageReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        }
      ],
      "name": "setTransferDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasherPercentageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa8f681a84aff6d76219bd11b240176cf7f089c3ec7edb02efc5881b78ff0403e",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0x8dc9ADC41465a768e1755EC14bE6024393946741",
    "transactionIndex": 1,
    "gasUsed": "4898957",
    "logsBloom": "0x
    "blockHash": "0x6c32167730a1601bee8ed821c8e27214ae87f168850153f2c490a2426b0456d7",
    "transactionHash": "0xa8f681a84aff6d76219bd11b240176cf7f089c3ec7edb02efc5881b78ff0403e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13029839,
        "transactionHash": "0xa8f681a84aff6d76219bd11b240176cf7f089c3ec7edb02efc5881b78ff0403e",
        "address": "0x8dc9ADC41465a768e1755EC14bE6024393946741",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6c32167730a1601bee8ed821c8e27214ae87f168850153f2c490a2426b0456d7"
      }
    ],
    "blockNumber": 13029839,
    "cumulativeGasUsed": "4933426",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x770f7B066e5eb859815Ab46Ae2Ce7c39E65a0F7f",
    "0xCD3022709e7f3CD0DdEF17E41392367fEd14f1a4",
    "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    10,
    50,
    50,
    50
  ],
  "numDeployments": 1,
  "solcInputHash": "b687f14c702c480478e4d15b6be75112",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"CCBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockerDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PaidCCBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bitcoinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnReqIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_voutIndexes\",\"type\":\"uint256[]\"}],\"name\":\"burnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransferred\",\"type\":\"bool\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"ccBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burntAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"disputeBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_versions\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_inputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_locktimes\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputIntermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexesAndBlockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"disputeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isUsedAsBurnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"name\":\"setBitcoinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"}],\"name\":\"setTransferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"details\":\"Makes isTransferred flag true for the paid requests\",\"params\":{\"_blockNumber\":\"Height of the block containing the burn transaction\",\"_burnReqIndexes\":\"Indexes of requests that locker wants to provide proof for them\",\"_index\":\"Index of transaction containing the burn transaction in the block\",\"_intermediateNodes\":\"Merkle inclusion proof for transaction containing the burn transaction\",\"_lockerLockingScript\":\"Locker's locking script (on Bitcoin) that this burn request belongs to\",\"_locktime\":\"Lock time of the transaction containing the burn transaction\",\"_version\":\"Version of the transaction containing the burn transaction\",\"_vin\":\"Inputs of the transaction containing the burn transaction\",\"_vout\":\"Outputs of the transaction containing the burn transaction\",\"_voutIndexes\":\"Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])\"},\"returns\":{\"_0\":\"\"}},\"ccBurn(uint256,bytes,uint8,bytes)\":{\"details\":\"After submitting the burn request, lockers have a limited time                                     to send BTC and provide burn proof\",\"params\":{\"_amount\":\"Amount of teleBTC that user wants to burn\",\"_lockerLockingScript\":\"Locking script of locker that should execute the burn request\",\"_userScript\":\"User's script\"},\"returns\":{\"_burntAmount\":\"               Amount of teleBTC that user will receive (after reducing fees)\"}},\"constructor\":{\"params\":{\"_bitcoinFee\":\"Fee of submitting a transaction on Bitcoin\",\"_lockers\":\"Address of lockers contract\",\"_protocolPercentageFee\":\"Percentage of tokens that user pays to protocol for burning\",\"_relay\":\"Address of relay contract\",\"_slasherPercentageReward\":\"Percentage of tokens that slasher receives after slashing a locker\",\"_transferDeadline\":\"Dealine of sending BTC to user (aster submitting a burn request)\",\"_treasury\":\"Address of the treasury of the protocol\"}},\"disputeBurn(bytes,uint256[])\":{\"params\":{\"_indices\":\"Array of indices of the requests that their deadline has passed\",\"_lockerLockingScript\":\"locker's locking script that the unpaid request belongs to\"},\"returns\":{\"_0\":\"True if dispute is successfull\"}},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"details\":\"Input tx is a malicious tx which shows that locker spent BTC                                         Output tx is the tx that was spent by locker in input tx                                         Output tx --> money goes to locker --> Input tx --> locker steals the funds\",\"params\":{\"_indexesAndBlockNumbers\":\"Indices of malicious input in input tx, input tx in block and block number of input tx\",\"_inputIntermediateNodes\":\"Merkle inclusion proof for the malicious transaction\",\"_inputVin\":\"Inputs of the malicious transaction\",\"_inputVout\":\"Outputs of the malicious transaction\",\"_lockerLockingScript\":\"Suspicious locker's locking script\",\"_locktimes\":\"Locktimes of input and output tx\",\"_outputVin\":\"Inputs of the spent transaction\",\"_outputVout\":\"Outputs of the spent transaction\",\"_versions\":\"Versions of input and output tx\"},\"returns\":{\"_0\":\"True if dispute is successfull\"}},\"isTransferred(address,uint256)\":{\"params\":{\"_index\":\"The index of the request for the locker\",\"_lockerTargetAddress\":\"Locker's address on the target chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBitcoinFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_bitcoinFee\":\"The new Bitcoin transaction fee\"}},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"The new lockers contract address\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"The new protocol percentage fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"The new relay contract address\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher percentage reward\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new teleBTC contract address\"}},\"setTransferDeadline(uint256)\":{\"details\":\"Only owner can call this                                     Deadline shoudl be greater than relay finalization parameter\",\"params\":{\"_transferDeadline\":\"The new transfer deadline\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"The new treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CCBurn(address,bytes,uint8,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Emits when a burn request gets submitted\"},\"LockerDispute(address,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a locker gets slashed for withdrawing BTC without proper reason\"},\"PaidCCBurn(address,bytes,uint256,address,uint256)\":{\"notice\":\"Emits when a burn proof is provided\"}},\"kind\":\"user\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"notice\":\"Checks the correctness of burn proof\"},\"ccBurn(uint256,bytes,uint8,bytes)\":{\"notice\":\"Burns teleBTC and records the burn request\"},\"constructor\":{\"notice\":\"Handles cross-chain burn requests\"},\"disputeBurn(bytes,uint256[])\":{\"notice\":\"Slashes a locker if she did not paid a cc burn request before its deadline\"},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"notice\":\"Slashes a locker if they issue a tx that doesn't match any burn request\"},\"isTransferred(address,uint256)\":{\"notice\":\"Shows if a burn request has been done or not\"},\"setBitcoinFee(uint256)\":{\"notice\":\"Changes Bitcoin transaction fee\"},\"setLockers(address)\":{\"notice\":\"Changes lockers contract address\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Changes protocol percentage fee for burning tokens\"},\"setRelay(address)\":{\"notice\":\"Changes relay contract address\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Changes slasher percentage reward for disputing lockers\"},\"setTeleBTC(address)\":{\"notice\":\"Changes teleBTC contract address\"},\"setTransferDeadline(uint256)\":{\"notice\":\"Changes deadline of executing burn requests\"},\"setTreasury(address)\":{\"notice\":\"Changes protocol treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/CCBurnRouter.sol\":\"CCBurnRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"contracts/libraries/LockersLib.sol:LockersLib\":\"0x8a9fb38f2555adde58c5a3a9ba32d83c347d938a\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n\\n    event Mint(address indexed to, uint value);\\n\\n    event Burn(address indexed to, uint value);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function mintTestToken() external; // Just for test\\n\\n}\",\"keccak256\":\"0x5f3a1b40b46df7ac9c69ded4bf254e85142dcd6731c37d4ef0663100e50927b3\",\"license\":\"MIT\"},\"contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary BitcoinHelper {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, uint8(ref.len())));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return uint64(flag);\\n        } else if (flag == 0xfd) {\\n            number = uint64(memView.indexLEUint(_index + 1, 2));\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = uint64(memView.indexLEUint(_index + 1, 4));\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = uint64(memView.indexLEUint(_index + 1, 8));\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the required transaction\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return revertBytes32(inputHash2);\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function revertBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(0));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return uint32(_outpoint.indexLEUint(32, 4));\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return uint64(_output.indexLEUint(0, 8));\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(0));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n\\n        bytes29 voutView = tryAsVout(_vout.ref(0));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n\\n        if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(0));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(0));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(0));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(0));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(0));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(3, 1));\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(2, 1));\\n        if (_bodyLength > 77 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0xe3138d08037f99a67d54d3f1a14bbf907c9d240d9b683dff3dd9899429f11ad4\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        // FIXME: why the following lines need `unchecked`\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x80360bfa157572ab2016c691585bac43f2768d6bd7aa795e370d360cb8da8e49\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockers {\\n\\n    // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestRemoveLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount,\\n        uint netMinted        //   = totalMinted  - totalBurnt which needs to be burnt\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address rewardRecipient,\\n        uint amount,\\n        address recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestToRemoveLocker() external returns (bool);\\n\\n    function ownerRemoveLocker(address _lockerTargetAddress) external returns(bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashTheifLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x20e76d07b93be89fbd000fe70d35c09a073b654e33ff82065dc5453a7a72132b\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param gasPrice             Gas price of tx that relayer submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xcb0520dd1abfeb7a85ebd7d33a549987dae2cbdde51fca1475985ac310607ee5\",\"license\":\"MIT\"},\"contracts/routers/CCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CCBurnRouter is ICCBurnRouter, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCBurnRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"CCBurnRouter: value is zero\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 100;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    mapping(address => burnRequest[]) public burnRequests; // Mapping from locker target address to assigned burn requests\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; // Mapping that shows a txId has been submitted to pay a burn request\\n\\n    /// @notice                             Handles cross-chain burn requests\\n    /// @param _relay                       Address of relay contract\\n    /// @param _lockers                     Address of lockers contract\\n    /// @param _treasury                    Address of the treasury of the protocol\\n    /// @param _transferDeadline            Dealine of sending BTC to user (aster submitting a burn request)\\n    /// @param _protocolPercentageFee       Percentage of tokens that user pays to protocol for burning\\n    /// @param _slasherPercentageReward     Percentage of tokens that slasher receives after slashing a locker\\n    /// @param _bitcoinFee                  Fee of submitting a transaction on Bitcoin\\n    constructor(\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        uint _transferDeadline,\\n        uint _protocolPercentageFee,\\n        uint _slasherPercentageReward,\\n        uint _bitcoinFee\\n    ) {\\n        relay = _relay;\\n        lockers = _lockers;\\n        treasury = _treasury;\\n        transferDeadline = _transferDeadline;\\n        protocolPercentageFee = _protocolPercentageFee;\\n        slasherPercentageReward = _slasherPercentageReward;\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice                         Shows if a burn request has been done or not\\n    /// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param _index                   The index of the request for the locker\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint _index\\n    ) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice               Changes relay contract address\\n    /// @dev                  Only owner can call this\\n    /// @param _relay         The new relay contract address\\n    function setRelay(address _relay) external nonZeroAddress(_relay) override onlyOwner {\\n        relay = _relay;\\n    }\\n\\n    /// @notice               Changes lockers contract address\\n    /// @dev                  Only owner can call this\\n    /// @param _lockers       The new lockers contract address\\n    function setLockers(address _lockers) external nonZeroAddress(_lockers) override onlyOwner {\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                 Changes teleBTC contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external nonZeroAddress(_teleBTC) override onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                     Changes protocol treasury address\\n    /// @dev                        Only owner can call this\\n    /// @param _treasury            The new treasury address\\n    function setTreasury(address _treasury) external nonZeroAddress(_treasury) override onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Changes deadline of executing burn requests\\n    /// @dev                                Only owner can call this\\n    ///                                     Deadline shoudl be greater than relay finalization parameter\\n    /// @param _transferDeadline            The new transfer deadline\\n    function setTransferDeadline(uint _transferDeadline) external override onlyOwner {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        // Gives lockers enough time to pay cc burn requests\\n        require(_transferDeadline > _finalizationParameter, \\\"CCBurnRouter: transfer deadline is too low\\\");\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice                             Changes protocol percentage fee for burning tokens\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       The new protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        require(MAX_PROTOCOL_FEE >= _protocolPercentageFee, \\\"CCBurnRouter: protocol fee is out of range\\\");\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                            Changes slasher percentage reward for disputing lockers\\n    /// @dev                               Only owner can call this\\n    /// @param _slasherPercentageReward    The new slasher percentage reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        require(MAX_SLASHER_REWARD >= _slasherPercentageReward, \\\"CCBurnRouter: slasher percentage reward is out of range\\\");\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                       Changes Bitcoin transaction fee\\n    /// @dev                          Only owner can call this\\n    /// @param _bitcoinFee            The new Bitcoin transaction fee\\n    function setBitcoinFee(uint _bitcoinFee) external override onlyOwner {\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice                             Burns teleBTC and records the burn request\\n    /// @dev                                After submitting the burn request, lockers have a limited time\\n    ///                                     to send BTC and provide burn proof\\n    /// @param _amount                      Amount of teleBTC that user wants to burn\\n    /// @param _userScript                  User's script\\n    /// @param _lockerLockingScript\\t        Locking script of locker that should execute the burn request\\n    /// @return _burntAmount                Amount of teleBTC that user will receive (after reducing fees)\\n    function ccBurn(\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant nonZeroValue(_amount) override returns (uint _burntAmount) {\\n        // Checks validity of user's script\\n        _checkScriptType(_userScript, _scriptType);\\n\\n        // Checks if the given locking script is locker\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        /*\\n            Gets the target address of locker\\n            note: we don't check whether _lockerTargetAddress is equal to zero\\n            or not since _lockerLockingScript is locker\\n        */\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        // Transfers users's teleBTC\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        uint remainedAmount = _getFees(\\n            _amount,\\n            _lockerTargetAddress\\n        );\\n\\n        // Burns remained teleBTC\\n        ITeleBTC(teleBTC).approve(lockers, remainedAmount);\\n        _burntAmount = ILockers(lockers).burn(_lockerLockingScript, remainedAmount);\\n\\n        _saveBurnRequest(\\n            _amount,\\n            _burntAmount,\\n            _userScript,\\n            _scriptType,\\n            IBitcoinRelay(relay).lastSubmittedHeight(),\\n            _lockerTargetAddress\\n        );\\n\\n        emit CCBurn(\\n            _msgSender(),\\n            _userScript,\\n            _scriptType,\\n            _amount,\\n            _burntAmount,\\n            _lockerTargetAddress,\\n            burnRequests[_lockerTargetAddress].length - 1, // index of request\\n            burnRequests[_lockerTargetAddress][burnRequests[_lockerTargetAddress].length - 1].deadline\\n        );\\n\\n    }\\n\\n    /// @notice                             Checks the correctness of burn proof\\n    /// @dev                                Makes isTransferred flag true for the paid requests\\n    /// @param _version                     Version of the transaction containing the burn transaction\\n    /// @param _vin                         Inputs of the transaction containing the burn transaction\\n    /// @param _vout                        Outputs of the transaction containing the burn transaction\\n    /// @param _locktime                    Lock time of the transaction containing the burn transaction\\n    /// @param _blockNumber                 Height of the block containing the burn transaction\\n    /// @param _intermediateNodes           Merkle inclusion proof for transaction containing the burn transaction\\n    /// @param _index                       Index of transaction containing the burn transaction in the block\\n    /// @param _lockerLockingScript         Locker's locking script (on Bitcoin) that this burn request belongs to\\n    /// @param _burnReqIndexes              Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes                 Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])\\n    /// @return\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        bytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) external payable nonReentrant override returns (bool) {\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"CCBurnRouter: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        require(\\n            _burnReqIndexes.length == _voutIndexes.length,\\n            \\\"CCBurnRouter: wrong indexes\\\"\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: transaction has not finalized yet\\\"\\n        );\\n\\n        // Checks the paid burn requests\\n        uint paidOutputCounter = _checkPaidBurnRequests(\\n            _blockNumber,\\n            _lockerTargetAddress,\\n            _vout,\\n            _burnReqIndexes,\\n            _voutIndexes\\n        );\\n\\n        /*\\n            Checks if there is an output that goes back to the locker\\n            Sets isUsedAsBurnProof of txId true if all the outputs (except one) were used to pay cc burn requests\\n        */\\n        _updateIsUsedAsBurnProof(paidOutputCounter, _vout, _lockerLockingScript, txId);\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Slashes a locker if she did not paid a cc burn request before its deadline\\n    /// @param _lockerLockingScript         locker's locking script that the unpaid request belongs to\\n    /// @param _indices                     Array of indices of the requests that their deadline has passed\\n    /// @return                             True if dispute is successfull\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint[] memory _indices\\n    ) external nonReentrant override returns (bool) {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        uint _lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint i = 0; i < _indices.length; i++) {\\n            // Checks that locker has not provided burn proof\\n            require(\\n                !burnRequests[_lockerTargetAddress][_indices[i]].isTransferred,\\n                \\\"CCBurnRouter: request has been paid before\\\"\\n            );\\n\\n            // Checks that payback deadline has passed\\n            require(\\n                burnRequests[_lockerTargetAddress][_indices[i]].deadline < _lastSubmittedHeight,\\n                \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n            );\\n\\n            // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n            burnRequests[_lockerTargetAddress][_indices[i]].isTransferred = true;\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockers(lockers).slashIdleLocker(\\n                _lockerTargetAddress,\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n                _msgSender(), // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender // User address\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev                                    Input tx is a malicious tx which shows that locker spent BTC\\n    ///                                         Output tx is the tx that was spent by locker in input tx\\n    ///                                         Output tx --> money goes to locker --> Input tx --> locker steals the funds\\n    /// @param _lockerLockingScript             Suspicious locker's locking script\\n    /// @param _versions                        Versions of input and output tx\\n    /// @param _inputVin                        Inputs of the malicious transaction\\n    /// @param _inputVout                       Outputs of the malicious transaction\\n    /// @param _outputVin                       Inputs of the spent transaction\\n    /// @param _outputVout                      Outputs of the spent transaction\\n    /// @param _locktimes                       Locktimes of input and output tx\\n    /// @param _inputIntermediateNodes          Merkle inclusion proof for the malicious transaction\\n    /// @param _indexesAndBlockNumbers          Indices of malicious input in input tx, input tx in block and block number of input tx\\n    /// @return                                 True if dispute is successfull\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external payable nonReentrant override returns (bool) {\\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n            _locktimes.length == 2 &&\\n            _indexesAndBlockNumbers.length == 3,\\n            \\\"CCBurnRouter: wrong inputs\\\"\\n        );\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        // Finds input tx id and checks its inclusion\\n        bytes32 _inputTxId = BitcoinHelper.calculateTxId(_versions[0], _inputVin, _inputVout, _locktimes[0]);\\n        require(\\n            _isConfirmed(\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"CCBurnRouter: input transaction is not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !isUsedAsBurnProof[_inputTxId],\\n            \\\"CCBurnRouter: transaction has been used as burn proof\\\"\\n        );\\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint _outpointIndex) = BitcoinHelper.extractOutpoint(\\n            _inputVin,\\n            _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n        );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId == BitcoinHelper.calculateTxId(_versions[1], _outputVin, _outputVout, _locktimes[1]),\\n            \\\"CCBurnRouter: outpoint tx doesn't match with output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(BitcoinHelper.getLockingScript(_outputVout, _outpointIndex)) ==\\n            keccak256(_lockerLockingScript),\\n            \\\"CCBurnRouter: output tx doesn't belong to locker\\\"\\n        );\\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            IBitcoinRelay(relay).lastSubmittedHeight() > transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n        );\\n\\n        // Slashes locker\\n        _slashLockerForDispute(\\n            _inputVout,\\n            _lockerLockingScript,\\n            _inputTxId,\\n            _indexesAndBlockNumbers[2] // Block number\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Slashes the malicious locker\\n    /// @param _inputVout                       Inputs of the malicious transaction\\n    /// @param _lockerLockingScript             Malicious locker's locking script\\n    /// @param _inputTxId                       Tx id of the malicious transaction\\n    /// @param _inputBlockNumber                Block number of the malicious transaction\\n    function _slashLockerForDispute(\\n        bytes memory _inputVout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _inputTxId,\\n        uint _inputBlockNumber\\n    ) private {\\n\\n        // Finds total value of malicious transaction\\n        uint totalValue = BitcoinHelper.parseOutputsTotalValue(_inputVout);\\n\\n        // Gets the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        ILockers(lockers).slashTheifLocker(\\n            _lockerTargetAddress,\\n            totalValue*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n            _msgSender(), // Slasher address\\n            totalValue\\n        );\\n\\n        // Emits the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _inputBlockNumber,\\n            _inputTxId,\\n            totalValue + totalValue*slasherPercentageReward/MAX_SLASHER_REWARD\\n        );\\n    }\\n\\n    /// @notice                             Checks the burn requests that get paid by this transaction\\n    /// @param _paidBlockNumber             Block number in which locker paid the burn request\\n    /// @param _lockerTargetAddress         Address of the locker on the target chain\\n    /// @param _vout                        Outputs of a transaction\\n    /// @param _burnReqIndexes              Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes                 Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])\\n    /// @return paidOutputCounter           Number of executed burn requests\\n    function _checkPaidBurnRequests(\\n        uint _paidBlockNumber,\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) private returns (uint paidOutputCounter) {\\n        uint parsedAmount;\\n        /*\\n            Below variable is for checking that every output in vout (except one)\\n            is related to a cc burn request so that we can\\n            set \\\"isUsedAsBurnProof = true\\\" for the whole txId\\n        */\\n        paidOutputCounter = 0;\\n\\n        for (uint i = 0; i < _burnReqIndexes.length; i++) {\\n            uint _burnReqIndex = _burnReqIndexes[i];\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred &&\\n            burnRequests[_lockerTargetAddress][_burnReqIndex].deadline >= _paidBlockNumber\\n            ) {\\n\\n                parsedAmount = BitcoinHelper.parseValueFromSpecificOutputHavingScript(\\n                    _vout,\\n                    _voutIndexes[i],\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].userScript,\\n                    ScriptTypes(uint(burnRequests[_lockerTargetAddress][_burnReqIndex].scriptType))\\n                );\\n\\n                // Checks that locker has sent required teleBTC amount\\n                if (burnRequests[_lockerTargetAddress][_burnReqIndex].burntAmount == parsedAmount) {\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidCCBurn(\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex].sender,\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex].userScript,\\n                        parsedAmount,\\n                        _lockerTargetAddress,\\n                        _burnReqIndex // Index of request\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice                                 Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev                                    One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter               Number of the tx outputs that pay a cc burn request\\n    /// @param _vout                            Outputs of a transaction\\n    /// @param _lockerLockingScript             Locking script of locker\\n    /// @param _txId                            Transaction id\\n    function _updateIsUsedAsBurnProof(\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private {\\n        uint parsedAmount = BitcoinHelper.parseValueHavingLockingScript(_vout, _lockerLockingScript);\\n        uint numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs) {\\n            // One output sends the remained value to locker\\n            isUsedAsBurnProof[_txId] = true;\\n        } else if (_paidOutputCounter == numberOfOutputs) {\\n            // All output pays cc burn requests\\n            isUsedAsBurnProof[_txId] = true;\\n        }\\n    }\\n\\n    function _checkScriptType(bytes memory _userScript, ScriptTypes _scriptType) private pure {\\n        if (_scriptType == ScriptTypes.P2PK || _scriptType == ScriptTypes.P2WSH) {\\n            require(_userScript.length == 32, \\\"CCBurnRouter: invalid user script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"CCBurnRouter: invalid user script\\\");\\n        }\\n    }\\n\\n    /// @notice                           Records burn request of user\\n    /// @param _amount                    Amount of wrapped token that user wants to burn\\n    /// @param _burntAmount               Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userScript                User's Bitcoin address\\n    /// @param _lastSubmittedHeight       Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress       Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint _amount,\\n        uint _burntAmount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) private {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.burntAmount = _burntAmount;\\n        request.sender = _msgSender();\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice                         Checks inclusion of the transaction in the specified block\\n    /// @dev                            Calls the relay contract to check Merkle inclusion proof\\n    /// @param _txId                    Id of the transaction\\n    /// @param _blockNumber             Height of the block containing the transaction\\n    /// @param _intermediateNodes       Merkle inclusion proof for the transaction\\n    /// @param _index                   Index of transaction in the block\\n    /// @return                         True if the transaction was included in the block\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"CCBurnRouter: relay fee is not sufficient\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to _msgSender()\\n        Address.sendValue(payable(_msgSender()), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                      Checks inclusion of the transaction in the specified block\\n    /// @dev                         Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount               Id of the transaction\\n    /// @param _lockerTargetAddress  Id of the transaction\\n    /// @return                      Remained amount after reducing fees\\n    function _getFees(\\n        uint _amount,\\n        address _lockerTargetAddress\\n    ) private returns (uint) {\\n        // Calculates protocol fee\\n        uint protocolFee = _amount*protocolPercentageFee/MAX_PROTOCOL_FEE;\\n\\n        require(_amount > protocolFee + bitcoinFee, \\\"CCBurnRouter: amount is too low\\\");\\n\\n        uint remainedAmount = _amount - protocolFee - bitcoinFee;\\n\\n        // Transfers protocol fee\\n        ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n\\n        // Transfers bitcoin fee to locker\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, bitcoinFee);\\n\\n        return remainedAmount;\\n    }\\n\\n}\",\"keccak256\":\"0xf2e3f536cbc53eda30fe50bb2caa000343b326eb0f11bce843da0442a59add43\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice                 \\tStructure for recording cc burn requests\\n    /// @param amount         \\t\\tAmount of tokens that user wants to burn\\n    /// @param burntAmount   \\t    Amount that user will receive (after reducing fees from amount)\\n    /// @param sender       \\t\\tAddress of user who requests burning\\n    /// @param userScript    Locking script of the user on Bitcoin\\n    /// @param deadline         \\tDeadline of locker for executing the request\\n    /// @param isTransferred    \\tTrue if the request has been executed\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets submitted\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userScript        Locking script of user on Bitcoin\\n    /// @param amount         \\t\\t\\tToral requested amount\\n    /// @param burntAmount   \\t\\t    Amount that user will receive (after reducing fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n    /// @param deadline         \\t\\tDeadline of locker for executing the request\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\tuint amount, \\n\\t\\tuint burntAmount, \\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint index, \\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a burn proof is provided\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userScript        Locking script of the user on Bitcoin\\n    /// @param burntAmount   \\t\\t    Amount that user received\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed userTargetAddress, \\n\\t\\tbytes userScript, \\n\\t\\tuint burntAmount, \\n\\t\\taddress indexed lockerTargetAddress, \\n\\t\\tuint index\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\t\\t\\t\\tBlock number of the malicious tx\\n\\t/// @param txId\\t\\t\\t\\t\\t\\tTransaction ID of the malicious tx\\n\\t/// @param amount\\t\\t\\t\\t\\tSlashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\t// Read-only functions\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0xf676029b3098a3ce56b34c916675293442f9f74a9361a9e68eff30309a23a12f\",\"license\":\"MIT\"},\"contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH // 32 bytes               \\n    }\",\"keccak256\":\"0xaf156812745457f17c2fcec64687bf4ebfef5587725731becfe26849e5a2f1ed\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101855760003560e01c80638d3d78cd116100d1578063c780c03f1161008a578063ea73263711610064578063ea7326371461045c578063f0f442601461046f578063f2fde38b1461048f578063f47e2240146104af5761018c565b8063c780c03f14610409578063c805f68b1461041c578063cdbe37411461043c5761018c565b80638d3d78cd1461035f5780638da5cb5b1461037f578063b14d35321461039d578063b59589d1146103bd578063b74d0d35146103dd578063bed6a602146103f35761018c565b80635c4f5f3e1161013e57806373532b2a1161011857806373532b2a146102df5780637ed55748146102ff5780637f0f18171461031f5780637ffe9a921461033f5761018c565b80635c4f5f3e1461028a57806361d027b3146102aa578063715018a6146102ca5761018c565b80631812adb6146101915780631876dec4146101ba5780631e236168146101f2578063419cba7f1461023257806343149dba146102485780634782bc36146102685761018c565b3661018c57005b600080fd5b34801561019d57600080fd5b506101a760075481565b6040519081526020015b60405180910390f35b3480156101c657600080fd5b506003546101da906001600160a01b031681565b6040516001600160a01b0390911681526020016101b1565b3480156101fe57600080fd5b5061022261020d36600461491a565b600b6020526000908152604090205460ff1681565b60405190151581526020016101b1565b34801561023e57600080fd5b506101a760085481565b34801561025457600080fd5b506101a7610263366004614c2e565b6104e2565b34801561027457600080fd5b5061028861028336600461491a565b6109c5565b005b34801561029657600080fd5b506102886102a536600461491a565b610a6b565b3480156102b657600080fd5b506005546101da906001600160a01b031681565b3480156102d657600080fd5b50610288610b7c565b3480156102eb57600080fd5b506102226102fa366004614a6f565b610bb2565b34801561030b57600080fd5b5061028861031a36600461491a565b6111cf565b34801561032b57600080fd5b5061028861033a366004614897565b611263565b34801561034b57600080fd5b5061022261035a3660046148cf565b6112d7565b34801561036b57600080fd5b506004546101da906001600160a01b031681565b34801561038b57600080fd5b506000546001600160a01b03166101da565b3480156103a957600080fd5b506102886103b8366004614897565b61132f565b3480156103c957600080fd5b506002546101da906001600160a01b031681565b3480156103e957600080fd5b506101a760095481565b3480156103ff57600080fd5b506101a760065481565b610222610417366004614ad4565b6113a3565b34801561042857600080fd5b50610288610437366004614897565b611908565b34801561044857600080fd5b5061028861045736600461491a565b61197c565b61022261046a36600461494a565b6119ab565b34801561047b57600080fd5b5061028861048a366004614897565b611c51565b34801561049b57600080fd5b506102886104aa366004614897565b611cc5565b3480156104bb57600080fd5b506104cf6104ca3660046148cf565b611d60565b6040516101b197969594939291906150f6565b6000600260015414156105105760405162461bcd60e51b8152600401610507906150bf565b60405180910390fd5b600260015585806105635760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2076616c7565206973207a65726f00000000006044820152606401610507565b61056d8686611e54565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa39061059f9087908790600401614dfc565b60206040518083038186803b1580156105b757600080fd5b505afa1580156105cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ef91906148fa565b61060b5760405162461bcd60e51b815260040161050790614fa8565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a9061063e9088908890600401614dfc565b60206040518083038186803b15801561065657600080fd5b505afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e91906148b3565b6004549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018b9052606401602060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906148fa565b5060006107368983611ef1565b6004805460035460405163095ea7b360e01b81526001600160a01b039182169381019390935260248301849052929350919091169063095ea7b390604401602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c691906148fa565b506003546040516338463cff60e01b81526001600160a01b03909116906338463cff906107fb90899089908690600401614e10565b602060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190614932565b93506108e289858a8a600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a457600080fd5b505afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc9190614932565b876120ad565b6001600160a01b0382166000908152600a60205260409020805461090890600190615291565b8154811061092657634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154826001600160a01b03166109493390565b6001600160a01b038581166000908152600a60205260409020549116907fa5604974ff4182d74f6ab1839735f791628aa9385060f8cc07a20d415b540295908c908c908f908b9061099c90600190615291565b6040516109ad959493929190614e47565b60405180910390a45050600180555095945050505050565b6000546001600160a01b031633146109ef5760405162461bcd60e51b81526004016105079061508a565b8060641015610a665760405162461bcd60e51b815260206004820152603760248201527f43434275726e526f757465723a20736c61736865722070657263656e7461676560448201527f20726577617264206973206f7574206f662072616e67650000000000000000006064820152608401610507565b600855565b6000546001600160a01b03163314610a955760405162461bcd60e51b81526004016105079061508a565b60025460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190614932565b9050808211610b765760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207472616e7366657220646561646c696e6520604482015269697320746f6f206c6f7760b01b6064820152608401610507565b50600655565b6000546001600160a01b03163314610ba65760405162461bcd60e51b81526004016105079061508a565b610bb0600061223e565b565b600060026001541415610bd75760405162461bcd60e51b8152600401610507906150bf565b600260015560035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390610c0e9087908790600401614dfc565b60206040518083038186803b158015610c2657600080fd5b505afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e91906148fa565b610c7a5760405162461bcd60e51b815260040161050790614fa8565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90610cad9088908890600401614dfc565b60206040518083038186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd91906148b3565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4f57600080fd5b505afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190614932565b905060005b84518110156111bf576001600160a01b0383166000908152600a602052604090208551869083908110610dcf57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610df557634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff1615610e6c5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207265717565737420686173206265656e2070604482015269616964206265666f726560b01b6064820152608401610507565b6001600160a01b0383166000908152600a602052604090208551839190879084908110610ea957634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610ecf57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015410610efe5760405162461bcd60e51b815260040161050790614ff8565b6001600160a01b0383166000908152600a60205260409020855160019190879084908110610f3c57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610f6257634e487b7160e01b600052603260045260246000fd5b60009182526020808320600692909202909101600501805460ff1916931515939093179092556003546008546001600160a01b038781168452600a909452604090922088519390911692631697565b9287926064928b9088908110610fd757634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610ffd57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600001546110199190615249565b6110239190615229565b336001600160a01b0388166000908152600a602052604090208a518b908890811061105e57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061108457634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160000154600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208b88815181106110db57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061110157634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac91906148fa565b50806111b781615330565b915050610d8c565b5050600180805595945050505050565b6000546001600160a01b031633146111f95760405162461bcd60e51b81526004016105079061508a565b80612710101561125e5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a2070726f746f636f6c20666565206973206f7560448201526974206f662072616e676560b01b6064820152608401610507565b600755565b806001600160a01b03811661128a5760405162461bcd60e51b815260040161050790614f71565b6000546001600160a01b031633146112b45760405162461bcd60e51b81526004016105079061508a565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600a6020526040812080548390811061130f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff1690505b92915050565b806001600160a01b0381166113565760405162461bcd60e51b815260040161050790614f71565b6000546001600160a01b031633146113805760405162461bcd60e51b81526004016105079061508a565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000600260015414156113c85760405162461bcd60e51b8152600401610507906150bf565b6002600181905589511480156113df575083516002145b80156113ec575081516003145b6114385760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a2077726f6e6720696e707574730000000000006044820152606401610507565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390611468908d90600401614e34565b60206040518083038186803b15801561148057600080fd5b505afa158015611494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b891906148fa565b6114d45760405162461bcd60e51b815260040161050790614fa8565b60006115328a6000815181106114fa57634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8860008151811061152557634e487b7160e01b600052603260045260246000fd5b602002602001015161228e565b9050611590818460028151811061155957634e487b7160e01b600052603260045260246000fd5b6020026020010151868660018151811061158357634e487b7160e01b600052603260045260246000fd5b602002602001015161238f565b6115f55760405162461bcd60e51b815260206004820152603060248201527f43434275726e526f757465723a20696e707574207472616e73616374696f6e2060448201526f1a5cc81b9bdd08199a5b985b1a5e995960821b6064820152608401610507565b6000818152600b602052604090205460ff16156116725760405162461bcd60e51b815260206004820152603560248201527f43434275726e526f757465723a207472616e73616374696f6e2068617320626560448201527432b7103ab9b2b21030b990313ab93710383937b7b360591b6064820152608401610507565b6000806116a78b8660008151811061169a57634e487b7160e01b600052603260045260246000fd5b6020026020010151612501565b915091506116fa8c6001815181106116cf57634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a60018151811061152557634e487b7160e01b600052603260045260246000fd5b82146117675760405162461bcd60e51b815260206004820152603660248201527f43434275726e526f757465723a206f7574706f696e7420747820646f65736e276044820152750e840dac2e8c6d040eed2e8d040deeae8e0eae840e8f60531b6064820152608401610507565b8c5160208e012061177889836125b0565b80519060200120146117e55760405162461bcd60e51b815260206004820152603060248201527f43434275726e526f757465723a206f757470757420747820646f65736e27742060448201526f3132b637b733903a37903637b1b5b2b960811b6064820152608401610507565b8460028151811061180657634e487b7160e01b600052603260045260246000fd5b602002602001015160065461181b919061519f565b600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190614932565b116118be5760405162461bcd60e51b815260040161050790614ff8565b6118f28a8e85886002815181106118e557634e487b7160e01b600052603260045260246000fd5b6020026020010151612622565b505060018080559b9a5050505050505050505050565b806001600160a01b03811661192f5760405162461bcd60e51b815260040161050790614f71565b6000546001600160a01b031633146119595760405162461bcd60e51b81526004016105079061508a565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146119a65760405162461bcd60e51b81526004016105079061508a565b600955565b6000600260015414156119d05760405162461bcd60e51b8152600401610507906150bf565b60026001556001600160e01b0319881615611a2d5760405162461bcd60e51b815260206004820181905260248201527f43434275726e526f757465723a206e6f6e2d7a65726f206c6f636b2074696d656044820152606401610507565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390611a5d908790600401614e34565b60206040518083038186803b158015611a7557600080fd5b505afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad91906148fa565b611ac95760405162461bcd60e51b815260040161050790614fa8565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90611afa908890600401614e34565b60206040518083038186803b158015611b1257600080fd5b505afa158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a91906148b3565b90508251845114611b9d5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720696e646578657300000000006044820152606401610507565b6000611bab8d8d8d8d61228e565b9050611bb9818a8a8a61238f565b611c1d5760405162461bcd60e51b815260206004820152602f60248201527f43434275726e526f757465723a207472616e73616374696f6e20686173206e6f60448201526e1d08199a5b985b1a5e9959081e595d608a1b6064820152608401610507565b6000611c2c8a848e89896127ff565b9050611c3a818d8985612c63565b505060018080559c9b505050505050505050505050565b806001600160a01b038116611c785760405162461bcd60e51b815260040161050790614f71565b6000546001600160a01b03163314611ca25760405162461bcd60e51b81526004016105079061508a565b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611cef5760405162461bcd60e51b81526004016105079061508a565b6001600160a01b038116611d545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610507565b611d5d8161223e565b50565b600a6020528160005260406000208181548110611d7c57600080fd5b600091825260209091206006909102018054600182015460028301546003840180549396509194506001600160a01b03169291611db8906152fb565b80601f0160208091040260200160405190810160405280929190818152602001828054611de4906152fb565b8015611e315780601f10611e0657610100808354040283529160200191611e31565b820191906000526020600020905b815481529060010190602001808311611e1457829003601f168201915b50505050600483015460059093015491929160ff80821692506101009091041687565b6000816004811115611e7657634e487b7160e01b600052602160045260246000fd5b1480611ea157506004816004811115611e9f57634e487b7160e01b600052602160045260246000fd5b145b15611ecc578151602014611ec75760405162461bcd60e51b815260040161050790615049565b611eed565b8151601414611eed5760405162461bcd60e51b815260040161050790615049565b5050565b60008061271060075485611f059190615249565b611f0f9190615229565b905060095481611f1f919061519f565b8411611f6d5760405162461bcd60e51b815260206004820152601f60248201527f43434275726e526f757465723a20616d6f756e7420697320746f6f206c6f77006044820152606401610507565b600954600090611f7d8387615291565b611f879190615291565b6004805460055460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052929350919091169063a9059cbb90604401602060405180830381600087803b158015611fdf57600080fd5b505af1158015611ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201791906148fa565b506004805460095460405163a9059cbb60e01b81526001600160a01b0388811694820194909452602481019190915291169063a9059cbb90604401602060405180830381600087803b15801561206c57600080fd5b505af1158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a491906148fa565b50949350505050565b6120e96040805160e0810182526000808252602082018190529181018290526060808201526080810182905260a081018290529060c082015290565b868152602081018690523360408201526060810185905260c0810184600481111561212457634e487b7160e01b600052602160045260246000fd5b9081600481111561214557634e487b7160e01b600052602160045260246000fd5b905250600654612155908461519f565b6080820152600060a082018190526001600160a01b038381168252600a6020908152604080842080546001808201835591865294839020865160069096020194855582860151908501558401516002840180546001600160a01b0319169190931617909155606083015180518493926121d5926003850192910190614669565b50608082015160048281019190915560a083015160058301805460ff19169115159190911780825560c08501519261ff00199091169061010090849081111561222e57634e487b7160e01b600052602160045260246000fd5b0217905550505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806002868686866040516020016122aa9493929190614d2e565b60408051601f19818403018152908290526122c491614d81565b602060405180830381855afa1580156122e1573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906123049190614932565b9050600060028260405160200161231d91815260200190565b60408051601f198184030181529082905261233791614d81565b602060405180830381855afa158015612354573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906123779190614932565b905061238281612cec565b925050505b949350505050565b60025460405163d0a8973960e01b8152600481018590526000602482018190529182916001600160a01b039091169063d0a897399060440160206040518083038186803b1580156123df57600080fd5b505afa1580156123f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124179190614932565b90508034101561247b5760405162461bcd60e51b815260206004820152602960248201527f43434275726e526f757465723a2072656c617920666565206973206e6f7420736044820152681d59999a58da595b9d60ba1b6064820152608401610507565b6002546040516000916124d8916001600160a01b03909116906124a8908a908a908a908a90602401614dcc565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b17905284612d6e565b90506124ed336124e88434615291565b612d9e565b8080602001905181019061238291906148fa565b600080806125176125128683612ebc565b612ee0565b905062ffffff19808216141561256f5760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610507565b600061257b8286613016565b9050600061258882613134565b905061259381613158565b945061259e8161317a565b63ffffffff1693505050509250929050565b606060006125c66125c18583612ebc565b61319c565b905062ffffff1980821614156125ee5760405162461bcd60e51b815260040161050790614f3a565b60006125fa828561328d565b9050600061260782613387565b905061261862ffffff1982166133d8565b9695505050505050565b600061262d85613428565b60035460405163626885b560e11b81526001600160401b039290921692506000916001600160a01b039091169063c4d10b6a9061266e908890600401614e34565b60206040518083038186803b15801561268657600080fd5b505afa15801561269a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126be91906148b3565b6003546008549192506001600160a01b0316906333c99e1d9083906064906126e69087615249565b6126f09190615229565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b15801561274957600080fd5b505af115801561275d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061278191906148fa565b507fe184676c6adf968d3ce328b5c69512d9ab9a5155c6d6f0fd7b385003e30eea428184866064600854876127b69190615249565b6127c09190615229565b6127ca908761519f565b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390a1505050505050565b600080805b8451811015612c5857600085828151811061282f57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600a6000896001600160a01b03166001600160a01b03168152602001908152602001600020818154811061287d57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff161580156128ec57506001600160a01b0388166000908152600a6020526040902080548a9190839081106128d757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015410155b15612c4557612a978786848151811061291557634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60008c6001600160a01b03166001600160a01b03168152602001908152602001600020848154811061296157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301805461297d906152fb565b80601f01602080910402602001604051908101604052809291908181526020018280546129a9906152fb565b80156129f65780601f106129cb576101008083540402835291602001916129f6565b820191906000526020600020905b8154815290600101906020018083116129d957829003601f168201915b5050506001600160a01b038e166000908152600a6020526040902080549092508791508110612a3557634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050160019054906101000a900460ff166004811115612a7357634e487b7160e01b600052602160045260246000fd5b6004811115612a9257634e487b7160e01b600052602160045260246000fd5b6134c0565b6001600160401b0316925082600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208281548110612ae757634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600101541415612c45576001600160a01b0388166000908152600a6020526040902080546001919083908110612b3b57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201600501805460ff1916911515919091179055612b6884600161519f565b6001600160a01b0389166000818152600a602052604090208054929650909183908110612ba557634e487b7160e01b600052603260045260246000fd5b60009182526020808320600260069093020191909101546001600160a01b038c81168452600a9092526040909220805491909216917f2a19a8845319f6ff87c06307d29da11b94ed2d90a25046ed222f4bad3189d2449185908110612c1a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003018685604051612c3c93929190614e85565b60405180910390a35b5080612c5081615330565b915050612804565b505095945050505050565b6000612c6f84846136fb565b6001600160401b031690506000612c85856137ff565b90508115801590612c9f575080612c9d87600161519f565b145b15612cc2576000838152600b60205260409020805460ff19166001179055612ce4565b80861415612ce4576000838152600b60205260409020805460ff191660011790555b505050505050565b6000606081805b6020811015612d60578285612d0983601f615291565b60208110612d2757634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001612d3c929190614d9d565b60405160208183030381529060405292508080612d5890615330565b915050612cf3565b50506020015190505b919050565b6060612d9484848460405180606001604052806029815260200161538d6029913961382c565b90505b9392505050565b80471015612dee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610507565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e3b576040519150601f19603f3d011682016040523d82523d6000602084013e612e40565b606091505b5050905080612eb75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610507565b505050565b815160009060208401612ed764ffffffffff85168284613949565b95945050505050565b60008181612ef6815b62ffffff1984169061398d565b50601884901c6001600160601b0316612f165762ffffff195b925061300f565b6000612f23856000613a67565b9050601885901c6001600160601b03166001600160401b038216612f505762ffffff195b9450505061300f565b6000612f5b83613b96565b60ff16905060005b836001600160401b0316811015612fd757828210612f8c5762ffffff195b96505050505061300f565b6000612fac612f9b8486615291565b60055b62ffffff198c169190613bef565b9050612fb781613c23565b612fc1908461519f565b9250508080612fcf90615330565b915050612f63565b50818114612fef5762ffffff195b955050505061300f565b61300960065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b600082600661302481612ee9565b506000613032866000613a67565b6001600160401b03169050601886901c6001600160601b031681861061308d5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610507565b600061309883613b96565b60ff1690506000805b888110156130f0576130c76130b68486615291565b60055b62ffffff198d169190613bef565b91506130d282613c23565b6130dc908461519f565b92506130e960018261519f565b90506130a1565b506130fe612f9b8385615291565b9050600061310b82613c23565b9050613124838260045b62ffffff198e16929190613c77565b975050505050505b505092915050565b600081600461314281612ee9565b5061238762ffffff198516600060246003613c77565b600081600361316681612ee9565b5061238762ffffff19851660006020613ce7565b600081600361318881612ee9565b5061238762ffffff19851660206004613e40565b600081816131a981612ee9565b50601884901c6001600160601b03166131c65762ffffff19612f0f565b60006131d3856000613a67565b9050601885901c6001600160601b03166001600160401b0382166131fb5762ffffff19612f47565b600061320683613b96565b60ff16905060005b836001600160401b0316811015613271578282106132305762ffffff19612f81565b600061324661323f8486615291565b600e612f9e565b905061325181613f8a565b61325b908461519f565b925050808061326990615330565b91505061320e565b508181146132835762ffffff19612fe5565b613009600f612ff5565b600082600f61329b81612ee9565b5060006132a9866000613a67565b6001600160401b03169050601886901c6001600160601b03168186106133055760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610507565b600061331083613b96565b60ff1690506000805b8881101561335e5761333561332e8486615291565b600e6130b9565b915061334082613f8a565b61334a908461519f565b925061335760018261519f565b9050613319565b5061336c61323f8385615291565b9050600061337982613f8a565b90506131248382600d613115565b600081600d61339581612ee9565b5060006133a3856008613a67565b9050612ed76133b182613b96565b6133bc9060086151e2565b62ffffff1987169060ff166001600160401b0384166007613c77565b60606000806133f08460181c6001600160601b031690565b60405193508392506001600160601b031690506134178461341284602061519f565b613fd3565b508181016020016040529052919050565b6000806134386125c18483612ebc565b905062ffffff1980821614156134605760405162461bcd60e51b815260040161050790614f3a565b60008061346e836000613a67565b6001600160401b0316905060005b818110156134b75761348e848261328d565b92506134998361412b565b6134a390866151b7565b9450806134af81615330565b91505061347c565b50505050919050565b6000806134d06125c18783612ebc565b905062ffffff1980821614156134f85760405162461bcd60e51b815260040161050790614f3a565b6000613504828761328d565b9050600061351182613387565b9050600085600481111561353557634e487b7160e01b600052602160045260246000fd5b141561359a5761354e62ffffff19821660016020613ce7565b60405160200161356091815260200190565b6040516020818303038152906040528051906020012086805190602001201461358a576000613593565b6135938261412b565b93506136f0565b60018560048111156135bc57634e487b7160e01b600052602160045260246000fd5b14156135fb576135d362ffffff198216600361414d565b604051602001613560919060609190911b6bffffffffffffffffffffffff1916815260140190565b600285600481111561361d57634e487b7160e01b600052602160045260246000fd5b1415613634576135d362ffffff198216600261414d565b600385600481111561365657634e487b7160e01b600052602160045260246000fd5b141561366d576135d362ffffff198216600261414d565b600485600481111561368f57634e487b7160e01b600052602160045260246000fd5b14156136f0576136a862ffffff19821660026020613ce7565b6040516020016136ba91815260200190565b604051602081830303815290604052805190602001208680519060200120146136e45760006136ed565b6136ed8261412b565b93505b505050949350505050565b60008061370b6125c18583612ebc565b905062ffffff1980821614156137335760405162461bcd60e51b815260040161050790614f3a565b6000806000613743846000613a67565b6001600160401b0316905060005b818110156137f457613763858261328d565b935061376e84613387565b9250866040516020016137819190614d81565b604051602081830303815290604052805190602001206137a68462ffffff19166133d8565b6040516020016137b69190614d81565b6040516020818303038152906040528051906020012014156137e2576137db8461412b565b95506137f4565b806137ec81615330565b915050613751565b505050505092915050565b60008061380f6125c18483612ebc565b905061381c816000613a67565b6001600160401b03169392505050565b60608247101561388d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610507565b843b6138db5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610507565b600080866001600160a01b031685876040516138f79190614d81565b60006040518083038185875af1925050503d8060008114613934576040519150601f19603f3d011682016040523d82523d6000602084013e613939565b606091505b509150915061238282828661415b565b600080613956838561519f565b9050604051811115613966575060005b806139785762ffffff19915050612d97565b5050606092831b9190911790911b1760181b90565b60006139998383614194565b613a605760006139b86139ac8560d81c90565b64ffffffffff166141b7565b91505060006139cd8464ffffffffff166141b7565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016105079190614e34565b5090919050565b600080613a7c62ffffff198516846001614277565b905060fc8111613a8d579050611329565b8060fd1415613aeb57613ab3613aa484600161519f565b62ffffff198616906002613e40565b9150613abe82613b96565b60ff16600314613ae657613ae4613adf62ffffff1986168560036000613c77565b6142a7565b505b613b8f565b8060fe1415613b3d57613b11613b0284600161519f565b62ffffff198616906004613e40565b9150613b1c82613b96565b60ff16600514613ae657613ae4613adf62ffffff1986168560056000613c77565b8060ff1415613b8f57613b63613b5484600161519f565b62ffffff198616906008613e40565b9150613b6e82613b96565b60ff16600914613b8f5761312c613adf62ffffff1986168560096000613c77565b5092915050565b600060fc826001600160401b031611613bb157506001612d69565b61ffff826001600160401b031611613bcb57506003612d69565b63ffffffff826001600160401b031611613be757506005612d69565b506009612d69565b6000612d948484613c098760181c6001600160601b031690565b6001600160601b0316613c1c9190615291565b8585613c77565b6000816005613c3181612ee9565b506000613c3f856024613a67565b9050806001600160401b0316613c5482613b96565b60ff16613c61919061519f565b613c6c90602461519f565b612ed790600461519f565b600080613c8d8660781c6001600160601b031690565b6001600160601b03169050613ca186614324565b84613cac878461519f565b613cb6919061519f565b1115613cc95762ffffff19915050612387565b613cd3858261519f565b90506126188364ffffffffff168286613949565b600060ff8216613cf957506000612d97565b613d0c8460181c6001600160601b031690565b6001600160601b0316613d2260ff84168561519f565b1115613d8657613d6d613d3e8560781c6001600160601b031690565b6001600160601b0316613d5a8660181c6001600160601b031690565b6001600160601b0316858560ff16614365565b60405162461bcd60e51b81526004016105079190614e34565b60208260ff161115613e005760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610507565b600882026000613e198660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000612d94613e50858585613ce7565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b600081600e613f9881612ee9565b506000613fa6856008613a67565b9050806001600160401b0316613fbb82613b96565b60ff16613fc8919061519f565b612ed790600861519f565b600062ffffff19808416141561403c5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610507565b6140458361448f565b6140a55760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610507565b60006140ba8460181c6001600160601b031690565b6001600160601b0316905060006140da8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156140fa5760206060fd5b8285848460045afa506126186141108760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600d61413981612ee9565b5061238762ffffff19851660006008613e40565b6000612d9783836014614277565b6060831561416a575081612d97565b82511561417a5782518084602001fd5b8160405162461bcd60e51b81526004016105079190614e34565b60008164ffffffffff166141a88460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156142155760006141d6826008615268565b60ff1685901c90506141e7816144cd565b61ffff16841793508160ff1660101461420257601084901b93505b5061420e6001826152a8565b90506141bd565b50600f5b60ff8160ff161015614271576000614232826008615268565b60ff1685901c9050614243816144cd565b61ffff16831792508160ff1660001461425e57601083901b92505b5061426a6001826152a8565b9050614219565b50915091565b60006142848260206152a8565b61428f906008615268565b60ff1661429d858585613ce7565b901c949350505050565b606060006142d16142cc62ffffff19851683601887901c6001600160601b0316614277565b6141b7565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01613a35565b60006143398260181c6001600160601b031690565b61434c8360781c6001600160601b031690565b6143569190615207565b6001600160601b031692915050565b60606000614372866141b7565b9150506000614380866141b7565b915050600061438e866141b7565b915050600061439c866141b7565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b600061449b8260d81c90565b64ffffffffff1664ffffffffff14156144b657506000612d69565b60006144c183614324565b60405110199392505050565b60006144df60048360ff16901c6144fd565b60ff161760081b62ffff00166144f4826144fd565b60ff1617919050565b600060f08083179060ff82161415614519576030915050612d69565b8060ff1660f1141561452f576031915050612d69565b8060ff1660f21415614545576032915050612d69565b8060ff1660f3141561455b576033915050612d69565b8060ff1660f41415614571576034915050612d69565b8060ff1660f51415614587576035915050612d69565b8060ff1660f6141561459d576036915050612d69565b8060ff1660f714156145b3576037915050612d69565b8060ff1660f814156145c9576038915050612d69565b8060ff1660f914156145df576039915050612d69565b8060ff1660fa14156145f5576061915050612d69565b8060ff1660fb141561460b576062915050612d69565b8060ff1660fc1415614621576063915050612d69565b8060ff1660fd1415614637576064915050612d69565b8060ff1660fe141561464d576065915050612d69565b8060ff1660ff1415614663576066915050612d69565b50919050565b828054614675906152fb565b90600052602060002090601f01602090048101928261469757600085556146dd565b82601f106146b057805160ff19168380011785556146dd565b828001600101855582156146dd579182015b828111156146dd5782518255916020019190600101906146c2565b506146e99291506146ed565b5090565b5b808211156146e957600081556001016146ee565b600082601f830112614712578081fd5b813560206147276147228361517c565b61514c565b8281528181019085830183850287018401881015614743578586fd5b855b8581101561476857614756826147cf565b84529284019290840190600101614745565b5090979650505050505050565b600082601f830112614785578081fd5b813560206147956147228361517c565b82815281810190858301838502870184018810156147b1578586fd5b855b85811015614768578135845292840192908401906001016147b3565b80356001600160e01b031981168114612d6957600080fd5b60008083601f8401126147f8578182fd5b5081356001600160401b0381111561480e578182fd5b60208301915083602082850101111561482657600080fd5b9250929050565b600082601f83011261483d578081fd5b81356001600160401b0381111561485657614856615361565b614869601f8201601f191660200161514c565b81815284602083860101111561487d578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156148a8578081fd5b8135612d9781615377565b6000602082840312156148c4578081fd5b8151612d9781615377565b600080604083850312156148e1578081fd5b82356148ec81615377565b946020939093013593505050565b60006020828403121561490b578081fd5b81518015158114612d97578182fd5b60006020828403121561492b578081fd5b5035919050565b600060208284031215614943578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215614969578586fd5b6149728b6147cf565b995060208b01356001600160401b038082111561498d578788fd5b6149998e838f0161482d565b9a5060408d01359150808211156149ae578788fd5b6149ba8e838f0161482d565b99506149c860608e016147cf565b985060808d0135975060a08d01359150808211156149e4578687fd5b6149f08e838f0161482d565b965060c08d0135955060e08d0135915080821115614a0c578485fd5b614a188e838f0161482d565b94506101008d0135915080821115614a2e578384fd5b614a3a8e838f01614775565b93506101208d0135915080821115614a50578283fd5b50614a5d8d828e01614775565b9150509295989b9194979a5092959850565b600080600060408486031215614a83578283fd5b83356001600160401b0380821115614a99578485fd5b614aa5878388016147e7565b90955093506020860135915080821115614abd578283fd5b50614aca86828701614775565b9150509250925092565b60008060008060008060008060006101208a8c031215614af2578283fd5b89356001600160401b0380821115614b08578485fd5b614b148d838e0161482d565b9a5060208c0135915080821115614b29578485fd5b614b358d838e01614702565b995060408c0135915080821115614b4a578485fd5b614b568d838e0161482d565b985060608c0135915080821115614b6b578485fd5b614b778d838e0161482d565b975060808c0135915080821115614b8c578485fd5b614b988d838e0161482d565b965060a08c0135915080821115614bad578485fd5b614bb98d838e0161482d565b955060c08c0135915080821115614bce578485fd5b614bda8d838e01614702565b945060e08c0135915080821115614bef578384fd5b614bfb8d838e0161482d565b93506101008c0135915080821115614c11578283fd5b50614c1e8c828d01614775565b9150509295985092959850929598565b600080600080600060808688031215614c45578283fd5b8535945060208601356001600160401b0380821115614c62578485fd5b614c6e89838a0161482d565b95506040880135915060058210614c83578485fd5b90935060608701359080821115614c98578283fd5b50614ca5888289016147e7565b969995985093965092949392505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452614cf88160208601602086016152cb565b601f01601f19169290920160200192915050565b60058110614d2a57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b80871683528551614d50816004860160208a016152cb565b855190840190614d67816004840160208a016152cb565b919094169301600481019390935250506008019392505050565b60008251614d938184602087016152cb565b9190910192915050565b60008351614daf8184602088016152cb565b6001600160f81b0319939093169190920190815260010192915050565b600085825284602083015260806040830152614deb6080830185614ce0565b905082606083015295945050505050565b600060208252612d94602083018486614cb6565b600060408252614e24604083018587614cb6565b9050826020830152949350505050565b600060208252612d976020830184614ce0565b600060a08252614e5a60a0830188614ce0565b9050614e696020830187614d0c565b8460408301528360608301528260808301529695505050505050565b606081528354600090819060028104600180831680614ea557607f831692505b6020808410821415614ec557634e487b7160e01b87526022600452602487fd5b6060880184905260808801828015614ee45760018114614ef557614f1f565b60ff19871682528282019750614f1f565b60008d815260209020895b87811015614f1957815484820152908601908401614f00565b83019850505b50508701989098525050506040909201929092529392505050565b6020808252601b908201527f426974636f696e48656c7065723a20766f7574206973206e756c6c0000000000604082015260600190565b6020808252601d908201527f43434275726e526f757465723a2061646472657373206973207a65726f000000604082015260600190565b60208082526030908201527f43434275726e526f757465723a20676976656e206c6f636b696e67207363726960408201526f383a1034b9903737ba103637b1b5b2b960811b606082015260800190565b60208082526031908201527f43434275726e526f757465723a207061796261636b20646561646c696e652068604082015270185cc81b9bdd081c185cdcd959081e595d607a1b606082015260800190565b60208082526021908201527f43434275726e526f757465723a20696e76616c696420757365722073637269706040820152601d60fa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600088825287602083015260018060a01b038716604083015260e0606083015261512360e0830187614ce0565b905084608083015283151560a083015261514060c0830184614d0c565b98975050505050505050565b604051601f8201601f191681016001600160401b038111828210171561517457615174615361565b604052919050565b60006001600160401b0382111561519557615195615361565b5060209081020190565b600082198211156151b2576151b261534b565b500190565b60006001600160401b038083168185168083038211156151d9576151d961534b565b01949350505050565b600060ff821660ff84168060ff038211156151ff576151ff61534b565b019392505050565b60006001600160601b038083168185168083038211156151d9576151d961534b565b60008261524457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156152635761526361534b565b500290565b600060ff821660ff84168160ff04811182151516156152895761528961534b565b029392505050565b6000828210156152a3576152a361534b565b500390565b600060ff821660ff8416808210156152c2576152c261534b565b90039392505050565b60005b838110156152e65781810151838201526020016152ce565b838111156152f5576000848401525b50505050565b60028104600182168061530f57607f821691505b6020821081141561466357634e487b7160e01b600052602260045260246000fd5b60006000198214156153445761534461534b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d5d57600080fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220dc251c77ed0de0474a42efb24e2519dfa6cc73e0ba51de6ed25498d7c031f22664736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
        "details": "Makes isTransferred flag true for the paid requests",
        "params": {
          "_blockNumber": "Height of the block containing the burn transaction",
          "_burnReqIndexes": "Indexes of requests that locker wants to provide proof for them",
          "_index": "Index of transaction containing the burn transaction in the block",
          "_intermediateNodes": "Merkle inclusion proof for transaction containing the burn transaction",
          "_lockerLockingScript": "Locker's locking script (on Bitcoin) that this burn request belongs to",
          "_locktime": "Lock time of the transaction containing the burn transaction",
          "_version": "Version of the transaction containing the burn transaction",
          "_vin": "Inputs of the transaction containing the burn transaction",
          "_vout": "Outputs of the transaction containing the burn transaction",
          "_voutIndexes": "Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])"
        },
        "returns": {
          "_0": ""
        }
      },
      "ccBurn(uint256,bytes,uint8,bytes)": {
        "details": "After submitting the burn request, lockers have a limited time                                     to send BTC and provide burn proof",
        "params": {
          "_amount": "Amount of teleBTC that user wants to burn",
          "_lockerLockingScript": "Locking script of locker that should execute the burn request",
          "_userScript": "User's script"
        },
        "returns": {
          "_burntAmount": "               Amount of teleBTC that user will receive (after reducing fees)"
        }
      },
      "constructor": {
        "params": {
          "_bitcoinFee": "Fee of submitting a transaction on Bitcoin",
          "_lockers": "Address of lockers contract",
          "_protocolPercentageFee": "Percentage of tokens that user pays to protocol for burning",
          "_relay": "Address of relay contract",
          "_slasherPercentageReward": "Percentage of tokens that slasher receives after slashing a locker",
          "_transferDeadline": "Dealine of sending BTC to user (aster submitting a burn request)",
          "_treasury": "Address of the treasury of the protocol"
        }
      },
      "disputeBurn(bytes,uint256[])": {
        "params": {
          "_indices": "Array of indices of the requests that their deadline has passed",
          "_lockerLockingScript": "locker's locking script that the unpaid request belongs to"
        },
        "returns": {
          "_0": "True if dispute is successfull"
        }
      },
      "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
        "details": "Input tx is a malicious tx which shows that locker spent BTC                                         Output tx is the tx that was spent by locker in input tx                                         Output tx --> money goes to locker --> Input tx --> locker steals the funds",
        "params": {
          "_indexesAndBlockNumbers": "Indices of malicious input in input tx, input tx in block and block number of input tx",
          "_inputIntermediateNodes": "Merkle inclusion proof for the malicious transaction",
          "_inputVin": "Inputs of the malicious transaction",
          "_inputVout": "Outputs of the malicious transaction",
          "_lockerLockingScript": "Suspicious locker's locking script",
          "_locktimes": "Locktimes of input and output tx",
          "_outputVin": "Inputs of the spent transaction",
          "_outputVout": "Outputs of the spent transaction",
          "_versions": "Versions of input and output tx"
        },
        "returns": {
          "_0": "True if dispute is successfull"
        }
      },
      "isTransferred(address,uint256)": {
        "params": {
          "_index": "The index of the request for the locker",
          "_lockerTargetAddress": "Locker's address on the target chain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBitcoinFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_bitcoinFee": "The new Bitcoin transaction fee"
        }
      },
      "setLockers(address)": {
        "details": "Only owner can call this",
        "params": {
          "_lockers": "The new lockers contract address"
        }
      },
      "setProtocolPercentageFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_protocolPercentageFee": "The new protocol percentage fee"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "The new relay contract address"
        }
      },
      "setSlasherPercentageReward(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slasherPercentageReward": "The new slasher percentage reward"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new teleBTC contract address"
        }
      },
      "setTransferDeadline(uint256)": {
        "details": "Only owner can call this                                     Deadline shoudl be greater than relay finalization parameter",
        "params": {
          "_transferDeadline": "The new transfer deadline"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call this",
        "params": {
          "_treasury": "The new treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CCBurn(address,bytes,uint8,uint256,uint256,address,uint256,uint256)": {
        "notice": "Emits when a burn request gets submitted"
      },
      "LockerDispute(address,uint256,bytes32,uint256)": {
        "notice": "Emits when a locker gets slashed for withdrawing BTC without proper reason"
      },
      "PaidCCBurn(address,bytes,uint256,address,uint256)": {
        "notice": "Emits when a burn proof is provided"
      }
    },
    "kind": "user",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
        "notice": "Checks the correctness of burn proof"
      },
      "ccBurn(uint256,bytes,uint8,bytes)": {
        "notice": "Burns teleBTC and records the burn request"
      },
      "constructor": {
        "notice": "Handles cross-chain burn requests"
      },
      "disputeBurn(bytes,uint256[])": {
        "notice": "Slashes a locker if she did not paid a cc burn request before its deadline"
      },
      "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
        "notice": "Slashes a locker if they issue a tx that doesn't match any burn request"
      },
      "isTransferred(address,uint256)": {
        "notice": "Shows if a burn request has been done or not"
      },
      "setBitcoinFee(uint256)": {
        "notice": "Changes Bitcoin transaction fee"
      },
      "setLockers(address)": {
        "notice": "Changes lockers contract address"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Changes protocol percentage fee for burning tokens"
      },
      "setRelay(address)": {
        "notice": "Changes relay contract address"
      },
      "setSlasherPercentageReward(uint256)": {
        "notice": "Changes slasher percentage reward for disputing lockers"
      },
      "setTeleBTC(address)": {
        "notice": "Changes teleBTC contract address"
      },
      "setTransferDeadline(uint256)": {
        "notice": "Changes deadline of executing burn requests"
      },
      "setTreasury(address)": {
        "notice": "Changes protocol treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1634,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19772,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "relay",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 19775,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "lockers",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 19778,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "teleBTC",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19781,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 19784,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "transferDeadline",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 19787,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19790,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "slasherPercentageReward",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 19793,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "bitcoinFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 19799,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "burnRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(burnRequest)24117_storage)dyn_storage)"
      },
      {
        "astId": 19804,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "isUsedAsBurnProof",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(burnRequest)24117_storage)dyn_storage": {
        "base": "t_struct(burnRequest)24117_storage",
        "encoding": "dynamic_array",
        "label": "struct ICCBurnRouter.burnRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)24959": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(burnRequest)24117_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICCBurnRouter.burnRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(burnRequest)24117_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(burnRequest)24117_storage": {
        "encoding": "inplace",
        "label": "struct ICCBurnRouter.burnRequest",
        "members": [
          {
            "astId": 24103,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24105,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "burntAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24107,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 24109,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "userScript",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 24111,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24113,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "isTransferred",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 24116,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "scriptType",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(ScriptTypes)24959"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}