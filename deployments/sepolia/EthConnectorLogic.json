{
  "address": "0x423A067699ccF73CF1fE62ef93abecca48a67863",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAcross",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAcross",
          "type": "address"
        }
      ],
      "name": "AcrossUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sourceChainInputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MsgSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTargetChainConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTargetChainConnector",
          "type": "address"
        }
      ],
      "name": "TargetChainConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleBtc",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleBtc",
          "type": "address"
        }
      ],
      "name": "TargetChainTeleBTCUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldWrappedNativeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "WrappedNativeTokenUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "across",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetChainTeleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_across",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currChainId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_across",
          "type": "address"
        }
      ],
      "name": "setAcross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currChainId",
          "type": "uint256"
        }
      ],
      "name": "setCurrChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetChainConnectorProxy",
          "type": "address"
        }
      ],
      "name": "setTargetChainConnectorProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_targetChainTeleBTC",
          "type": "address"
        }
      ],
      "name": "setTargetChainTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "int64",
          "name": "_relayerFeePercentage",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "_thirdParty",
          "type": "uint256"
        }
      ],
      "name": "swapAndUnwrap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetChainConnectorProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetChainTeleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniqueCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x28b6bc87916dc4be31aa4f1ded344812a2af698c400e30548da67908fe21bf30",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0x423A067699ccF73CF1fE62ef93abecca48a67863",
    "transactionIndex": 50,
    "gasUsed": "1243595",
    "logsBloom": "0x
    "blockHash": "0x073f19f642621a151508a8e20e45bf81f051048e4c62f04f1ce2785e6211c1f3",
    "transactionHash": "0x28b6bc87916dc4be31aa4f1ded344812a2af698c400e30548da67908fe21bf30",
    "logs": [],
    "blockNumber": 5858408,
    "cumulativeGasUsed": "9156494",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "204a6029cbd8bb9a68fc02f623fdb774",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAcross\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAcross\",\"type\":\"address\"}],\"name\":\"AcrossUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainInputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MsgSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTargetChainConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTargetChainConnector\",\"type\":\"address\"}],\"name\":\"TargetChainConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBtc\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBtc\",\"type\":\"address\"}],\"name\":\"TargetChainTeleBTCUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWrappedNativeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWrappedNativeToken\",\"type\":\"address\"}],\"name\":\"WrappedNativeTokenUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"across\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetChainTeleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_across\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currChainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_across\",\"type\":\"address\"}],\"name\":\"setAcross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currChainId\",\"type\":\"uint256\"}],\"name\":\"setCurrChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetChainConnectorProxy\",\"type\":\"address\"}],\"name\":\"setTargetChainConnectorProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetChainTeleBTC\",\"type\":\"address\"}],\"name\":\"setTargetChainTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"int64\",\"name\":\"_relayerFeePercentage\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_thirdParty\",\"type\":\"uint256\"}],\"name\":\"swapAndUnwrap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetChainConnectorProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetChainTeleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address,address,uint256)\":{\"details\":\"Only owner can call this\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"swapAndUnwrap(address,address,uint256[],address[],bytes,uint8,bytes,int64,uint256)\":{\"details\":\"To find teleBTCAmount, _relayerFeePercentage should be reduced from the inputTokenAmount\",\"params\":{\"_amounts\":\"[inputTokenAmount, teleBTCAmount]\",\"_exchangeConnector\":\"Address of exchange connector to be used\",\"_lockerLockingScript\":\"of locker that should execute the burn request\",\"_path\":\"of exchanging inputToken to teleBTC (these are Polygon token addresses, so _path[0] != _token)\",\"_relayerFeePercentage\":\"Fee percentage for relayer\",\"_scriptType\":\"User script type\",\"_thirdParty\":\"Id of third party\",\"_token\":\"Address of input token (on the current chain)\",\"_userScript\":\"User script hash\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address,address,uint256)\":{\"notice\":\"Withdraws tokens in the emergency case\"},\"setAcross(address)\":{\"notice\":\"Setter for Across\"},\"setTargetChainConnectorProxy(address)\":{\"notice\":\"Setter for TargetChainConnectorProxy\"},\"setTargetChainTeleBTC(address)\":{\"notice\":\"Setter for TargetChainTeleBTC\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Setter for WrappedNativeToken\"},\"swapAndUnwrap(address,address,uint256[],address[],bytes,uint8,bytes,int64,uint256)\":{\"notice\":\"Requests exchanging token for BTC\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/EthConnectorLogic.sol\":\"EthConnectorLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/routers/EthConnectorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./EthConnectorStorage.sol\\\";\\nimport \\\"./interfaces/IEthConnector.sol\\\";\\n\\ncontract EthConnectorLogic is\\n    IEthConnector,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    EthConnectorStorage\\n{\\n    error ZeroAddress();\\n\\n    modifier nonZeroAddress(address _address) {\\n        if (_address == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _targetChainTeleBTC,\\n        address _across,\\n        address _wrappedNativeToken,\\n        uint256 _targetChainId,\\n        uint256 _currChainId\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _setTargetChainTeleBTC(_targetChainTeleBTC);\\n        _setAcross(_across);\\n        _setWrappedNativeToken(_wrappedNativeToken);\\n        targetChainId = _targetChainId;\\n        currChainId = _currChainId;\\n        uniqueCounter = 0;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Setter for Across\\n    function setAcross(address _across) external override onlyOwner {\\n        _setAcross(_across);\\n    }\\n\\n    /// @notice Setter for TargetChainConnectorProxy\\n    function setTargetChainConnectorProxy(\\n        address _targetChainConnectorProxy\\n    ) external override onlyOwner {\\n        _setTargetChainConnectorProxy(_targetChainConnectorProxy);\\n    }\\n\\n    /// @notice Setter for TargetChainTeleBTC\\n    function setTargetChainTeleBTC(\\n        address _targetChainTeleBTC\\n    ) external override onlyOwner {\\n        _setTargetChainTeleBTC(_targetChainTeleBTC);\\n    }\\n\\n    /// @notice Setter for WrappedNativeToken\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) external override onlyOwner {\\n        _setWrappedNativeToken(_wrappedNativeToken);\\n    }\\n\\n    // TODO: Remove this function\\n    function setCurrChainId(\\n        uint256 _currChainId\\n    ) external onlyOwner {\\n        currChainId = _currChainId;\\n    }\\n\\n    /// @notice Withdraws tokens in the emergency case\\n    /// @dev Only owner can call this\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        if (_token == ETH_ADDR) _to.call{value: _amount}(\\\"\\\");\\n        else IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n    /// @notice Requests exchanging token for BTC\\n    /// @dev To find teleBTCAmount, _relayerFeePercentage should be reduced from the inputTokenAmount\\n    /// @param _token Address of input token (on the current chain)\\n    /// @param _exchangeConnector Address of exchange connector to be used\\n    /// @param _amounts [inputTokenAmount, teleBTCAmount]\\n    /// @param _path of exchanging inputToken to teleBTC (these are Polygon token addresses, so _path[0] != _token)\\n    /// @param _userScript User script hash\\n    /// @param _scriptType User script type\\n    /// @param _lockerLockingScript\\tof locker that should execute the burn request\\n    /// @param _relayerFeePercentage Fee percentage for relayer\\n    /// @param _thirdParty Id of third party\\n    function swapAndUnwrap(\\n        address _token,\\n        address _exchangeConnector,\\n        uint256[] calldata _amounts,\\n        address[] calldata _path,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        int64 _relayerFeePercentage,\\n        uint256 _thirdParty\\n    ) external payable override nonReentrant {\\n        _checkRequest(_amounts, _path);\\n\\n        // Sends msg to Polygon\\n\\n        bytes memory message = abi.encode(\\n            \\\"swapAndUnwrap\\\",\\n            uniqueCounter,\\n            currChainId,\\n            _msgSender(),\\n            _exchangeConnector,\\n            _amounts[1], // Min output amount to receive\\n            _path,\\n            _userScript,\\n            _scriptType,\\n            _lockerLockingScript,\\n            _thirdParty\\n        );\\n\\n        emit MsgSent(uniqueCounter, message, _token, _amounts[0]);\\n\\n        uniqueCounter++;\\n\\n        _sendMsgUsingAcross(\\n            _token,\\n            _amounts[0],\\n            message,\\n            _relayerFeePercentage\\n        );\\n    }\\n\\n    /// @notice Sends tokens and message using Across bridge\\n    function _sendMsgUsingAcross(\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _message,\\n        int64 _relayerFeePercentage\\n    ) internal {\\n        if (_token == ETH_ADDR) {\\n            require(msg.value == _amount, \\\"EthManagerLogic: wrong value\\\");\\n            _token = wrappedNativeToken;\\n        } else {\\n            require(msg.value == 0, \\\"EthManagerLogic: wrong value\\\");\\n\\n            // Transfers tokens from user to contract\\n            IERC20(_token).transferFrom(_msgSender(), address(this), _amount);\\n\\n            IERC20(_token).approve(across, _amount);\\n        }\\n\\n        // // Calling across for transferring token and msg\\n        // Address.functionCallWithValue(\\n        //     across,\\n        //     abi.encodeWithSignature(\\n        //         \\\"deposit(address,address,uint256,uint256,int64,uint32,bytes,uint256)\\\",\\n        //         targetChainConnectorProxy,\\n        //         _token,\\n        //         _amount,\\n        //         targetChainId,\\n        //         _relayerFeePercentage,\\n        //         uint32(block.timestamp),\\n        //         _message,\\n        //         115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        //     ),\\n        //     msg.value\\n        // );\\n    }\\n\\n    /// @notice Checks validity of request\\n    /// @dev Token should be acceptable, input amount should be >= min,\\n    ///      last token of path should be teleBTC, and amounts array length should be 2\\n    function _checkRequest(\\n        uint256[] calldata _amounts,\\n        address[] calldata _path\\n    ) internal view {\\n        require(\\n            _path[_path.length - 1] == targetChainTeleBTC,\\n            \\\"EthManagerLogic: invalid path\\\"\\n        );\\n\\n        require(_amounts.length == 2, \\\"EthManagerLogic: wrong amounts\\\");\\n    }\\n\\n    function _setAcross(address _across) private nonZeroAddress(_across) {\\n        emit AcrossUpdated(across, _across);\\n        across = _across;\\n    }\\n\\n    function _setTargetChainConnectorProxy(\\n        address _targetChainConnectorProxy\\n    ) private nonZeroAddress(_targetChainConnectorProxy) {\\n        emit TargetChainConnectorUpdated(\\n            targetChainConnectorProxy,\\n            _targetChainConnectorProxy\\n        );\\n\\n        targetChainConnectorProxy = _targetChainConnectorProxy;\\n    }\\n\\n    function _setTargetChainTeleBTC(\\n        address _targetChainTeleBTC\\n    ) private nonZeroAddress(_targetChainTeleBTC) {\\n        emit TargetChainTeleBTCUpdated(targetChainTeleBTC, _targetChainTeleBTC);\\n        targetChainTeleBTC = _targetChainTeleBTC;\\n    }\\n\\n    function _setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) private nonZeroAddress(_wrappedNativeToken) {\\n        emit WrappedNativeTokenUpdated(wrappedNativeToken, _wrappedNativeToken);\\n\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n}\\n\",\"keccak256\":\"0x40df3a56a183d0f55218a0f9e4d379f6a74fa736fbec6080157865cb15bd8032\",\"license\":\"MIT\"},\"contracts/routers/EthConnectorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IEthConnector.sol\\\";\\n\\nabstract contract EthConnectorStorage is IEthConnector {\\n    \\n    uint constant public ONE_HUNDRED_PERCENT = 10000;\\n    address constant public ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // ^ Native token representative\\n\\n    address public across; // Across bridge\\n    address public targetChainConnectorProxy;\\n    address public targetChainTeleBTC;\\n    uint public targetChainId;\\n    address public wrappedNativeToken;\\n    uint public uniqueCounter;\\n    uint256 public currChainId;\\n}\",\"keccak256\":\"0xe648e371106707ec3363fa61e61f7e5a2cfe0e8ede7f2f844a40bfdcad451180\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IEthConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IEthConnector {\\n    // Events\\n\\n    event MsgSent(\\n        uint256 uniqueCounter,\\n        bytes data,\\n        address sourceChainInputToken,\\n        uint256 amount\\n    );\\n\\n    event AcrossUpdated(address oldAcross, address newAcross);\\n\\n    event TargetChainConnectorUpdated(\\n        address oldTargetChainConnector,\\n        address newTargetChainConnector\\n    );\\n\\n    event TargetChainTeleBTCUpdated(\\n        address oldTeleBtc,\\n        address newTeleBtc\\n    );\\n\\n    event WrappedNativeTokenUpdated(\\n        address oldWrappedNativeToken,\\n        address newWrappedNativeToken\\n    );\\n\\n    function setAcross(address _across) external;\\n\\n    function setTargetChainConnectorProxy(address _targetChainConnector) external;\\n\\n    function setTargetChainTeleBTC(address _targetChainTeleBTC) external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function swapAndUnwrap(\\n        address _token,\\n        address _exchangeConnector,\\n        uint256[] calldata _amounts,\\n        address[] calldata _path,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        int64 _relayerFeePercentage,\\n        uint256 _thirdParty\\n    ) external payable;\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xde1d1120d5dcd1ec6da7e40b201f6d529943546c34dc132ce37e94055abed760\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611586806100206000396000f3fe6080604052600436106100fe5760003560e01c8063146ffb261461010a57806317fcb39b14610133578063292c1d921461016b5780634d5f71bb1461018b57806357d95b87146101ab5780635c975abb146101cd57806361be10f2146101f0578063715018a614610210578063754d1461146102255780637753f47b146102455780638da5cb5b1461026d578063a197cbe614610282578063a6b63eb8146102a2578063c4a86b31146102c2578063d4dfc8c3146102e2578063d83f0fc5146102f8578063da058ae31461030e578063dd0081c71461032e578063e11b22ee14610344578063e63ea40814610357578063f2fde38b1461037757600080fd5b3661010557005b600080fd5b34801561011657600080fd5b5061012060cc5481565b6040519081526020015b60405180910390f35b34801561013f57600080fd5b5060cd54610153906001600160a01b031681565b6040516001600160a01b03909116815260200161012a565b34801561017757600080fd5b5060c954610153906001600160a01b031681565b34801561019757600080fd5b5060ca54610153906001600160a01b031681565b3480156101b757600080fd5b506101cb6101c636600461124d565b610397565b005b3480156101d957600080fd5b5060975460ff16604051901515815260200161012a565b3480156101fc57600080fd5b506101cb61020b366004611061565b6103a4565b34801561021c57600080fd5b506101cb6103b8565b34801561023157600080fd5b506101cb610240366004611061565b6103cc565b34801561025157600080fd5b5061015373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561027957600080fd5b506101536103dd565b34801561028e57600080fd5b506101cb61029d366004611061565b6103ec565b3480156102ae57600080fd5b506101cb6102bd366004611082565b6103fd565b3480156102ce57600080fd5b5060cb54610153906001600160a01b031681565b3480156102ee57600080fd5b5061012060ce5481565b34801561030457600080fd5b5061012060cf5481565b34801561031a57600080fd5b506101cb610329366004611061565b610552565b34801561033a57600080fd5b5061012061271081565b6101cb6103523660046110d6565b610563565b34801561036357600080fd5b506101cb6103723660046111f2565b6106a9565b34801561038357600080fd5b506101cb610392366004611061565b6107a5565b61039f61081b565b60cf55565b6103ac61081b565b6103b58161087a565b50565b6103c061081b565b6103ca600061090c565b565b6103d461081b565b6103b58161095e565b6033546001600160a01b031690565b6103f461081b565b6103b5816109f0565b600054610100900460ff161580801561041d5750600054600160ff909116105b806104375750303b158015610437575060005460ff166001145b61049f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156104c2576000805461ff0019166101001790555b6104ca610a82565b6104d2610ab1565b6104da610ae0565b6104e38661095e565b6104ec8561087a565b6104f584610b0f565b60cc83905560cf829055600060ce55801561054a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b61055a61081b565b6103b581610b0f565b61056b610ba1565b6105778a8a8a8a610bfb565b600060ce5460cf546105863390565b8e8e8e60018181106105a857634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8d8d8d8d8c6040516020016105d19c9b9a99989796959493929190611381565b60405160208183030381529060405290507fe69fe079b662ff18874cc35b6a12c636af0eca0fd56cbd0cee7ddec918aea82760ce54828f8e8e600081811061062957634e487b7160e01b600052603260045260246000fd5b9050602002013560405161064094939291906114bd565b60405180910390a160ce805490600061065883611509565b91905055506106908d8c8c600081811061068257634e487b7160e01b600052603260045260246000fd5b905060200201358386610cec565b5061069b6001606555565b505050505050505050505050565b6106b161081b565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561071f576040516001600160a01b038316908290600081818185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054a565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061074d9085908590600401611368565b602060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f919061122d565b50505050565b6107ad61081b565b6001600160a01b0381166108125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610496565b6103b58161090c565b336108246103dd565b6001600160a01b0316146103ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610496565b806001600160a01b0381166108a25760405163d92e233d60e01b815260040160405180910390fd5b60c9546040517f06e5f2ca1234f717a2031f662608c02182d4f8bdc3dab013ec4c04eb97553132916108e1916001600160a01b0390911690859061134e565b60405180910390a15060c980546001600160a01b0319166001600160a01b0392909216919091179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b0381166109865760405163d92e233d60e01b815260040160405180910390fd5b60cb546040517f37b4bc62091d0acd3300990bd241557cbc8040fde4cf701b91d8bac7a69e0160916109c5916001600160a01b0390911690859061134e565b60405180910390a15060cb80546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116610a185760405163d92e233d60e01b815260040160405180910390fd5b60ca546040517fbac4f45eeeeb3c9688d046eddcdd28783777a2aa7beffcdf0acb76487d79636491610a57916001600160a01b0390911690859061134e565b60405180910390a15060ca80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610aa95760405162461bcd60e51b815260040161049690611472565b6103ca610e8c565b600054610100900460ff16610ad85760405162461bcd60e51b815260040161049690611472565b6103ca610ebc565b600054610100900460ff16610b075760405162461bcd60e51b815260040161049690611472565b6103ca610ee3565b806001600160a01b038116610b375760405163d92e233d60e01b815260040160405180910390fd5b60cd546040517fffd9582901c27177dbd18194ae8017f10d8b21f98a0da2ea5197e0b20dc13d7091610b76916001600160a01b0390911690859061134e565b60405180910390a15060cd80546001600160a01b0319166001600160a01b0392909216919091179055565b60026065541415610bf45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b6002606555565b60cb546001600160a01b03168282610c146001826114f2565b818110610c3157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c469190611061565b6001600160a01b031614610c9c5760405162461bcd60e51b815260206004820152601d60248201527f4574684d616e616765724c6f6769633a20696e76616c696420706174680000006044820152606401610496565b6002831461079f5760405162461bcd60e51b815260206004820152601e60248201527f4574684d616e616765724c6f6769633a2077726f6e6720616d6f756e747300006044820152606401610496565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610d4357823414610d305760405162461bcd60e51b81526004016104969061143c565b60cd546001600160a01b0316935061079f565b3415610d615760405162461bcd60e51b81526004016104969061143c565b6001600160a01b0384166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df7919061122d565b5060c95460405163095ea7b360e01b81526001600160a01b038681169263095ea7b392610e2c92909116908790600401611368565b602060405180830381600087803b158015610e4657600080fd5b505af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e919061122d565b5050505050565b6001606555565b600054610100900460ff16610eb35760405162461bcd60e51b815260040161049690611472565b6103ca3361090c565b600054610100900460ff16610e855760405162461bcd60e51b815260040161049690611472565b600054610100900460ff16610f0a5760405162461bcd60e51b815260040161049690611472565b6097805460ff19169055565b80356001600160a01b0381168114610f2d57600080fd5b919050565b60008083601f840112610f43578081fd5b5081356001600160401b03811115610f59578182fd5b6020830191508360208260051b8501011115610f7457600080fd5b9250929050565b60008083601f840112610f8c578182fd5b5081356001600160401b03811115610fa2578182fd5b602083019150836020828501011115610f7457600080fd5b600082601f830112610fca578081fd5b81356001600160401b0380821115610fe457610fe461153a565b604051601f8301601f19908116603f0116810190828211818310171561100c5761100c61153a565b81604052838152866020858801011115611024578485fd5b8360208701602083013792830160200193909352509392505050565b803560068110610f2d57600080fd5b8035600781900b8114610f2d57600080fd5b600060208284031215611072578081fd5b61107b82610f16565b9392505050565b600080600080600060a08688031215611099578081fd5b6110a286610f16565b94506110b060208701610f16565b93506110be60408701610f16565b94979396509394606081013594506080013592915050565b6000806000806000806000806000806000806101208d8f0312156110f8578687fd5b6111018d610f16565b9b5061110f60208e01610f16565b9a506001600160401b0360408e01351115611128578687fd5b6111388e60408f01358f01610f32565b909a5098506001600160401b0360608e01351115611154578687fd5b6111648e60608f01358f01610f32565b90985096506001600160401b0360808e01351115611180578586fd5b6111908e60808f01358f01610fba565b955061119e60a08e01611040565b94506001600160401b0360c08e013511156111b7578384fd5b6111c78e60c08f01358f01610f7b565b90945092506111d860e08e0161104f565b91506101008d013590509295989b509295989b509295989b565b600080600060608486031215611206578283fd5b61120f84610f16565b925061121d60208501610f16565b9150604084013590509250925092565b60006020828403121561123e578081fd5b8151801515811461107b578182fd5b60006020828403121561125e578081fd5b5035919050565b6001600160a01b03169052565b81835260006020808501945082825b858110156112ad576001600160a01b0361129a83610f16565b1687529582019590820190600101611281565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b81811015611306576020818501810151868301820152016112ea565b818111156113175782602083870101525b50601f01601f19169290920160200192915050565b6006811061134a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000610160808352600d81840152506c073776170416e64556e7772617609c1b6101808301526101a08e60208401528d60408401526113c3606084018e611265565b6113d0608084018d611265565b8a60a08401528060c08401526113e98184018a8c611272565b905082810360e08401526113fd81896112e1565b905061140d61010084018861132c565b8281036101208401526114218186886112b8565b915050826101408301529d9c50505050505050505050505050565b6020808252601c908201527b4574684d616e616765724c6f6769633a2077726f6e672076616c756560201b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8481526080602082015260006114d660808301866112e1565b6001600160a01b03949094166040830152506060015292915050565b60008282101561150457611504611524565b500390565b600060001982141561151d5761151d611524565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208185a9d5924e2ee6fdeaf65f4e0ee6fefcd8249b4654933a40d19f20b038f33064736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c8063146ffb261461010a57806317fcb39b14610133578063292c1d921461016b5780634d5f71bb1461018b57806357d95b87146101ab5780635c975abb146101cd57806361be10f2146101f0578063715018a614610210578063754d1461146102255780637753f47b146102455780638da5cb5b1461026d578063a197cbe614610282578063a6b63eb8146102a2578063c4a86b31146102c2578063d4dfc8c3146102e2578063d83f0fc5146102f8578063da058ae31461030e578063dd0081c71461032e578063e11b22ee14610344578063e63ea40814610357578063f2fde38b1461037757600080fd5b3661010557005b600080fd5b34801561011657600080fd5b5061012060cc5481565b6040519081526020015b60405180910390f35b34801561013f57600080fd5b5060cd54610153906001600160a01b031681565b6040516001600160a01b03909116815260200161012a565b34801561017757600080fd5b5060c954610153906001600160a01b031681565b34801561019757600080fd5b5060ca54610153906001600160a01b031681565b3480156101b757600080fd5b506101cb6101c636600461124d565b610397565b005b3480156101d957600080fd5b5060975460ff16604051901515815260200161012a565b3480156101fc57600080fd5b506101cb61020b366004611061565b6103a4565b34801561021c57600080fd5b506101cb6103b8565b34801561023157600080fd5b506101cb610240366004611061565b6103cc565b34801561025157600080fd5b5061015373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561027957600080fd5b506101536103dd565b34801561028e57600080fd5b506101cb61029d366004611061565b6103ec565b3480156102ae57600080fd5b506101cb6102bd366004611082565b6103fd565b3480156102ce57600080fd5b5060cb54610153906001600160a01b031681565b3480156102ee57600080fd5b5061012060ce5481565b34801561030457600080fd5b5061012060cf5481565b34801561031a57600080fd5b506101cb610329366004611061565b610552565b34801561033a57600080fd5b5061012061271081565b6101cb6103523660046110d6565b610563565b34801561036357600080fd5b506101cb6103723660046111f2565b6106a9565b34801561038357600080fd5b506101cb610392366004611061565b6107a5565b61039f61081b565b60cf55565b6103ac61081b565b6103b58161087a565b50565b6103c061081b565b6103ca600061090c565b565b6103d461081b565b6103b58161095e565b6033546001600160a01b031690565b6103f461081b565b6103b5816109f0565b600054610100900460ff161580801561041d5750600054600160ff909116105b806104375750303b158015610437575060005460ff166001145b61049f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156104c2576000805461ff0019166101001790555b6104ca610a82565b6104d2610ab1565b6104da610ae0565b6104e38661095e565b6104ec8561087a565b6104f584610b0f565b60cc83905560cf829055600060ce55801561054a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b61055a61081b565b6103b581610b0f565b61056b610ba1565b6105778a8a8a8a610bfb565b600060ce5460cf546105863390565b8e8e8e60018181106105a857634e487b7160e01b600052603260045260246000fd5b905060200201358d8d8d8d8d8d8c6040516020016105d19c9b9a99989796959493929190611381565b60405160208183030381529060405290507fe69fe079b662ff18874cc35b6a12c636af0eca0fd56cbd0cee7ddec918aea82760ce54828f8e8e600081811061062957634e487b7160e01b600052603260045260246000fd5b9050602002013560405161064094939291906114bd565b60405180910390a160ce805490600061065883611509565b91905055506106908d8c8c600081811061068257634e487b7160e01b600052603260045260246000fd5b905060200201358386610cec565b5061069b6001606555565b505050505050505050505050565b6106b161081b565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561071f576040516001600160a01b038316908290600081818185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054a565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061074d9085908590600401611368565b602060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f919061122d565b50505050565b6107ad61081b565b6001600160a01b0381166108125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610496565b6103b58161090c565b336108246103dd565b6001600160a01b0316146103ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610496565b806001600160a01b0381166108a25760405163d92e233d60e01b815260040160405180910390fd5b60c9546040517f06e5f2ca1234f717a2031f662608c02182d4f8bdc3dab013ec4c04eb97553132916108e1916001600160a01b0390911690859061134e565b60405180910390a15060c980546001600160a01b0319166001600160a01b0392909216919091179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b0381166109865760405163d92e233d60e01b815260040160405180910390fd5b60cb546040517f37b4bc62091d0acd3300990bd241557cbc8040fde4cf701b91d8bac7a69e0160916109c5916001600160a01b0390911690859061134e565b60405180910390a15060cb80546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116610a185760405163d92e233d60e01b815260040160405180910390fd5b60ca546040517fbac4f45eeeeb3c9688d046eddcdd28783777a2aa7beffcdf0acb76487d79636491610a57916001600160a01b0390911690859061134e565b60405180910390a15060ca80546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610aa95760405162461bcd60e51b815260040161049690611472565b6103ca610e8c565b600054610100900460ff16610ad85760405162461bcd60e51b815260040161049690611472565b6103ca610ebc565b600054610100900460ff16610b075760405162461bcd60e51b815260040161049690611472565b6103ca610ee3565b806001600160a01b038116610b375760405163d92e233d60e01b815260040160405180910390fd5b60cd546040517fffd9582901c27177dbd18194ae8017f10d8b21f98a0da2ea5197e0b20dc13d7091610b76916001600160a01b0390911690859061134e565b60405180910390a15060cd80546001600160a01b0319166001600160a01b0392909216919091179055565b60026065541415610bf45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610496565b6002606555565b60cb546001600160a01b03168282610c146001826114f2565b818110610c3157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c469190611061565b6001600160a01b031614610c9c5760405162461bcd60e51b815260206004820152601d60248201527f4574684d616e616765724c6f6769633a20696e76616c696420706174680000006044820152606401610496565b6002831461079f5760405162461bcd60e51b815260206004820152601e60248201527f4574684d616e616765724c6f6769633a2077726f6e6720616d6f756e747300006044820152606401610496565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610d4357823414610d305760405162461bcd60e51b81526004016104969061143c565b60cd546001600160a01b0316935061079f565b3415610d615760405162461bcd60e51b81526004016104969061143c565b6001600160a01b0384166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df7919061122d565b5060c95460405163095ea7b360e01b81526001600160a01b038681169263095ea7b392610e2c92909116908790600401611368565b602060405180830381600087803b158015610e4657600080fd5b505af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e919061122d565b5050505050565b6001606555565b600054610100900460ff16610eb35760405162461bcd60e51b815260040161049690611472565b6103ca3361090c565b600054610100900460ff16610e855760405162461bcd60e51b815260040161049690611472565b600054610100900460ff16610f0a5760405162461bcd60e51b815260040161049690611472565b6097805460ff19169055565b80356001600160a01b0381168114610f2d57600080fd5b919050565b60008083601f840112610f43578081fd5b5081356001600160401b03811115610f59578182fd5b6020830191508360208260051b8501011115610f7457600080fd5b9250929050565b60008083601f840112610f8c578182fd5b5081356001600160401b03811115610fa2578182fd5b602083019150836020828501011115610f7457600080fd5b600082601f830112610fca578081fd5b81356001600160401b0380821115610fe457610fe461153a565b604051601f8301601f19908116603f0116810190828211818310171561100c5761100c61153a565b81604052838152866020858801011115611024578485fd5b8360208701602083013792830160200193909352509392505050565b803560068110610f2d57600080fd5b8035600781900b8114610f2d57600080fd5b600060208284031215611072578081fd5b61107b82610f16565b9392505050565b600080600080600060a08688031215611099578081fd5b6110a286610f16565b94506110b060208701610f16565b93506110be60408701610f16565b94979396509394606081013594506080013592915050565b6000806000806000806000806000806000806101208d8f0312156110f8578687fd5b6111018d610f16565b9b5061110f60208e01610f16565b9a506001600160401b0360408e01351115611128578687fd5b6111388e60408f01358f01610f32565b909a5098506001600160401b0360608e01351115611154578687fd5b6111648e60608f01358f01610f32565b90985096506001600160401b0360808e01351115611180578586fd5b6111908e60808f01358f01610fba565b955061119e60a08e01611040565b94506001600160401b0360c08e013511156111b7578384fd5b6111c78e60c08f01358f01610f7b565b90945092506111d860e08e0161104f565b91506101008d013590509295989b509295989b509295989b565b600080600060608486031215611206578283fd5b61120f84610f16565b925061121d60208501610f16565b9150604084013590509250925092565b60006020828403121561123e578081fd5b8151801515811461107b578182fd5b60006020828403121561125e578081fd5b5035919050565b6001600160a01b03169052565b81835260006020808501945082825b858110156112ad576001600160a01b0361129a83610f16565b1687529582019590820190600101611281565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b81811015611306576020818501810151868301820152016112ea565b818111156113175782602083870101525b50601f01601f19169290920160200192915050565b6006811061134a57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6000610160808352600d81840152506c073776170416e64556e7772617609c1b6101808301526101a08e60208401528d60408401526113c3606084018e611265565b6113d0608084018d611265565b8a60a08401528060c08401526113e98184018a8c611272565b905082810360e08401526113fd81896112e1565b905061140d61010084018861132c565b8281036101208401526114218186886112b8565b915050826101408301529d9c50505050505050505050505050565b6020808252601c908201527b4574684d616e616765724c6f6769633a2077726f6e672076616c756560201b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8481526080602082015260006114d660808301866112e1565b6001600160a01b03949094166040830152506060015292915050565b60008282101561150457611504611524565b500390565b600060001982141561151d5761151d611524565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208185a9d5924e2ee6fdeaf65f4e0ee6fefcd8249b4654933a40d19f20b038f33064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address,address,uint256)": {
        "details": "Only owner can call this"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "swapAndUnwrap(address,address,uint256[],address[],bytes,uint8,bytes,int64,uint256)": {
        "details": "To find teleBTCAmount, _relayerFeePercentage should be reduced from the inputTokenAmount",
        "params": {
          "_amounts": "[inputTokenAmount, teleBTCAmount]",
          "_exchangeConnector": "Address of exchange connector to be used",
          "_lockerLockingScript": "of locker that should execute the burn request",
          "_path": "of exchanging inputToken to teleBTC (these are Polygon token addresses, so _path[0] != _token)",
          "_relayerFeePercentage": "Fee percentage for relayer",
          "_scriptType": "User script type",
          "_thirdParty": "Id of third party",
          "_token": "Address of input token (on the current chain)",
          "_userScript": "User script hash"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address,address,uint256)": {
        "notice": "Withdraws tokens in the emergency case"
      },
      "setAcross(address)": {
        "notice": "Setter for Across"
      },
      "setTargetChainConnectorProxy(address)": {
        "notice": "Setter for TargetChainConnectorProxy"
      },
      "setTargetChainTeleBTC(address)": {
        "notice": "Setter for TargetChainTeleBTC"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Setter for WrappedNativeToken"
      },
      "swapAndUnwrap(address,address,uint256[],address[],bytes,uint8,bytes,int64,uint256)": {
        "notice": "Requests exchanging token for BTC"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 329,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1797,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 198,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 318,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 631,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 700,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 510,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 615,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22809,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "across",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 22811,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "targetChainConnectorProxy",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 22813,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "targetChainTeleBTC",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 22815,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "targetChainId",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 22817,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 22819,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "uniqueCounter",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 22821,
        "contract": "contracts/routers/EthConnectorLogic.sol:EthConnectorLogic",
        "label": "currChainId",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}