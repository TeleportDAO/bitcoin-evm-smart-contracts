{
  "address": "0x10f4d7f7F6bc63AaAC82d9bfE58529cBE9e14b03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "lockers",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_burnReqIndexesLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voutIndexesLength",
          "type": "uint256"
        }
      ],
      "name": "burnProofHelper",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "ScriptTypes"
        },
        {
          "internalType": "address",
          "name": "lockers",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "checkScriptTypeAndLocker",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "finalizationParameter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getFinalizedBlockHeaderFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "lastSubmittedHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_inputVin",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_outputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        }
      ],
      "name": "slashLockerHelper",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x691301ca0a850e4332637ca807aa578d581ec94ffabd16a6d102c29eecfb136f",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0x10f4d7f7F6bc63AaAC82d9bfE58529cBE9e14b03",
    "transactionIndex": 0,
    "gasUsed": "2866075",
    "logsBloom": "0x
    "blockHash": "0x7c784b115e2c6a7ce76f4fa6f2e72bcef7f9bfd1613791b098013950bb535106",
    "transactionHash": "0x691301ca0a850e4332637ca807aa578d581ec94ffabd16a6d102c29eecfb136f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5983167,
        "transactionHash": "0x691301ca0a850e4332637ca807aa578d581ec94ffabd16a6d102c29eecfb136f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x0000000000000000000000006dc2dd54f24979ec26212794c71afefed722280c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003800bd7a23029cf00000000000000000000000000000000000000000000000223293d4932fde0da0000000000000000000000000000000000000000000000e8da8fb64e08ac38e00000000000000000000000000000000000000000000000021fa9317190cdb70b0000000000000000000000000000000000000000000000e8de0fc225aadc62af",
        "logIndex": 0,
        "blockHash": "0x7c784b115e2c6a7ce76f4fa6f2e72bcef7f9bfd1613791b098013950bb535106"
      }
    ],
    "blockNumber": 5983167,
    "cumulativeGasUsed": "2866075",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "054867689250c49ea4ca82c7c380df43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"lockers\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_burnReqIndexesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voutIndexesLength\",\"type\":\"uint256\"}],\"name\":\"burnProofHelper\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"ScriptTypes\"},{\"internalType\":\"address\",\"name\":\"lockers\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"checkScriptTypeAndLocker\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"finalizationParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getFinalizedBlockHeaderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"lastSubmittedHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_inputVin\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_outputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"}],\"name\":\"slashLockerHelper\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isConfirmed(address,bytes32,uint256,bytes,uint256)\":{\"details\":\"Calls the relay contract to check Merkle inclusion proof\",\"params\":{\"_blockNumber\":\"Height of the block containing the transaction\",\"_index\":\"Index of transaction in the block\",\"_intermediateNodes\":\"Merkle inclusion proof for the transaction\",\"_relay\":\"Address of Relay contract\",\"_txId\":\"of the transaction\"},\"returns\":{\"_0\":\"True if the transaction was included in the block\"}},\"updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)\":{\"details\":\"One output might return the remaining value to the locker\",\"params\":{\"_lockerLockingScript\":\"Locking script of locker\",\"_paidOutputCounter\":\"Number of the tx outputs that pay a cc burn request\",\"_txId\":\"Transaction id\",\"_vout\":\"Outputs of a transaction\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkScriptTypeAndLocker(bytes,ScriptTypes,address,bytes)\":{\"notice\":\"Checks the user hash script to be valid (based on its type)\"},\"isConfirmed(address,bytes32,uint256,bytes,uint256)\":{\"notice\":\"Checks inclusion of the transaction in the specified block\"},\"updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)\":{\"notice\":\"Checks if all outputs of the transaction used to pay a cc burn request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/BurnRouterLib.sol\":\"BurnRouterLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        // Validates Vin length\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64 _value) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n        output = indexVout(voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n        \\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n        \\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength. \\n            // note: script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 77 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0x2aff58cb87c1223fcf40f95e1f723485c5bcc63b1e0bd0498a705aa236b30564\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbca90a02eb6c7d68e75548ce6621bddddf3f78629b8b7a4a01c510c99f17c0e\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xf8b47bdc9c94c8da51772aea70e5b5c14c9115e5cbc79df6f552985a2d8f867f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/libraries/BurnRouterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../routers/BurnRouterStorage.sol\\\";\\n\\nlibrary BurnRouterLib {\\n    /// @notice Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev  One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter  Number of the tx outputs that pay a cc burn request\\n    /// @param _vout Outputs of a transaction\\n    /// @param _lockerLockingScript Locking script of locker\\n    /// @param _txId Transaction id\\n    function updateIsUsedAsBurnProof(\\n        mapping(bytes32 => bool) storage _isUsedAsBurnProof,\\n        uint256 _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) external {\\n        uint256 parsedAmount = BitcoinHelper.parseValueHavingLockingScript(\\n            _vout,\\n            _lockerLockingScript\\n        );\\n        uint256 numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs) {\\n            // One output sends the remaining value to locker\\n            _isUsedAsBurnProof[_txId] = true;\\n        } else if (_paidOutputCounter == numberOfOutputs) {\\n            // All output pays cc burn requests\\n            _isUsedAsBurnProof[_txId] = true;\\n        }\\n    }\\n\\n    function disputeBurnHelper(\\n        mapping(address => BurnRouterStorage.burnRequest[])\\n            storage burnRequests,\\n        address _lockerTargetAddress,\\n        uint256 _index,\\n        uint256 _transferDeadline,\\n        uint256 _lastSubmittedHeight,\\n        uint256 _startingBlockNumber\\n    ) external {\\n        // Checks that locker has not provided burn proof\\n        require(\\n            !burnRequests[_lockerTargetAddress][_index].isTransferred,\\n            \\\"BurnRouterLogic: already paid\\\"\\n        );\\n\\n        // Checks that payback deadline has passed\\n        require(\\n            burnRequests[_lockerTargetAddress][_index].deadline <\\n                _lastSubmittedHeight,\\n            \\\"BurnRouterLogic: deadline not passed\\\"\\n        );\\n\\n        require(\\n            burnRequests[_lockerTargetAddress][_index].deadline >\\n                _startingBlockNumber + _transferDeadline,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n\\n        // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n        burnRequests[_lockerTargetAddress][_index].isTransferred = true;\\n    }\\n\\n    function disputeAndSlashLockerHelper(\\n        address lockers,\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes[3] memory _inputOutputVinVout, // [_inputVin, _outputVin, _outputVout]\\n        mapping(bytes32 => bool) storage _isUsedAsBurnProof,\\n        uint256 _transferDeadline,\\n        address _relay,\\n        uint256 _startingBlockNumber,\\n        bytes32 _inputTxId,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint256[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n                _locktimes.length == 2 &&\\n                _indexesAndBlockNumbers.length == 3,\\n            \\\"BurnRouterLogic: wrong inputs\\\"\\n        );\\n\\n        require(\\n            _indexesAndBlockNumbers[2] >= _startingBlockNumber,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n\\n        require(\\n            isConfirmed(\\n                _relay,\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"BurnRouterLogic: not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !_isUsedAsBurnProof[_inputTxId],\\n            \\\"BurnRouterLogic: already used\\\"\\n        );\\n\\n        // prevents multiple slashing of locker\\n        _isUsedAsBurnProof[_inputTxId] = true;\\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            lastSubmittedHeight(_relay) >\\n                _transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"BurnRouterLogic: deadline not passed\\\"\\n        );\\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint256 _outpointIndex) = BitcoinHelper\\n            .extractOutpoint(\\n                _inputOutputVinVout[0],\\n                _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n            );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId ==\\n                BitcoinHelper.calculateTxId(\\n                    _versions[1],\\n                    _inputOutputVinVout[1],\\n                    _inputOutputVinVout[2],\\n                    _locktimes[1]\\n                ),\\n            \\\"BurnRouterLogic: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(\\n                BitcoinHelper.getLockingScript(\\n                    _inputOutputVinVout[2],\\n                    _outpointIndex\\n                )\\n            ) == keccak256(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not for locker\\\"\\n        );\\n    }\\n\\n    function slashLockerHelper(\\n        bytes memory _lockerLockingScript,\\n        bytes4 _version,\\n        bytes memory _inputVin,\\n        uint256 _index,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4 _locktime\\n    ) external view {\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint256 _outpointIndex) = BitcoinHelper\\n            .extractOutpoint(\\n                _inputVin,\\n                _index // Index of malicious input in input tx\\n            );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId ==\\n                BitcoinHelper.calculateTxId(\\n                    _version,\\n                    _outputVin,\\n                    _outputVout,\\n                    _locktime\\n                ),\\n            \\\"BurnRouterLogic: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(\\n                BitcoinHelper.getLockingScript(_outputVout, _outpointIndex)\\n            ) == keccak256(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not for locker\\\"\\n        );\\n    }\\n\\n    function burnProofHelper(\\n        uint256 _blockNumber,\\n        uint256 startingBlockNumber,\\n        bytes4 _locktime,\\n        address lockers,\\n        bytes memory _lockerLockingScript,\\n        uint256 _burnReqIndexesLength,\\n        uint256 _voutIndexesLength\\n    ) external view {\\n        require(\\n            _blockNumber >= startingBlockNumber,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"BurnRouterLogic: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        require(\\n            _burnReqIndexesLength == _voutIndexesLength,\\n            \\\"BurnRouterLogic: wrong indexes\\\"\\n        );\\n    }\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _relay Address of Relay contract\\n    /// @param _txId of the transaction\\n    /// @param _blockNumber Height of the block containing the transaction\\n    /// @param _intermediateNodes Merkle inclusion proof for the transaction\\n    /// @param _index Index of transaction in the block\\n    /// @return True if the transaction was included in the block\\n    function isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint256 _index\\n    ) public returns (bool) {\\n        // Finds fee amount\\n        uint256 feeAmount = getFinalizedBlockHeaderFee(_relay, _blockNumber);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: low fee\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        //TODO?\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice Checks the user hash script to be valid (based on its type)\\n    function checkScriptTypeAndLocker(\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        address lockers,\\n        bytes calldata _lockerLockingScript\\n    ) external view {\\n        if (\\n            _scriptType == ScriptTypes.P2PK ||\\n            _scriptType == ScriptTypes.P2WSH ||\\n            _scriptType == ScriptTypes.P2TR\\n        ) {\\n            require(\\n                _userScript.length == 32,\\n                \\\"BurnRouterLogic: invalid script\\\"\\n            );\\n        } else {\\n            require(\\n                _userScript.length == 20,\\n                \\\"BurnRouterLogic: invalid script\\\"\\n            );\\n        }\\n\\n        // Checks if the given locking script is locker\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n    }\\n\\n    function lastSubmittedHeight(address _relay) public view returns (uint256) {\\n        return IBitcoinRelay(_relay).lastSubmittedHeight();\\n    }\\n\\n    function finalizationParameter(address _relay)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return IBitcoinRelay(_relay).finalizationParameter();\\n    }\\n\\n    function getFinalizedBlockHeaderFee(address _relay, uint256 _blockNumber)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IBitcoinRelay(_relay).getBlockHeaderFee(_blockNumber, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x2f6647fa42308141bd9e419b1b3a17c99195235212095c2b4c71296de374f150\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewTST(\\n        address oldTST,\\n        address newTST\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTSTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x2dfb0206a8c767ccfb583dc3951bdf5596cec3295597dd40b3bd3280f002b94b\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\n\\nabstract contract BurnRouterStorage is IBurnRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    address public override bitcoinFeeOracle;\\n    uint public override startingBlockNumber;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    \\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n}\",\"keccak256\":\"0x7d070b246c54b207911d56bae926d134732bb3cb434a0603a6890a55e4b4149e\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param userTargetAddress Address of the user on EVM\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n\\t/// @param thirdPartyId Id of third party\\n\\t/// @param inputToken inputToken address\\n\\t/// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n\\t/// @param fees [network fee, locker fee, protocol fee, third party fee]\\n\\t\\n  \\tevent NewUnwrap(\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline,\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress inputToken,\\n\\t\\tuint[3] amounts,\\n\\t\\tuint[4] fees\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidUnwrap(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when network fee is updated\\n    event NewNetworkFee(\\n        uint oldNetworkFee, \\n        uint newNetworkFee\\n    );\\n\\n\\t/// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle, \\n        address newNetworkFeeOracle\\n    );\\n\\n\\t/// @notice                     Emits when changes made to third party address\\n\\tevent NewThirdPartyAddress(\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress oldThirdPartyAddress, \\n\\t\\taddress newThirdPartyAddress\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to third party fee\\n\\tevent NewThirdPartyFee(\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint oldThirdPartyFee, \\n\\t\\tuint newThirdPartyFee\\n\\t);\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\tfunction bitcoinFeeOracle() external view returns (address);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setNetworkFee(uint _networkFee) external;\\n\\n\\tfunction setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n\\tfunction setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external;\\n\\n\\tfunction setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n\\tfunction unwrap(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\",\"keccak256\":\"0x114bdfd7564dcf4ac8f10be8805273b17d82965d24dfc50ad239839239e4d30d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6132e161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100985760003560e01c806310889dc31461009d57806315755789146100c3578063191e28dc146100e5578063441d3a211461010557806344922b641461012557806369ab4a8f146101385780637ebc23271461014b5780638d9da5991461017b578063a779a3921461018e578063f8766150146101a1575b600080fd5b6100b06100ab36600461291f565b6101b4565b6040519081526020015b60405180910390f35b8180156100cf57600080fd5b506100e36100de366004612ced565b61022d565b005b8180156100f157600080fd5b506100e3610100366004612d3a565b61040f565b81801561011157600080fd5b506100e361012036600461299f565b610499565b6100e3610133366004612da3565b610890565b6100e3610146366004612b64565b6109fb565b81801561015757600080fd5b5061016b610166366004612939565b610a76565b60405190151581526020016100ba565b6100b0610189366004612b03565b610b4f565b6100b061019c36600461291f565b610bd8565b6100e36101af366004612c36565b610c13565b6000816001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190612b4c565b92915050565b6001600160a01b038516600090815260208790526040902080548590811061026557634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff16156102ce5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c7265616479207061696400000060448201526064015b60405180910390fd5b6001600160a01b038516600090815260208790526040902080548391908690811061030957634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154106103385760405162461bcd60e51b81526004016102c590612fd3565b6103428382613140565b6001600160a01b038616600090815260208890526040902080548690811061037a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154116103a95760405162461bcd60e51b81526004016102c590613017565b6001600160a01b0385166000908152602087905260409020805460019190869081106103e557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055505050505050565b600061041b8484610d77565b6001600160401b03169050600061043185610e88565b9050811580159061044b575080610449876001613140565b145b1561046e576000838152602088905260409020805460ff19166001179055610490565b80861415610490576000838152602088905260409020805460ff191660011790555b50505050505050565b60405163aff2faa360e01b81526001600160a01b038d169063aff2faa3906104c5908e90600401612f1f565b60206040518083038186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190612b2c565b6105315760405162461bcd60e51b81526004016102c590612f9e565b89516002148015610543575082516002145b8015610550575080516003145b61059c5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e7075747300000060448201526064016102c5565b84816002815181106105be57634e487b7160e01b600052603260045260246000fd5b602002602001015110156105e45760405162461bcd60e51b81526004016102c590613017565b61064186858360028151811061060a57634e487b7160e01b600052603260045260246000fd5b6020026020010151858560018151811061063457634e487b7160e01b600052603260045260246000fd5b6020026020010151610a76565b61068d5760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a206e6f742066696e616c697a6564000060448201526064016102c5565b60008481526020899052604090205460ff16156106ec5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c7265616479207573656400000060448201526064016102c5565b6000848152602089905260409020805460ff1916600117905580518190600290811061072857634e487b7160e01b600052603260045260246000fd5b60200260200101518761073b9190613140565b610744876101b4565b116107615760405162461bcd60e51b81526004016102c590612fd3565b60008061079c8b8260200201518460008151811061078f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610eb5565b915091506108288c6001815181106107c457634e487b7160e01b600052603260045260246000fd5b60200260200101518c6001600381106107ed57634e487b7160e01b600052603260045260246000fd5b60200201518d600260200201518860018151811061081b57634e487b7160e01b600052603260045260246000fd5b6020026020010151610f3c565b82146108465760405162461bcd60e51b81526004016102c5906130b8565b8c5160208e012060408c015161085c908361106f565b80519060200120146108805760405162461bcd60e51b81526004016102c590613081565b5050505050505050505050505050565b858710156108b05760405162461bcd60e51b81526004016102c590613017565b6001600160e01b03198516156109145760405162461bcd60e51b815260206004820152602360248201527f4275726e526f757465724c6f6769633a206e6f6e2d7a65726f206c6f636b2074604482015262696d6560e81b60648201526084016102c5565b60405163aff2faa360e01b81526001600160a01b0385169063aff2faa390610940908690600401612f1f565b60206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612b2c565b6109ac5760405162461bcd60e51b81526004016102c590612f9e565b8082146104905760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e6465786573000060448201526064016102c5565b600080610a088787610eb5565b91509150610a1888868686610f3c565b8214610a365760405162461bcd60e51b81526004016102c5906130b8565b885160208a0120610a47858361106f565b8051906020012014610a6b5760405162461bcd60e51b81526004016102c590613081565b505050505050505050565b600080610a838786610b4f565b905080341015610acd5760405162461bcd60e51b8152602060048201526015602482015274426974636f696e52656c61793a206c6f772066656560581b60448201526064016102c5565b6000610b1a8888888888604051602401610aea9493929190612ec0565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052846110e1565b9050610b2f33610b2a84346131d1565b611107565b80806020019051810190610b439190612b2c565b98975050505050505050565b60405163d0a8973960e01b815260048101829052600060248201819052906001600160a01b0384169063d0a897399060440160206040518083038186803b158015610b9957600080fd5b505afa158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd19190612b4c565b9392505050565b6000816001600160a01b031663a072bc506040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ef57600080fd5b6000846005811115610c3557634e487b7160e01b600052602160045260246000fd5b1480610c6057506004846005811115610c5e57634e487b7160e01b600052602160045260246000fd5b145b80610c8a57506005846005811115610c8857634e487b7160e01b600052602160045260246000fd5b145b15610cb5578451602014610cb05760405162461bcd60e51b81526004016102c590612f32565b610cd6565b8451601414610cd65760405162461bcd60e51b81526004016102c590612f32565b60405163aff2faa360e01b81526001600160a01b0384169063aff2faa390610d049085908590600401612ef0565b60206040518083038186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190612b2c565b610d705760405162461bcd60e51b81526004016102c590612f9e565b5050505050565b600080610d8e610d89825b8690611222565b611246565b9050610d9f62ffffff19821661139c565b15610dbc5760405162461bcd60e51b81526004016102c590612f69565b6000806000610dcc8460006113a8565b6001600160401b0316905060005b81811015610e7d57610dec85826114f1565b9350610df78461161c565b925086604051602001610e0a9190612ea4565b60405160208183030381529060405280519060200120610e2f8462ffffff191661166d565b604051602001610e3f9190612ea4565b604051602081830303815290604052805190602001201415610e6b57610e64846116b3565b9550610e7d565b80610e758161323b565b915050610dda565b505050505092915050565b600080610e98610d898483611222565b9050610ea58160006113a8565b6001600160401b03169392505050565b60008080610ecd610ec8825b8790611222565b6116d8565b9050610ede62ffffff19821661139c565b15610efb5760405162461bcd60e51b81526004016102c59061304d565b6000610f0782866117d9565b90506000610f14826118e0565b9050610f1f81611904565b9450610f2a81611926565b63ffffffff1693505050509250929050565b600080610f4b610ec882610ec1565b9050610f5c62ffffff19821661139c565b15610f795760405162461bcd60e51b81526004016102c59061304d565b6000600287878787604051602001610f949493929190612e51565b60408051601f1981840301815290829052610fae91612ea4565b602060405180830381855afa158015610fcb573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610fee9190612b4c565b9050600060028260405160200161100791815260200190565b60408051601f198184030181529082905261102191612ea4565b602060405180830381855afa15801561103e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906110619190612b4c565b93505050505b949350505050565b6060600061107f610d8982610d82565b905061109062ffffff19821661139c565b156110ad5760405162461bcd60e51b81526004016102c590612f69565b60006110b982856114f1565b905060006110c68261161c565b90506110d762ffffff19821661166d565b9695505050505050565b606061106784848460405180606001604052806029815260200161328360299139611950565b804710156111575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146111a4576040519150601f19603f3d011682016040523d82523d6000602084013e6111a9565b606091505b505090508061121d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016102c5565b505050565b81516000906020840161123d64ffffffffff85168284611a78565b95945050505050565b6000818161125c815b62ffffff19841690611abc565b5061126c62ffffff198516611b96565b6001600160601b031661128857611281611ba5565b9250611395565b60006112958560006113a8565b905060006112a862ffffff198716611b96565b6001600160601b031690506001600160401b0382166112d2576112c9611ba5565b94505050611395565b60006112dd83611bad565b60ff16905060005b836001600160401b031681101561135b5782821061131057611305611ba5565b965050505050611395565b600061133061131f84866131d1565b600e5b62ffffff198c169190611c0b565b905061133b81611c35565b6113459084613140565b92505080806113539061323b565b9150506112e5565b508181146113755761136b611ba5565b9550505050611395565b61138f600f5b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff199081161490565b6000806113bd62ffffff198516846001611c7e565b905060fc81116113d8576113d081611cae565b915050610227565b8060fd141561143e576114066114016113f2856001613140565b62ffffff198716906002611d1a565b611cae565b915061141182611bad565b60ff166003146114395761143761143262ffffff1986168560036000611e5d565b611ec3565b505b6114ea565b8060fe141561149357611467611401611458856001613140565b62ffffff198716906004611d1a565b915061147282611bad565b60ff166005146114395761143761143262ffffff1986168560056000611e5d565b8060ff14156114ea576114bc6114016114ad856001613140565b62ffffff198716906008611d1a565b91506114c782611bad565b60ff166009146114ea576114e861143262ffffff1986168560096000611e5d565b505b5092915050565b600082600f6114ff8161124f565b50600061150d8660006113a8565b6001600160401b03169050600061152962ffffff198816611b96565b6001600160601b031690508186106115775760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b60448201526064016102c5565b600061158283611bad565b60ff1690506000805b888110156115da576115b16115a084866131d1565b600e5b62ffffff198d169190611c0b565b91506115bc82611c35565b6115c69084613140565b92506115d3600182613140565b905061158b565b506115e861131f83856131d1565b905060006115f582611c35565b905061160e8382600d5b62ffffff198e16929190611e5d565b9a9950505050505050505050565b600081600d61162a8161124f565b5060006116388560086113a8565b905061123d61164682611bad565b611651906008613158565b62ffffff1987169060ff166001600160401b0384166007611e5d565b606060008061167b84611b96565b60405193508392506001600160601b031690506116a28461169d846020613140565b611f4b565b508181016020016040529052919050565b600081600d6116c18161124f565b5061106761140162ffffff19861660006008611d1a565b600081816116e58161124f565b506116f562ffffff198516611b96565b6001600160601b031661170a57611281611ba5565b60006117178560006113a8565b9050600061172a62ffffff198716611b96565b6001600160601b031690506001600160401b03821661174b576112c9611ba5565b600061175683611bad565b60ff16905060005b836001600160401b03168110156117bf5782821061177e57611305611ba5565b600061179461178d84866131d1565b6005611322565b905061179f8161208e565b6117a99084613140565b92505080806117b79061323b565b91505061175e565b508181146117cf5761136b611ba5565b61138f600661137b565b60008260066117e78161124f565b5060006117f58660006113a8565b6001600160401b03169050600061181162ffffff198816611b96565b6001600160601b0316905081861061185e5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b60448201526064016102c5565b600061186983611bad565b60ff1690506000805b888110156118b75761188e61188784866131d1565b60056115a3565b91506118998261208e565b6118a39084613140565b92506118b0600182613140565b9050611872565b506118c561178d83856131d1565b905060006118d28261208e565b905061160e838260046115ff565b60008160046118ee8161124f565b5061106762ffffff198516600060246003611e5d565b60008160036119128161124f565b5061106762ffffff198516600060206120e2565b60008160036119348161124f565b5061106761194b62ffffff19861660206004611d1a565b612210565b6060824710156119b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102c5565b843b6119ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c5565b600080866001600160a01b03168587604051611a1b9190612ea4565b60006040518083038185875af1925050503d8060008114611a58576040519150601f19603f3d011682016040523d82523d6000602084013e611a5d565b606091505b5091509150611a6d828286612275565b979650505050505050565b600080611a858385613140565b9050604051811115611a95575060005b80611aa75762ffffff19915050610bd1565b5050606092831b9190911790911b1760181b90565b6000611ac883836122ae565b611b8f576000611ae7611adb8560d81c90565b64ffffffffff166122d1565b9150506000611afc8464ffffffffff166122d1565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016102c59190612f1f565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b600060fc826001600160401b031611611bc857506001919050565b61ffff826001600160401b031611611be257506003919050565b63ffffffff826001600160401b031611611bfe57506005919050565b506009919050565b919050565b60006110678484611c1b87611b96565b6001600160601b0316611c2e91906131d1565b8585611e5d565b600081600e611c438161124f565b506000611c518560086113a8565b9050806001600160401b0316611c6682611bad565b60ff16611c739190613140565b61123d906008613140565b6000611c8b8260206131e8565b611c969060086131a8565b60ff16611ca48585856120e2565b901c949350505050565b60006001600160401b03821115611d165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016102c5565b5090565b6000611067611d2a8585856120e2565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff161790506040816001600160401b03600160801b03600160c01b0316901b604082901c6001600160401b03600160801b03600160c01b0316179050608081901b608082901c179050919050565b600080611e698661237d565b6001600160601b03169050611e7d8661238c565b84611e888784613140565b611e929190613140565b1115611ea55762ffffff19915050611067565b611eaf8582613140565b90506110d78364ffffffffff168286611a78565b60606000611f01611efc82611eee611ee062ffffff198816611b96565b6001600160601b03166123b9565b62ffffff1987169190611c7e565b6122d1565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d01611b64565b6000611f568361241a565b611fb35760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016102c5565b611fbc8361242c565b61201c5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016102c5565b600061202784611b96565b6001600160601b03169050600061203d8561237d565b6001600160601b03169050600060405190508481111561205d5760206060fd5b8285848460045afa506110d76120738760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600561209c8161124f565b5060006120aa8560246113a8565b9050806001600160401b03166120bf82611bad565b60ff166120cc9190613140565b6120d7906024613140565b61123d906004613140565b600060ff82166120f457506000610bd1565b6120fd84611b96565b6001600160601b031661211360ff841685613140565b11156121635761214a6121258561237d565b6001600160601b031661213786611b96565b6001600160601b0316858560ff1661246a565b60405162461bcd60e51b81526004016102c59190612f1f565b60208260ff1611156121da5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b60648201526084016102c5565b6008820260006121e98661237d565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600063ffffffff821115611d165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016102c5565b60608315612284575081610bd1565b8251156122945782518084602001fd5b8160405162461bcd60e51b81526004016102c59190612f1f565b60008164ffffffffff166122c28460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561232f5760006122f08260086131a8565b60ff1685901c905061230181612594565b61ffff16841793508160ff1660101461231c57601084901b93505b506123286001826131e8565b90506122d7565b50600f5b60ff8160ff1610156123775760ff600882021684901c61235281612594565b61ffff16831792508160ff1660001461236d57601083901b92505b5060001901612333565b50915091565b60781c6001600160601b031690565b600061239782611b96565b6123a08361237d565b6123aa919061317d565b6001600160601b031692915050565b600060ff821115611d165760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b60648201526084016102c5565b60006124258261139c565b1592915050565b60006124388260d81c90565b64ffffffffff1664ffffffffff141561245357506000919050565b600061245e8361238c565b60405110199392505050565b60606000612477866122d1565b9150506000612485866122d1565b9150506000612493866122d1565b91505060006124a1866122d1565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60006125a660048360ff16901c6125c6565b60ff1661ffff919091161760081b6125bd826125c6565b60ff1617919050565b600060f08083179060ff821614156125e15750603092915050565b8060ff1660f114156125f65750603192915050565b8060ff1660f2141561260b5750603292915050565b8060ff1660f314156126205750603392915050565b8060ff1660f414156126355750603492915050565b8060ff1660f5141561264a5750603592915050565b8060ff1660f6141561265f5750603692915050565b8060ff1660f714156126745750603792915050565b8060ff1660f814156126895750603892915050565b8060ff1660f9141561269e5750603992915050565b8060ff1660fa14156126b35750606192915050565b8060ff1660fb14156126c85750606292915050565b8060ff1660fc14156126dd5750606392915050565b8060ff1660fd14156126f25750606492915050565b8060ff1660fe14156127075750606592915050565b8060ff1660ff141561271c5750606692915050565b50919050565b80356001600160a01b0381168114611c0657600080fd5b600082601f830112612749578081fd5b8135602061275e6127598361311d565b6130ed565b80838252828201915082860187848660051b890101111561277d578586fd5b855b858110156127a2576127908261289d565b8452928401929084019060010161277f565b5090979650505050505050565b600082601f8301126127bf578081fd5b604051606081016001600160401b0382821081831117156127e2576127e261326c565b8160405282915084866060870111156127f9578485fd5b845b600381101561283457813583811115612812578687fd5b61281e89828a016128b5565b85525060209384019391909101906001016127fb565b50929695505050505050565b600082601f830112612850578081fd5b813560206128606127598361311d565b80838252828201915082860187848660051b890101111561287f578586fd5b855b858110156127a257813584529284019290840190600101612881565b80356001600160e01b031981168114611c0657600080fd5b600082601f8301126128c5578081fd5b81356001600160401b038111156128de576128de61326c565b6128f1601f8201601f19166020016130ed565b818152846020838601011115612905578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612930578081fd5b610bd182612722565b600080600080600060a08688031215612950578081fd5b61295986612722565b9450602086013593506040860135925060608601356001600160401b03811115612981578182fd5b61298d888289016128b5565b95989497509295608001359392505050565b6000806000806000806000806000806000806101808d8f0312156129c1578687fd5b6129ca8d612722565b9b506001600160401b0360208e013511156129e3578687fd5b6129f38e60208f01358f016128b5565b9a506001600160401b0360408e01351115612a0c578687fd5b612a1c8e60408f01358f01612739565b99506001600160401b0360608e01351115612a35578687fd5b612a458e60608f01358f016127af565b985060808d0135975060a08d01359650612a6160c08e01612722565b955060e08d013594506101008d013593506001600160401b036101208e01351115612a8a578283fd5b612a9b8e6101208f01358f01612739565b92506001600160401b036101408e01351115612ab5578081fd5b612ac68e6101408f01358f016128b5565b91506001600160401b036101608e01351115612ae0578081fd5b612af18e6101608f01358f01612840565b90509295989b509295989b509295989b565b60008060408385031215612b15578182fd5b612b1e83612722565b946020939093013593505050565b600060208284031215612b3d578081fd5b81518015158114610bd1578182fd5b600060208284031215612b5d578081fd5b5051919050565b600080600080600080600060e0888a031215612b7e578081fd5b87356001600160401b0380821115612b94578283fd5b612ba08b838c016128b5565b9850612bae60208b0161289d565b975060408a0135915080821115612bc3578283fd5b612bcf8b838c016128b5565b965060608a0135955060808a0135915080821115612beb578283fd5b612bf78b838c016128b5565b945060a08a0135915080821115612c0c578283fd5b50612c198a828b016128b5565b925050612c2860c0890161289d565b905092959891949750929550565b600080600080600060808688031215612c4d578283fd5b85356001600160401b0380821115612c63578485fd5b612c6f89838a016128b5565b96506020880135915060068210612c84578485fd5b819550612c9360408901612722565b94506060880135915080821115612ca8578283fd5b818801915088601f830112612cbb578283fd5b813581811115612cc9578384fd5b896020828501011115612cda578384fd5b9699959850939650602001949392505050565b60008060008060008060c08789031215612d05578384fd5b86359550612d1560208801612722565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a08688031215612d51578283fd5b853594506020860135935060408601356001600160401b0380821115612d75578485fd5b612d8189838a016128b5565b94506060880135915080821115612d96578283fd5b5061298d888289016128b5565b600080600080600080600060e0888a031215612dbd578081fd5b8735965060208801359550612dd46040890161289d565b9450612de260608901612722565b935060808801356001600160401b03811115612dfc578182fd5b612e088a828b016128b5565b93505060a0880135915060c0880135905092959891949750929550565b60008151808452612e3d81602086016020860161320b565b601f01601f19169290920160200192915050565b600063ffffffff60e01b80871683528551612e73816004860160208a0161320b565b855190840190612e8a816004840160208a0161320b565b919094169301600481019390935250506008019392505050565b60008251612eb681846020870161320b565b9190910192915050565b848152836020820152608060408201526000612edf6080830185612e25565b905082606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000610bd16020830184612e25565b6020808252601f908201527f4275726e526f757465724c6f6769633a20696e76616c69642073637269707400604082015260600190565b6020808252601b908201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b604082015260600190565b6020808252601b908201527a213ab9372937baba32b92637b3b4b19d103737ba103637b1b5b2b960291b604082015260600190565b60208082526024908201527f4275726e526f757465724c6f6769633a20646561646c696e65206e6f742070616040820152631cdcd95960e21b606082015260800190565b6020808252601c908201527b109d5c9b949bdd5d195c931bd9da58ce881bdb19081c995c5d595cdd60221b604082015260600190565b6020808252601a9082015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b604082015260600190565b6020808252601f908201527f4275726e526f757465724c6f6769633a206e6f7420666f72206c6f636b657200604082015260600190565b6020808252818101527f4275726e526f757465724c6f6769633a2077726f6e67206f7574707574207478604082015260600190565b604051601f8201601f191681016001600160401b03811182821017156131155761311561326c565b604052919050565b60006001600160401b038211156131365761313661326c565b5060051b60200190565b6000821982111561315357613153613256565b500190565b600060ff821660ff84168060ff0382111561317557613175613256565b019392505050565b60006001600160601b0382811684821680830382111561319f5761319f613256565b01949350505050565b600060ff821660ff84168160ff04811182151516156131c9576131c9613256565b029392505050565b6000828210156131e3576131e3613256565b500390565b600060ff821660ff84168082101561320257613202613256565b90039392505050565b60005b8381101561322657818101518382015260200161320e565b83811115613235576000848401525b50505050565b600060001982141561324f5761324f613256565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212208ba848f190a4c8f3ff366ffd57ae62fd0b744ff91201d5733d62d1abd7f83a7d64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100985760003560e01c806310889dc31461009d57806315755789146100c3578063191e28dc146100e5578063441d3a211461010557806344922b641461012557806369ab4a8f146101385780637ebc23271461014b5780638d9da5991461017b578063a779a3921461018e578063f8766150146101a1575b600080fd5b6100b06100ab36600461291f565b6101b4565b6040519081526020015b60405180910390f35b8180156100cf57600080fd5b506100e36100de366004612ced565b61022d565b005b8180156100f157600080fd5b506100e3610100366004612d3a565b61040f565b81801561011157600080fd5b506100e361012036600461299f565b610499565b6100e3610133366004612da3565b610890565b6100e3610146366004612b64565b6109fb565b81801561015757600080fd5b5061016b610166366004612939565b610a76565b60405190151581526020016100ba565b6100b0610189366004612b03565b610b4f565b6100b061019c36600461291f565b610bd8565b6100e36101af366004612c36565b610c13565b6000816001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190612b4c565b92915050565b6001600160a01b038516600090815260208790526040902080548590811061026557634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff16156102ce5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c7265616479207061696400000060448201526064015b60405180910390fd5b6001600160a01b038516600090815260208790526040902080548391908690811061030957634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154106103385760405162461bcd60e51b81526004016102c590612fd3565b6103428382613140565b6001600160a01b038616600090815260208890526040902080548690811061037a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154116103a95760405162461bcd60e51b81526004016102c590613017565b6001600160a01b0385166000908152602087905260409020805460019190869081106103e557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055505050505050565b600061041b8484610d77565b6001600160401b03169050600061043185610e88565b9050811580159061044b575080610449876001613140565b145b1561046e576000838152602088905260409020805460ff19166001179055610490565b80861415610490576000838152602088905260409020805460ff191660011790555b50505050505050565b60405163aff2faa360e01b81526001600160a01b038d169063aff2faa3906104c5908e90600401612f1f565b60206040518083038186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190612b2c565b6105315760405162461bcd60e51b81526004016102c590612f9e565b89516002148015610543575082516002145b8015610550575080516003145b61059c5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e7075747300000060448201526064016102c5565b84816002815181106105be57634e487b7160e01b600052603260045260246000fd5b602002602001015110156105e45760405162461bcd60e51b81526004016102c590613017565b61064186858360028151811061060a57634e487b7160e01b600052603260045260246000fd5b6020026020010151858560018151811061063457634e487b7160e01b600052603260045260246000fd5b6020026020010151610a76565b61068d5760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a206e6f742066696e616c697a6564000060448201526064016102c5565b60008481526020899052604090205460ff16156106ec5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c7265616479207573656400000060448201526064016102c5565b6000848152602089905260409020805460ff1916600117905580518190600290811061072857634e487b7160e01b600052603260045260246000fd5b60200260200101518761073b9190613140565b610744876101b4565b116107615760405162461bcd60e51b81526004016102c590612fd3565b60008061079c8b8260200201518460008151811061078f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610eb5565b915091506108288c6001815181106107c457634e487b7160e01b600052603260045260246000fd5b60200260200101518c6001600381106107ed57634e487b7160e01b600052603260045260246000fd5b60200201518d600260200201518860018151811061081b57634e487b7160e01b600052603260045260246000fd5b6020026020010151610f3c565b82146108465760405162461bcd60e51b81526004016102c5906130b8565b8c5160208e012060408c015161085c908361106f565b80519060200120146108805760405162461bcd60e51b81526004016102c590613081565b5050505050505050505050505050565b858710156108b05760405162461bcd60e51b81526004016102c590613017565b6001600160e01b03198516156109145760405162461bcd60e51b815260206004820152602360248201527f4275726e526f757465724c6f6769633a206e6f6e2d7a65726f206c6f636b2074604482015262696d6560e81b60648201526084016102c5565b60405163aff2faa360e01b81526001600160a01b0385169063aff2faa390610940908690600401612f1f565b60206040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612b2c565b6109ac5760405162461bcd60e51b81526004016102c590612f9e565b8082146104905760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e6465786573000060448201526064016102c5565b600080610a088787610eb5565b91509150610a1888868686610f3c565b8214610a365760405162461bcd60e51b81526004016102c5906130b8565b885160208a0120610a47858361106f565b8051906020012014610a6b5760405162461bcd60e51b81526004016102c590613081565b505050505050505050565b600080610a838786610b4f565b905080341015610acd5760405162461bcd60e51b8152602060048201526015602482015274426974636f696e52656c61793a206c6f772066656560581b60448201526064016102c5565b6000610b1a8888888888604051602401610aea9493929190612ec0565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052846110e1565b9050610b2f33610b2a84346131d1565b611107565b80806020019051810190610b439190612b2c565b98975050505050505050565b60405163d0a8973960e01b815260048101829052600060248201819052906001600160a01b0384169063d0a897399060440160206040518083038186803b158015610b9957600080fd5b505afa158015610bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd19190612b4c565b9392505050565b6000816001600160a01b031663a072bc506040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ef57600080fd5b6000846005811115610c3557634e487b7160e01b600052602160045260246000fd5b1480610c6057506004846005811115610c5e57634e487b7160e01b600052602160045260246000fd5b145b80610c8a57506005846005811115610c8857634e487b7160e01b600052602160045260246000fd5b145b15610cb5578451602014610cb05760405162461bcd60e51b81526004016102c590612f32565b610cd6565b8451601414610cd65760405162461bcd60e51b81526004016102c590612f32565b60405163aff2faa360e01b81526001600160a01b0384169063aff2faa390610d049085908590600401612ef0565b60206040518083038186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190612b2c565b610d705760405162461bcd60e51b81526004016102c590612f9e565b5050505050565b600080610d8e610d89825b8690611222565b611246565b9050610d9f62ffffff19821661139c565b15610dbc5760405162461bcd60e51b81526004016102c590612f69565b6000806000610dcc8460006113a8565b6001600160401b0316905060005b81811015610e7d57610dec85826114f1565b9350610df78461161c565b925086604051602001610e0a9190612ea4565b60405160208183030381529060405280519060200120610e2f8462ffffff191661166d565b604051602001610e3f9190612ea4565b604051602081830303815290604052805190602001201415610e6b57610e64846116b3565b9550610e7d565b80610e758161323b565b915050610dda565b505050505092915050565b600080610e98610d898483611222565b9050610ea58160006113a8565b6001600160401b03169392505050565b60008080610ecd610ec8825b8790611222565b6116d8565b9050610ede62ffffff19821661139c565b15610efb5760405162461bcd60e51b81526004016102c59061304d565b6000610f0782866117d9565b90506000610f14826118e0565b9050610f1f81611904565b9450610f2a81611926565b63ffffffff1693505050509250929050565b600080610f4b610ec882610ec1565b9050610f5c62ffffff19821661139c565b15610f795760405162461bcd60e51b81526004016102c59061304d565b6000600287878787604051602001610f949493929190612e51565b60408051601f1981840301815290829052610fae91612ea4565b602060405180830381855afa158015610fcb573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610fee9190612b4c565b9050600060028260405160200161100791815260200190565b60408051601f198184030181529082905261102191612ea4565b602060405180830381855afa15801561103e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906110619190612b4c565b93505050505b949350505050565b6060600061107f610d8982610d82565b905061109062ffffff19821661139c565b156110ad5760405162461bcd60e51b81526004016102c590612f69565b60006110b982856114f1565b905060006110c68261161c565b90506110d762ffffff19821661166d565b9695505050505050565b606061106784848460405180606001604052806029815260200161328360299139611950565b804710156111575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146111a4576040519150601f19603f3d011682016040523d82523d6000602084013e6111a9565b606091505b505090508061121d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016102c5565b505050565b81516000906020840161123d64ffffffffff85168284611a78565b95945050505050565b6000818161125c815b62ffffff19841690611abc565b5061126c62ffffff198516611b96565b6001600160601b031661128857611281611ba5565b9250611395565b60006112958560006113a8565b905060006112a862ffffff198716611b96565b6001600160601b031690506001600160401b0382166112d2576112c9611ba5565b94505050611395565b60006112dd83611bad565b60ff16905060005b836001600160401b031681101561135b5782821061131057611305611ba5565b965050505050611395565b600061133061131f84866131d1565b600e5b62ffffff198c169190611c0b565b905061133b81611c35565b6113459084613140565b92505080806113539061323b565b9150506112e5565b508181146113755761136b611ba5565b9550505050611395565b61138f600f5b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff199081161490565b6000806113bd62ffffff198516846001611c7e565b905060fc81116113d8576113d081611cae565b915050610227565b8060fd141561143e576114066114016113f2856001613140565b62ffffff198716906002611d1a565b611cae565b915061141182611bad565b60ff166003146114395761143761143262ffffff1986168560036000611e5d565b611ec3565b505b6114ea565b8060fe141561149357611467611401611458856001613140565b62ffffff198716906004611d1a565b915061147282611bad565b60ff166005146114395761143761143262ffffff1986168560056000611e5d565b8060ff14156114ea576114bc6114016114ad856001613140565b62ffffff198716906008611d1a565b91506114c782611bad565b60ff166009146114ea576114e861143262ffffff1986168560096000611e5d565b505b5092915050565b600082600f6114ff8161124f565b50600061150d8660006113a8565b6001600160401b03169050600061152962ffffff198816611b96565b6001600160601b031690508186106115775760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b60448201526064016102c5565b600061158283611bad565b60ff1690506000805b888110156115da576115b16115a084866131d1565b600e5b62ffffff198d169190611c0b565b91506115bc82611c35565b6115c69084613140565b92506115d3600182613140565b905061158b565b506115e861131f83856131d1565b905060006115f582611c35565b905061160e8382600d5b62ffffff198e16929190611e5d565b9a9950505050505050505050565b600081600d61162a8161124f565b5060006116388560086113a8565b905061123d61164682611bad565b611651906008613158565b62ffffff1987169060ff166001600160401b0384166007611e5d565b606060008061167b84611b96565b60405193508392506001600160601b031690506116a28461169d846020613140565b611f4b565b508181016020016040529052919050565b600081600d6116c18161124f565b5061106761140162ffffff19861660006008611d1a565b600081816116e58161124f565b506116f562ffffff198516611b96565b6001600160601b031661170a57611281611ba5565b60006117178560006113a8565b9050600061172a62ffffff198716611b96565b6001600160601b031690506001600160401b03821661174b576112c9611ba5565b600061175683611bad565b60ff16905060005b836001600160401b03168110156117bf5782821061177e57611305611ba5565b600061179461178d84866131d1565b6005611322565b905061179f8161208e565b6117a99084613140565b92505080806117b79061323b565b91505061175e565b508181146117cf5761136b611ba5565b61138f600661137b565b60008260066117e78161124f565b5060006117f58660006113a8565b6001600160401b03169050600061181162ffffff198816611b96565b6001600160601b0316905081861061185e5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b60448201526064016102c5565b600061186983611bad565b60ff1690506000805b888110156118b75761188e61188784866131d1565b60056115a3565b91506118998261208e565b6118a39084613140565b92506118b0600182613140565b9050611872565b506118c561178d83856131d1565b905060006118d28261208e565b905061160e838260046115ff565b60008160046118ee8161124f565b5061106762ffffff198516600060246003611e5d565b60008160036119128161124f565b5061106762ffffff198516600060206120e2565b60008160036119348161124f565b5061106761194b62ffffff19861660206004611d1a565b612210565b6060824710156119b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102c5565b843b6119ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c5565b600080866001600160a01b03168587604051611a1b9190612ea4565b60006040518083038185875af1925050503d8060008114611a58576040519150601f19603f3d011682016040523d82523d6000602084013e611a5d565b606091505b5091509150611a6d828286612275565b979650505050505050565b600080611a858385613140565b9050604051811115611a95575060005b80611aa75762ffffff19915050610bd1565b5050606092831b9190911790911b1760181b90565b6000611ac883836122ae565b611b8f576000611ae7611adb8560d81c90565b64ffffffffff166122d1565b9150506000611afc8464ffffffffff166122d1565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016102c59190612f1f565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b600060fc826001600160401b031611611bc857506001919050565b61ffff826001600160401b031611611be257506003919050565b63ffffffff826001600160401b031611611bfe57506005919050565b506009919050565b919050565b60006110678484611c1b87611b96565b6001600160601b0316611c2e91906131d1565b8585611e5d565b600081600e611c438161124f565b506000611c518560086113a8565b9050806001600160401b0316611c6682611bad565b60ff16611c739190613140565b61123d906008613140565b6000611c8b8260206131e8565b611c969060086131a8565b60ff16611ca48585856120e2565b901c949350505050565b60006001600160401b03821115611d165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016102c5565b5090565b6000611067611d2a8585856120e2565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff161790506040816001600160401b03600160801b03600160c01b0316901b604082901c6001600160401b03600160801b03600160c01b0316179050608081901b608082901c179050919050565b600080611e698661237d565b6001600160601b03169050611e7d8661238c565b84611e888784613140565b611e929190613140565b1115611ea55762ffffff19915050611067565b611eaf8582613140565b90506110d78364ffffffffff168286611a78565b60606000611f01611efc82611eee611ee062ffffff198816611b96565b6001600160601b03166123b9565b62ffffff1987169190611c7e565b6122d1565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d01611b64565b6000611f568361241a565b611fb35760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016102c5565b611fbc8361242c565b61201c5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016102c5565b600061202784611b96565b6001600160601b03169050600061203d8561237d565b6001600160601b03169050600060405190508481111561205d5760206060fd5b8285848460045afa506110d76120738760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600561209c8161124f565b5060006120aa8560246113a8565b9050806001600160401b03166120bf82611bad565b60ff166120cc9190613140565b6120d7906024613140565b61123d906004613140565b600060ff82166120f457506000610bd1565b6120fd84611b96565b6001600160601b031661211360ff841685613140565b11156121635761214a6121258561237d565b6001600160601b031661213786611b96565b6001600160601b0316858560ff1661246a565b60405162461bcd60e51b81526004016102c59190612f1f565b60208260ff1611156121da5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b60648201526084016102c5565b6008820260006121e98661237d565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600063ffffffff821115611d165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016102c5565b60608315612284575081610bd1565b8251156122945782518084602001fd5b8160405162461bcd60e51b81526004016102c59190612f1f565b60008164ffffffffff166122c28460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561232f5760006122f08260086131a8565b60ff1685901c905061230181612594565b61ffff16841793508160ff1660101461231c57601084901b93505b506123286001826131e8565b90506122d7565b50600f5b60ff8160ff1610156123775760ff600882021684901c61235281612594565b61ffff16831792508160ff1660001461236d57601083901b92505b5060001901612333565b50915091565b60781c6001600160601b031690565b600061239782611b96565b6123a08361237d565b6123aa919061317d565b6001600160601b031692915050565b600060ff821115611d165760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b60648201526084016102c5565b60006124258261139c565b1592915050565b60006124388260d81c90565b64ffffffffff1664ffffffffff141561245357506000919050565b600061245e8361238c565b60405110199392505050565b60606000612477866122d1565b9150506000612485866122d1565b9150506000612493866122d1565b91505060006124a1866122d1565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60006125a660048360ff16901c6125c6565b60ff1661ffff919091161760081b6125bd826125c6565b60ff1617919050565b600060f08083179060ff821614156125e15750603092915050565b8060ff1660f114156125f65750603192915050565b8060ff1660f2141561260b5750603292915050565b8060ff1660f314156126205750603392915050565b8060ff1660f414156126355750603492915050565b8060ff1660f5141561264a5750603592915050565b8060ff1660f6141561265f5750603692915050565b8060ff1660f714156126745750603792915050565b8060ff1660f814156126895750603892915050565b8060ff1660f9141561269e5750603992915050565b8060ff1660fa14156126b35750606192915050565b8060ff1660fb14156126c85750606292915050565b8060ff1660fc14156126dd5750606392915050565b8060ff1660fd14156126f25750606492915050565b8060ff1660fe14156127075750606592915050565b8060ff1660ff141561271c5750606692915050565b50919050565b80356001600160a01b0381168114611c0657600080fd5b600082601f830112612749578081fd5b8135602061275e6127598361311d565b6130ed565b80838252828201915082860187848660051b890101111561277d578586fd5b855b858110156127a2576127908261289d565b8452928401929084019060010161277f565b5090979650505050505050565b600082601f8301126127bf578081fd5b604051606081016001600160401b0382821081831117156127e2576127e261326c565b8160405282915084866060870111156127f9578485fd5b845b600381101561283457813583811115612812578687fd5b61281e89828a016128b5565b85525060209384019391909101906001016127fb565b50929695505050505050565b600082601f830112612850578081fd5b813560206128606127598361311d565b80838252828201915082860187848660051b890101111561287f578586fd5b855b858110156127a257813584529284019290840190600101612881565b80356001600160e01b031981168114611c0657600080fd5b600082601f8301126128c5578081fd5b81356001600160401b038111156128de576128de61326c565b6128f1601f8201601f19166020016130ed565b818152846020838601011115612905578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612930578081fd5b610bd182612722565b600080600080600060a08688031215612950578081fd5b61295986612722565b9450602086013593506040860135925060608601356001600160401b03811115612981578182fd5b61298d888289016128b5565b95989497509295608001359392505050565b6000806000806000806000806000806000806101808d8f0312156129c1578687fd5b6129ca8d612722565b9b506001600160401b0360208e013511156129e3578687fd5b6129f38e60208f01358f016128b5565b9a506001600160401b0360408e01351115612a0c578687fd5b612a1c8e60408f01358f01612739565b99506001600160401b0360608e01351115612a35578687fd5b612a458e60608f01358f016127af565b985060808d0135975060a08d01359650612a6160c08e01612722565b955060e08d013594506101008d013593506001600160401b036101208e01351115612a8a578283fd5b612a9b8e6101208f01358f01612739565b92506001600160401b036101408e01351115612ab5578081fd5b612ac68e6101408f01358f016128b5565b91506001600160401b036101608e01351115612ae0578081fd5b612af18e6101608f01358f01612840565b90509295989b509295989b509295989b565b60008060408385031215612b15578182fd5b612b1e83612722565b946020939093013593505050565b600060208284031215612b3d578081fd5b81518015158114610bd1578182fd5b600060208284031215612b5d578081fd5b5051919050565b600080600080600080600060e0888a031215612b7e578081fd5b87356001600160401b0380821115612b94578283fd5b612ba08b838c016128b5565b9850612bae60208b0161289d565b975060408a0135915080821115612bc3578283fd5b612bcf8b838c016128b5565b965060608a0135955060808a0135915080821115612beb578283fd5b612bf78b838c016128b5565b945060a08a0135915080821115612c0c578283fd5b50612c198a828b016128b5565b925050612c2860c0890161289d565b905092959891949750929550565b600080600080600060808688031215612c4d578283fd5b85356001600160401b0380821115612c63578485fd5b612c6f89838a016128b5565b96506020880135915060068210612c84578485fd5b819550612c9360408901612722565b94506060880135915080821115612ca8578283fd5b818801915088601f830112612cbb578283fd5b813581811115612cc9578384fd5b896020828501011115612cda578384fd5b9699959850939650602001949392505050565b60008060008060008060c08789031215612d05578384fd5b86359550612d1560208801612722565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a08688031215612d51578283fd5b853594506020860135935060408601356001600160401b0380821115612d75578485fd5b612d8189838a016128b5565b94506060880135915080821115612d96578283fd5b5061298d888289016128b5565b600080600080600080600060e0888a031215612dbd578081fd5b8735965060208801359550612dd46040890161289d565b9450612de260608901612722565b935060808801356001600160401b03811115612dfc578182fd5b612e088a828b016128b5565b93505060a0880135915060c0880135905092959891949750929550565b60008151808452612e3d81602086016020860161320b565b601f01601f19169290920160200192915050565b600063ffffffff60e01b80871683528551612e73816004860160208a0161320b565b855190840190612e8a816004840160208a0161320b565b919094169301600481019390935250506008019392505050565b60008251612eb681846020870161320b565b9190910192915050565b848152836020820152608060408201526000612edf6080830185612e25565b905082606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000610bd16020830184612e25565b6020808252601f908201527f4275726e526f757465724c6f6769633a20696e76616c69642073637269707400604082015260600190565b6020808252601b908201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b604082015260600190565b6020808252601b908201527a213ab9372937baba32b92637b3b4b19d103737ba103637b1b5b2b960291b604082015260600190565b60208082526024908201527f4275726e526f757465724c6f6769633a20646561646c696e65206e6f742070616040820152631cdcd95960e21b606082015260800190565b6020808252601c908201527b109d5c9b949bdd5d195c931bd9da58ce881bdb19081c995c5d595cdd60221b604082015260600190565b6020808252601a9082015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b604082015260600190565b6020808252601f908201527f4275726e526f757465724c6f6769633a206e6f7420666f72206c6f636b657200604082015260600190565b6020808252818101527f4275726e526f757465724c6f6769633a2077726f6e67206f7574707574207478604082015260600190565b604051601f8201601f191681016001600160401b03811182821017156131155761311561326c565b604052919050565b60006001600160401b038211156131365761313661326c565b5060051b60200190565b6000821982111561315357613153613256565b500190565b600060ff821660ff84168060ff0382111561317557613175613256565b019392505050565b60006001600160601b0382811684821680830382111561319f5761319f613256565b01949350505050565b600060ff821660ff84168160ff04811182151516156131c9576131c9613256565b029392505050565b6000828210156131e3576131e3613256565b500390565b600060ff821660ff84168082101561320257613202613256565b90039392505050565b60005b8381101561322657818101518382015260200161320e565b83811115613235576000848401525b50505050565b600060001982141561324f5761324f613256565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212208ba848f190a4c8f3ff366ffd57ae62fd0b744ff91201d5733d62d1abd7f83a7d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isConfirmed(address,bytes32,uint256,bytes,uint256)": {
        "details": "Calls the relay contract to check Merkle inclusion proof",
        "params": {
          "_blockNumber": "Height of the block containing the transaction",
          "_index": "Index of transaction in the block",
          "_intermediateNodes": "Merkle inclusion proof for the transaction",
          "_relay": "Address of Relay contract",
          "_txId": "of the transaction"
        },
        "returns": {
          "_0": "True if the transaction was included in the block"
        }
      },
      "updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)": {
        "details": "One output might return the remaining value to the locker",
        "params": {
          "_lockerLockingScript": "Locking script of locker",
          "_paidOutputCounter": "Number of the tx outputs that pay a cc burn request",
          "_txId": "Transaction id",
          "_vout": "Outputs of a transaction"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkScriptTypeAndLocker(bytes,ScriptTypes,address,bytes)": {
        "notice": "Checks the user hash script to be valid (based on its type)"
      },
      "isConfirmed(address,bytes32,uint256,bytes,uint256)": {
        "notice": "Checks inclusion of the transaction in the specified block"
      },
      "updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)": {
        "notice": "Checks if all outputs of the transaction used to pay a cc burn request"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}