{
  "address": "0xaDb6ed255A6c692CF01946Ce254DB35F34fd2893",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        }
      ],
      "name": "ActivateLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burningTime",
          "type": "uint256"
        }
      ],
      "name": "BurnByLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BurnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "BurnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addingTime",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removedCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removingTime",
          "type": "uint256"
        }
      ],
      "name": "CollateralRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addingTime",
          "type": "uint256"
        }
      ],
      "name": "LockerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teleBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateTime",
          "type": "uint256"
        }
      ],
      "name": "LockerLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTUnlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenUnlockedAmount",
          "type": "uint256"
        }
      ],
      "name": "LockerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isForCCBurn",
          "type": "bool"
        }
      ],
      "name": "LockerSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teleBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashingTime",
          "type": "uint256"
        }
      ],
      "name": "LockerSlashedCollateralSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintingTime",
          "type": "uint256"
        }
      ],
      "name": "MintByLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCCBurnRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCCBurnRouter",
          "type": "address"
        }
      ],
      "name": "NewCCBurnRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralRatio",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLockerPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockerPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewLockerPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinRequiredTDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinRequiredTDTLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "NewMinRequiredTDTLockedAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinRequiredTNTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinRequiredTNTLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "NewMinRequiredTNTLockedAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPriceWithDiscountRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPriceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "NewPriceWithDiscountRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTST",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTST",
          "type": "address"
        }
      ],
      "name": "NewTST",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleBTC",
          "type": "address"
        }
      ],
      "name": "NewTeleBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "RequestAddLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "inactivationTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        }
      ],
      "name": "RequestInactivateLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "RevokeAddLockerRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INACTIVATION_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCKER_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN_DECIMAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TeleportDAOToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPPER_HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addingNativeTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "addLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "buySlashedCollateralOfLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccBurnRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "getLockerLockingScript",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "getLockerTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfLockers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ccBurnRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minRequiredTDTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRequiredTNTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockerPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBurner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "isLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        }
      ],
      "name": "isLockerActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libConstants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "OneHundredPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "HealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "UpperHealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "MaxLockerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "NativeTokenDecimal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "NativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "teleportDAOToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ccBurnRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minRequiredTDTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minRequiredTNTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockerPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceWithDiscountRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inactivationDelay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockerInactivationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockerLeavingAcceptance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lockerTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockersMapping",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "lockerRescueType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "lockerRescueScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "TDTLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeTokenLockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "netMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slashingTeleBTCAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reservedNativeTokenForSlash",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLocker",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCandidate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isScriptHash",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRequiredTDTLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRequiredTNTLockedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceWithDiscountRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_removingNativeTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestActivation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestInactivation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_candidateLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_lockedTSTAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedNativeTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_lockerRescueType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerRescueScript",
          "type": "bytes"
        }
      ],
      "name": "requestToBecomeLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfRemoveLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ccBurnRouter",
          "type": "address"
        }
      ],
      "name": "setCCBurnRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationRatio",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockerPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setLockerPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minRequiredTDTLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinRequiredTDTLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minRequiredTNTLockedAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinRequiredTNTLockedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceWithDiscountRatio",
          "type": "uint256"
        }
      ],
      "name": "setPriceWithDiscountRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TST",
          "type": "address"
        }
      ],
      "name": "setTST",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_slasher",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "slashIdleLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_slasher",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slashThiefLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfLockers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x889aab3a02e23dd064d69ebb5ff3e257d406dcd4bc0d23aef726dc645e0ae8f5",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0xaDb6ed255A6c692CF01946Ce254DB35F34fd2893",
    "transactionIndex": 1,
    "gasUsed": "4767541",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020008000000000000000000000000000000000000000000000000000000000800000000000200000000100080000000000000000000000000000000000000000000000000000000080000000000000020000000000000000000000000040000000000000000000100000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xa00e58eb253d42404777dfa187b64de59eff235c9b52f4947421e307f921d93a",
    "transactionHash": "0x889aab3a02e23dd064d69ebb5ff3e257d406dcd4bc0d23aef726dc645e0ae8f5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5993805,
        "transactionHash": "0x889aab3a02e23dd064d69ebb5ff3e257d406dcd4bc0d23aef726dc645e0ae8f5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x0000000000000000000000006dc2dd54f24979ec26212794c71afefed722280c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019681475a2bb000000000000000000000000000000000000000000000000005ef45bc0a7ace2940000000000000000000000000000000000000000000000eb74e31e6a4a7725d10000000000000000000000000000000000000000000000005edaf3ac320a27940000000000000000000000000000000000000000000000eb74fc867ec019e0d1",
        "logIndex": 2,
        "blockHash": "0xa00e58eb253d42404777dfa187b64de59eff235c9b52f4947421e307f921d93a"
      }
    ],
    "blockNumber": 5993805,
    "cumulativeGasUsed": "4788541",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e2e42804b1cdc35c51529bcacbe0b0a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"}],\"name\":\"ActivateLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burningTime\",\"type\":\"uint256\"}],\"name\":\"BurnByLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addingTime\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removingTime\",\"type\":\"uint256\"}],\"name\":\"CollateralRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addingTime\",\"type\":\"uint256\"}],\"name\":\"LockerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateTime\",\"type\":\"uint256\"}],\"name\":\"LockerLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTUnlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenUnlockedAmount\",\"type\":\"uint256\"}],\"name\":\"LockerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isForCCBurn\",\"type\":\"bool\"}],\"name\":\"LockerSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashingTime\",\"type\":\"uint256\"}],\"name\":\"LockerSlashedCollateralSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingTime\",\"type\":\"uint256\"}],\"name\":\"MintByLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCCBurnRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCCBurnRouter\",\"type\":\"address\"}],\"name\":\"NewCCBurnRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"NewCollateralRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationRatio\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLockerPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewLockerPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinRequiredTDTLockedAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinRequiredTDTLockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinRequiredTNTLockedAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinRequiredTNTLockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPriceWithDiscountRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPriceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"NewPriceWithDiscountRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTST\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTST\",\"type\":\"address\"}],\"name\":\"NewTST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBTC\",\"type\":\"address\"}],\"name\":\"NewTeleBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"}],\"name\":\"RequestAddLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inactivationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"}],\"name\":\"RequestInactivateLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"}],\"name\":\"RevokeAddLockerRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INACTIVATION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCKER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeleportDAOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPPER_HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addingNativeTokenAmount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"addLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"buySlashedCollateralOfLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccBurnRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"getLockerLockingScript\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"getLockerTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfLockers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"isLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"}],\"name\":\"isLockerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libConstants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerInactivationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerLeavingAcceptance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lockerTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockersMapping\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"lockerRescueType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"lockerRescueScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"TDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeTokenLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slashingTeleBTCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedNativeTokenForSlash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocker\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCandidate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isScriptHash\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequiredTDTLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequiredTNTLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceWithDiscountRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_removingNativeTokenAmount\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestActivation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestInactivation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_candidateLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_lockedTSTAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedNativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_lockerRescueType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerRescueScript\",\"type\":\"bytes\"}],\"name\":\"requestToBecomeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfRemoveLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccBurnRouter\",\"type\":\"address\"}],\"name\":\"setCCBurnRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationRatio\",\"type\":\"uint256\"}],\"name\":\"setLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setLockerPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRequiredTDTLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredTDTLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRequiredTNTLockedAmount\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredTNTLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceWithDiscountRatio\",\"type\":\"uint256\"}],\"name\":\"setPriceWithDiscountRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TST\",\"type\":\"address\"}],\"name\":\"setTST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"slashIdleLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_slasher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slashThiefLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfLockers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCollateral(address,uint256)\":{\"params\":{\"_addingNativeTokenAmount\":\"Amount of added collateral\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if collateral is added successfully\"}},\"addLocker(address)\":{\"details\":\"Only owner can call this. The isCandidate is also set to false.\",\"params\":{\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if the candidate is added successfully\"}},\"burn(bytes,uint256)\":{\"details\":\"Burn teleBTC and also get the locker's fee\",\"params\":{\"_amount\":\"Amount of the teleBTC which is minted, including the locker's fee\",\"_lockerLockingScript\":\"Locking script of a locker\"},\"returns\":{\"_0\":\"uint                  The amount of teleBTC burnt\"}},\"buySlashedCollateralOfLocker(address,uint256)\":{\"details\":\"Users buy the slashed collateral using TeleBTC with discount                                   The paid TeleBTC will be burnt to keep the system safe                                   If all the needed TeleBTC is collected and burnt,                                   the rest of slashed collateral is sent back to locker\",\"params\":{\"_collateralAmount\":\"Amount of collateral (TNT) that someone intends to buy with discount\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if buying was successful\"}},\"isBurner(address)\":{\"params\":{\"account\":\"The account which intended to be checked\"},\"returns\":{\"_0\":\"bool\"}},\"isLockerActive(address)\":{\"details\":\"We check a locker status in below cases:                                     1. Minting TeleBTC                                     2. Removing locker's collateral                                     3. Removing locker\",\"params\":{\"_lockerTargetAddress\":\"Address of locker on the target chain\"},\"returns\":{\"_0\":\"True if the locker is active\"}},\"isMinter(address)\":{\"params\":{\"account\":\"The account which intended to be checked\"},\"returns\":{\"_0\":\"bool\"}},\"liquidateLocker(address,uint256)\":{\"details\":\"Anyone can liquidate Locker with health factor under      100% by providing a sufficient amount of TeleBTC.\",\"params\":{\"_collateralAmount\":\"Amount of TNT collateral that someone wants to buy with discount\",\"_lockerTargetAddress\":\"Locker's target chain address\"},\"returns\":{\"_0\":\"True if liquidation was successful\"}},\"mint(bytes,address,uint256)\":{\"details\":\"Mint teleBTC for an account and the locker fee as well\",\"params\":{\"_amount\":\"Amount of the teleBTC which is minted, including the locker's fee\",\"_lockerLockingScript\":\"Locking script of a locker\",\"_receiver\":\"Address of the receiver of the minted teleBTCs\"},\"returns\":{\"_0\":\"uint                  The amount of teleBTC minted for the receiver\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseLocker()\":{\"details\":\"Only functions with whenPaused modifier can be called\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"priceOfOneUnitOfCollateralInBTC()\":{\"details\":\"Returns the price of one native token (1*10^18) in teleBTC\",\"returns\":{\"_0\":\"uint The price of one unit of collateral token (native token in teleBTC)\"}},\"removeCollateral(uint256)\":{\"params\":{\"_removingNativeTokenAmount\":\"Amount of removed collateral\"},\"returns\":{\"_0\":\"True if collateral is removed successfully\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestActivation()\":{\"details\":\"Users can only mint TeleBTC by active locker      Note: lockerInactivationTimestamp = 0 means that the Locker is active\",\"returns\":{\"_0\":\"True if activated successfully\"}},\"requestInactivation()\":{\"details\":\"This would inactivate Locker after INACTIVATION_DELAY. The impact of inactivation is:      1. No one can mint TeleBTC by the Locker      2. Locker can be removed      3. Locker can withdraw unused collateral\",\"returns\":{\"_0\":\"True if deactivated successfully\"}},\"requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)\":{\"details\":\"This request may be approved by the owner\",\"params\":{\"_candidateLockingScript\":\"Locking script of the Locker. Users can use this script to lock BTC.\",\"_lockedNativeTokenAmount\":\"TNT (target native token) bond amount\",\"_lockedTSTAmount\":\"TST bond amount\",\"_lockerRescueScript\":\"Rescue script of Locker. In the case of liqudation, BTC is sent to this script.\",\"_lockerRescueType\":\"Type of Locker's rescue script (e.g. P2SH)\"},\"returns\":{\"_0\":\"True if candidate added successfully\"}},\"revokeRequest()\":{\"details\":\"Send back TST and TNT collateral to the candidate\",\"returns\":{\"_0\":\"True if the candidate is removed successfully\"}},\"selfRemoveLocker()\":{\"details\":\"Only Locker can call this. The conditions for successful remove is:      1. Locker has been inactivated      2. Locker net minted TeleBTC is 0      3. Locker is not being slashed\",\"returns\":{\"_0\":\"True if locker is removed successfully\"}},\"setCollateralRatio(uint256)\":{\"details\":\"This ratio is used to calculate the maximum mintable TeleBTC by a Locker\"},\"setLockerPercentageFee(uint256)\":{\"details\":\"This fee is taken by Locker for every minting or burning\"},\"setPriceOracle(address)\":{\"details\":\"This oracle is used to get the price of native token in BTC\"},\"setPriceWithDiscountRatio(uint256)\":{\"details\":\"This ratio gives discount to users who participate in Locker liquidation\"},\"slashIdleLocker(address,uint256,address,uint256,address)\":{\"details\":\"Only burn router can call this. Locker is slashed since he doesn't provide burn proof      before the request deadline. User who made the burn request will receive the slashed bond.\",\"params\":{\"_amount\":\"Amount of TeleBTC that is slashed from Locker\",\"_lockerTargetAddress\":\"Locker's target chain address\",\"_recipient\":\"Address of user who receives the slashed collateral\",\"_rewardAmount\":\"Amount of TeleBTC that slasher receives\",\"_slasher\":\"Address of slasher who receives reward\"},\"returns\":{\"_0\":\"True if the locker is slashed successfully\"}},\"slashThiefLocker(address,uint256,address,uint256)\":{\"details\":\"Only burn router can call. Locker is slashed because he moved BTC from      Locker's Bitcoin address without any corresponding burn req.      The slashed bond will be sold with discount.\",\"params\":{\"_amount\":\"Value of slashed collateral (in TeleBTC)\",\"_lockerTargetAddress\":\"Locker's target chain address\",\"_rewardAmount\":\"Value of slashed reward (in TeleBTC)\",\"_slasher\":\"Address of slasher who receives reward\"},\"returns\":{\"_0\":\"True if the locker is slashed successfully\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPauseLocker()\":{\"details\":\"Only functions with whenNotPaused modifier can be called\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBurner(address)\":{\"notice\":\"Give an account access to burn\"},\"addCollateral(address,uint256)\":{\"notice\":\"Increases TNT collateral of the locker\"},\"addLocker(address)\":{\"notice\":\"Approve the candidate request to become Locker\"},\"addMinter(address)\":{\"notice\":\"Give an account access to mint\"},\"burn(bytes,uint256)\":{\"notice\":\"Burn teleBTC of an account\"},\"buySlashedCollateralOfLocker(address,uint256)\":{\"notice\":\"Sells lockers slashed collateral\"},\"getLockerLockingScript(address)\":{\"notice\":\"Return locking script of _lockerTargetAddress Locker\"},\"getLockerTargetAddress(bytes)\":{\"notice\":\"Return EVM address of _lockerLockingScript Locker\"},\"getNumberOfLockers()\":{\"notice\":\"Return total number of Lockers\"},\"isBurner(address)\":{\"notice\":\"Check if an account is burner\"},\"isLocker(bytes)\":{\"notice\":\"Return true if _lockerLockingScript is Locker\"},\"isLockerActive(address)\":{\"notice\":\"Returns the Locker status\"},\"isMinter(address)\":{\"notice\":\"Check if an account is minter\"},\"liquidateLocker(address,uint256)\":{\"notice\":\"Liquidate Locker with unhealthy collateral\"},\"mint(bytes,address,uint256)\":{\"notice\":\"Mint teleBTC for an account\"},\"pauseLocker()\":{\"notice\":\"Pause the contract\"},\"removeBurner(address)\":{\"notice\":\"Remove an account's access to burn\"},\"removeCollateral(uint256)\":{\"notice\":\"Decreases TNT collateral of the locker\"},\"removeMinter(address)\":{\"notice\":\"Remove an account's access to mint\"},\"requestActivation()\":{\"notice\":\"Activate Locker\"},\"requestInactivation()\":{\"notice\":\"Request to inactivate Locker\"},\"requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)\":{\"notice\":\"Submit request to become Locker\"},\"revokeRequest()\":{\"notice\":\"Revoke request to become Locker\"},\"selfRemoveLocker()\":{\"notice\":\"Removes Locker from system and send back Locker TST and TNT collateral.\"},\"setCCBurnRouter(address)\":{\"notice\":\"Update burn router address\"},\"setCollateralRatio(uint256)\":{\"notice\":\"Update collateral ratio\"},\"setLiquidationRatio(uint256)\":{\"notice\":\"Update liquidation ratio\"},\"setLockerPercentageFee(uint256)\":{\"notice\":\"Update locker percentage fee\"},\"setMinRequiredTDTLockedAmount(uint256)\":{\"notice\":\"Update the required TST bond to become Locker\"},\"setMinRequiredTNTLockedAmount(uint256)\":{\"notice\":\"Update the required native token bond to become Locker\"},\"setPriceOracle(address)\":{\"notice\":\"Update the price oracle\"},\"setPriceWithDiscountRatio(uint256)\":{\"notice\":\"Update price with discount ratio\"},\"setTST(address)\":{\"notice\":\"Update TST contract address\"},\"setTeleBTC(address)\":{\"notice\":\"Update wrapped BTC address\"},\"slashIdleLocker(address,uint256,address,uint256,address)\":{\"notice\":\"Slash Locker for unprocessed unwrap request\"},\"slashThiefLocker(address,uint256,address,uint256)\":{\"notice\":\"Slash Locker for stealing users BTC\"},\"unPauseLocker()\":{\"notice\":\"Un-pause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lockersManager/LockersManagerLogic.sol\":\"LockersManagerLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITeleBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0x9686246b83f81aeb2b71cc3b9178ce2a81fd63039dbc26da5e3b08190bce6427\",\"license\":\"MIT\"},\"contracts/libraries/LockersManagerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\n\\nlibrary LockersManagerLib {\\n    function requestToBecomeLocker(\\n        mapping(address => ILockersManager.locker) storage lockersMapping,\\n        ILockersManager.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint256 _lockedTDTAmount,\\n        uint256 _lockedNativeTokenAmount,\\n        bytes calldata _candidateLockingScript,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external {\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(!lockersMapping[msg.sender].isLocker, \\\"Lockers: is locker\\\");\\n\\n        require(\\n            _lockedTDTAmount >= libParams.minRequiredTDTLockedAmount,\\n            \\\"Lockers: low TDT\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= libParams.minRequiredTNTLockedAmount &&\\n                msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low TNT\\\"\\n        );\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        ILockersManager.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n\\n        lockersMapping[msg.sender] = locker_;\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        ILockersManager.locker storage theLocker,\\n        uint256 _collateralAmount\\n    ) external returns (uint256 neededTeleBTC) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedNativeTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        neededTeleBTC =\\n            (theLocker.slashingTeleBTCAmount * _collateralAmount) /\\n            theLocker.reservedNativeTokenForSlash;\\n\\n        if (neededTeleBTC < theLocker.slashingTeleBTCAmount) {\\n            // to avoid precision loss (so buyer cannot profit of it)\\n            neededTeleBTC = neededTeleBTC + 1;\\n        }\\n\\n        // Updates locker's slashing info\\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount -\\n            neededTeleBTC;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash -\\n            _collateralAmount;\\n    }\\n\\n    function liquidateLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _collateralAmount\\n    ) external view returns (uint256 neededTeleBTC) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        // ILockersManager.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint256 priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libConstants,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint256 _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.nativeTokenLockedAmount) {\\n            _maxBuyableCollateral = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of TeleBTC to buy collateralAmount\\n        neededTeleBTC = neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededTeleBTC = neededTeleBTC + 1; // to prevent precision loss\\n    }\\n\\n    function slashThiefLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _rewardAmount,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256 rewardInNativeToken, uint256 neededNativeTokenForSlash)\\n    {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint256 equivalentNativeToken = IPriceOracle(libParams.priceOracle)\\n            .equivalentOutputAmount(\\n                _amount, // Total amount of TeleBTC that is slashed\\n                ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n                libConstants.NativeTokenDecimal, // Decimal of TNT\\n                libParams.teleBTC, // Input token\\n                libConstants.NativeToken // Output token\\n            );\\n\\n        rewardInNativeToken = (equivalentNativeToken * _rewardAmount) / _amount;\\n        neededNativeTokenForSlash =\\n            (equivalentNativeToken * libParams.liquidationRatio) /\\n            libConstants.OneHundredPercent;\\n\\n        if (\\n            (rewardInNativeToken + neededNativeTokenForSlash) >\\n            theLocker.nativeTokenLockedAmount\\n        ) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInNativeToken =\\n                (rewardInNativeToken * theLocker.nativeTokenLockedAmount) /\\n                (rewardInNativeToken + neededNativeTokenForSlash);\\n            neededNativeTokenForSlash =\\n                theLocker.nativeTokenLockedAmount -\\n                rewardInNativeToken;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount -\\n            (rewardInNativeToken + neededNativeTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n\\n        theLocker.netMinted = theLocker.netMinted - _amount;\\n\\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount +\\n            _amount;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash +\\n            neededNativeTokenForSlash;\\n    }\\n\\n    function slashIdleLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _rewardAmount,\\n        uint256 _amount\\n    ) external returns (uint256 equivalentNativeToken) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentNativeToken = IPriceOracle(libParams.priceOracle)\\n            .equivalentOutputAmount(\\n                _rewardAmount + _amount, // Total amount of TeleBTC that is slashed\\n                ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n                libConstants.NativeTokenDecimal, // Decimal of TNT\\n                libParams.teleBTC, // Input token\\n                libConstants.NativeToken // Output token\\n            );\\n\\n        if (equivalentNativeToken > theLocker.nativeTokenLockedAmount) {\\n            equivalentNativeToken = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount -\\n            equivalentNativeToken;\\n    }\\n\\n    function maximumBuyableCollateral(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _priceOfOneUnitOfCollateral\\n    ) public view returns (uint256) {\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint256 teleBTCDecimal = ERC20(libParams.teleBTC).decimals();\\n\\n        uint256 antecedent = (libConstants.UpperHealthFactor *\\n            theLocker.netMinted *\\n            libParams.liquidationRatio *\\n            (10**libConstants.NativeTokenDecimal)) -\\n            (theLocker.nativeTokenLockedAmount *\\n                _priceOfOneUnitOfCollateral *\\n                (10**teleBTCDecimal));\\n\\n        uint256 consequent = ((libConstants.UpperHealthFactor *\\n            libParams.liquidationRatio *\\n            _priceOfOneUnitOfCollateral *\\n            libParams.priceWithDiscountRatio) /\\n            libConstants.OneHundredPercent) -\\n            (_priceOfOneUnitOfCollateral * (10**teleBTCDecimal));\\n\\n        return antecedent / consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _priceOfOneUnitOfCollateral\\n    ) public view returns (uint256) {\\n        return\\n            (_priceOfOneUnitOfCollateral *\\n                theLocker.nativeTokenLockedAmount *\\n                (10**(1 + ERC20(libParams.teleBTC).decimals()))) /\\n            (theLocker.netMinted *\\n                libParams.liquidationRatio *\\n                (10**(1 + libConstants.NativeTokenDecimal)));\\n    }\\n\\n    function neededTeleBTCToBuyCollateral(\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _collateralAmount,\\n        uint256 _priceOfCollateral\\n    ) public pure returns (uint256) {\\n        return\\n            (_collateralAmount *\\n                _priceOfCollateral *\\n                libParams.priceWithDiscountRatio) /\\n            (libConstants.OneHundredPercent *\\n                (10**libConstants.NativeTokenDecimal));\\n    }\\n\\n    function addToCollateral(\\n        uint256 value,\\n        ILockersManager.locker storage theLocker,\\n        uint256 _addingNativeTokenAmount\\n    ) external {\\n        require(value == _addingNativeTokenAmount, \\\"Lockers: msg value\\\");\\n\\n        require(theLocker.isLocker, \\\"Lockers: no locker\\\");\\n\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount +\\n            _addingNativeTokenAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _priceOfOneUnitOfCollateral,\\n        uint256 _removingNativeTokenAmount\\n    ) internal {\\n        require(theLocker.isLocker, \\\"Lockers: account is not a locker\\\");\\n\\n        // Capacity of locker = (locker's collateral value in TeleBTC) * (collateral ratio) - (minted TeleBTC)\\n        uint256 lockerCapacity = (theLocker.nativeTokenLockedAmount *\\n            _priceOfOneUnitOfCollateral *\\n            libConstants.OneHundredPercent) /\\n            (libParams.collateralRatio *\\n                (10**libConstants.NativeTokenDecimal)) -\\n            theLocker.netMinted;\\n\\n        uint256 maxRemovableCollateral = (lockerCapacity *\\n            (10**libConstants.NativeTokenDecimal)) /\\n            _priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingNativeTokenAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount >=\\n                libParams.minRequiredTNTLockedAmount,\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount -\\n            _removingNativeTokenAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams\\n    ) public view returns (uint256) {\\n        return\\n            IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n                (10**libConstants.NativeTokenDecimal), // 1 Ether is 10^18 wei\\n                libConstants.NativeTokenDecimal,\\n                ITeleBTC(libParams.teleBTC).decimals(),\\n                libConstants.NativeToken,\\n                libParams.teleBTC\\n            );\\n    }\\n\\n    function lockerCollateralInTeleBTC(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams\\n    ) public view returns (uint256) {\\n        return\\n            IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n                theLocker.nativeTokenLockedAmount,\\n                libConstants.NativeTokenDecimal,\\n                ITeleBTC(libParams.teleBTC).decimals(),\\n                libConstants.NativeToken,\\n                libParams.teleBTC\\n            );\\n    }\\n\\n    /// @notice                             Get how much the locker can mint\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @return theLockerCapacity           The net minted of the locker\\n    function getLockerCapacity(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 netMinted,\\n        uint256 amount\\n    ) public view returns (uint256 theLockerCapacity) {\\n        uint256 _lockerCollateralInTeleBTC = (lockerCollateralInTeleBTC(\\n            theLocker,\\n            libConstants,\\n            libParams\\n        ) * libConstants.OneHundredPercent) / libParams.collateralRatio;\\n\\n        if (_lockerCollateralInTeleBTC > netMinted) {\\n            theLockerCapacity = _lockerCollateralInTeleBTC - netMinted;\\n        } else {\\n            theLockerCapacity = 0;\\n        }\\n\\n        require(theLockerCapacity >= amount, \\\"Lockers: insufficient capacity\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0127ba37defad7790f75bfb081a15e3355ce2c6252eae833a1b250c0372b467f\",\"license\":\"MIT\"},\"contracts/lockersManager/LockersManagerLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./LockersManagerStorage.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../routers/interfaces/IBurnRouter.sol\\\";\\nimport \\\"../libraries/LockersManagerLib.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LockersManagerLogic is\\n    LockersManagerStorage,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    error ZeroAddress();\\n    error ZeroValue();\\n\\n    using LockersManagerLib for *;\\n    using SafeERC20 for IERC20;\\n\\n    function initialize(\\n        address _teleBTC,\\n        address _priceOracle,\\n        address _ccBurnRouter,\\n        uint256 _minRequiredTDTLockedAmount,\\n        uint256 _minRequiredTNTLockedAmount,\\n        uint256 _collateralRatio,\\n        uint256 _liquidationRatio,\\n        uint256 _lockerPercentageFee,\\n        uint256 _priceWithDiscountRatio\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        setTeleBTC(_teleBTC);\\n        setCCBurnRouter(_ccBurnRouter);\\n        setPriceOracle(_priceOracle);\\n        setMinRequiredTDTLockedAmount(_minRequiredTDTLockedAmount);\\n        setMinRequiredTNTLockedAmount(_minRequiredTNTLockedAmount);\\n        setCollateralRatio(_collateralRatio);\\n        setLiquidationRatio(_liquidationRatio);\\n        setLockerPercentageFee(_lockerPercentageFee);\\n        setPriceWithDiscountRatio(_priceWithDiscountRatio);\\n\\n        libConstants.OneHundredPercent = ONE_HUNDRED_PERCENT;\\n        libConstants.HealthFactor = HEALTH_FACTOR;\\n        libConstants.UpperHealthFactor = UPPER_HEALTH_FACTOR;\\n        libConstants.MaxLockerFee = MAX_LOCKER_FEE;\\n        libConstants.NativeTokenDecimal = NATIVE_TOKEN_DECIMAL;\\n        libConstants.NativeToken = NATIVE_TOKEN;\\n    }\\n\\n    // *************** Modifiers ***************\\n\\n    modifier nonZeroAddress(address _address) {\\n        if (_address == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint256 _value) {\\n        if (_value == 0) revert ZeroValue();\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"Lockers: only minters can mint\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"Lockers: only burners can burn\\\");\\n        _;\\n    }\\n\\n    // *************** External functions ***************\\n\\n    /// @notice Give an account access to mint\\n    function addMinter(address _account)\\n        external\\n        override\\n        nonZeroAddress(_account)\\n        onlyOwner\\n    {\\n        require(!isMinter(_account), \\\"Lockers: account already has role\\\");\\n        minters[_account] = true;\\n        emit MinterAdded(_account);\\n    }\\n\\n    /// @notice Remove an account's access to mint\\n    function removeMinter(address _account)\\n        external\\n        override\\n        nonZeroAddress(_account)\\n        onlyOwner\\n    {\\n        require(isMinter(_account), \\\"Lockers: account does not have role\\\");\\n        minters[_account] = false;\\n        emit MinterRemoved(_account);\\n    }\\n\\n    /// @notice Give an account access to burn\\n    function addBurner(address _account)\\n        external\\n        override\\n        nonZeroAddress(_account)\\n        onlyOwner\\n    {\\n        require(!isBurner(_account), \\\"Lockers: account already has role\\\");\\n        burners[_account] = true;\\n        emit BurnerAdded(_account);\\n    }\\n\\n    /// @notice Remove an account's access to burn\\n    function removeBurner(address _account)\\n        external\\n        override\\n        nonZeroAddress(_account)\\n        onlyOwner\\n    {\\n        require(isBurner(_account), \\\"Lockers: account does not have role\\\");\\n        burners[_account] = false;\\n        emit BurnerRemoved(_account);\\n    }\\n\\n    /// @notice Pause the contract\\n    /// @dev Only functions with whenPaused modifier can be called\\n    function pauseLocker() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Un-pause the contract\\n    /// @dev Only functions with whenNotPaused modifier can be called\\n    function unPauseLocker() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Return EVM address of _lockerLockingScript Locker\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return lockerTargetAddress[_lockerLockingScript];\\n    }\\n\\n    /// @notice Return true if _lockerLockingScript is Locker\\n    function isLocker(bytes calldata _lockerLockingScript)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            lockersMapping[lockerTargetAddress[_lockerLockingScript]].isLocker;\\n    }\\n\\n    /// @notice Return total number of Lockers\\n    function getNumberOfLockers() external view override returns (uint256) {\\n        return totalNumberOfLockers;\\n    }\\n\\n    /// @notice Return locking script of _lockerTargetAddress Locker\\n    function getLockerLockingScript(address _lockerTargetAddress)\\n        external\\n        view\\n        override\\n        nonZeroAddress(_lockerTargetAddress)\\n        returns (bytes memory)\\n    {\\n        return lockersMapping[_lockerTargetAddress].lockerLockingScript;\\n    }\\n\\n    /// @notice Update TST contract address\\n    function setTST(address _TST)\\n        public\\n        override\\n        onlyOwner\\n        nonZeroAddress(_TST)\\n    {\\n        emit NewTST(TeleportDAOToken, _TST);\\n        TeleportDAOToken = _TST;\\n        libParams.teleportDAOToken = TeleportDAOToken;\\n    }\\n\\n    /// @notice Update locker percentage fee\\n    /// @dev This fee is taken by Locker for every minting or burning\\n    function setLockerPercentageFee(uint256 _lockerPercentageFee)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _lockerPercentageFee <= MAX_LOCKER_FEE,\\n            \\\"Lockers: invalid locker fee\\\"\\n        );\\n        emit NewLockerPercentageFee(lockerPercentageFee, _lockerPercentageFee);\\n        lockerPercentageFee = _lockerPercentageFee;\\n        libParams.lockerPercentageFee = lockerPercentageFee;\\n    }\\n\\n    /// @notice Update price with discount ratio\\n    /// @dev This ratio gives discount to users who participate in Locker liquidation\\n    function setPriceWithDiscountRatio(uint256 _priceWithDiscountRatio)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _priceWithDiscountRatio <= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: less than 100%\\\"\\n        );\\n        emit NewPriceWithDiscountRatio(\\n            priceWithDiscountRatio,\\n            _priceWithDiscountRatio\\n        );\\n\\n        priceWithDiscountRatio = _priceWithDiscountRatio;\\n        libParams.priceWithDiscountRatio = priceWithDiscountRatio;\\n    }\\n\\n    /// @notice Update the required TST bond to become Locker\\n    function setMinRequiredTDTLockedAmount(uint256 _minRequiredTDTLockedAmount)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        emit NewMinRequiredTDTLockedAmount(\\n            minRequiredTDTLockedAmount,\\n            _minRequiredTDTLockedAmount\\n        );\\n        minRequiredTDTLockedAmount = _minRequiredTDTLockedAmount;\\n        libParams.minRequiredTDTLockedAmount = minRequiredTDTLockedAmount;\\n    }\\n\\n    /// @notice Update the required native token bond to become Locker\\n    function setMinRequiredTNTLockedAmount(uint256 _minRequiredTNTLockedAmount)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        if (_minRequiredTNTLockedAmount == 0) revert ZeroValue();\\n        emit NewMinRequiredTNTLockedAmount(\\n            minRequiredTNTLockedAmount,\\n            _minRequiredTNTLockedAmount\\n        );\\n        minRequiredTNTLockedAmount = _minRequiredTNTLockedAmount;\\n        libParams.minRequiredTNTLockedAmount = minRequiredTNTLockedAmount;\\n    }\\n\\n    /// @notice Update the price oracle\\n    /// @dev This oracle is used to get the price of native token in BTC\\n    function setPriceOracle(address _priceOracle)\\n        public\\n        override\\n        nonZeroAddress(_priceOracle)\\n        onlyOwner\\n    {\\n        emit NewPriceOracle(priceOracle, _priceOracle);\\n        priceOracle = _priceOracle;\\n        libParams.priceOracle = priceOracle;\\n    }\\n\\n    /// @notice Update burn router address\\n    function setCCBurnRouter(address _ccBurnRouter)\\n        public\\n        override\\n        nonZeroAddress(_ccBurnRouter)\\n        onlyOwner\\n    {\\n        emit NewCCBurnRouter(ccBurnRouter, _ccBurnRouter);\\n        emit BurnerRemoved(ccBurnRouter);\\n        burners[ccBurnRouter] = false;\\n        ccBurnRouter = _ccBurnRouter;\\n        libParams.ccBurnRouter = ccBurnRouter;\\n        emit BurnerAdded(ccBurnRouter);\\n        burners[ccBurnRouter] = true;\\n    }\\n\\n    /// @notice Update wrapped BTC address\\n    function setTeleBTC(address _teleBTC)\\n        public\\n        override\\n        nonZeroAddress(_teleBTC)\\n        onlyOwner\\n    {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n        libParams.teleBTC = teleBTC;\\n    }\\n\\n    /// @notice Update collateral ratio\\n    /// @dev This ratio is used to calculate the maximum mintable TeleBTC by a Locker\\n    function setCollateralRatio(uint256 _collateralRatio)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_collateralRatio > liquidationRatio, \\\"Lockers: must CR > LR\\\");\\n        emit NewCollateralRatio(collateralRatio, _collateralRatio);\\n        collateralRatio = _collateralRatio;\\n        libParams.collateralRatio = collateralRatio;\\n    }\\n\\n    /// @notice Update liquidation ratio\\n    function setLiquidationRatio(uint256 _liquidationRatio)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(collateralRatio > _liquidationRatio, \\\"Lockers: must CR > LR\\\");\\n        emit NewLiquidationRatio(liquidationRatio, _liquidationRatio);\\n        liquidationRatio = _liquidationRatio;\\n        libParams.liquidationRatio = liquidationRatio;\\n    }\\n\\n    /// @notice Submit request to become Locker\\n    /// @dev This request may be approved by the owner\\n    /// @param _candidateLockingScript Locking script of the Locker. Users can use this script to lock BTC.\\n    /// @param _lockedTSTAmount TST bond amount\\n    /// @param _lockedNativeTokenAmount TNT (target native token) bond amount\\n    /// @param _lockerRescueType Type of Locker's rescue script (e.g. P2SH)\\n    /// @param _lockerRescueScript Rescue script of Locker. In the case of liqudation, BTC is sent to this script.\\n    /// @return True if candidate added successfully\\n    function requestToBecomeLocker(\\n        bytes calldata _candidateLockingScript,\\n        uint256 _lockedTSTAmount,\\n        uint256 _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable override nonReentrant returns (bool) {\\n        LockersManagerLib.requestToBecomeLocker(\\n            lockersMapping,\\n            libParams,\\n            lockerTargetAddress[_candidateLockingScript],\\n            _lockedTSTAmount,\\n            _lockedNativeTokenAmount,\\n            _candidateLockingScript,\\n            _lockerRescueType,\\n            _lockerRescueScript\\n        );\\n\\n        if (libParams.teleportDAOToken != address(0)) {\\n            IERC20(libParams.teleportDAOToken).safeTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                _lockedTSTAmount\\n            );\\n        }\\n\\n        totalNumberOfCandidates = totalNumberOfCandidates + 1;\\n\\n        emit RequestAddLocker(\\n            _msgSender(),\\n            _candidateLockingScript,\\n            _lockedTSTAmount,\\n            _lockedNativeTokenAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Revoke request to become Locker\\n    /// @dev Send back TST and TNT collateral to the candidate\\n    /// @return True if the candidate is removed successfully\\n    function revokeRequest() external override nonReentrant returns (bool) {\\n        require(lockersMapping[_msgSender()].isCandidate, \\\"Lockers: no req\\\");\\n\\n        // Loads locker's information\\n        locker memory lockerRequest = lockersMapping[_msgSender()];\\n\\n        // Removes candidate from lockersMapping\\n        delete lockersMapping[_msgSender()];\\n        totalNumberOfCandidates = totalNumberOfCandidates - 1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).safeTransfer(\\n            _msgSender(),\\n            lockerRequest.TDTLockedAmount\\n        );\\n        Address.sendValue(\\n            payable(_msgSender()),\\n            lockerRequest.nativeTokenLockedAmount\\n        );\\n\\n        emit RevokeAddLockerRequest(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Approve the candidate request to become Locker\\n    /// @dev Only owner can call this. The isCandidate is also set to false.\\n    /// @param _lockerTargetAddress Locker's target chain address\\n    /// @return True if the candidate is added successfully\\n    function addLocker(address _lockerTargetAddress)\\n        external\\n        override\\n        nonZeroAddress(_lockerTargetAddress)\\n        nonReentrant\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            lockersMapping[_lockerTargetAddress].isCandidate,\\n            \\\"Lockers: no request\\\"\\n        );\\n\\n        // Updates locker's status\\n        lockersMapping[_lockerTargetAddress].isCandidate = false;\\n        lockersMapping[_lockerTargetAddress].isLocker = true;\\n\\n        // Updates number of candidates and lockers\\n        totalNumberOfCandidates = totalNumberOfCandidates - 1;\\n        totalNumberOfLockers = totalNumberOfLockers + 1;\\n\\n        lockerTargetAddress[\\n            lockersMapping[_lockerTargetAddress].lockerLockingScript\\n        ] = _lockerTargetAddress;\\n\\n        emit LockerAdded(\\n            _lockerTargetAddress,\\n            lockersMapping[_lockerTargetAddress].lockerLockingScript,\\n            lockersMapping[_lockerTargetAddress].TDTLockedAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n        return true;\\n    }\\n\\n    /// @notice Request to inactivate Locker\\n    /// @dev This would inactivate Locker after INACTIVATION_DELAY. The impact of inactivation is:\\n    ///      1. No one can mint TeleBTC by the Locker\\n    ///      2. Locker can be removed\\n    ///      3. Locker can withdraw unused collateral\\n    /// @return True if deactivated successfully\\n    function requestInactivation()\\n        external\\n        override\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            lockerInactivationTimestamp[_msgSender()] == 0,\\n            \\\"Lockers: locker has already requested\\\"\\n        );\\n\\n        lockerInactivationTimestamp[_msgSender()] =\\n            block.timestamp +\\n            INACTIVATION_DELAY;\\n\\n        emit RequestInactivateLocker(\\n            _msgSender(),\\n            lockerInactivationTimestamp[_msgSender()],\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            lockersMapping[_msgSender()].netMinted\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Activate Locker\\n    /// @dev Users can only mint TeleBTC by active locker\\n    ///      Note: lockerInactivationTimestamp = 0 means that the Locker is active\\n    /// @return True if activated successfully\\n    function requestActivation() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        lockerInactivationTimestamp[_msgSender()] = 0;\\n\\n        emit ActivateLocker(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            lockersMapping[_msgSender()].netMinted\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Removes Locker from system and send back Locker TST and TNT collateral.\\n    /// @dev Only Locker can call this. The conditions for successful remove is:\\n    ///      1. Locker has been inactivated\\n    ///      2. Locker net minted TeleBTC is 0\\n    ///      3. Locker is not being slashed\\n    /// @return True if locker is removed successfully\\n    function selfRemoveLocker() external override nonReentrant returns (bool) {\\n        locker memory _removingLocker = lockersMapping[_msgSender()];\\n\\n        require(_removingLocker.isLocker, \\\"Lockers: no locker\\\");\\n\\n        require(!isLockerActive(_msgSender()), \\\"Lockers: still active\\\");\\n\\n        require(_removingLocker.netMinted == 0, \\\"Lockers: 0 net minted\\\");\\n\\n        require(\\n            _removingLocker.slashingTeleBTCAmount == 0,\\n            \\\"Lockers: 0 slashing TBTC\\\"\\n        );\\n\\n        // Removes locker from lockersMapping\\n\\n        delete lockerTargetAddress[\\n            lockersMapping[_msgSender()].lockerLockingScript\\n        ];\\n        delete lockersMapping[_msgSender()];\\n        totalNumberOfLockers = totalNumberOfLockers - 1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).safeTransfer(\\n            _msgSender(),\\n            _removingLocker.TDTLockedAmount\\n        );\\n        Address.sendValue(\\n            payable(_msgSender()),\\n            _removingLocker.nativeTokenLockedAmount\\n        );\\n\\n        emit LockerRemoved(\\n            _msgSender(),\\n            _removingLocker.lockerLockingScript,\\n            _removingLocker.TDTLockedAmount,\\n            _removingLocker.nativeTokenLockedAmount\\n        );\\n        return true;\\n    }\\n\\n    /// @notice Slash Locker for unprocessed unwrap request\\n    /// @dev Only burn router can call this. Locker is slashed since he doesn't provide burn proof\\n    ///      before the request deadline. User who made the burn request will receive the slashed bond.\\n    /// @param _lockerTargetAddress Locker's target chain address\\n    /// @param _rewardAmount Amount of TeleBTC that slasher receives\\n    /// @param _slasher Address of slasher who receives reward\\n    /// @param _amount Amount of TeleBTC that is slashed from Locker\\n    /// @param _recipient Address of user who receives the slashed collateral\\n    /// @return True if the locker is slashed successfully\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint256 _rewardAmount,\\n        address _slasher,\\n        uint256 _amount,\\n        address _recipient\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        uint256 equivalentNativeToken = LockersManagerLib.slashIdleLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _rewardAmount,\\n            _amount\\n        );\\n\\n        // Transfers TNT to user\\n        payable(_recipient).transfer(\\n            (equivalentNativeToken * _amount) / (_amount + _rewardAmount)\\n        );\\n        // Transfers TNT to slasher\\n        uint256 rewardAmountInNativeToken = equivalentNativeToken -\\n            ((equivalentNativeToken * _amount) / (_amount + _rewardAmount));\\n        payable(_slasher).transfer(rewardAmountInNativeToken);\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardAmountInNativeToken,\\n            _slasher,\\n            _amount,\\n            _recipient,\\n            equivalentNativeToken,\\n            block.timestamp,\\n            true\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Slash Locker for stealing users BTC\\n    /// @dev Only burn router can call. Locker is slashed because he moved BTC from\\n    ///      Locker's Bitcoin address without any corresponding burn req.\\n    ///      The slashed bond will be sold with discount.\\n    /// @param _lockerTargetAddress Locker's target chain address\\n    /// @param _rewardAmount Value of slashed reward (in TeleBTC)\\n    /// @param _slasher Address of slasher who receives reward\\n    /// @param _amount Value of slashed collateral (in TeleBTC)\\n    /// @return True if the locker is slashed successfully\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint256 _rewardAmount,\\n        address _slasher,\\n        uint256 _amount\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        (\\n            uint256 rewardInNativeToken,\\n            uint256 neededNativeTokenForSlash\\n        ) = LockersManagerLib.slashThiefLocker(\\n                lockersMapping[_lockerTargetAddress],\\n                libConstants,\\n                libParams,\\n                _rewardAmount,\\n                _amount\\n            );\\n\\n        payable(_slasher).transfer(rewardInNativeToken);\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardInNativeToken,\\n            _slasher,\\n            _amount,\\n            address(this),\\n            neededNativeTokenForSlash + rewardInNativeToken,\\n            block.timestamp,\\n            false\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Liquidate Locker with unhealthy collateral\\n    /// @dev Anyone can liquidate Locker with health factor under\\n    ///      100% by providing a sufficient amount of TeleBTC.\\n    /// @param _lockerTargetAddress Locker's target chain address\\n    /// @param _collateralAmount Amount of TNT collateral that someone wants to buy with discount\\n    /// @return True if liquidation was successful\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint256 _collateralAmount\\n    )\\n        external\\n        override\\n        nonZeroAddress(_lockerTargetAddress)\\n        nonZeroValue(_collateralAmount)\\n        nonReentrant\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        uint256 neededTeleBTC = LockersManagerLib.liquidateLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _collateralAmount\\n        );\\n\\n        locker memory theLiquidatingLocker = lockersMapping[\\n            _lockerTargetAddress\\n        ];\\n\\n        // Updates TNT bond of locker\\n        lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount =\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount -\\n            _collateralAmount;\\n\\n        // transfer teleBTC from user\\n        IERC20(teleBTC).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            neededTeleBTC\\n        );\\n\\n        // Burns TeleBTC for locker rescue script\\n        IERC20(teleBTC).approve(ccBurnRouter, neededTeleBTC);\\n        IBurnRouter(ccBurnRouter).unwrap(\\n            neededTeleBTC,\\n            theLiquidatingLocker.lockerRescueScript,\\n            theLiquidatingLocker.lockerRescueType,\\n            theLiquidatingLocker.lockerLockingScript,\\n            0\\n        );\\n\\n        Address.sendValue(payable(_msgSender()), _collateralAmount);\\n\\n        emit LockerLiquidated(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededTeleBTC,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Sells lockers slashed collateral\\n    /// @dev                              Users buy the slashed collateral using TeleBTC with discount\\n    ///                                   The paid TeleBTC will be burnt to keep the system safe\\n    ///                                   If all the needed TeleBTC is collected and burnt,\\n    ///                                   the rest of slashed collateral is sent back to locker\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral (TNT) that someone intends to buy with discount\\n    /// @return                           True if buying was successful\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint256 _collateralAmount\\n    )\\n        external\\n        override\\n        nonZeroAddress(_lockerTargetAddress)\\n        nonReentrant\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        uint256 neededTeleBTC = LockersManagerLib.buySlashedCollateralOfLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            _collateralAmount\\n        );\\n\\n        // Burns user's TeleBTC\\n        ITeleBTC(teleBTC).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            neededTeleBTC\\n        );\\n        ITeleBTC(teleBTC).burn(neededTeleBTC);\\n\\n        // Sends bought collateral to user\\n        Address.sendValue(payable(_msgSender()), _collateralAmount);\\n\\n        emit LockerSlashedCollateralSold(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededTeleBTC,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Increases TNT collateral of the locker\\n    /// @param _lockerTargetAddress             Locker's target chain address\\n    /// @param _addingNativeTokenAmount         Amount of added collateral\\n    /// @return                                 True if collateral is added successfully\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint256 _addingNativeTokenAmount\\n    ) external payable override nonReentrant returns (bool) {\\n        LockersManagerLib.addToCollateral(\\n            msg.value,\\n            lockersMapping[_lockerTargetAddress],\\n            _addingNativeTokenAmount\\n        );\\n\\n        emit CollateralAdded(\\n            _lockerTargetAddress,\\n            _addingNativeTokenAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Decreases TNT collateral of the locker\\n    /// @param _removingNativeTokenAmount       Amount of removed collateral\\n    /// @return                                 True if collateral is removed successfully\\n    function removeCollateral(uint256 _removingNativeTokenAmount)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(lockersMapping[_msgSender()].isLocker, \\\"Lockers: no locker\\\");\\n\\n        require(!isLockerActive(_msgSender()), \\\"Lockers: still active\\\");\\n\\n        uint256 priceOfOnUnitOfCollateral = LockersManagerLib\\n            .priceOfOneUnitOfCollateralInBTC(libConstants, libParams);\\n\\n        LockersManagerLib.removeFromCollateral(\\n            lockersMapping[_msgSender()],\\n            libConstants,\\n            libParams,\\n            priceOfOnUnitOfCollateral,\\n            _removingNativeTokenAmount\\n        );\\n\\n        Address.sendValue(payable(_msgSender()), _removingNativeTokenAmount);\\n\\n        emit CollateralRemoved(\\n            _msgSender(),\\n            _removingNativeTokenAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Mint teleBTC for an account\\n    /// @dev                          Mint teleBTC for an account and the locker fee as well\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _receiver              Address of the receiver of the minted teleBTCs\\n    /// @param _amount                Amount of the teleBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of teleBTC minted for the receiver\\n    function mint(\\n        bytes calldata _lockerLockingScript,\\n        address _receiver,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        nonZeroAddress(_receiver)\\n        nonZeroValue(_amount)\\n        nonReentrant\\n        whenNotPaused\\n        onlyMinter\\n        returns (uint256)\\n    {\\n        address _lockerTargetAddress = lockerTargetAddress[\\n            _lockerLockingScript\\n        ];\\n\\n        require(_lockerTargetAddress != address(0), \\\"Lockers: address is zero\\\");\\n\\n        LockersManagerLib.getLockerCapacity(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            lockersMapping[_lockerTargetAddress].netMinted,\\n            _amount\\n        );\\n\\n        require(isLockerActive(_lockerTargetAddress), \\\"Lockers: not active\\\");\\n\\n        lockersMapping[_lockerTargetAddress].netMinted =\\n            lockersMapping[_lockerTargetAddress].netMinted +\\n            _amount;\\n\\n        // Mints locker fee\\n        uint256 lockerFee = (_amount * lockerPercentageFee) / MAX_LOCKER_FEE;\\n        if (lockerFee > 0) {\\n            ITeleBTC(teleBTC).mint(_lockerTargetAddress, lockerFee);\\n        }\\n\\n        // Mints tokens for receiver\\n        ITeleBTC(teleBTC).mint(_receiver, _amount - lockerFee);\\n\\n        emit MintByLocker(\\n            _lockerTargetAddress,\\n            _receiver,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return _amount - lockerFee;\\n    }\\n\\n    /// @notice                       Burn teleBTC of an account\\n    /// @dev                          Burn teleBTC and also get the locker's fee\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _amount                Amount of the teleBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of teleBTC burnt\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount)\\n        external\\n        override\\n        nonZeroValue(_amount)\\n        nonReentrant\\n        whenNotPaused\\n        onlyBurner\\n        returns (uint256)\\n    {\\n        address _lockerTargetAddress = lockerTargetAddress[\\n            _lockerLockingScript\\n        ];\\n\\n        // Transfers teleBTC from user\\n        require(\\n            ITeleBTC(teleBTC).transferFrom(\\n                _msgSender(),\\n                address(this),\\n                _amount\\n            ),\\n            \\\"Lockers: transferFrom failed\\\"\\n        );\\n\\n        uint256 lockerFee = (_amount * lockerPercentageFee) / MAX_LOCKER_FEE;\\n        uint256 remainedAmount = _amount - lockerFee;\\n        uint256 netMinted = lockersMapping[_lockerTargetAddress].netMinted;\\n\\n        require(netMinted >= remainedAmount, \\\"Lockers: insufficient funds\\\");\\n\\n        lockersMapping[_lockerTargetAddress].netMinted =\\n            netMinted -\\n            remainedAmount;\\n\\n        // Burns teleBTC and sends rest of it to locker\\n        require(ITeleBTC(teleBTC).burn(remainedAmount), \\\"Lockers: burn failed\\\");\\n        require(\\n            ITeleBTC(teleBTC).transfer(_lockerTargetAddress, lockerFee),\\n            \\\"Lockers: lockerFee failed\\\"\\n        );\\n\\n        emit BurnByLocker(\\n            _lockerTargetAddress,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return remainedAmount;\\n    }\\n\\n    // *************** Public functions ***************\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                             Returns the Locker status\\n    /// @dev                                We check a locker status in below cases:\\n    ///                                     1. Minting TeleBTC\\n    ///                                     2. Removing locker's collateral\\n    ///                                     3. Removing locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             True if the locker is active\\n    function isLockerActive(address _lockerTargetAddress)\\n        public\\n        view\\n        override\\n        nonZeroAddress(_lockerTargetAddress)\\n        returns (bool)\\n    {\\n        if (lockerInactivationTimestamp[_lockerTargetAddress] == 0) {\\n            return true;\\n        } else if (\\n            lockerInactivationTimestamp[_lockerTargetAddress] > block.timestamp\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev         Returns the price of one native token (1*10^18) in teleBTC\\n     * @return uint The price of one unit of collateral token (native token in teleBTC)\\n     */\\n    function priceOfOneUnitOfCollateralInBTC()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            LockersManagerLib.priceOfOneUnitOfCollateralInBTC(\\n                libConstants,\\n                libParams\\n            );\\n    }\\n\\n    /// @notice                Check if an account is minter\\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isMinter(address account)\\n        public\\n        view\\n        override\\n        nonZeroAddress(account)\\n        returns (bool)\\n    {\\n        return minters[account];\\n    }\\n\\n    /// @notice                Check if an account is burner\\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isBurner(address account)\\n        public\\n        view\\n        override\\n        nonZeroAddress(account)\\n        returns (bool)\\n    {\\n        return burners[account];\\n    }\\n}\\n\",\"keccak256\":\"0x039b5c34d5a0daa95a5c197e438b5f138eba7d6d9d4bb76d89b598c12ffe5d52\",\"license\":\"MIT\"},\"contracts/lockersManager/LockersManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/ILockersManager.sol\\\";\\n\\nabstract contract LockersManagerStorage is ILockersManager {\\n\\n    // Constants\\n    uint public constant ONE_HUNDRED_PERCENT = 10000;\\n    uint public constant HEALTH_FACTOR = 10000;\\n    uint public constant UPPER_HEALTH_FACTOR = 12500;\\n    uint public constant MAX_LOCKER_FEE = 10000;\\n    uint public constant INACTIVATION_DELAY = 345600; // 4 days (it should be greater than MAX_FINALIZATION_PARAMETER)\\n    uint public constant NATIVE_TOKEN_DECIMAL = 18;\\n    address public constant NATIVE_TOKEN = address(1);\\n\\n    // Public variables\\n    address public override TeleportDAOToken;\\n    address public override teleBTC;\\n    address public override ccBurnRouter;\\n    address public override exchangeConnector;\\n    address public override priceOracle;\\n\\n    uint public override minRequiredTDTLockedAmount;\\n    uint public override minRequiredTNTLockedAmount;\\n    uint public override lockerPercentageFee;\\n    uint public override collateralRatio;\\n    uint public override liquidationRatio;\\n    uint public override priceWithDiscountRatio;\\n    uint public override totalNumberOfCandidates;\\n    uint public override totalNumberOfLockers;\\n\\n    mapping(address => locker) public lockersMapping; // locker's target address -> locker structure\\n    mapping(address => uint) public lockerInactivationTimestamp;\\n    mapping(address => bool) public lockerLeavingAcceptance;\\n    mapping(bytes => address) public lockerTargetAddress; // locker's locking script -> locker's target address\\n    mapping(address => bool) minters;\\n    mapping(address => bool) burners;\\n\\n    lockersLibConstants public libConstants;\\n    lockersLibParam public libParams;\\n\\n}\\n\",\"keccak256\":\"0x221380e3a05c35b92b89cc4ec279325e0bdc6cefae3587642c103e7c5b1faf4b\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewTST(\\n        address oldTST,\\n        address newTST\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTSTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x2dfb0206a8c767ccfb583dc3951bdf5596cec3295597dd40b3bd3280f002b94b\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address indexed exchangeRouter, address indexed exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address indexed exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _token               Address of the token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address indexed _token, address indexed _priceProxyAddress);\\n\\n    /// @notice                     Emits when changes made to acceptable delay\\n\\tevent NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    /// @notice                     Emits when changes made to oracle native token\\n\\tevent NewOracleNativeToken(address indexed oldOracleNativeToken, address indexed newOracleNativeToken);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives USD price proxy address for a token\\n    /// @param _token          Address of the token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _token) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmountByAverage(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _token, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0x123ae247106ef583652a87639f83cf3cecd5fba068ea06be3710e43bcd429d13\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param userTargetAddress Address of the user on EVM\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n\\t/// @param thirdPartyId Id of third party\\n\\t/// @param inputToken inputToken address\\n\\t/// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n\\t/// @param fees [network fee, locker fee, protocol fee, third party fee]\\n\\t\\n  \\tevent NewUnwrap(\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline,\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress inputToken,\\n\\t\\tuint[3] amounts,\\n\\t\\tuint[4] fees\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidUnwrap(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when network fee is updated\\n    event NewNetworkFee(\\n        uint oldNetworkFee, \\n        uint newNetworkFee\\n    );\\n\\n\\t/// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle, \\n        address newNetworkFeeOracle\\n    );\\n\\n\\t/// @notice                     Emits when changes made to third party address\\n\\tevent NewThirdPartyAddress(\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress oldThirdPartyAddress, \\n\\t\\taddress newThirdPartyAddress\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to third party fee\\n\\tevent NewThirdPartyFee(\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint oldThirdPartyFee, \\n\\t\\tuint newThirdPartyFee\\n\\t);\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\tfunction bitcoinFeeOracle() external view returns (address);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setNetworkFee(uint _networkFee) external;\\n\\n\\tfunction setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n\\tfunction setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external;\\n\\n\\tfunction setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n\\tfunction unwrap(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\",\"keccak256\":\"0x114bdfd7564dcf4ac8f10be8805273b17d82965d24dfc50ad239839239e4d30d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061553a806100206000396000f3fe60806040526004361061033a5760003560e01c80637da5f0da116101b3578063b4eae1cb116100f3578063b4eae1cb1461093d578063b734de2614610953578063bb4a250914610973578063bc805d1d14610993578063bd60e794146109a9578063c0924b8014610a6e578063c4d10b6a14610a8e578063cdcbc87914610aae578063dd0081c7146105a7578063e85501d814610b18578063e955de4514610b2d578063ed110a9c14610b42578063ee1f1c7014610b58578063ef69a7bc14610b78578063f2fde38b14610b8d578063f44637ba14610bad578063f73e3a9514610bcd578063ffc9f70414610bed57600080fd5b80637da5f0da1461072d5780637f0f18171461075d57806388aa0a521461077d5780638d3d78cd146107935780638da5cb5b146107b35780638fe85fe7146107c8578063946ce8cd146107e857806396ec39e814610808578063983b2d56146108285780639bf0988214610848578063a839db2414610868578063aa271e1a14610888578063af1ea795146108a8578063aff2faa3146108df578063b1016bdf146108ff578063b291ec1314610912578063b43022581461092857600080fd5b806345cc58901161027e57806345cc589014610567578063530e784f1461058757806354509b97146105a757806359bb9189146105bd5780635a8d80b8146105d25780635c975abb146105f25780635d6464ba1461060a5780636060663e146106375780636136c21f14610657578063613e2e1e1461068457806363908020146106995780636600203d146106af5780636a030fc3146106cf5780636d32395c146106ef5780636d75b9ee14610705578063715018a614610718578063768ebb12146105a757600080fd5b8063028468581461033f5780630c42cbc914610361578063108f438d146103895780631697565b146103b65780631775765f146103e65780631fcfe19c146103fc5780632630c12f1461041c578063264db4ae1461043c5780632f5b04ac146104515780633092afd51461046857806331f7d964146104885780633237c1581461049d57806338463cff146104b057806341f3ec11146104d057806341fae579146105115780634334614a1461052757806343b9370714610547575b600080fd5b34801561034b57600080fd5b5061035f61035a366004614787565b610c02565b005b34801561036d57600080fd5b50610376601281565b6040519081526020015b60405180910390f35b34801561039557600080fd5b506000546103a9906001600160a01b031681565b6040516103809190614e13565b3480156103c257600080fd5b506103d66103d1366004614887565b610caa565b6040519015158152602001610380565b3480156103f257600080fd5b5061037660095481565b34801561040857600080fd5b5061037661041736600461493c565b610ec8565b34801561042857600080fd5b506004546103a9906001600160a01b031681565b34801561044857600080fd5b506103766112d3565b34801561045d57600080fd5b506103766205460081565b34801561047457600080fd5b5061035f610483366004614787565b611366565b34801561049457600080fd5b506103a9600181565b6103d66104ab366004614b1e565b611405565b3480156104bc57600080fd5b506103766104cb366004614995565b611641565b3480156104dc57600080fd5b506103a96104eb366004614a75565b80516020818301810180516010825292820191909301209152546001600160a01b031681565b34801561051d57600080fd5b5061037660055481565b34801561053357600080fd5b506103d6610542366004614787565b611a68565b34801561055357600080fd5b506103d661056236600461481b565b611ab7565b34801561057357600080fd5b506103d6610582366004614787565b611d08565b34801561059357600080fd5b5061035f6105a2366004614787565b611ea9565b3480156105b357600080fd5b5061037661271081565b3480156105c957600080fd5b506103d6611f4d565b3480156105de57600080fd5b506002546103a9906001600160a01b031681565b3480156105fe57600080fd5b5060bc5460ff166103d6565b34801561061657600080fd5b5061062a610625366004614787565b612076565b6040516103809190614ea5565b34801561064357600080fd5b5061035f610652366004614b1e565b612149565b34801561066357600080fd5b50610376610672366004614787565b600e6020526000908152604090205481565b34801561069057600080fd5b5061035f6121b8565b3480156106a557600080fd5b5061037660075481565b3480156106bb57600080fd5b5061035f6106ca366004614b1e565b6121ca565b3480156106db57600080fd5b506103d66106ea366004614787565b612268565b3480156106fb57600080fd5b5061037660065481565b6103d661071336600461481b565b6122ea565b34801561072457600080fd5b5061035f6123e1565b34801561073957600080fd5b506103d6610748366004614787565b600f6020526000908152604090205460ff1681565b34801561076957600080fd5b5061035f610778366004614787565b6123e9565b34801561078957600080fd5b50610376600b5481565b34801561079f57600080fd5b506001546103a9906001600160a01b031681565b3480156107bf57600080fd5b506103a961248d565b3480156107d457600080fd5b5061035f6107e3366004614b1e565b61249c565b3480156107f457600080fd5b5061035f610803366004614b1e565b612536565b34801561081457600080fd5b506103d661082336600461481b565b6125a5565b34801561083457600080fd5b5061035f610843366004614787565b612aa0565b34801561085457600080fd5b5061035f610863366004614b1e565b612b43565b34801561087457600080fd5b5061035f610883366004614b1e565b612b91565b34801561089457600080fd5b506103d66108a3366004614787565b612bfd565b3480156108b457600080fd5b506108c86108c3366004614787565b612c47565b6040516103809b9a99989796959493929190614eb8565b3480156108eb57600080fd5b506103d66108fa3660046148fd565b612dbf565b6103d661090d3660046149de565b612e0d565b34801561091e57600080fd5b50610376600a5481565b34801561093457600080fd5b506103d6612f60565b34801561094957600080fd5b5061037660085481565b34801561095f57600080fd5b506103d661096e366004614844565b61300e565b34801561097f57600080fd5b5061035f61098e3660046147a1565b6131a7565b34801561099f57600080fd5b506103766130d481565b3480156109b557600080fd5b50601954601a54601b54601c54601d54601e54601f546020546021546022546023546024546109fe9b6001600160a01b039081169b81169a81169981169816969594939291908c565b604080516001600160a01b039d8e1681529b8d1660208d0152998c16998b0199909952968a1660608a015298909416608088015260a087019290925260c086015260e085015261010084015261012083019390935261014082019290925261016081019190915261018001610380565b348015610a7a57600080fd5b506003546103a9906001600160a01b031681565b348015610a9a57600080fd5b506103a9610aa93660046148fd565b613350565b348015610aba57600080fd5b50601354601454601554601654601754601854610ae29594939291906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c001610380565b348015610b2457600080fd5b506103d6613385565b348015610b3957600080fd5b5061035f6136ea565b348015610b4e57600080fd5b50610376600c5481565b348015610b6457600080fd5b5061035f610b73366004614787565b6136fa565b348015610b8457600080fd5b50600c54610376565b348015610b9957600080fd5b5061035f610ba8366004614787565b613840565b348015610bb957600080fd5b5061035f610bc8366004614787565b6138b9565b348015610bd957600080fd5b5061035f610be8366004614787565b61395c565b348015610bf957600080fd5b506103d6613a00565b806001600160a01b038116610c2a5760405163d92e233d60e01b815260040160405180910390fd5b610c32613dfd565b610c3b82611a68565b610c605760405162461bcd60e51b8152600401610c5790615049565b60405180910390fd5b6001600160a01b038216600081815260126020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a25050565b6000610cb4613e5c565b610cbc613eb6565b6002546001600160a01b0316336001600160a01b031614610cef5760405162461bcd60e51b8152600401610c579061508c565b6001600160a01b0386166000908152600d602052604080822090516343196d1d60e01b8152731C49B4130670EF5f1a80664ce46b0803896a4e4b916343196d1d91610d4791906013906019908c908b90600401615239565b60206040518083038186803b158015610d5f57600080fd5b505af4158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190614b36565b90506001600160a01b0383166108fc610db08887615312565b610dba8785615435565b610dc4919061532a565b6040518115909202916000818181858888f19350505050158015610dec573d6000803e3d6000fd5b506000610df98786615312565b610e038684615435565b610e0d919061532a565b610e179083615454565b6040519091506001600160a01b0387169082156108fc029083906000818181858888f19350505050158015610e50573d6000803e3d6000fd5b50836001600160a01b0316866001600160a01b0316896001600160a01b03167fab522c1322c34ea455e8f541ecfe1b73a29039f3658bff658cf12c9fd26dc016848987426001604051610ea79594939291906152ed565b60405180910390a4600192505050610ebf6001608a55565b95945050505050565b6000826001600160a01b038116610ef25760405163d92e233d60e01b815260040160405180910390fd5b8280610f1157604051637c946ed760e01b815260040160405180910390fd5b610f19613e5c565b610f21613eb6565b610f2a33612bfd565b610f765760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206d696e746572732063616e206d696e7400006044820152606401610c57565b600060108888604051610f8a929190614d78565b908152604051908190036020019020546001600160a01b0316905080610fed5760405162461bcd60e51b81526020600482015260186024820152774c6f636b6572733a2061646472657373206973207a65726f60401b6044820152606401610c57565b6001600160a01b0381166000908152600d60205260409081902060058101549151631cfe05d760e21b8152731C49B4130670EF5f1a80664ce46b0803896a4e4b926373f8175c9261104b929091601391601991908c90600401615239565b60206040518083038186803b15801561106357600080fd5b505af4158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b9190614b36565b506110a581612268565b6110e75760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206e6f742061637469766560681b6044820152606401610c57565b6001600160a01b0381166000908152600d602052604090206005015461110e908690615312565b6001600160a01b0382166000908152600d60205260408120600501919091556007546127109061113e9088615435565b611148919061532a565b905080156111d6576001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111829085908590600401614e65565b602060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d491906148dd565b505b6001546001600160a01b03166340c10f19886111f2848a615454565b6040518363ffffffff1660e01b815260040161120f929190614e65565b602060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126191906148dd565b50866001600160a01b0316826001600160a01b03167f8ad706b338c5d2a20b0d038b5cfdaf2b2f943f43048723bde0dccdf129598a118884426040516112a9939291906152d7565b60405180910390a36112bb8187615454565b945050506112c96001608a55565b5050949350505050565b60405163167e7c5760e01b8152600090731C49B4130670EF5f1a80664ce46b0803896a4e4b9063167e7c579061131190601390601990600401615270565b60206040518083038186803b15801561132957600080fd5b505af415801561133d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113619190614b36565b905090565b806001600160a01b03811661138e5760405163d92e233d60e01b815260040160405180910390fd5b611396613dfd565b61139f82612bfd565b6113bb5760405162461bcd60e51b8152600401610c5790615049565b6001600160a01b038216600081815260116020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a25050565b600061140f613e5c565b336000908152600d602052604090206008015460ff166114415760405162461bcd60e51b8152600401610c579061501d565b61144a33612268565b156114675760405162461bcd60e51b8152600401610c5790615112565b60405163167e7c5760e01b8152600090731C49B4130670EF5f1a80664ce46b0803896a4e4b9063167e7c57906114a590601390601990600401615270565b60206040518083038186803b1580156114bd57600080fd5b505af41580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190614b36565b336000908152600d6020908152604091829020825160c08082018552601354825260145482850152601554828601526016546060808401919091526017546080808501919091526018546001600160a01b0390811660a080870191909152885161018081018a5260195483168152601a548316818a0152601b54831699810199909952601c54821693890193909352601d541690870152601e5490860152601f5490850152915460e08401526021546101008401526022546101208401526023546101408401526024546101608401529293506115d492918487613f03565b6115de33846140cd565b336000818152600d6020526040908190206004015490517f93ae1c71197ee1bd2ad44b7d57e7b34ca946aeb88fdb4fc4a45211dbeb2c3cc7916116259187919042906152d7565b60405180910390a2600191505061163c6001608a55565b919050565b6000818061166257604051637c946ed760e01b815260040160405180910390fd5b61166a613e5c565b611672613eb6565b61167b33611a68565b6116c75760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206275726e6572732063616e206275726e00006044820152606401610c57565b6000601086866040516116db929190614d78565b908152604051908190036020019020546001546001600160a01b039182169250166323b872dd6117083390565b30876040518463ffffffff1660e01b815260040161172893929190614e41565b602060405180830381600087803b15801561174257600080fd5b505af1158015611756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177a91906148dd565b6117c55760405162461bcd60e51b815260206004820152601c60248201527b131bd8dad95c9cce881d1c985b9cd9995c919c9bdb4819985a5b195960221b6044820152606401610c57565b6000612710600754866117d89190615435565b6117e2919061532a565b905060006117f08287615454565b6001600160a01b0384166000908152600d60205260409020600501549091508181101561185d5760405162461bcd60e51b815260206004820152601b60248201527a4c6f636b6572733a20696e73756666696369656e742066756e647360281b6044820152606401610c57565b6118678282615454565b6001600160a01b038581166000908152600d602052604090819020600501929092556001549151630852cd8d60e31b8152600481018590529116906342966c6890602401602060405180830381600087803b1580156118c557600080fd5b505af11580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fd91906148dd565b6119405760405162461bcd60e51b8152602060048201526014602482015273131bd8dad95c9cce88189d5c9b8819985a5b195960621b6044820152606401610c57565b60015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906119729087908790600401614e65565b602060405180830381600087803b15801561198c57600080fd5b505af11580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c491906148dd565b611a0c5760405162461bcd60e51b8152602060048201526019602482015278131bd8dad95c9cce881b1bd8dad95c9199594819985a5b1959603a1b6044820152606401610c57565b836001600160a01b03167f66fb54322c407b04a077a306e72cdd780f0f374ba5dac9f6901a56a6255bc34a888542604051611a49939291906152d7565b60405180910390a25093505050611a606001608a55565b509392505050565b6000816001600160a01b038116611a925760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831660009081526012602052604090205460ff1691505b50919050565b6000826001600160a01b038116611ae15760405163d92e233d60e01b815260040160405180910390fd5b611ae9613e5c565b611af1613eb6565b6001600160a01b0384166000908152600d602052604080822090516201412760e01b8152600481019190915260248101859052731C49B4130670EF5f1a80664ce46b0803896a4e4b90620141279060440160206040518083038186803b158015611b5a57600080fd5b505af4158015611b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b929190614b36565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611bc790339030908690600401614e41565b602060405180830381600087803b158015611be157600080fd5b505af1158015611bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1991906148dd565b50600154604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401602060405180830381600087803b158015611c6057600080fd5b505af1158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9891906148dd565b50611ca333856140cd565b336001600160a01b0316856001600160a01b03167fd03400b15a5f4cddbc57f0e81bca31db33e4d1ed1390211eade3518bce70562e868442604051611cea939291906152d7565b60405180910390a36001925050611d016001608a55565b5092915050565b6000816001600160a01b038116611d325760405163d92e233d60e01b815260040160405180910390fd5b611d3a613e5c565b611d42613dfd565b6001600160a01b0383166000908152600d6020526040902060080154610100900460ff16611da85760405162461bcd60e51b8152602060048201526013602482015272131bd8dad95c9cce881b9bc81c995c5d595cdd606a1b6044820152606401610c57565b6001600160a01b0383166000908152600d60205260409020600801805461ffff19166001908117909155600b54611ddf9190615454565b600b55600c54611df0906001615312565b600c556001600160a01b0383166000908152600d60205260409081902090518491601091611e1e9190614da4565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559286166000818152600d90935291206003810154600482015492937f3840128cd2c146a0ea7739b8440e824c6d2d498ae32274812561d689d751e75e93611e939392914290614f6f565b60405180910390a260019150611ab16001608a55565b806001600160a01b038116611ed15760405163d92e233d60e01b815260040160405180910390fd5b611ed9613dfd565b6004546040517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2291611f18916001600160a01b03909116908590614e27565b60405180910390a150600480546001600160a01b039092166001600160a01b03199283168117909155601d8054909216179055565b6000611f57613e5c565b336000908152600d602052604090206008015460ff16611f895760405162461bcd60e51b8152600401610c5790615141565b336000908152600e602052604090205415611ff45760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206c6f636b65722068617320616c72656164792072657175604482015264195cdd195960da1b6064820152608401610c57565b6120016205460042615312565b336000818152600e60209081526040808320859055600d9091529081902060038101546004820154600583015493517f59e9b7bdd325b1dd9fe5b91f457f74d4b3d58263580ae84d6be1f451bbc2851f9461205e94939291614f6f565b60405180910390a35060016120736001608a55565b90565b6060816001600160a01b0381166120a05760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0383166000908152600d6020526040902080546120c3906154a3565b80601f01602080910402602001604051908101604052809291908181526020018280546120ef906154a3565b801561213c5780601f106121115761010080835404028352916020019161213c565b820191906000526020600020905b81548152906001019060200180831161211f57829003601f168201915b5050505050915050919050565b612151613dfd565b60095481116121725760405162461bcd60e51b8152600401610c57906151d8565b60085460408051918252602082018390527f1e29d1b5c8926360f3ac632d884775772b07f31fec4077d433e58ce823f91347910160405180910390a16008819055602155565b6121c0613dfd565b6121c86141e8565b565b6121d2613dfd565b6127108111156122225760405162461bcd60e51b815260206004820152601b60248201527a4c6f636b6572733a20696e76616c6964206c6f636b65722066656560281b6044820152606401610c57565b60075460408051918252602082018390527f44c6802691f6adea249930369a511db979a5e9a3603bdb37ceee1036da80e980910160405180910390a16007819055602055565b6000816001600160a01b0381166122925760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0383166000908152600e60205260409020546122b85760019150611ab1565b6001600160a01b0383166000908152600e60205260409020544210156122e15760019150611ab1565b60009150611ab1565b60006122f4613e5c565b6001600160a01b0383166000908152600d6020526040908190209051635ff753e960e11b8152731C49B4130670EF5f1a80664ce46b0803896a4e4b9163bfeea7d29161234691349187906004016152d7565b60006040518083038186803b15801561235e57600080fd5b505af4158015612372573d6000803e3d6000fd5b505050506001600160a01b0383166000818152600d6020526040908190206004015490517f2d2b4797badefe26cd5674f9bc2b8f5ed98e2a663e1a977af971254cfefd15ad916123c69186919042906152d7565b60405180910390a25060016123db6001608a55565b92915050565b6121c8613dfd565b806001600160a01b0381166124115760405163d92e233d60e01b815260040160405180910390fd5b612419613dfd565b6001546040517f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec2609691612458916001600160a01b03909116908590614e27565b60405180910390a150600180546001600160a01b039092166001600160a01b03199283168117909155601a8054909216179055565b6058546001600160a01b031690565b6124a4613dfd565b6127108111156124f05760405162461bcd60e51b81526020600482015260176024820152764c6f636b6572733a206c657373207468616e203130302560481b6044820152606401610c57565b600a5460408051918252602082018390527f5e4dd01049cdfe5a081b404bff8e27de919fd9c8ae2145007e0921ec227f207a910160405180910390a1600a819055602355565b61253e613dfd565b806008541161255f5760405162461bcd60e51b8152600401610c57906151d8565b60095460408051918252602082018390527f883242c2a857ca527a432dfca231b1e49233fde2a96802809a0f3866e9f19e13910160405180910390a16009819055602255565b6000826001600160a01b0381166125cf5760405163d92e233d60e01b815260040160405180910390fd5b82806125ee57604051637c946ed760e01b815260040160405180910390fd5b6125f6613e5c565b6125fe613eb6565b6001600160a01b0385166000908152600d602052604080822090516318ae332560e31b8152731C49B4130670EF5f1a80664ce46b0803896a4e4b9163c57199289161265491906013906019908b90600401615207565b60206040518083038186803b15801561266c57600080fd5b505af4158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a49190614b36565b90506000600d6000886001600160a01b03166001600160a01b03168152602001908152602001600020604051806101600160405290816000820180546126e9906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612715906154a3565b80156127625780601f1061273757610100808354040283529160200191612762565b820191906000526020600020905b81548152906001019060200180831161274557829003601f168201915b5050509183525050600182015460209091019060ff16600581111561279757634e487b7160e01b600052602160045260246000fd5b60058111156127b657634e487b7160e01b600052602160045260246000fd5b81526020016002820180546127ca906154a3565b80601f01602080910402602001604051908101604052809291908181526020018280546127f6906154a3565b80156128435780601f1061281857610100808354040283529160200191612843565b820191906000526020600020905b81548152906001019060200180831161282657829003601f168201915b505050918352505060038201546020808301919091526004808401546040808501919091526005850154606085015260068501546080850152600785015460a085015260089094015460ff808216151560c08601526101008083048216151560e0870152620100009092041615159301929092526001600160a01b038b166000908152600d9091529190912001549091506128df908790615454565b6001600160a01b038089166000908152600d602052604090206004019190915560015461290f9116333085614234565b60015460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612945929116908690600401614e65565b602060405180830381600087803b15801561295f57600080fd5b505af1158015612973573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299791906148dd565b50600254604080830151602084015184519251633fea436760e01b81526001600160a01b0390941693633fea4367936129dc938893909290919060009060040161528c565b602060405180830381600087803b1580156129f657600080fd5b505af1158015612a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2e9190614b36565b50612a3933876140cd565b336001600160a01b0316876001600160a01b03167fd63782183ccef603c2adba105774db58e1701ea5e7b3e23eded1b5e967a3654c888542604051612a80939291906152d7565b60405180910390a3600194505050612a986001608a55565b505092915050565b806001600160a01b038116612ac85760405163d92e233d60e01b815260040160405180910390fd5b612ad0613dfd565b612ad982612bfd565b15612af65760405162461bcd60e51b8152600401610c57906150d1565b6001600160a01b038216600081815260116020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a25050565b612b4b613dfd565b60055460408051918252602082018390527f65fb7af72786d428e2b4e9d3d2bd45fdd354f582ccccad2044967440b98e6d7b910160405180910390a16005819055601e55565b612b99613dfd565b80612bb757604051637c946ed760e01b815260040160405180910390fd5b60065460408051918252602082018390527f063267aa94de35dcf03acb07931ff2a6eae1ac1ee0be20797c9a6d3b52abf47b910160405180910390a16006819055601f55565b6000816001600160a01b038116612c275760405163d92e233d60e01b815260040160405180910390fd5b50506001600160a01b031660009081526011602052604090205460ff1690565b600d60205260009081526040902080548190612c62906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612c8e906154a3565b8015612cdb5780601f10612cb057610100808354040283529160200191612cdb565b820191906000526020600020905b815481529060010190602001808311612cbe57829003601f168201915b5050506001840154600285018054949560ff909216949193509150612cff906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612d2b906154a3565b8015612d785780601f10612d4d57610100808354040283529160200191612d78565b820191906000526020600020905b815481529060010190602001808311612d5b57829003601f168201915b5050506003840154600485015460058601546006870154600788015460089098015496979396929550909350919060ff80821691610100810482169162010000909104168b565b6000600d600060108585604051612dd7929190614d78565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206008015460ff169392505050565b6000612e17613e5c565b731C49B4130670EF5f1a80664ce46b0803896a4e4b634f02c5a4600d601960108c8c604051612e47929190614d78565b908152602001604051809103902060009054906101000a90046001600160a01b03168a8a8e8e8c8c8c6040518b63ffffffff1660e01b8152600401612e959a99989796959493929190614f9e565b60006040518083038186803b158015612ead57600080fd5b505af4158015612ec1573d6000803e3d6000fd5b50506019546001600160a01b0316159150612ef0905057612ef0336019546001600160a01b0316903089614234565b600b54612efe906001615312565b600b55336001600160a01b03167fe5f7957016a87f9d7bacdd371a516d7f2c5667aa5676c7e07cc8c0bbc6e5067b89898989604051612f409493929190614e7e565b60405180910390a2506001612f556001608a55565b979650505050505050565b6000612f6a613e5c565b336000908152600d602052604090206008015460ff16612f9c5760405162461bcd60e51b8152600401610c5790615141565b336000818152600e60209081526040808320839055600d9091529081902060038101546004820154600583015493517ff5c2a2ca5d59b6903bcb66377907e2c66983741a553bae891c485953b2a1f96f94612ff994939291614f6f565b60405180910390a25060016120736001608a55565b6000613018613e5c565b613020613eb6565b6002546001600160a01b0316336001600160a01b0316146130535760405162461bcd60e51b8152600401610c579061508c565b6001600160a01b0385166000908152600d60205260408082209051630b6f92b160e31b81528291731C49B4130670EF5f1a80664ce46b0803896a4e4b91635b7c9588916130ac916013906019908c908b90600401615239565b604080518083038186803b1580156130c357600080fd5b505af41580156130d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fb9190614b4e565b60405191935091506001600160a01b0386169083156108fc029084906000818181858888f19350505050158015613136573d6000803e3d6000fd5b50306001600160a01b038681169089167fab522c1322c34ea455e8f541ecfe1b73a29039f3658bff658cf12c9fd26dc01685886131738288615312565b4260006040516131879594939291906152ed565b60405180910390a460019250505061319f6001608a55565b949350505050565b602554610100900460ff16158080156131c75750602554600160ff909116105b806131e15750303b1580156131e1575060255460ff166001145b6132445760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c57565b6025805460ff191660011790558015613267576025805461ff0019166101001790555b61326f614292565b6132776142c1565b61327f6142f0565b6132888a6123e9565b613291886136fa565b61329a89611ea9565b6132a387612b43565b6132ac86612b91565b6132b585612149565b6132be84612536565b6132c7836121ca565b6132d08261249c565b612710601381905560148190556130d46015556016556012601755601880546001600160a01b03191660011790558015613344576025805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600060108383604051613364929190614d78565b908152604051908190036020019020546001600160a01b0316905092915050565b600061338f613e5c565b336000908152600d6020526040902060080154610100900460ff166133e85760405162461bcd60e51b815260206004820152600f60248201526e4c6f636b6572733a206e6f2072657160881b6044820152606401610c57565b336000908152600d602052604080822081516101608101909252805482908290613411906154a3565b80601f016020809104026020016040519081016040528092919081815260200182805461343d906154a3565b801561348a5780601f1061345f5761010080835404028352916020019161348a565b820191906000526020600020905b81548152906001019060200180831161346d57829003601f168201915b5050509183525050600182015460209091019060ff1660058111156134bf57634e487b7160e01b600052602160045260246000fd5b60058111156134de57634e487b7160e01b600052602160045260246000fd5b81526020016002820180546134f2906154a3565b80601f016020809104026020016040519081016040528092919081815260200182805461351e906154a3565b801561356b5780601f106135405761010080835404028352916020019161356b565b820191906000526020600020905b81548152906001019060200180831161354e57829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e0850152620100009092041615159101529050600d6000336001600160a01b03168152602081019190915260400160009081209061360082826146dc565b60018201805460ff1916905561361a6002830160006146dc565b506000600382018190556004820181905560058201819055600682018190556007820155600801805462ffffff19169055600b5461365a90600190615454565b600b5561367a335b60608301516000546001600160a01b0316919061431f565b613689335b82608001516140cd565b336000818152600d6020526040908190206003810154600482015492517f10f84ef0773ba7ade3714f4e500ca17436e6df2b0feb99c754c04f889290cbd4936136d3939291614f5c565b60405180910390a260019150506120736001608a55565b6136f2613dfd565b6121c861433e565b806001600160a01b0381166137225760405163d92e233d60e01b815260040160405180910390fd5b61372a613dfd565b6002546040517fd86d51326f3c88ea5365fba597a57273ae555e44f4b11658da952320d0beaa7591613769916001600160a01b03909116908590614e27565b60405180910390a16002546040516001600160a01b03909116907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a2600280546001600160a01b03908116600090815260126020526040808220805460ff1916905583549286166001600160a01b03199384168117909455601b8054909316841790925590517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250506002546001600160a01b03166000908152601260205260409020805460ff19166001179055565b613848613dfd565b6001600160a01b0381166138ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c57565b6138b68161437b565b50565b806001600160a01b0381166138e15760405163d92e233d60e01b815260040160405180910390fd5b6138e9613dfd565b6138f282611a68565b1561390f5760405162461bcd60e51b8152600401610c57906150d1565b6001600160a01b038216600081815260126020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a25050565b613964613dfd565b806001600160a01b03811661398c5760405163d92e233d60e01b815260040160405180910390fd5b6000546040517f3e4520ab29fdd336aca22cca0657921e53eb42307038c1895b6b5e60eec3796f916139cb916001600160a01b03909116908590614e27565b60405180910390a150600080546001600160a01b039092166001600160a01b0319928316811790915560198054909216179055565b6000613a0a613e5c565b336000908152600d602052604080822081516101608101909252805482908290613a33906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054613a5f906154a3565b8015613aac5780601f10613a8157610100808354040283529160200191613aac565b820191906000526020600020905b815481529060010190602001808311613a8f57829003601f168201915b5050509183525050600182015460209091019060ff166005811115613ae157634e487b7160e01b600052602160045260246000fd5b6005811115613b0057634e487b7160e01b600052602160045260246000fd5b8152602001600282018054613b14906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054613b40906154a3565b8015613b8d5780601f10613b6257610100808354040283529160200191613b8d565b820191906000526020600020905b815481529060010190602001808311613b7057829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e08501526201000090920416151591810191909152810151909150613c1b5760405162461bcd60e51b8152600401610c579061501d565b613c2433612268565b15613c415760405162461bcd60e51b8152600401610c5790615112565b60a081015115613c8b5760405162461bcd60e51b8152602060048201526015602482015274131bd8dad95c9cce880c081b995d081b5a5b9d1959605a1b6044820152606401610c57565b60c081015115613cd85760405162461bcd60e51b81526020600482015260186024820152774c6f636b6572733a203020736c617368696e67205442544360401b6044820152606401610c57565b336000908152600d6020526040908190209051601091613cf791614da4565b90815260405190819003602001902080546001600160a01b0319169055600d6000613d1f3390565b6001600160a01b031681526020810191909152604001600090812090613d4582826146dc565b60018201805460ff19169055613d5f6002830160006146dc565b506000600382018190556004820181905560058201819055600682018190556007820155600801805462ffffff19169055600c54613d9f90600190615454565b600c55613dab33613662565b613db43361367f565b336001600160a01b03167f628f3d67160bc1a892a1779c6475e128010a54df63af5dcdbf3c7b06ca5dfa978260000151836060015184608001516040516136d393929190614f37565b33613e0661248d565b6001600160a01b0316146121c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c57565b6002608a541415613eaf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c57565b6002608a55565b60bc5460ff16156121c85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c57565b6001608a55565b600885015460ff16613f575760405162461bcd60e51b815260206004820181905260248201527f4c6f636b6572733a206163636f756e74206973206e6f742061206c6f636b65726044820152606401610c57565b600085600501548560800151600a613f6f919061538d565b856101000151613f7f9190615435565b86516004890154613f91908790615435565b613f9b9190615435565b613fa5919061532a565b613faf9190615454565b90506000838660800151600a613fc5919061538d565b613fcf9084615435565b613fd9919061532a565b90508083111561403f5760405162461bcd60e51b815260206004820152602b60248201527f4c6f636b6572733a206d6f7265207468616e206d61782072656d6f7661626c6560448201526a0818dbdb1b185d195c985b60aa1b6064820152608401610c57565b8460c001518388600401546140549190615454565b10156140ac5760405162461bcd60e51b815260206004820152602160248201527f4c6f636b6572733a206c657373207468616e206d696e20636f6c6c61746572616044820152601b60fa1b6064820152608401610c57565b8287600401546140bc9190615454565b876004018190555050505050505050565b8047101561411d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c57565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461416a576040519150601f19603f3d011682016040523d82523d6000602084013e61416f565b606091505b50509050806141e35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610c57565b505050565b6141f06143cd565b60bc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161422a9190614e13565b60405180910390a1565b61428c846323b872dd60e01b85858560405160240161425593929190614e41565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614416565b50505050565b602554610100900460ff166142b95760405162461bcd60e51b8152600401610c579061518d565b6121c86144e8565b602554610100900460ff166142e85760405162461bcd60e51b8152600401610c579061518d565b6121c8614518565b602554610100900460ff166143175760405162461bcd60e51b8152600401610c579061518d565b6121c861453f565b6141e38363a9059cbb60e01b8484604051602401614255929190614e65565b614346613eb6565b60bc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861421d3390565b605880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60bc5460ff166121c85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c57565b600061446b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145729092919063ffffffff16565b8051909150156141e3578080602001905181019061448991906148dd565b6141e35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c57565b602554610100900460ff1661450f5760405162461bcd60e51b8152600401610c579061518d565b6121c83361437b565b602554610100900460ff16613efc5760405162461bcd60e51b8152600401610c579061518d565b602554610100900460ff166145665760405162461bcd60e51b8152600401610c579061518d565b60bc805460ff19169055565b6060614581848460008561458b565b90505b9392505050565b6060824710156145ec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c57565b843b61463a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c57565b600080866001600160a01b031685876040516146569190614d88565b60006040518083038185875af1925050503d8060008114614693576040519150601f19603f3d011682016040523d82523d6000602084013e614698565b606091505b5091509150612f55828286606083156146b2575081614584565b8251156146c25782518084602001fd5b8160405162461bcd60e51b8152600401610c579190614ea5565b5080546146e8906154a3565b6000825580601f106146f8575050565b601f0160209004906000526020600020908101906138b691905b808211156147265760008155600101614712565b5090565b80356001600160a01b038116811461163c57600080fd5b60008083601f840112614752578081fd5b5081356001600160401b03811115614768578182fd5b60208301915083602082850101111561478057600080fd5b9250929050565b600060208284031215614798578081fd5b6145848261472a565b60008060008060008060008060006101208a8c0312156147bf578485fd5b6147c88a61472a565b98506147d660208b0161472a565b97506147e460408b0161472a565b989b979a5097986060810135985060808101359760a0820135975060c0820135965060e08201359550610100909101359350915050565b6000806040838503121561482d578182fd5b6148368361472a565b946020939093013593505050565b60008060008060808587031215614859578384fd5b6148628561472a565b9350602085013592506148776040860161472a565b9396929550929360600135925050565b600080600080600060a0868803121561489e578081fd5b6148a78661472a565b9450602086013593506148bc6040870161472a565b9250606086013591506148d16080870161472a565b90509295509295909350565b6000602082840312156148ee578081fd5b81518015158114614584578182fd5b6000806020838503121561490f578182fd5b82356001600160401b03811115614924578283fd5b61493085828601614741565b90969095509350505050565b60008060008060608587031215614951578384fd5b84356001600160401b03811115614966578485fd5b61497287828801614741565b909550935061498590506020860161472a565b9396929550929360400135925050565b6000806000604084860312156149a9578283fd5b83356001600160401b038111156149be578384fd5b6149ca86828701614741565b909790965060209590950135949350505050565b600080600080600080600060a0888a0312156149f8578283fd5b87356001600160401b0380821115614a0e578485fd5b614a1a8b838c01614741565b909950975060208a0135965060408a0135955060608a0135915060068210614a40578485fd5b90935060808901359080821115614a55578384fd5b50614a628a828b01614741565b989b979a50959850939692959293505050565b600060208284031215614a86578081fd5b81356001600160401b0380821115614a9c578283fd5b818401915084601f830112614aaf578283fd5b813581811115614ac157614ac16154ee565b604051601f8201601f19908116603f01168101908382118183101715614ae957614ae96154ee565b81604052828152876020848701011115614b01578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215614b2f578081fd5b5035919050565b600060208284031215614b47578081fd5b5051919050565b60008060408385031215614b60578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452614bbf816020860160208601615477565b601f01601f19169290920160200192915050565b60008154614be0816154a3565b808552602060018381168015614bfd5760018114614c1157614c3f565b60ff19851688840152604088019550614c3f565b866000528260002060005b85811015614c375781548a8201860152908301908401614c1c565b890184019650505b505050505092915050565b60068110614c6857634e487b7160e01b600052602160045260246000fd5b9052565b8054825260018101546020830152600281015460408301526003810154606083015260048101546080830152600501546001600160a01b031660a090910152565b614cc082614cbb835461546b565b614b71565b614ccd600182015461546b565b614cda6020840182614b71565b50614ce8600282015461546b565b614cf56040840182614b71565b50614d03600382015461546b565b614d106060840182614b71565b50614d1e600482015461546b565b614d2b6080840182614b71565b50600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b015461016090910152565b8183823760009101908152919050565b60008251614d9a818460208701615477565b9190910192915050565b6000808354614db2816154a3565b60018281168015614dca5760018114614ddb57614e07565b60ff19841687528287019450614e07565b8786526020808720875b85811015614dfe5781548a820152908401908201614de5565b50505082870194505b50929695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b606081526000614e92606083018688614b7e565b6020830194909452506040015292915050565b6020815260006145846020830184614ba7565b6000610160808352614ecc8184018f614ba7565b9050614edb602084018e614c4a565b8281036040840152614eed818d614ba7565b606084019b909b525050608081019790975260a087019590955260c086019390935260e0850191909152151561010084015215156101208301521515610140909101529392505050565b606081526000614f4a6060830186614ba7565b60208301949094525060400152919050565b606081526000614f4a6060830186614bd3565b608081526000614f826080830187614bd3565b6020830195909552506040810192909252606090910152919050565b60006102608c8352614fb3602084018d614cad565b6001600160a01b038b166101a08401526101c083018a90526101e083018990526102008301819052614fe8818401888a614b7e565b9050614ff8610220840187614c4a565b82810361024084015261500c818587614b7e565b9d9c50505050505050505050505050565b6020808252601290820152712637b1b5b2b9399d103737903637b1b5b2b960711b604082015260600190565b60208082526023908201527f4c6f636b6572733a206163636f756e7420646f6573206e6f74206861766520726040820152626f6c6560e81b606082015260800190565b60208082526025908201527f4c6f636b6572733a206d6573736167652073656e646572206973206e6f74206360408201526431a13ab93760d91b606082015260800190565b60208082526021908201527f4c6f636b6572733a206163636f756e7420616c72656164792068617320726f6c6040820152606560f81b606082015260800190565b6020808252601590820152744c6f636b6572733a207374696c6c2061637469766560581b604082015260600190565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601590820152742637b1b5b2b9399d1036bab9ba1021a9101f10262960591b604082015260600190565b848152610280810161521c6020830186614c6c565b61522960e0830185614cad565b8261026083015295945050505050565b8581526102a0810161524e6020830187614c6c565b61525b60e0830186614cad565b61026082019390935261028001529392505050565b610240810161527f8285614c6c565b61458460c0830184614cad565b85815260a0602082015260006152a560a0830187614ba7565b6152b26040840187614c4a565b82810360608401526152c48186614ba7565b9150508260808301529695505050505050565b9283526020830191909152604082015260600190565b9485526020850193909352604084019190915260608301521515608082015260a00190565b60008219821115615325576153256154d8565b500190565b60008261534557634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561538557816000190482111561536b5761536b6154d8565b8085161561537857918102915b93841c939080029061534f565b509250929050565b600061458483836000826153a3575060016123db565b816153b0575060006123db565b81600181146153c657600281146153d0576153ec565b60019150506123db565b60ff8411156153e1576153e16154d8565b50506001821b6123db565b5060208310610133831016604e8410600b841016171561540f575081810a6123db565b615419838361534a565b806000190482111561542d5761542d6154d8565b029392505050565b600081600019048311821515161561544f5761544f6154d8565b500290565b600082821015615466576154666154d8565b500390565b6001600160a01b031690565b60005b8381101561549257818101518382015260200161547a565b8381111561428c5750506000910152565b600181811c908216806154b757607f821691505b60208210811415611ab157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220be3d4ad0118289eb834193cd61a0a15fe4a81799e3ac11398cc2d26e9590db0164736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061033a5760003560e01c80637da5f0da116101b3578063b4eae1cb116100f3578063b4eae1cb1461093d578063b734de2614610953578063bb4a250914610973578063bc805d1d14610993578063bd60e794146109a9578063c0924b8014610a6e578063c4d10b6a14610a8e578063cdcbc87914610aae578063dd0081c7146105a7578063e85501d814610b18578063e955de4514610b2d578063ed110a9c14610b42578063ee1f1c7014610b58578063ef69a7bc14610b78578063f2fde38b14610b8d578063f44637ba14610bad578063f73e3a9514610bcd578063ffc9f70414610bed57600080fd5b80637da5f0da1461072d5780637f0f18171461075d57806388aa0a521461077d5780638d3d78cd146107935780638da5cb5b146107b35780638fe85fe7146107c8578063946ce8cd146107e857806396ec39e814610808578063983b2d56146108285780639bf0988214610848578063a839db2414610868578063aa271e1a14610888578063af1ea795146108a8578063aff2faa3146108df578063b1016bdf146108ff578063b291ec1314610912578063b43022581461092857600080fd5b806345cc58901161027e57806345cc589014610567578063530e784f1461058757806354509b97146105a757806359bb9189146105bd5780635a8d80b8146105d25780635c975abb146105f25780635d6464ba1461060a5780636060663e146106375780636136c21f14610657578063613e2e1e1461068457806363908020146106995780636600203d146106af5780636a030fc3146106cf5780636d32395c146106ef5780636d75b9ee14610705578063715018a614610718578063768ebb12146105a757600080fd5b8063028468581461033f5780630c42cbc914610361578063108f438d146103895780631697565b146103b65780631775765f146103e65780631fcfe19c146103fc5780632630c12f1461041c578063264db4ae1461043c5780632f5b04ac146104515780633092afd51461046857806331f7d964146104885780633237c1581461049d57806338463cff146104b057806341f3ec11146104d057806341fae579146105115780634334614a1461052757806343b9370714610547575b600080fd5b34801561034b57600080fd5b5061035f61035a366004614787565b610c02565b005b34801561036d57600080fd5b50610376601281565b6040519081526020015b60405180910390f35b34801561039557600080fd5b506000546103a9906001600160a01b031681565b6040516103809190614e13565b3480156103c257600080fd5b506103d66103d1366004614887565b610caa565b6040519015158152602001610380565b3480156103f257600080fd5b5061037660095481565b34801561040857600080fd5b5061037661041736600461493c565b610ec8565b34801561042857600080fd5b506004546103a9906001600160a01b031681565b34801561044857600080fd5b506103766112d3565b34801561045d57600080fd5b506103766205460081565b34801561047457600080fd5b5061035f610483366004614787565b611366565b34801561049457600080fd5b506103a9600181565b6103d66104ab366004614b1e565b611405565b3480156104bc57600080fd5b506103766104cb366004614995565b611641565b3480156104dc57600080fd5b506103a96104eb366004614a75565b80516020818301810180516010825292820191909301209152546001600160a01b031681565b34801561051d57600080fd5b5061037660055481565b34801561053357600080fd5b506103d6610542366004614787565b611a68565b34801561055357600080fd5b506103d661056236600461481b565b611ab7565b34801561057357600080fd5b506103d6610582366004614787565b611d08565b34801561059357600080fd5b5061035f6105a2366004614787565b611ea9565b3480156105b357600080fd5b5061037661271081565b3480156105c957600080fd5b506103d6611f4d565b3480156105de57600080fd5b506002546103a9906001600160a01b031681565b3480156105fe57600080fd5b5060bc5460ff166103d6565b34801561061657600080fd5b5061062a610625366004614787565b612076565b6040516103809190614ea5565b34801561064357600080fd5b5061035f610652366004614b1e565b612149565b34801561066357600080fd5b50610376610672366004614787565b600e6020526000908152604090205481565b34801561069057600080fd5b5061035f6121b8565b3480156106a557600080fd5b5061037660075481565b3480156106bb57600080fd5b5061035f6106ca366004614b1e565b6121ca565b3480156106db57600080fd5b506103d66106ea366004614787565b612268565b3480156106fb57600080fd5b5061037660065481565b6103d661071336600461481b565b6122ea565b34801561072457600080fd5b5061035f6123e1565b34801561073957600080fd5b506103d6610748366004614787565b600f6020526000908152604090205460ff1681565b34801561076957600080fd5b5061035f610778366004614787565b6123e9565b34801561078957600080fd5b50610376600b5481565b34801561079f57600080fd5b506001546103a9906001600160a01b031681565b3480156107bf57600080fd5b506103a961248d565b3480156107d457600080fd5b5061035f6107e3366004614b1e565b61249c565b3480156107f457600080fd5b5061035f610803366004614b1e565b612536565b34801561081457600080fd5b506103d661082336600461481b565b6125a5565b34801561083457600080fd5b5061035f610843366004614787565b612aa0565b34801561085457600080fd5b5061035f610863366004614b1e565b612b43565b34801561087457600080fd5b5061035f610883366004614b1e565b612b91565b34801561089457600080fd5b506103d66108a3366004614787565b612bfd565b3480156108b457600080fd5b506108c86108c3366004614787565b612c47565b6040516103809b9a99989796959493929190614eb8565b3480156108eb57600080fd5b506103d66108fa3660046148fd565b612dbf565b6103d661090d3660046149de565b612e0d565b34801561091e57600080fd5b50610376600a5481565b34801561093457600080fd5b506103d6612f60565b34801561094957600080fd5b5061037660085481565b34801561095f57600080fd5b506103d661096e366004614844565b61300e565b34801561097f57600080fd5b5061035f61098e3660046147a1565b6131a7565b34801561099f57600080fd5b506103766130d481565b3480156109b557600080fd5b50601954601a54601b54601c54601d54601e54601f546020546021546022546023546024546109fe9b6001600160a01b039081169b81169a81169981169816969594939291908c565b604080516001600160a01b039d8e1681529b8d1660208d0152998c16998b0199909952968a1660608a015298909416608088015260a087019290925260c086015260e085015261010084015261012083019390935261014082019290925261016081019190915261018001610380565b348015610a7a57600080fd5b506003546103a9906001600160a01b031681565b348015610a9a57600080fd5b506103a9610aa93660046148fd565b613350565b348015610aba57600080fd5b50601354601454601554601654601754601854610ae29594939291906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c001610380565b348015610b2457600080fd5b506103d6613385565b348015610b3957600080fd5b5061035f6136ea565b348015610b4e57600080fd5b50610376600c5481565b348015610b6457600080fd5b5061035f610b73366004614787565b6136fa565b348015610b8457600080fd5b50600c54610376565b348015610b9957600080fd5b5061035f610ba8366004614787565b613840565b348015610bb957600080fd5b5061035f610bc8366004614787565b6138b9565b348015610bd957600080fd5b5061035f610be8366004614787565b61395c565b348015610bf957600080fd5b506103d6613a00565b806001600160a01b038116610c2a5760405163d92e233d60e01b815260040160405180910390fd5b610c32613dfd565b610c3b82611a68565b610c605760405162461bcd60e51b8152600401610c5790615049565b60405180910390fd5b6001600160a01b038216600081815260126020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a25050565b6000610cb4613e5c565b610cbc613eb6565b6002546001600160a01b0316336001600160a01b031614610cef5760405162461bcd60e51b8152600401610c579061508c565b6001600160a01b0386166000908152600d602052604080822090516343196d1d60e01b815273__$e73bdc529e43686130bc0575eb4e830f23$__916343196d1d91610d4791906013906019908c908b90600401615239565b60206040518083038186803b158015610d5f57600080fd5b505af4158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190614b36565b90506001600160a01b0383166108fc610db08887615312565b610dba8785615435565b610dc4919061532a565b6040518115909202916000818181858888f19350505050158015610dec573d6000803e3d6000fd5b506000610df98786615312565b610e038684615435565b610e0d919061532a565b610e179083615454565b6040519091506001600160a01b0387169082156108fc029083906000818181858888f19350505050158015610e50573d6000803e3d6000fd5b50836001600160a01b0316866001600160a01b0316896001600160a01b03167fab522c1322c34ea455e8f541ecfe1b73a29039f3658bff658cf12c9fd26dc016848987426001604051610ea79594939291906152ed565b60405180910390a4600192505050610ebf6001608a55565b95945050505050565b6000826001600160a01b038116610ef25760405163d92e233d60e01b815260040160405180910390fd5b8280610f1157604051637c946ed760e01b815260040160405180910390fd5b610f19613e5c565b610f21613eb6565b610f2a33612bfd565b610f765760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206d696e746572732063616e206d696e7400006044820152606401610c57565b600060108888604051610f8a929190614d78565b908152604051908190036020019020546001600160a01b0316905080610fed5760405162461bcd60e51b81526020600482015260186024820152774c6f636b6572733a2061646472657373206973207a65726f60401b6044820152606401610c57565b6001600160a01b0381166000908152600d60205260409081902060058101549151631cfe05d760e21b815273__$e73bdc529e43686130bc0575eb4e830f23$__926373f8175c9261104b929091601391601991908c90600401615239565b60206040518083038186803b15801561106357600080fd5b505af4158015611077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109b9190614b36565b506110a581612268565b6110e75760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206e6f742061637469766560681b6044820152606401610c57565b6001600160a01b0381166000908152600d602052604090206005015461110e908690615312565b6001600160a01b0382166000908152600d60205260408120600501919091556007546127109061113e9088615435565b611148919061532a565b905080156111d6576001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111829085908590600401614e65565b602060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d491906148dd565b505b6001546001600160a01b03166340c10f19886111f2848a615454565b6040518363ffffffff1660e01b815260040161120f929190614e65565b602060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126191906148dd565b50866001600160a01b0316826001600160a01b03167f8ad706b338c5d2a20b0d038b5cfdaf2b2f943f43048723bde0dccdf129598a118884426040516112a9939291906152d7565b60405180910390a36112bb8187615454565b945050506112c96001608a55565b5050949350505050565b60405163167e7c5760e01b815260009073__$e73bdc529e43686130bc0575eb4e830f23$__9063167e7c579061131190601390601990600401615270565b60206040518083038186803b15801561132957600080fd5b505af415801561133d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113619190614b36565b905090565b806001600160a01b03811661138e5760405163d92e233d60e01b815260040160405180910390fd5b611396613dfd565b61139f82612bfd565b6113bb5760405162461bcd60e51b8152600401610c5790615049565b6001600160a01b038216600081815260116020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a25050565b600061140f613e5c565b336000908152600d602052604090206008015460ff166114415760405162461bcd60e51b8152600401610c579061501d565b61144a33612268565b156114675760405162461bcd60e51b8152600401610c5790615112565b60405163167e7c5760e01b815260009073__$e73bdc529e43686130bc0575eb4e830f23$__9063167e7c57906114a590601390601990600401615270565b60206040518083038186803b1580156114bd57600080fd5b505af41580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190614b36565b336000908152600d6020908152604091829020825160c08082018552601354825260145482850152601554828601526016546060808401919091526017546080808501919091526018546001600160a01b0390811660a080870191909152885161018081018a5260195483168152601a548316818a0152601b54831699810199909952601c54821693890193909352601d541690870152601e5490860152601f5490850152915460e08401526021546101008401526022546101208401526023546101408401526024546101608401529293506115d492918487613f03565b6115de33846140cd565b336000818152600d6020526040908190206004015490517f93ae1c71197ee1bd2ad44b7d57e7b34ca946aeb88fdb4fc4a45211dbeb2c3cc7916116259187919042906152d7565b60405180910390a2600191505061163c6001608a55565b919050565b6000818061166257604051637c946ed760e01b815260040160405180910390fd5b61166a613e5c565b611672613eb6565b61167b33611a68565b6116c75760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a206f6e6c79206275726e6572732063616e206275726e00006044820152606401610c57565b6000601086866040516116db929190614d78565b908152604051908190036020019020546001546001600160a01b039182169250166323b872dd6117083390565b30876040518463ffffffff1660e01b815260040161172893929190614e41565b602060405180830381600087803b15801561174257600080fd5b505af1158015611756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177a91906148dd565b6117c55760405162461bcd60e51b815260206004820152601c60248201527b131bd8dad95c9cce881d1c985b9cd9995c919c9bdb4819985a5b195960221b6044820152606401610c57565b6000612710600754866117d89190615435565b6117e2919061532a565b905060006117f08287615454565b6001600160a01b0384166000908152600d60205260409020600501549091508181101561185d5760405162461bcd60e51b815260206004820152601b60248201527a4c6f636b6572733a20696e73756666696369656e742066756e647360281b6044820152606401610c57565b6118678282615454565b6001600160a01b038581166000908152600d602052604090819020600501929092556001549151630852cd8d60e31b8152600481018590529116906342966c6890602401602060405180830381600087803b1580156118c557600080fd5b505af11580156118d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fd91906148dd565b6119405760405162461bcd60e51b8152602060048201526014602482015273131bd8dad95c9cce88189d5c9b8819985a5b195960621b6044820152606401610c57565b60015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906119729087908790600401614e65565b602060405180830381600087803b15801561198c57600080fd5b505af11580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c491906148dd565b611a0c5760405162461bcd60e51b8152602060048201526019602482015278131bd8dad95c9cce881b1bd8dad95c9199594819985a5b1959603a1b6044820152606401610c57565b836001600160a01b03167f66fb54322c407b04a077a306e72cdd780f0f374ba5dac9f6901a56a6255bc34a888542604051611a49939291906152d7565b60405180910390a25093505050611a606001608a55565b509392505050565b6000816001600160a01b038116611a925760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831660009081526012602052604090205460ff1691505b50919050565b6000826001600160a01b038116611ae15760405163d92e233d60e01b815260040160405180910390fd5b611ae9613e5c565b611af1613eb6565b6001600160a01b0384166000908152600d602052604080822090516201412760e01b815260048101919091526024810185905273__$e73bdc529e43686130bc0575eb4e830f23$__90620141279060440160206040518083038186803b158015611b5a57600080fd5b505af4158015611b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b929190614b36565b6001546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90611bc790339030908690600401614e41565b602060405180830381600087803b158015611be157600080fd5b505af1158015611bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1991906148dd565b50600154604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401602060405180830381600087803b158015611c6057600080fd5b505af1158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9891906148dd565b50611ca333856140cd565b336001600160a01b0316856001600160a01b03167fd03400b15a5f4cddbc57f0e81bca31db33e4d1ed1390211eade3518bce70562e868442604051611cea939291906152d7565b60405180910390a36001925050611d016001608a55565b5092915050565b6000816001600160a01b038116611d325760405163d92e233d60e01b815260040160405180910390fd5b611d3a613e5c565b611d42613dfd565b6001600160a01b0383166000908152600d6020526040902060080154610100900460ff16611da85760405162461bcd60e51b8152602060048201526013602482015272131bd8dad95c9cce881b9bc81c995c5d595cdd606a1b6044820152606401610c57565b6001600160a01b0383166000908152600d60205260409020600801805461ffff19166001908117909155600b54611ddf9190615454565b600b55600c54611df0906001615312565b600c556001600160a01b0383166000908152600d60205260409081902090518491601091611e1e9190614da4565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b039586161790559286166000818152600d90935291206003810154600482015492937f3840128cd2c146a0ea7739b8440e824c6d2d498ae32274812561d689d751e75e93611e939392914290614f6f565b60405180910390a260019150611ab16001608a55565b806001600160a01b038116611ed15760405163d92e233d60e01b815260040160405180910390fd5b611ed9613dfd565b6004546040517fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2291611f18916001600160a01b03909116908590614e27565b60405180910390a150600480546001600160a01b039092166001600160a01b03199283168117909155601d8054909216179055565b6000611f57613e5c565b336000908152600d602052604090206008015460ff16611f895760405162461bcd60e51b8152600401610c5790615141565b336000908152600e602052604090205415611ff45760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206c6f636b65722068617320616c72656164792072657175604482015264195cdd195960da1b6064820152608401610c57565b6120016205460042615312565b336000818152600e60209081526040808320859055600d9091529081902060038101546004820154600583015493517f59e9b7bdd325b1dd9fe5b91f457f74d4b3d58263580ae84d6be1f451bbc2851f9461205e94939291614f6f565b60405180910390a35060016120736001608a55565b90565b6060816001600160a01b0381166120a05760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0383166000908152600d6020526040902080546120c3906154a3565b80601f01602080910402602001604051908101604052809291908181526020018280546120ef906154a3565b801561213c5780601f106121115761010080835404028352916020019161213c565b820191906000526020600020905b81548152906001019060200180831161211f57829003601f168201915b5050505050915050919050565b612151613dfd565b60095481116121725760405162461bcd60e51b8152600401610c57906151d8565b60085460408051918252602082018390527f1e29d1b5c8926360f3ac632d884775772b07f31fec4077d433e58ce823f91347910160405180910390a16008819055602155565b6121c0613dfd565b6121c86141e8565b565b6121d2613dfd565b6127108111156122225760405162461bcd60e51b815260206004820152601b60248201527a4c6f636b6572733a20696e76616c6964206c6f636b65722066656560281b6044820152606401610c57565b60075460408051918252602082018390527f44c6802691f6adea249930369a511db979a5e9a3603bdb37ceee1036da80e980910160405180910390a16007819055602055565b6000816001600160a01b0381166122925760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0383166000908152600e60205260409020546122b85760019150611ab1565b6001600160a01b0383166000908152600e60205260409020544210156122e15760019150611ab1565b60009150611ab1565b60006122f4613e5c565b6001600160a01b0383166000908152600d6020526040908190209051635ff753e960e11b815273__$e73bdc529e43686130bc0575eb4e830f23$__9163bfeea7d29161234691349187906004016152d7565b60006040518083038186803b15801561235e57600080fd5b505af4158015612372573d6000803e3d6000fd5b505050506001600160a01b0383166000818152600d6020526040908190206004015490517f2d2b4797badefe26cd5674f9bc2b8f5ed98e2a663e1a977af971254cfefd15ad916123c69186919042906152d7565b60405180910390a25060016123db6001608a55565b92915050565b6121c8613dfd565b806001600160a01b0381166124115760405163d92e233d60e01b815260040160405180910390fd5b612419613dfd565b6001546040517f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec2609691612458916001600160a01b03909116908590614e27565b60405180910390a150600180546001600160a01b039092166001600160a01b03199283168117909155601a8054909216179055565b6058546001600160a01b031690565b6124a4613dfd565b6127108111156124f05760405162461bcd60e51b81526020600482015260176024820152764c6f636b6572733a206c657373207468616e203130302560481b6044820152606401610c57565b600a5460408051918252602082018390527f5e4dd01049cdfe5a081b404bff8e27de919fd9c8ae2145007e0921ec227f207a910160405180910390a1600a819055602355565b61253e613dfd565b806008541161255f5760405162461bcd60e51b8152600401610c57906151d8565b60095460408051918252602082018390527f883242c2a857ca527a432dfca231b1e49233fde2a96802809a0f3866e9f19e13910160405180910390a16009819055602255565b6000826001600160a01b0381166125cf5760405163d92e233d60e01b815260040160405180910390fd5b82806125ee57604051637c946ed760e01b815260040160405180910390fd5b6125f6613e5c565b6125fe613eb6565b6001600160a01b0385166000908152600d602052604080822090516318ae332560e31b815273__$e73bdc529e43686130bc0575eb4e830f23$__9163c57199289161265491906013906019908b90600401615207565b60206040518083038186803b15801561266c57600080fd5b505af4158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a49190614b36565b90506000600d6000886001600160a01b03166001600160a01b03168152602001908152602001600020604051806101600160405290816000820180546126e9906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612715906154a3565b80156127625780601f1061273757610100808354040283529160200191612762565b820191906000526020600020905b81548152906001019060200180831161274557829003601f168201915b5050509183525050600182015460209091019060ff16600581111561279757634e487b7160e01b600052602160045260246000fd5b60058111156127b657634e487b7160e01b600052602160045260246000fd5b81526020016002820180546127ca906154a3565b80601f01602080910402602001604051908101604052809291908181526020018280546127f6906154a3565b80156128435780601f1061281857610100808354040283529160200191612843565b820191906000526020600020905b81548152906001019060200180831161282657829003601f168201915b505050918352505060038201546020808301919091526004808401546040808501919091526005850154606085015260068501546080850152600785015460a085015260089094015460ff808216151560c08601526101008083048216151560e0870152620100009092041615159301929092526001600160a01b038b166000908152600d9091529190912001549091506128df908790615454565b6001600160a01b038089166000908152600d602052604090206004019190915560015461290f9116333085614234565b60015460025460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612945929116908690600401614e65565b602060405180830381600087803b15801561295f57600080fd5b505af1158015612973573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299791906148dd565b50600254604080830151602084015184519251633fea436760e01b81526001600160a01b0390941693633fea4367936129dc938893909290919060009060040161528c565b602060405180830381600087803b1580156129f657600080fd5b505af1158015612a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2e9190614b36565b50612a3933876140cd565b336001600160a01b0316876001600160a01b03167fd63782183ccef603c2adba105774db58e1701ea5e7b3e23eded1b5e967a3654c888542604051612a80939291906152d7565b60405180910390a3600194505050612a986001608a55565b505092915050565b806001600160a01b038116612ac85760405163d92e233d60e01b815260040160405180910390fd5b612ad0613dfd565b612ad982612bfd565b15612af65760405162461bcd60e51b8152600401610c57906150d1565b6001600160a01b038216600081815260116020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a25050565b612b4b613dfd565b60055460408051918252602082018390527f65fb7af72786d428e2b4e9d3d2bd45fdd354f582ccccad2044967440b98e6d7b910160405180910390a16005819055601e55565b612b99613dfd565b80612bb757604051637c946ed760e01b815260040160405180910390fd5b60065460408051918252602082018390527f063267aa94de35dcf03acb07931ff2a6eae1ac1ee0be20797c9a6d3b52abf47b910160405180910390a16006819055601f55565b6000816001600160a01b038116612c275760405163d92e233d60e01b815260040160405180910390fd5b50506001600160a01b031660009081526011602052604090205460ff1690565b600d60205260009081526040902080548190612c62906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612c8e906154a3565b8015612cdb5780601f10612cb057610100808354040283529160200191612cdb565b820191906000526020600020905b815481529060010190602001808311612cbe57829003601f168201915b5050506001840154600285018054949560ff909216949193509150612cff906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612d2b906154a3565b8015612d785780601f10612d4d57610100808354040283529160200191612d78565b820191906000526020600020905b815481529060010190602001808311612d5b57829003601f168201915b5050506003840154600485015460058601546006870154600788015460089098015496979396929550909350919060ff80821691610100810482169162010000909104168b565b6000600d600060108585604051612dd7929190614d78565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206008015460ff169392505050565b6000612e17613e5c565b73__$e73bdc529e43686130bc0575eb4e830f23$__634f02c5a4600d601960108c8c604051612e47929190614d78565b908152602001604051809103902060009054906101000a90046001600160a01b03168a8a8e8e8c8c8c6040518b63ffffffff1660e01b8152600401612e959a99989796959493929190614f9e565b60006040518083038186803b158015612ead57600080fd5b505af4158015612ec1573d6000803e3d6000fd5b50506019546001600160a01b0316159150612ef0905057612ef0336019546001600160a01b0316903089614234565b600b54612efe906001615312565b600b55336001600160a01b03167fe5f7957016a87f9d7bacdd371a516d7f2c5667aa5676c7e07cc8c0bbc6e5067b89898989604051612f409493929190614e7e565b60405180910390a2506001612f556001608a55565b979650505050505050565b6000612f6a613e5c565b336000908152600d602052604090206008015460ff16612f9c5760405162461bcd60e51b8152600401610c5790615141565b336000818152600e60209081526040808320839055600d9091529081902060038101546004820154600583015493517ff5c2a2ca5d59b6903bcb66377907e2c66983741a553bae891c485953b2a1f96f94612ff994939291614f6f565b60405180910390a25060016120736001608a55565b6000613018613e5c565b613020613eb6565b6002546001600160a01b0316336001600160a01b0316146130535760405162461bcd60e51b8152600401610c579061508c565b6001600160a01b0385166000908152600d60205260408082209051630b6f92b160e31b8152829173__$e73bdc529e43686130bc0575eb4e830f23$__91635b7c9588916130ac916013906019908c908b90600401615239565b604080518083038186803b1580156130c357600080fd5b505af41580156130d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fb9190614b4e565b60405191935091506001600160a01b0386169083156108fc029084906000818181858888f19350505050158015613136573d6000803e3d6000fd5b50306001600160a01b038681169089167fab522c1322c34ea455e8f541ecfe1b73a29039f3658bff658cf12c9fd26dc01685886131738288615312565b4260006040516131879594939291906152ed565b60405180910390a460019250505061319f6001608a55565b949350505050565b602554610100900460ff16158080156131c75750602554600160ff909116105b806131e15750303b1580156131e1575060255460ff166001145b6132445760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c57565b6025805460ff191660011790558015613267576025805461ff0019166101001790555b61326f614292565b6132776142c1565b61327f6142f0565b6132888a6123e9565b613291886136fa565b61329a89611ea9565b6132a387612b43565b6132ac86612b91565b6132b585612149565b6132be84612536565b6132c7836121ca565b6132d08261249c565b612710601381905560148190556130d46015556016556012601755601880546001600160a01b03191660011790558015613344576025805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600060108383604051613364929190614d78565b908152604051908190036020019020546001600160a01b0316905092915050565b600061338f613e5c565b336000908152600d6020526040902060080154610100900460ff166133e85760405162461bcd60e51b815260206004820152600f60248201526e4c6f636b6572733a206e6f2072657160881b6044820152606401610c57565b336000908152600d602052604080822081516101608101909252805482908290613411906154a3565b80601f016020809104026020016040519081016040528092919081815260200182805461343d906154a3565b801561348a5780601f1061345f5761010080835404028352916020019161348a565b820191906000526020600020905b81548152906001019060200180831161346d57829003601f168201915b5050509183525050600182015460209091019060ff1660058111156134bf57634e487b7160e01b600052602160045260246000fd5b60058111156134de57634e487b7160e01b600052602160045260246000fd5b81526020016002820180546134f2906154a3565b80601f016020809104026020016040519081016040528092919081815260200182805461351e906154a3565b801561356b5780601f106135405761010080835404028352916020019161356b565b820191906000526020600020905b81548152906001019060200180831161354e57829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e0850152620100009092041615159101529050600d6000336001600160a01b03168152602081019190915260400160009081209061360082826146dc565b60018201805460ff1916905561361a6002830160006146dc565b506000600382018190556004820181905560058201819055600682018190556007820155600801805462ffffff19169055600b5461365a90600190615454565b600b5561367a335b60608301516000546001600160a01b0316919061431f565b613689335b82608001516140cd565b336000818152600d6020526040908190206003810154600482015492517f10f84ef0773ba7ade3714f4e500ca17436e6df2b0feb99c754c04f889290cbd4936136d3939291614f5c565b60405180910390a260019150506120736001608a55565b6136f2613dfd565b6121c861433e565b806001600160a01b0381166137225760405163d92e233d60e01b815260040160405180910390fd5b61372a613dfd565b6002546040517fd86d51326f3c88ea5365fba597a57273ae555e44f4b11658da952320d0beaa7591613769916001600160a01b03909116908590614e27565b60405180910390a16002546040516001600160a01b03909116907f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e90600090a2600280546001600160a01b03908116600090815260126020526040808220805460ff1916905583549286166001600160a01b03199384168117909455601b8054909316841790925590517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250506002546001600160a01b03166000908152601260205260409020805460ff19166001179055565b613848613dfd565b6001600160a01b0381166138ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c57565b6138b68161437b565b50565b806001600160a01b0381166138e15760405163d92e233d60e01b815260040160405180910390fd5b6138e9613dfd565b6138f282611a68565b1561390f5760405162461bcd60e51b8152600401610c57906150d1565b6001600160a01b038216600081815260126020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a25050565b613964613dfd565b806001600160a01b03811661398c5760405163d92e233d60e01b815260040160405180910390fd5b6000546040517f3e4520ab29fdd336aca22cca0657921e53eb42307038c1895b6b5e60eec3796f916139cb916001600160a01b03909116908590614e27565b60405180910390a150600080546001600160a01b039092166001600160a01b0319928316811790915560198054909216179055565b6000613a0a613e5c565b336000908152600d602052604080822081516101608101909252805482908290613a33906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054613a5f906154a3565b8015613aac5780601f10613a8157610100808354040283529160200191613aac565b820191906000526020600020905b815481529060010190602001808311613a8f57829003601f168201915b5050509183525050600182015460209091019060ff166005811115613ae157634e487b7160e01b600052602160045260246000fd5b6005811115613b0057634e487b7160e01b600052602160045260246000fd5b8152602001600282018054613b14906154a3565b80601f0160208091040260200160405190810160405280929190818152602001828054613b40906154a3565b8015613b8d5780601f10613b6257610100808354040283529160200191613b8d565b820191906000526020600020905b815481529060010190602001808311613b7057829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260068201546080820152600782015460a082015260089091015460ff808216151560c08401526101008083048216151560e08501526201000090920416151591810191909152810151909150613c1b5760405162461bcd60e51b8152600401610c579061501d565b613c2433612268565b15613c415760405162461bcd60e51b8152600401610c5790615112565b60a081015115613c8b5760405162461bcd60e51b8152602060048201526015602482015274131bd8dad95c9cce880c081b995d081b5a5b9d1959605a1b6044820152606401610c57565b60c081015115613cd85760405162461bcd60e51b81526020600482015260186024820152774c6f636b6572733a203020736c617368696e67205442544360401b6044820152606401610c57565b336000908152600d6020526040908190209051601091613cf791614da4565b90815260405190819003602001902080546001600160a01b0319169055600d6000613d1f3390565b6001600160a01b031681526020810191909152604001600090812090613d4582826146dc565b60018201805460ff19169055613d5f6002830160006146dc565b506000600382018190556004820181905560058201819055600682018190556007820155600801805462ffffff19169055600c54613d9f90600190615454565b600c55613dab33613662565b613db43361367f565b336001600160a01b03167f628f3d67160bc1a892a1779c6475e128010a54df63af5dcdbf3c7b06ca5dfa978260000151836060015184608001516040516136d393929190614f37565b33613e0661248d565b6001600160a01b0316146121c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c57565b6002608a541415613eaf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c57565b6002608a55565b60bc5460ff16156121c85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c57565b6001608a55565b600885015460ff16613f575760405162461bcd60e51b815260206004820181905260248201527f4c6f636b6572733a206163636f756e74206973206e6f742061206c6f636b65726044820152606401610c57565b600085600501548560800151600a613f6f919061538d565b856101000151613f7f9190615435565b86516004890154613f91908790615435565b613f9b9190615435565b613fa5919061532a565b613faf9190615454565b90506000838660800151600a613fc5919061538d565b613fcf9084615435565b613fd9919061532a565b90508083111561403f5760405162461bcd60e51b815260206004820152602b60248201527f4c6f636b6572733a206d6f7265207468616e206d61782072656d6f7661626c6560448201526a0818dbdb1b185d195c985b60aa1b6064820152608401610c57565b8460c001518388600401546140549190615454565b10156140ac5760405162461bcd60e51b815260206004820152602160248201527f4c6f636b6572733a206c657373207468616e206d696e20636f6c6c61746572616044820152601b60fa1b6064820152608401610c57565b8287600401546140bc9190615454565b876004018190555050505050505050565b8047101561411d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c57565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461416a576040519150601f19603f3d011682016040523d82523d6000602084013e61416f565b606091505b50509050806141e35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610c57565b505050565b6141f06143cd565b60bc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161422a9190614e13565b60405180910390a1565b61428c846323b872dd60e01b85858560405160240161425593929190614e41565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614416565b50505050565b602554610100900460ff166142b95760405162461bcd60e51b8152600401610c579061518d565b6121c86144e8565b602554610100900460ff166142e85760405162461bcd60e51b8152600401610c579061518d565b6121c8614518565b602554610100900460ff166143175760405162461bcd60e51b8152600401610c579061518d565b6121c861453f565b6141e38363a9059cbb60e01b8484604051602401614255929190614e65565b614346613eb6565b60bc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861421d3390565b605880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60bc5460ff166121c85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610c57565b600061446b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145729092919063ffffffff16565b8051909150156141e3578080602001905181019061448991906148dd565b6141e35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c57565b602554610100900460ff1661450f5760405162461bcd60e51b8152600401610c579061518d565b6121c83361437b565b602554610100900460ff16613efc5760405162461bcd60e51b8152600401610c579061518d565b602554610100900460ff166145665760405162461bcd60e51b8152600401610c579061518d565b60bc805460ff19169055565b6060614581848460008561458b565b90505b9392505050565b6060824710156145ec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c57565b843b61463a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c57565b600080866001600160a01b031685876040516146569190614d88565b60006040518083038185875af1925050503d8060008114614693576040519150601f19603f3d011682016040523d82523d6000602084013e614698565b606091505b5091509150612f55828286606083156146b2575081614584565b8251156146c25782518084602001fd5b8160405162461bcd60e51b8152600401610c579190614ea5565b5080546146e8906154a3565b6000825580601f106146f8575050565b601f0160209004906000526020600020908101906138b691905b808211156147265760008155600101614712565b5090565b80356001600160a01b038116811461163c57600080fd5b60008083601f840112614752578081fd5b5081356001600160401b03811115614768578182fd5b60208301915083602082850101111561478057600080fd5b9250929050565b600060208284031215614798578081fd5b6145848261472a565b60008060008060008060008060006101208a8c0312156147bf578485fd5b6147c88a61472a565b98506147d660208b0161472a565b97506147e460408b0161472a565b989b979a5097986060810135985060808101359760a0820135975060c0820135965060e08201359550610100909101359350915050565b6000806040838503121561482d578182fd5b6148368361472a565b946020939093013593505050565b60008060008060808587031215614859578384fd5b6148628561472a565b9350602085013592506148776040860161472a565b9396929550929360600135925050565b600080600080600060a0868803121561489e578081fd5b6148a78661472a565b9450602086013593506148bc6040870161472a565b9250606086013591506148d16080870161472a565b90509295509295909350565b6000602082840312156148ee578081fd5b81518015158114614584578182fd5b6000806020838503121561490f578182fd5b82356001600160401b03811115614924578283fd5b61493085828601614741565b90969095509350505050565b60008060008060608587031215614951578384fd5b84356001600160401b03811115614966578485fd5b61497287828801614741565b909550935061498590506020860161472a565b9396929550929360400135925050565b6000806000604084860312156149a9578283fd5b83356001600160401b038111156149be578384fd5b6149ca86828701614741565b909790965060209590950135949350505050565b600080600080600080600060a0888a0312156149f8578283fd5b87356001600160401b0380821115614a0e578485fd5b614a1a8b838c01614741565b909950975060208a0135965060408a0135955060608a0135915060068210614a40578485fd5b90935060808901359080821115614a55578384fd5b50614a628a828b01614741565b989b979a50959850939692959293505050565b600060208284031215614a86578081fd5b81356001600160401b0380821115614a9c578283fd5b818401915084601f830112614aaf578283fd5b813581811115614ac157614ac16154ee565b604051601f8201601f19908116603f01168101908382118183101715614ae957614ae96154ee565b81604052828152876020848701011115614b01578586fd5b826020860160208301379182016020019490945295945050505050565b600060208284031215614b2f578081fd5b5035919050565b600060208284031215614b47578081fd5b5051919050565b60008060408385031215614b60578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452614bbf816020860160208601615477565b601f01601f19169290920160200192915050565b60008154614be0816154a3565b808552602060018381168015614bfd5760018114614c1157614c3f565b60ff19851688840152604088019550614c3f565b866000528260002060005b85811015614c375781548a8201860152908301908401614c1c565b890184019650505b505050505092915050565b60068110614c6857634e487b7160e01b600052602160045260246000fd5b9052565b8054825260018101546020830152600281015460408301526003810154606083015260048101546080830152600501546001600160a01b031660a090910152565b614cc082614cbb835461546b565b614b71565b614ccd600182015461546b565b614cda6020840182614b71565b50614ce8600282015461546b565b614cf56040840182614b71565b50614d03600382015461546b565b614d106060840182614b71565b50614d1e600482015461546b565b614d2b6080840182614b71565b50600581015460a0830152600681015460c0830152600781015460e083015260088101546101008301526009810154610120830152600a810154610140830152600b015461016090910152565b8183823760009101908152919050565b60008251614d9a818460208701615477565b9190910192915050565b6000808354614db2816154a3565b60018281168015614dca5760018114614ddb57614e07565b60ff19841687528287019450614e07565b8786526020808720875b85811015614dfe5781548a820152908401908201614de5565b50505082870194505b50929695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b606081526000614e92606083018688614b7e565b6020830194909452506040015292915050565b6020815260006145846020830184614ba7565b6000610160808352614ecc8184018f614ba7565b9050614edb602084018e614c4a565b8281036040840152614eed818d614ba7565b606084019b909b525050608081019790975260a087019590955260c086019390935260e0850191909152151561010084015215156101208301521515610140909101529392505050565b606081526000614f4a6060830186614ba7565b60208301949094525060400152919050565b606081526000614f4a6060830186614bd3565b608081526000614f826080830187614bd3565b6020830195909552506040810192909252606090910152919050565b60006102608c8352614fb3602084018d614cad565b6001600160a01b038b166101a08401526101c083018a90526101e083018990526102008301819052614fe8818401888a614b7e565b9050614ff8610220840187614c4a565b82810361024084015261500c818587614b7e565b9d9c50505050505050505050505050565b6020808252601290820152712637b1b5b2b9399d103737903637b1b5b2b960711b604082015260600190565b60208082526023908201527f4c6f636b6572733a206163636f756e7420646f6573206e6f74206861766520726040820152626f6c6560e81b606082015260800190565b60208082526025908201527f4c6f636b6572733a206d6573736167652073656e646572206973206e6f74206360408201526431a13ab93760d91b606082015260800190565b60208082526021908201527f4c6f636b6572733a206163636f756e7420616c72656164792068617320726f6c6040820152606560f81b606082015260800190565b6020808252601590820152744c6f636b6572733a207374696c6c2061637469766560581b604082015260600190565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601590820152742637b1b5b2b9399d1036bab9ba1021a9101f10262960591b604082015260600190565b848152610280810161521c6020830186614c6c565b61522960e0830185614cad565b8261026083015295945050505050565b8581526102a0810161524e6020830187614c6c565b61525b60e0830186614cad565b61026082019390935261028001529392505050565b610240810161527f8285614c6c565b61458460c0830184614cad565b85815260a0602082015260006152a560a0830187614ba7565b6152b26040840187614c4a565b82810360608401526152c48186614ba7565b9150508260808301529695505050505050565b9283526020830191909152604082015260600190565b9485526020850193909352604084019190915260608301521515608082015260a00190565b60008219821115615325576153256154d8565b500190565b60008261534557634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561538557816000190482111561536b5761536b6154d8565b8085161561537857918102915b93841c939080029061534f565b509250929050565b600061458483836000826153a3575060016123db565b816153b0575060006123db565b81600181146153c657600281146153d0576153ec565b60019150506123db565b60ff8411156153e1576153e16154d8565b50506001821b6123db565b5060208310610133831016604e8410600b841016171561540f575081810a6123db565b615419838361534a565b806000190482111561542d5761542d6154d8565b029392505050565b600081600019048311821515161561544f5761544f6154d8565b500290565b600082821015615466576154666154d8565b500390565b6001600160a01b031690565b60005b8381101561549257818101518382015260200161547a565b8381111561428c5750506000910152565b600181811c908216806154b757607f821691505b60208210811415611ab157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220be3d4ad0118289eb834193cd61a0a15fe4a81799e3ac11398cc2d26e9590db0164736f6c63430008040033",
  "libraries": {
    "LockersManagerLib": "0x1C49B4130670EF5f1a80664ce46b0803896a4e4b"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCollateral(address,uint256)": {
        "params": {
          "_addingNativeTokenAmount": "Amount of added collateral",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if collateral is added successfully"
        }
      },
      "addLocker(address)": {
        "details": "Only owner can call this. The isCandidate is also set to false.",
        "params": {
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if the candidate is added successfully"
        }
      },
      "burn(bytes,uint256)": {
        "details": "Burn teleBTC and also get the locker's fee",
        "params": {
          "_amount": "Amount of the teleBTC which is minted, including the locker's fee",
          "_lockerLockingScript": "Locking script of a locker"
        },
        "returns": {
          "_0": "uint                  The amount of teleBTC burnt"
        }
      },
      "buySlashedCollateralOfLocker(address,uint256)": {
        "details": "Users buy the slashed collateral using TeleBTC with discount                                   The paid TeleBTC will be burnt to keep the system safe                                   If all the needed TeleBTC is collected and burnt,                                   the rest of slashed collateral is sent back to locker",
        "params": {
          "_collateralAmount": "Amount of collateral (TNT) that someone intends to buy with discount",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if buying was successful"
        }
      },
      "isBurner(address)": {
        "params": {
          "account": "The account which intended to be checked"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "isLockerActive(address)": {
        "details": "We check a locker status in below cases:                                     1. Minting TeleBTC                                     2. Removing locker's collateral                                     3. Removing locker",
        "params": {
          "_lockerTargetAddress": "Address of locker on the target chain"
        },
        "returns": {
          "_0": "True if the locker is active"
        }
      },
      "isMinter(address)": {
        "params": {
          "account": "The account which intended to be checked"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "liquidateLocker(address,uint256)": {
        "details": "Anyone can liquidate Locker with health factor under      100% by providing a sufficient amount of TeleBTC.",
        "params": {
          "_collateralAmount": "Amount of TNT collateral that someone wants to buy with discount",
          "_lockerTargetAddress": "Locker's target chain address"
        },
        "returns": {
          "_0": "True if liquidation was successful"
        }
      },
      "mint(bytes,address,uint256)": {
        "details": "Mint teleBTC for an account and the locker fee as well",
        "params": {
          "_amount": "Amount of the teleBTC which is minted, including the locker's fee",
          "_lockerLockingScript": "Locking script of a locker",
          "_receiver": "Address of the receiver of the minted teleBTCs"
        },
        "returns": {
          "_0": "uint                  The amount of teleBTC minted for the receiver"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseLocker()": {
        "details": "Only functions with whenPaused modifier can be called"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "priceOfOneUnitOfCollateralInBTC()": {
        "details": "Returns the price of one native token (1*10^18) in teleBTC",
        "returns": {
          "_0": "uint The price of one unit of collateral token (native token in teleBTC)"
        }
      },
      "removeCollateral(uint256)": {
        "params": {
          "_removingNativeTokenAmount": "Amount of removed collateral"
        },
        "returns": {
          "_0": "True if collateral is removed successfully"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestActivation()": {
        "details": "Users can only mint TeleBTC by active locker      Note: lockerInactivationTimestamp = 0 means that the Locker is active",
        "returns": {
          "_0": "True if activated successfully"
        }
      },
      "requestInactivation()": {
        "details": "This would inactivate Locker after INACTIVATION_DELAY. The impact of inactivation is:      1. No one can mint TeleBTC by the Locker      2. Locker can be removed      3. Locker can withdraw unused collateral",
        "returns": {
          "_0": "True if deactivated successfully"
        }
      },
      "requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)": {
        "details": "This request may be approved by the owner",
        "params": {
          "_candidateLockingScript": "Locking script of the Locker. Users can use this script to lock BTC.",
          "_lockedNativeTokenAmount": "TNT (target native token) bond amount",
          "_lockedTSTAmount": "TST bond amount",
          "_lockerRescueScript": "Rescue script of Locker. In the case of liqudation, BTC is sent to this script.",
          "_lockerRescueType": "Type of Locker's rescue script (e.g. P2SH)"
        },
        "returns": {
          "_0": "True if candidate added successfully"
        }
      },
      "revokeRequest()": {
        "details": "Send back TST and TNT collateral to the candidate",
        "returns": {
          "_0": "True if the candidate is removed successfully"
        }
      },
      "selfRemoveLocker()": {
        "details": "Only Locker can call this. The conditions for successful remove is:      1. Locker has been inactivated      2. Locker net minted TeleBTC is 0      3. Locker is not being slashed",
        "returns": {
          "_0": "True if locker is removed successfully"
        }
      },
      "setCollateralRatio(uint256)": {
        "details": "This ratio is used to calculate the maximum mintable TeleBTC by a Locker"
      },
      "setLockerPercentageFee(uint256)": {
        "details": "This fee is taken by Locker for every minting or burning"
      },
      "setPriceOracle(address)": {
        "details": "This oracle is used to get the price of native token in BTC"
      },
      "setPriceWithDiscountRatio(uint256)": {
        "details": "This ratio gives discount to users who participate in Locker liquidation"
      },
      "slashIdleLocker(address,uint256,address,uint256,address)": {
        "details": "Only burn router can call this. Locker is slashed since he doesn't provide burn proof      before the request deadline. User who made the burn request will receive the slashed bond.",
        "params": {
          "_amount": "Amount of TeleBTC that is slashed from Locker",
          "_lockerTargetAddress": "Locker's target chain address",
          "_recipient": "Address of user who receives the slashed collateral",
          "_rewardAmount": "Amount of TeleBTC that slasher receives",
          "_slasher": "Address of slasher who receives reward"
        },
        "returns": {
          "_0": "True if the locker is slashed successfully"
        }
      },
      "slashThiefLocker(address,uint256,address,uint256)": {
        "details": "Only burn router can call. Locker is slashed because he moved BTC from      Locker's Bitcoin address without any corresponding burn req.      The slashed bond will be sold with discount.",
        "params": {
          "_amount": "Value of slashed collateral (in TeleBTC)",
          "_lockerTargetAddress": "Locker's target chain address",
          "_rewardAmount": "Value of slashed reward (in TeleBTC)",
          "_slasher": "Address of slasher who receives reward"
        },
        "returns": {
          "_0": "True if the locker is slashed successfully"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unPauseLocker()": {
        "details": "Only functions with whenNotPaused modifier can be called"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBurner(address)": {
        "notice": "Give an account access to burn"
      },
      "addCollateral(address,uint256)": {
        "notice": "Increases TNT collateral of the locker"
      },
      "addLocker(address)": {
        "notice": "Approve the candidate request to become Locker"
      },
      "addMinter(address)": {
        "notice": "Give an account access to mint"
      },
      "burn(bytes,uint256)": {
        "notice": "Burn teleBTC of an account"
      },
      "buySlashedCollateralOfLocker(address,uint256)": {
        "notice": "Sells lockers slashed collateral"
      },
      "getLockerLockingScript(address)": {
        "notice": "Return locking script of _lockerTargetAddress Locker"
      },
      "getLockerTargetAddress(bytes)": {
        "notice": "Return EVM address of _lockerLockingScript Locker"
      },
      "getNumberOfLockers()": {
        "notice": "Return total number of Lockers"
      },
      "isBurner(address)": {
        "notice": "Check if an account is burner"
      },
      "isLocker(bytes)": {
        "notice": "Return true if _lockerLockingScript is Locker"
      },
      "isLockerActive(address)": {
        "notice": "Returns the Locker status"
      },
      "isMinter(address)": {
        "notice": "Check if an account is minter"
      },
      "liquidateLocker(address,uint256)": {
        "notice": "Liquidate Locker with unhealthy collateral"
      },
      "mint(bytes,address,uint256)": {
        "notice": "Mint teleBTC for an account"
      },
      "pauseLocker()": {
        "notice": "Pause the contract"
      },
      "removeBurner(address)": {
        "notice": "Remove an account's access to burn"
      },
      "removeCollateral(uint256)": {
        "notice": "Decreases TNT collateral of the locker"
      },
      "removeMinter(address)": {
        "notice": "Remove an account's access to mint"
      },
      "requestActivation()": {
        "notice": "Activate Locker"
      },
      "requestInactivation()": {
        "notice": "Request to inactivate Locker"
      },
      "requestToBecomeLocker(bytes,uint256,uint256,uint8,bytes)": {
        "notice": "Submit request to become Locker"
      },
      "revokeRequest()": {
        "notice": "Revoke request to become Locker"
      },
      "selfRemoveLocker()": {
        "notice": "Removes Locker from system and send back Locker TST and TNT collateral."
      },
      "setCCBurnRouter(address)": {
        "notice": "Update burn router address"
      },
      "setCollateralRatio(uint256)": {
        "notice": "Update collateral ratio"
      },
      "setLiquidationRatio(uint256)": {
        "notice": "Update liquidation ratio"
      },
      "setLockerPercentageFee(uint256)": {
        "notice": "Update locker percentage fee"
      },
      "setMinRequiredTDTLockedAmount(uint256)": {
        "notice": "Update the required TST bond to become Locker"
      },
      "setMinRequiredTNTLockedAmount(uint256)": {
        "notice": "Update the required native token bond to become Locker"
      },
      "setPriceOracle(address)": {
        "notice": "Update the price oracle"
      },
      "setPriceWithDiscountRatio(uint256)": {
        "notice": "Update price with discount ratio"
      },
      "setTST(address)": {
        "notice": "Update TST contract address"
      },
      "setTeleBTC(address)": {
        "notice": "Update wrapped BTC address"
      },
      "slashIdleLocker(address,uint256,address,uint256,address)": {
        "notice": "Slash Locker for unprocessed unwrap request"
      },
      "slashThiefLocker(address,uint256,address,uint256)": {
        "notice": "Slash Locker for stealing users BTC"
      },
      "unPauseLocker()": {
        "notice": "Un-pause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11473,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "TeleportDAOToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11476,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "teleBTC",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11479,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "ccBurnRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11482,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "exchangeConnector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11485,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "priceOracle",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11488,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "minRequiredTDTLockedAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11491,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "minRequiredTNTLockedAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11494,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "lockerPercentageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11497,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11500,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "liquidationRatio",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11503,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "priceWithDiscountRatio",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 11506,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "totalNumberOfCandidates",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11509,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "totalNumberOfLockers",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11514,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "lockersMapping",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(locker)11568_storage)"
      },
      {
        "astId": 11518,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "lockerInactivationTimestamp",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11522,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "lockerLeavingAcceptance",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11526,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "lockerTargetAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes_memory_ptr,t_address)"
      },
      {
        "astId": 11530,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "minters",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11534,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "burners",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11537,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "libConstants",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(lockersLibConstants)11581_storage"
      },
      {
        "astId": 11540,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "libParams",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(lockersLibParam)11606_storage"
      },
      {
        "astId": 396,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "37",
        "type": "t_uint8"
      },
      {
        "astId": 399,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "37",
        "type": "t_bool"
      },
      {
        "astId": 1161,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "38",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 268,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "88",
        "type": "t_address"
      },
      {
        "astId": 388,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "89",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 699,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "_status",
        "offset": 0,
        "slot": "138",
        "type": "t_uint256"
      },
      {
        "astId": 757,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "139",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 579,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "_paused",
        "offset": 0,
        "slot": "188",
        "type": "t_bool"
      },
      {
        "astId": 684,
        "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "189",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)7120": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(locker)11568_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILockersManager.locker)",
        "numberOfBytes": "32",
        "value": "t_struct(locker)11568_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(locker)11568_storage": {
        "encoding": "inplace",
        "label": "struct ILockersManager.locker",
        "members": [
          {
            "astId": 11546,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "lockerLockingScript",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 11549,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "lockerRescueType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ScriptTypes)7120"
          },
          {
            "astId": 11551,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "lockerRescueScript",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 11553,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "TDTLockedAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11555,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "nativeTokenLockedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11557,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "netMinted",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11559,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "slashingTeleBTCAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11561,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "reservedNativeTokenForSlash",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11563,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "isLocker",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 11565,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "isCandidate",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 11567,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "isScriptHash",
            "offset": 2,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(lockersLibConstants)11581_storage": {
        "encoding": "inplace",
        "label": "struct ILockersManager.lockersLibConstants",
        "members": [
          {
            "astId": 11570,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "OneHundredPercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11572,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "HealthFactor",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11574,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "UpperHealthFactor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11576,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "MaxLockerFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11578,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "NativeTokenDecimal",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11580,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "NativeToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(lockersLibParam)11606_storage": {
        "encoding": "inplace",
        "label": "struct ILockersManager.lockersLibParam",
        "members": [
          {
            "astId": 11583,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "teleportDAOToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11585,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "teleBTC",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11587,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "ccBurnRouter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11589,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "exchangeConnector",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11591,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "priceOracle",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11593,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "minRequiredTDTLockedAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11595,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "minRequiredTNTLockedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11597,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "lockerPercentageFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11599,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "collateralRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 11601,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "liquidationRatio",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11603,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "priceWithDiscountRatio",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 11605,
            "contract": "contracts/lockersManager/LockersManagerLogic.sol:LockersManagerLogic",
            "label": "inactivationDelay",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}