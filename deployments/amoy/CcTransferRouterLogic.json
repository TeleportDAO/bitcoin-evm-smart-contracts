{
  "address": "0x828dCF17F3c668a6935cf8c65639CcFB0D93C4e2",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldInstantRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInstantRouter",
          "type": "address"
        }
      ],
      "name": "NewInstantRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLockers",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockers",
          "type": "address"
        }
      ],
      "name": "NewLockers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewProtocolPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "NewRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleBTC",
          "type": "address"
        }
      ],
      "name": "NewTeleBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldThirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newThirdPartyAddress",
          "type": "address"
        }
      ],
      "name": "NewThirdPartyAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThirdPartyFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThirdPartyFee",
          "type": "uint256"
        }
      ],
      "name": "NewThirdPartyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bitcoinTxId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "teleporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "fees",
          "type": "uint256[4]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        }
      ],
      "name": "NewWrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ccTransferRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_appId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instantRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_txId",
          "type": "bytes32"
        }
      ],
      "name": "isRequestUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_instantRouter",
          "type": "address"
        }
      ],
      "name": "setInstantRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        }
      ],
      "name": "setLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "setStartingBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_thirdPartyAddress",
          "type": "address"
        }
      ],
      "name": "setThirdPartyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_thirdPartyFee",
          "type": "uint256"
        }
      ],
      "name": "setThirdPartyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "thirdParty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thirdPartyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thirdPartyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "version",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "vin",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "vout",
              "type": "bytes"
            },
            {
              "internalType": "bytes4",
              "name": "locktime",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "intermediateNodes",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICcTransferRouter.TxAndProof",
          "name": "_txAndProof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4a7a64f817d3f32e5b8bbe0f8a375683c2eec2bb08f0072501812da2e2627c11",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0x828dCF17F3c668a6935cf8c65639CcFB0D93C4e2",
    "transactionIndex": 1,
    "gasUsed": "3575173",
    "logsBloom": "0x
    "blockHash": "0x8d1a83e21074ed00aae322d5efd98b5c1de21b67c3cb36c4354bb0ce4a87f86f",
    "transactionHash": "0x4a7a64f817d3f32e5b8bbe0f8a375683c2eec2bb08f0072501812da2e2627c11",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5983161,
        "transactionHash": "0x4a7a64f817d3f32e5b8bbe0f8a375683c2eec2bb08f0072501812da2e2627c11",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x0000000000000000000000006dc2dd54f24979ec26212794c71afefed722280c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000045dbce113fdd6d1000000000000000000000000000000000000000000000002283f3fab456eb30a0000000000000000000000000000000000000000000000e8d4a6e5251e83957d00000000000000000000000000000000000000000000000223e182ca3170dc390000000000000000000000000000000000000000000000e8d904a20632816c4e",
        "logIndex": 2,
        "blockHash": "0x8d1a83e21074ed00aae322d5efd98b5c1de21b67c3cb36c4354bb0ce4a87f86f"
      }
    ],
    "blockNumber": 5983161,
    "cumulativeGasUsed": "3621464",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3849a4863b3f479a54c4c9d266f63097",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldInstantRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInstantRouter\",\"type\":\"address\"}],\"name\":\"NewInstantRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockers\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockers\",\"type\":\"address\"}],\"name\":\"NewLockers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"NewRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBTC\",\"type\":\"address\"}],\"name\":\"NewTeleBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldThirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newThirdPartyAddress\",\"type\":\"address\"}],\"name\":\"NewThirdPartyAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThirdPartyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThirdPartyFee\",\"type\":\"uint256\"}],\"name\":\"NewThirdPartyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitcoinTxId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teleporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"fees\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"NewWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ccTransferRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"name\":\"isRequestUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instantRouter\",\"type\":\"address\"}],\"name\":\"setInstantRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setStartingBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_thirdPartyAddress\",\"type\":\"address\"}],\"name\":\"setThirdPartyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thirdPartyFee\",\"type\":\"uint256\"}],\"name\":\"setThirdPartyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"thirdParty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdPartyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdPartyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct ICcTransferRouter.TxAndProof\",\"name\":\"_txAndProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(uint256,uint256,uint256,uint256,address,address,address,address)\":{\"params\":{\"_appId\":\"Id of ccTransfer dApp\",\"_chainId\":\"Id of the underlying chain\",\"_lockers\":\"Lockers' contract address\",\"_protocolPercentageFee\":\"Percentage amount of protocol fee (min: %0.01)\",\"_relay\":\"The Relay address to validate data from source chain\",\"_startingBlockNumber\":\"Requests that are included in a block older than _startingBlockNumber cannot be executed\",\"_teleBTC\":\"TeleportDAO BTC ERC20 token address\",\"_treasury\":\"Address of treasury that collects protocol fees\"}},\"isRequestUsed(bytes32)\":{\"details\":\"This is to avoid re-submitting a used request\",\"params\":{\"_txId\":\"The txId of request on the source chain\"},\"returns\":{\"_0\":\"True if the request has been executed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setInstantRouter(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_instantRouter\":\"Address of the instant router contract\"}},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"Address of the lockers contract\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"Percentage amount of protocol fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"Address of the relay contract\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"TeleportDAO BTC ERC20 token address\"}},\"setThirdPartyAddress(uint256,address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_thirdPartyAddress\":\"third party address\"}},\"setThirdPartyFee(uint256,uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_thirdPartyFee\":\"third party fee\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"Treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"wrap((bytes4,bytes,bytes,bytes4,uint256,bytes,uint256),bytes)\":{\"details\":\"Validates the transfer request, then,                                     if speed is 1, the request is instant                                     which pays back the loan,                                     if the speed is 0, it is a normal transfer\",\"params\":{\"_lockerLockingScript\":\"Locking script of locker that user has sent BTC to it\",\"_txAndProof\":\"Transaction and merkle proof data\"},\"returns\":{\"_0\":\"True if the transfer is successful\"}}},\"version\":1},\"userdoc\":{\"events\":{\"NewInstantRouter(address,address)\":{\"notice\":\"Emits when changes made to InstantRouter address\"},\"NewLockers(address,address)\":{\"notice\":\"Emits when changes made to Lockers address\"},\"NewProtocolPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when changes made to protocol percentage fee\"},\"NewRelay(address,address)\":{\"notice\":\"Emits when changes made to relay address\"},\"NewTeleBTC(address,address)\":{\"notice\":\"Emits when changes made to TeleBTC address\"},\"NewThirdPartyAddress(uint256,address,address)\":{\"notice\":\"Emits when changes made to third party address\"},\"NewThirdPartyFee(uint256,uint256,uint256)\":{\"notice\":\"Emits when changes made to third party fee\"},\"NewTreasury(address,address)\":{\"notice\":\"Emits when changes made to Treasury address\"},\"NewWrap(bytes32,bytes,address,address,address,uint256[2],uint256[4],uint256,uint256)\":{\"notice\":\"Emits when a cc transfer request gets done\"}},\"kind\":\"user\",\"methods\":{\"initialize(uint256,uint256,uint256,uint256,address,address,address,address)\":{\"notice\":\"Gives default params to initiate cc transfer router\"},\"isRequestUsed(bytes32)\":{\"notice\":\"Check if the request has been executed before\"},\"setInstantRouter(address)\":{\"notice\":\"Setter for instant router\"},\"setLockers(address)\":{\"notice\":\"Setter for lockers\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Setter for protocol percentage fee\"},\"setRelay(address)\":{\"notice\":\"Setter for relay\"},\"setStartingBlockNumber(uint256)\":{\"notice\":\"Setter for starting block number\"},\"setTeleBTC(address)\":{\"notice\":\"Setter for teleBTC\"},\"setThirdPartyAddress(uint256,address)\":{\"notice\":\"Setter for third party address\"},\"setThirdPartyFee(uint256,uint256)\":{\"notice\":\"Setter for third party fee\"},\"setTreasury(address)\":{\"notice\":\"Setter for treasury\"},\"wrap((bytes4,bytes,bytes,bytes4,uint256,bytes,uint256),bytes)\":{\"notice\":\"Executes the cross chain transfer request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/CcTransferRouterLogic.sol\":\"CcTransferRouterLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        // Validates Vin length\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64 _value) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n        output = indexVout(voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n        \\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n        \\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength. \\n            // note: script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 77 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0x2aff58cb87c1223fcf40f95e1f723485c5bcc63b1e0bd0498a705aa236b30564\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbca90a02eb6c7d68e75548ce6621bddddf3f78629b8b7a4a01c510c99f17c0e\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xf8b47bdc9c94c8da51772aea70e5b5c14c9115e5cbc79df6f552985a2d8f867f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITeleBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0x9686246b83f81aeb2b71cc3b9178ce2a81fd63039dbc26da5e3b08190bce6427\",\"license\":\"MIT\"},\"contracts/libraries/RequestParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/// @notice Library for parsing cc transfer and cc exchange requests\\nlibrary RequestParser {\\n    /// @notice Returns chain id of the request\\n    /// @param _arbitraryData Data written in Bitcoin tx\\n    function parseChainId(bytes memory _arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 0, 1);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice Returns app id of the request\\n    /// @dev Determines the app that request belongs to (e.g. cc transfer app id is 0)\\n    function parseAppId(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 2, 2);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Returns recipient address\\n    /// @dev Minted TeleBTC or exchanged tokens will be sent to this address\\n    function parseRecipientAddress(bytes memory _arbitraryData) internal pure returns (address parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 3, 22);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice Returns network fee\\n    /// @dev This fee goes to Teleporter who submitted the request\\n    function parseNetworkFee(bytes memory _arbitraryData) internal pure returns (uint24 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 23, 25);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 3))\\n        }\\n    }\\n\\n    /// @notice Determines type of the request\\n    /// @dev 0 for normal requests, 1 for fixed-rate requests\\n    function parseSpeed(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 26, 26);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Returns id of third party\\n    /// @dev 0 for no third party\\n    function parseThirdPartyId(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 27, 27);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Returns address of exchange token\\n    /// @dev Minted TeleBTC will be exchanged for this token\\n    function parseExchangeToken(bytes memory _arbitraryData) internal pure returns (address parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 28, 47);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice Returns min expected output (exchange) amount\\n    function parseExchangeOutputAmount(bytes memory _arbitraryData) internal pure returns (uint112 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 48, 61);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 14))\\n        }\\n    }\\n\\n    /// @notice Returns across percentage fee \\n    /// @dev This fee goes to across relayers\\n    function parseArossFeePercentage(bytes memory _arbitraryData) internal pure returns (uint24 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 62, 64);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 3))\\n        }\\n    }\\n\\n    /// @notice Returns the sliced bytes\\n    /// @param _data Slicing data\\n    /// @param _start index of slicing\\n    /// @param _end index of slicing\\n    function sliceBytes(\\n        bytes memory _data,\\n        uint _start,\\n        uint _end\\n    ) internal pure returns (bytes memory _result) {\\n        bytes1 temp;\\n        for (uint i = _start; i < _end + 1; i++) {\\n            temp = _data[i];\\n            _result = abi.encodePacked(_result, temp);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe884628255dee6cfd0d565a056bdf770699f0b4fc47d04cdff0c5bc6ae6360b4\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewTST(\\n        address oldTST,\\n        address newTST\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTSTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x2dfb0206a8c767ccfb583dc3951bdf5596cec3295597dd40b3bd3280f002b94b\",\"license\":\"MIT\"},\"contracts/routers/CcTransferRouterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./CcTransferRouterStorage.sol\\\";\\nimport \\\"./CcTransferRouterStorageV2.sol\\\";\\nimport \\\"../libraries/RequestParser.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract CcTransferRouterLogic is CcTransferRouterStorage, \\n    OwnableUpgradeable, ReentrancyGuardUpgradeable, CcTransferRouterStorageV2 {\\n\\n    error ZeroAddress();\\n\\n    modifier nonZeroAddress(address _address) {\\n        if (_address == address(0))\\n            revert ZeroAddress();\\n        _;\\n    }\\n\\n    /// @notice Gives default params to initiate cc transfer router\\n    /// @param _startingBlockNumber         Requests that are included in a block older than _startingBlockNumber cannot be executed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _appId                       Id of ccTransfer dApp\\n    /// @param _relay                       The Relay address to validate data from source chain\\n    /// @param _lockers                     Lockers' contract address\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    /// @param _treasury                    Address of treasury that collects protocol fees\\n    function initialize(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _chainId,\\n        uint _appId,\\n        address _relay,\\n        address _lockers,\\n        address _teleBTC,\\n        address _treasury\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        chainId = _chainId;\\n        appId = _appId;\\n        _setStartingBlockNumber(_startingBlockNumber);\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setTeleBTC(_teleBTC);\\n        _setTreasury(_treasury);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Setter for starting block number\\n    function setStartingBlockNumber(uint _startingBlockNumber) external override onlyOwner {\\n        _setStartingBlockNumber(_startingBlockNumber);\\n    }\\n\\n    /// @notice                             Setter for protocol percentage fee\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice                             Setter for relay\\n    /// @dev                                Only owner can call this\\n    /// @param _relay                       Address of the relay contract\\n    function setRelay(address _relay) external override nonZeroAddress(_relay) onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice                             Setter for lockers\\n    /// @dev                                Only owner can call this\\n    /// @param _lockers                     Address of the lockers contract\\n    function setLockers(address _lockers) external override nonZeroAddress(_lockers) onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice                             Setter for instant router\\n    /// @dev                                Only owner can call this\\n    /// @param _instantRouter               Address of the instant router contract\\n    function setInstantRouter(address _instantRouter) external override nonZeroAddress(_instantRouter) onlyOwner {\\n        _setInstantRouter(_instantRouter);\\n    }\\n\\n    /// @notice                             Setter for teleBTC\\n    /// @dev                                Only owner can call this\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                             Setter for treasury\\n    /// @dev                                Only owner can call this\\n    /// @param _treasury                    Treasury address\\n    function setTreasury(address _treasury) external override nonZeroAddress(_treasury) onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice                             Setter for third party address\\n    /// @dev                                Only owner can call this\\n    /// @param _thirdPartyAddress           third party address\\n    function setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external override onlyOwner {\\n        _setThirdPartyAddress(_thirdPartyId, _thirdPartyAddress);\\n    }\\n\\n    /// @notice                             Setter for third party fee\\n    /// @dev                                Only owner can call this\\n    /// @param _thirdPartyFee               third party fee\\n    function setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external override onlyOwner {\\n        _setThirdPartyFee(_thirdPartyId, _thirdPartyFee);\\n    }\\n\\n\\n    /// @notice                             Internal setter for protocol percentage fee\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(\\n            MAX_PROTOCOL_FEE >= _protocolPercentageFee,\\n            \\\"CCTransferRouter: protocol fee is out of range\\\"\\n        );\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice Internal setter for starting block number\\n    function _setStartingBlockNumber(uint _startingBlockNumber) private {\\n        require(\\n            _startingBlockNumber > startingBlockNumber,\\n            \\\"CCTransferRouter: low startingBlockNumber\\\"\\n        );\\n        startingBlockNumber = _startingBlockNumber;\\n    }\\n\\n    /// @notice                             Internal setter for relay\\n    /// @param _relay                       Address of the relay contract\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Internal setter for relay\\n    /// @param _lockers                     Address of the lockers contract\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                             Internal setter for instant router\\n    /// @param _instantRouter               Address of the instant router contract\\n    function _setInstantRouter(address _instantRouter) private nonZeroAddress(_instantRouter) {\\n        emit NewInstantRouter(instantRouter, _instantRouter);\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                             Internal setter for teleBTC\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                             Internal setter for treasury\\n    /// @param _treasury                    Treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Internal setter for third party address\\n    /// @param _thirdPartyAddress           third party address\\n    function _setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) private {\\n        emit NewThirdPartyAddress(_thirdPartyId, thirdPartyAddress[_thirdPartyId], _thirdPartyAddress);\\n        thirdPartyAddress[_thirdPartyId] = _thirdPartyAddress;\\n    }\\n\\n    /// @notice                             Internal setter for third party fee\\n    /// @param _thirdPartyFee               third party fee\\n    function _setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) private {\\n        emit NewThirdPartyFee(_thirdPartyId, thirdPartyFee[_thirdPartyId], _thirdPartyFee);\\n        thirdPartyFee[_thirdPartyId] = _thirdPartyFee;\\n    }\\n\\n\\n    /// @notice                             Check if the request has been executed before\\n    /// @dev                                This is to avoid re-submitting a used request\\n    /// @param _txId                        The txId of request on the source chain\\n    /// @return                             True if the request has been executed\\n    function isRequestUsed(bytes32 _txId) external view override returns (bool) {\\n        return ccTransferRequests[_txId].isUsed ? true : false;\\n    }\\n    \\n\\n    /// @notice                             Executes the cross chain transfer request\\n    /// @dev                                Validates the transfer request, then,\\n    ///                                     if speed is 1, the request is instant\\n    ///                                     which pays back the loan,\\n    ///                                     if the speed is 0, it is a normal transfer\\n    /// @param _txAndProof                  Transaction and merkle proof data\\n    /// @param _lockerLockingScript         Locking script of locker that user has sent BTC to it\\n    /// @return                             True if the transfer is successful\\n    function wrap(\\n        TxAndProof memory _txAndProof,\\n        bytes calldata _lockerLockingScript\\n    ) external payable nonReentrant override returns (bool) {\\n        require(_msgSender() == instantRouter, \\\"CCTransferRouter: invalid sender\\\");\\n        require(_txAndProof.blockNumber >= startingBlockNumber, \\\"CCTransferRouter: request is too old\\\");\\n\\n        // Finds txId on the source chain\\n        bytes32 txId = BitcoinHelper.calculateTxId(_txAndProof.version, _txAndProof.vin, _txAndProof.vout, _txAndProof.locktime);\\n        \\n        require(\\n            !ccTransferRequests[txId].isUsed,\\n            \\\"CCTransferRouter: request has been used before\\\"\\n        );\\n\\n        require(_txAndProof.locktime == bytes4(0), \\\"CCTransferRouter: lock time is non -zero\\\");\\n\\n        // Extracts information from the request\\n        _saveCCTransferRequest(_lockerLockingScript, _txAndProof.vout, txId);\\n\\n        // Checks if tx has been confirmed on source chain\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _txAndProof.blockNumber,\\n                _txAndProof.intermediateNodes,\\n                _txAndProof.index\\n            ),\\n            \\\"CCTransferRouter: transaction has not been finalized yet\\\"\\n        );\\n\\n        // Normal cc transfer request\\n        (uint receivedAmount, uint _protocolFee, uint _networkFee, uint _thirdPartyFee, uint _lockerFee) = _sendTeleBTC(\\n            _lockerLockingScript, \\n            txId\\n        );\\n        \\n        emit NewWrap(\\n            txId,\\n            _lockerLockingScript,\\n            ILockersManager(lockers).getLockerTargetAddress(_lockerLockingScript),\\n            ccTransferRequests[txId].recipientAddress,\\n            _msgSender(),\\n            [ccTransferRequests[txId].inputAmount, receivedAmount],\\n            [_networkFee, _lockerFee, _protocolFee, _thirdPartyFee],\\n            thirdParty[txId],\\n            chainId\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                             Sends minted teleBTC to the user\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _txId                        The transaction ID of the request\\n    /// @return _remainedAmount             Amount of teleBTC that user receives after reducing fees\\n    function _sendTeleBTC(bytes memory _lockerLockingScript, bytes32 _txId) private returns (\\n        uint _remainedAmount,\\n        uint _protocolFee, \\n        uint _networkFee,\\n        uint _thirdPartyFee,\\n        uint _lockerFee\\n    ) {\\n        // Gets remained amount after reducing fees\\n        (_remainedAmount, _protocolFee, _networkFee, _thirdPartyFee, _lockerFee) = _mintAndReduceFees(_lockerLockingScript, _txId);\\n\\n        // Transfers rest of tokens to recipient\\n        ITeleBTC(teleBTC).transfer(\\n            ccTransferRequests[_txId].recipientAddress,\\n            _remainedAmount\\n        );\\n    }\\n\\n    /// @notice                             Parses and saves the request\\n    /// @dev                                Checks that user has sent BTC to a valid locker\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _vout                        The outputs of the tx\\n    /// @param _txId                        The txID of the request\\n    function _saveCCTransferRequest(\\n        bytes memory _lockerLockingScript,\\n        bytes memory _vout,\\n        bytes32 _txId\\n    ) private {\\n\\n        /*  \\n            transfer requests structure:\\n            1) chainId, 2 byte: max 65535 chains\\n            2) appId, 1 byte: max 256 apps\\n            3) recipientAddress, 20 byte: EVM account\\n            4) networkFee, 3 byte\\n            5) SPEED, 1 byte: {0,1}\\n            6) thirdParty, 1 byte: max 256 third parties, default is 0 for no third party\\n            \\n            TOTAL = 28 BYTE\\n        */\\n\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCTransferRouter: no locker with the given locking script exists\\\"\\n        );\\n\\n        // Extracts value and opreturn data from request\\n        ccTransferRequest memory request; // Defines it to save gas\\n        bytes memory arbitraryData;\\n        \\n        (request.inputAmount, arbitraryData) = BitcoinHelper.parseValueAndDataHavingLockingScriptSmallPayload(\\n            _vout, \\n            _lockerLockingScript\\n        );\\n\\n        require(arbitraryData.length == 28, \\\"CCTransferRouter: invalid len\\\");\\n\\n        // Checks that input amount is not zero\\n        require(request.inputAmount > 0, \\\"CCTransferRouter: input amount is zero\\\");\\n\\n        // Checks chain id and app id\\n        require(RequestParser.parseChainId(arbitraryData) == chainId, \\\"CCTransferRouter: chain id is not correct\\\");\\n        require(RequestParser.parseAppId(arbitraryData) == appId, \\\"CCTransferRouter: app id is not correct\\\");\\n\\n        // Calculates fee\\n        uint networkFee = RequestParser.parseNetworkFee(arbitraryData);\\n        \\n        require(networkFee <= request.inputAmount, \\\"CCTransferRouter: wrong fee\\\");\\n        request.fee = networkFee;\\n\\n        // Parses recipient address and request speed\\n        request.recipientAddress = RequestParser.parseRecipientAddress(arbitraryData);\\n        request.speed = RequestParser.parseSpeed(arbitraryData);\\n        require(request.speed == 0, \\\"CCTransferRouter: speed is out of range\\\");\\n\\n        thirdParty[_txId] = RequestParser.parseThirdPartyId(arbitraryData);\\n\\n        // Marks the request as used\\n        request.isUsed = true;\\n\\n        // Saves the request data\\n        ccTransferRequests[_txId] = request;\\n    }\\n\\n    /// @notice                             Checks if tx has been finalized on source chain\\n    /// @dev                                Pays relay fee using included ETH in the transaction\\n    /// @param _txId                        The request tx\\n    /// @param _blockNumber                 The block number of the tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @return                             True if the tx is finalized on the source chain\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Calculates fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0); // Index 0 is for finalized blocks\\n        require(msg.value >= feeAmount, \\\"CCTransferRouter: paid fee is not sufficient\\\");\\n\\n        // Calls relay contract (transfers all msg.value to it)\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n        \\n        // Sends extra ETH back to _msgSender()\\n        Address.sendValue(payable(_msgSender()), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                       Mints teleBTC by calling lockers contract\\n    /// @param _lockerLockingScript   Locker's locking script\\n    /// @param _txId                  The transaction ID of the request\\n    /// @return _remainedAmount       Amount of teleBTC that user receives after reducing all fees (protocol, locker, teleporter)\\n    function _mintAndReduceFees(\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount, uint _protocolFee, uint _networkFee, uint _thirdPartyFee, uint _lockerFee) {\\n\\n        // Mints teleBTC for cc transfer router\\n        // Lockers contract gets locker's fee\\n        uint mintedAmount = ILockersManager(lockers).mint(\\n            _lockerLockingScript,\\n            address(this),\\n            ccTransferRequests[_txId].inputAmount\\n        );\\n\\n        // Calculates fees\\n        _protocolFee = ccTransferRequests[_txId].inputAmount*protocolPercentageFee/MAX_PROTOCOL_FEE;\\n        _networkFee = ccTransferRequests[_txId].fee;\\n        _thirdPartyFee = ccTransferRequests[_txId].inputAmount*thirdPartyFee[thirdParty[_txId]]/MAX_PROTOCOL_FEE;\\n        _lockerFee = ccTransferRequests[_txId].inputAmount - mintedAmount;\\n        \\n        // Pays Teleporter fee\\n        if (_networkFee > 0) {\\n            ITeleBTC(teleBTC).transfer(_msgSender(), _networkFee);\\n        }\\n\\n        // Pays protocol fee\\n        if (_protocolFee > 0) {\\n            ITeleBTC(teleBTC).transfer(treasury, _protocolFee);\\n        }\\n\\n        // Pays third party fee\\n        if (_thirdPartyFee > 0) {\\n            ITeleBTC(teleBTC).transfer(thirdPartyAddress[thirdParty[_txId]], _thirdPartyFee);\\n        }\\n\\n\\n        _remainedAmount = mintedAmount - _protocolFee - _networkFee - _thirdPartyFee;\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x3b329231003e341f6e4e49732e3e7db0468fa236906e20b85165f03d5409a226\",\"license\":\"MIT\"},\"contracts/routers/CcTransferRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/ICcTransferRouter.sol\\\";\\n\\nabstract contract CcTransferRouterStorage is ICcTransferRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override appId;\\n    uint public override protocolPercentageFee; // A number between 0 to 10000\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override instantRouter;\\n    address public override treasury;\\n    mapping(bytes32 => ccTransferRequest) public ccTransferRequests; // TxId to ccTransferRequest structure\\n\\n}\",\"keccak256\":\"0xbbe496331761a10b2a982d5561abb8411ada04aaa8c18bd892e8cc12501a6b83\",\"license\":\"MIT\"},\"contracts/routers/CcTransferRouterStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/ICcTransferRouter.sol\\\";\\n\\nabstract contract CcTransferRouterStorageV2 {\\n\\n    // third party\\n    mapping(uint => uint) public thirdPartyFee;\\n    mapping(uint => address) public thirdPartyAddress;\\n\\n    mapping(bytes32 => uint) public thirdParty;\\n}\",\"keccak256\":\"0x772ad6794cd75cfbc9eb180f257cb53dd2297fb33f484fe7c9ba5e8965c49fcb\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICcTransferRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface ICcTransferRouter {\\n\\n\\t// Structures\\n\\n\\t/// @notice                    Structure for recording cross-chain transfer requests\\n\\t/// @param inputAmount         Amount of locked BTC on source chain\\n\\t/// @param recipientAddress    Address of transfer recipient\\n\\t/// @param fee                 Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n\\t/// @param speed               Speed of the request (normal or instant)\\n\\t/// @param isUsed              Whether the tx is used or not\\n\\tstruct ccTransferRequest {\\n\\t\\tuint inputAmount;\\n\\t\\taddress recipientAddress;\\n\\t\\tuint fee;\\n\\t\\tuint256 speed;\\n\\t\\tbool isUsed;\\n\\t}\\n\\n\\t/// @notice Structure for passing tx and its inclusion proof\\n    /// @param version of the transaction containing the user request\\n    /// @param vin Inputs of the transaction containing the user request\\n    /// @param vout Outputs of the transaction containing the user request\\n    /// @param locktime of the transaction containing the user request\\n    /// @param blockNumber Height of the block containing the user request\\n    /// @param intermediateNodes Merkle inclusion proof for transaction containing the user request\\n    /// @param index of transaction containing the user request in the block\\n    struct TxAndProof {\\n        bytes4 version;\\n        bytes vin;\\n        bytes vout;\\n        bytes4 locktime;\\n        uint256 blockNumber;\\n        bytes intermediateNodes;\\n        uint index;\\n    }\\n\\n\\t// Events\\n\\n\\t/// @notice                    \\tEmits when a cc transfer request gets done\\n\\t/// @param bitcoinTxId                \\tThe transaction ID of request on Bitcoin \\n\\t/// @param lockerLockingScript  Locking script of the locker on bitcoin network\\n\\t/// @param lockerTargetAddress  Address of the locker on EVM based target chain\\n\\t/// @param user                \\tAddress of teleBTC recipient\\n\\t/// @param teleporter          \\tAddress of teleporter who submitted the request\\n\\t/// @param amounts             \\t[inputAmount, teleBTCAmount]\\n\\t/// @param fees                \\t[network fee, locker fee, protocol fee, third party fee]\\n\\t/// @param thirdPartyId        \\tId of third party\\n\\t/// @param destinationChainId  \\tId of the destination chain\\n\\tevent NewWrap(\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tbytes indexed lockerLockingScript,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed user,\\n\\t\\taddress teleporter,\\n\\t\\tuint[2] amounts,\\n\\t\\tuint[4] fees,\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint destinationChainId\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to relay address\\n    event NewRelay (\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n    /// @notice                     Emits when changes made to InstantRouter address\\n    event NewInstantRouter (\\n        address oldInstantRouter, \\n        address newInstantRouter\\n    );\\n\\n    /// @notice                     Emits when changes made to Lockers address\\n    event NewLockers (\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n    /// @notice                     Emits when changes made to TeleBTC address\\n    event NewTeleBTC (\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n    /// @notice                     Emits when changes made to protocol percentage fee\\n    event NewProtocolPercentageFee (\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice                     Emits when changes made to Treasury address\\n    event NewTreasury (\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice                     Emits when changes made to third party address\\n\\tevent NewThirdPartyAddress(\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress oldThirdPartyAddress, \\n\\t\\taddress newThirdPartyAddress\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to third party fee\\n\\tevent NewThirdPartyFee(\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint oldThirdPartyFee, \\n\\t\\tuint newThirdPartyFee\\n\\t);\\n\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction isRequestUsed(bytes32 _txId) external view returns (bool);\\n\\t\\n\\tfunction startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\t\\n\\tfunction chainId() external view returns (uint);\\n\\n\\tfunction appId() external view returns (uint);\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external;\\n\\n\\tfunction setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n\\tfunction wrap(\\n\\t\\tTxAndProof memory _txAndProof,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external payable returns (bool);\\n}\",\"keccak256\":\"0x543804fb7b44df48328e5ffec25d56d2289721d1989a45a3dd562db230cd0f73\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613fb0806100206000396000f3fe60806040526004361061014b5760003560e01c80631812adb6146101575780631876dec4146101805780631e7107c7146101b85780633a5d4213146101da57806359fd0b0c146101fa57806361d027b31461022757806370872aa514610247578063715018a61461025d578063765f0233146102725780637ed55748146102fb5780637f0f18171461031b57806380afdea81461033b57806380bc472614610351578063870ba6cf146103815780638d3d78cd146103a15780638d5fc1d4146103c15780638da5cb5b146103e15780638f9eb78b146103f65780639a8a059214610416578063a9b682711461042c578063b14d353214610462578063b59589d114610482578063b866d6ea146104a2578063c805f68b146104b5578063e35a0a88146104d5578063e9770e93146104f5578063f0f4426014610522578063f2fde38b1461054257600080fd5b3661015257005b600080fd5b34801561016357600080fd5b5061016d60035481565b6040519081526020015b60405180910390f35b34801561018c57600080fd5b506005546101a0906001600160a01b031681565b6040516001600160a01b039091168152602001610177565b3480156101c457600080fd5b506101d86101d33660046138b1565b610562565b005b3480156101e657600080fd5b506101d86101f5366004613a40565b610576565b34801561020657600080fd5b5061016d6102153660046138b1565b60a16020526000908152604090205481565b34801561023357600080fd5b506008546101a0906001600160a01b031681565b34801561025357600080fd5b5061016d60005481565b34801561026957600080fd5b506101d86106dc565b34801561027e57600080fd5b506102c961028d3660046138b1565b6009602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff1685565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a001610177565b34801561030757600080fd5b506101d86103163660046138b1565b6106e6565b34801561032757600080fd5b506101d8610336366004613859565b6106f7565b34801561034757600080fd5b5061016d60025481565b34801561035d57600080fd5b5061037161036c3660046138b1565b610734565b6040519015158152602001610177565b34801561038d57600080fd5b506101d861039c366004613859565b61075d565b3480156103ad57600080fd5b506006546101a0906001600160a01b031681565b3480156103cd57600080fd5b506101d86103dc3660046139f0565b610796565b3480156103ed57600080fd5b506101a06107a8565b34801561040257600080fd5b506101d8610411366004613a1f565b6107b7565b34801561042257600080fd5b5061016d60015481565b34801561043857600080fd5b506101a06104473660046138b1565b60a2602052600090815260409020546001600160a01b031681565b34801561046e57600080fd5b506101d861047d366004613859565b6107c9565b34801561048e57600080fd5b506004546101a0906001600160a01b031681565b6103716104b03660046138e1565b610802565b3480156104c157600080fd5b506101d86104d0366004613859565b610c65565b3480156104e157600080fd5b506007546101a0906001600160a01b031681565b34801561050157600080fd5b5061016d6105103660046138b1565b60a36020526000908152604090205481565b34801561052e57600080fd5b506101d861053d366004613859565b610c9e565b34801561054e57600080fd5b506101d861055d366004613859565b610cd7565b61056a610d4d565b61057381610dac565b50565b600a54610100900460ff16158080156105965750600a54600160ff909116105b806105b05750303b1580156105b05750600a5460ff166001145b6106185760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600a805460ff19166001179055801561063b57600a805461ff0019166101001790555b610643610e14565b61064b610e43565b6001879055600286905561065e89610dac565b61066788610e72565b61067085610f1c565b61067984610fae565b61068283611040565b61068b826110d2565b80156106d157600a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6106e4610d4d565b565b6106ee610d4d565b61057381610e72565b806001600160a01b03811661071f5760405163d92e233d60e01b815260040160405180910390fd5b610727610d4d565b61073082611040565b5050565b60008181526009602052604081206004015460ff16610754576000610757565b60015b92915050565b806001600160a01b0381166107855760405163d92e233d60e01b815260040160405180910390fd5b61078d610d4d565b61073082611164565b61079e610d4d565b61073082826111f6565b603d546001600160a01b031690565b6107bf610d4d565b6107308282611292565b806001600160a01b0381166107f15760405163d92e233d60e01b815260040160405180910390fd5b6107f9610d4d565b61073082610fae565b600061080c6112f3565b6007546001600160a01b0316336001600160a01b03161461086f5760405162461bcd60e51b815260206004820181905260248201527f43435472616e73666572526f757465723a20696e76616c69642073656e646572604482015260640161060f565b600054846080015110156108d15760405162461bcd60e51b8152602060048201526024808201527f43435472616e73666572526f757465723a207265717565737420697320746f6f604482015263081bdb1960e21b606482015260840161060f565b60006108ef856000015186602001518760400151886060015161134d565b60008181526009602052604090206004015490915060ff161561096b5760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a20726571756573742068617320626560448201526d656e2075736564206265666f726560901b606482015260840161060f565b60608501516001600160e01b031916156109d85760405162461bcd60e51b815260206004820152602860248201527f43435472616e73666572526f757465723a206c6f636b2074696d65206973206e6044820152676f6e202d7a65726f60c01b606482015260840161060f565b610a1c84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506040870151836114b5565b610a348186608001518760a001518860c0015161190d565b610aa15760405162461bcd60e51b815260206004820152603860248201527f43435472616e73666572526f757465723a207472616e73616374696f6e2068616044820152771cc81b9bdd081899595b88199a5b985b1a5e9959081e595d60421b606482015260840161060f565b6000806000806000610aea89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611a8b915050565b60008b81526009602052604090819020600101549051959a50939850919650945092506001600160a01b031690610b24908b908b90613b43565b60405180910390207fdebe45dc811f213ee5572218ab9c9e7d78fac393b0ca5c50ea9edbe5c8bcb61788600560009054906101000a90046001600160a01b03166001600160a01b031663c4d10b6a8e8e6040518363ffffffff1660e01b8152600401610b91929190613c8e565b60206040518083038186803b158015610ba957600080fd5b505afa158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be19190613875565b60408051808201825260008d8152600960209081528382205483528083018e905283516080810185528c81528082018b90528085018e9052606081018c90528f835260a390915290839020546001549351610c429695943394939291613bd1565b60405180910390a360019650505050505050610c5e6001606f55565b9392505050565b806001600160a01b038116610c8d5760405163d92e233d60e01b815260040160405180910390fd5b610c95610d4d565b61073082610f1c565b806001600160a01b038116610cc65760405163d92e233d60e01b815260040160405180910390fd5b610cce610d4d565b610730826110d2565b610cdf610d4d565b6001600160a01b038116610d445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b61057381611b54565b33610d566107a8565b6001600160a01b0316146106e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060f565b6000548111610e0f5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a206c6f77207374617274696e67426c60448201526837b1b5a73ab6b132b960b91b606482015260840161060f565b600055565b600a54610100900460ff16610e3b5760405162461bcd60e51b815260040161060f90613cfe565b6106e4611ba6565b600a54610100900460ff16610e6a5760405162461bcd60e51b815260040161060f90613cfe565b6106e4611bd6565b806127101015610edb5760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a2070726f746f636f6c20666565206960448201526d73206f7574206f662072616e676560901b606482015260840161060f565b60035460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600355565b806001600160a01b038116610f445760405163d92e233d60e01b815260040160405180910390fd5b6004546040517f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f491610f83916001600160a01b03909116908590613b9e565b60405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116610fd65760405163d92e233d60e01b815260040160405180910390fd5b6005546040517ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c391611015916001600160a01b03909116908590613b9e565b60405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166110685760405163d92e233d60e01b815260040160405180910390fd5b6006546040517f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096916110a7916001600160a01b03909116908590613b9e565b60405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166110fa5760405163d92e233d60e01b815260040160405180910390fd5b6008546040517f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591611139916001600160a01b03909116908590613b9e565b60405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b03811661118c5760405163d92e233d60e01b815260040160405180910390fd5b6007546040517f12ad124e13af4c31364ad22aa74320e167b37f005dafb75d71a210c49da3629e916111cb916001600160a01b03909116908590613b9e565b60405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260a26020526040908190205490517f1e73962bcff5b98a9ac70c9b0f71fbb31dc0f5a09348c6d3ceab164169a9e7299161125c9185916001600160a01b03169085909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a1600091825260a2602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b600082815260a16020908152604091829020548251858152918201529081018290527f188adabf806a6b6d814acc1dbd9f09e5a251c8c065d6285749a5824e4579b6459060600160405180910390a1600091825260a1602052604090912055565b6002606f5414156113465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060f565b6002606f55565b60008061136461135f825b8790611bfd565b611c21565b905061137562ffffff198216611d77565b156113bf5760405162461bcd60e51b815260206004820152601a602482015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b604482015260640161060f565b60006002878787876040516020016113da9493929190613af0565b60408051601f19818403018152908290526113f491613b53565b602060405180830381855afa158015611411573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061143491906138c9565b9050600060028260405160200161144d91815260200190565b60408051601f198184030181529082905261146791613b53565b602060405180830381855afa158015611484573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114a791906138c9565b93505050505b949350505050565b60055460405163aff2faa360e01b81526001600160a01b039091169063aff2faa3906114e5908690600401613cbd565b60206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115359190613891565b6115a9576040805162461bcd60e51b81526020600482015260248101919091527f43435472616e73666572526f757465723a206e6f206c6f636b6572207769746860448201527f2074686520676976656e206c6f636b696e672073637269707420657869737473606482015260840161060f565b6115e66040518060a001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581525090565b60606115f28486611d83565b6001600160401b0390911683528051909150601c146116535760405162461bcd60e51b815260206004820152601d60248201527f43435472616e73666572526f757465723a20696e76616c6964206c656e000000604482015260640161060f565b81516116b05760405162461bcd60e51b815260206004820152602660248201527f43435472616e73666572526f757465723a20696e70757420616d6f756e74206960448201526573207a65726f60d01b606482015260840161060f565b6001546116bc82611efe565b61ffff161461171f5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a20636861696e206964206973206e6f6044820152681d0818dbdc9c9958dd60ba1b606482015260840161060f565b60025461172b82611f19565b60ff161461178b5760405162461bcd60e51b815260206004820152602760248201527f43435472616e73666572526f757465723a20617070206964206973206e6f742060448201526618dbdc9c9958dd60ca1b606482015260840161060f565b600061179682611f33565b62ffffff16905082600001518111156117ef5760405162461bcd60e51b815260206004820152601b60248201527a43435472616e73666572526f757465723a2077726f6e672066656560281b604482015260640161060f565b604083018190526117ff82611f4e565b6001600160a01b0316602084015261181682611f69565b60ff16606084018190521561187d5760405162461bcd60e51b815260206004820152602760248201527f43435472616e73666572526f757465723a207370656564206973206f7574206f604482015266662072616e676560c81b606482015260840161060f565b61188682611f78565b600085815260a36020908152604080832060ff949094169093556001608087018181529783526009825291839020865181559086015191810180546001600160a01b0319166001600160a01b03909316929092179091559084015160028201556060909301516003840155505090516004909101805460ff19169115159190911790555050565b6004805460405163d0a8973960e01b81529182018590526000602483018190529182916001600160a01b03169063d0a897399060440160206040518083038186803b15801561195b57600080fd5b505afa15801561196f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199391906138c9565b9050803410156119fa5760405162461bcd60e51b815260206004820152602c60248201527f43435472616e73666572526f757465723a207061696420666565206973206e6f60448201526b1d081cdd59999a58da595b9d60a21b606482015260840161060f565b600454604051600091611a57916001600160a01b0390911690611a27908a908a908a908a90602401613c5e565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b17905284611f87565b9050611a6c33611a678434613e63565b611fad565b80806020019051810190611a809190613891565b979650505050505050565b6000806000806000611a9d87876120c8565b60065460008c8152600960205260409081902060010154905163a9059cbb60e01b8152969b5094995092975090955093506001600160a01b039081169263a9059cbb92611af09216908990600401613bb8565b602060405180830381600087803b158015611b0a57600080fd5b505af1158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190613891565b509295509295909350565b6001606f55565b603d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a54610100900460ff16611bcd5760405162461bcd60e51b815260040161060f90613cfe565b6106e433611b54565b600a54610100900460ff16611b4d5760405162461bcd60e51b815260040161060f90613cfe565b815160009060208401611c1864ffffffffff851682846123f4565b95945050505050565b60008181611c37815b62ffffff19841690612438565b50611c4762ffffff198516612512565b6001600160601b0316611c6357611c5c612521565b9250611d70565b6000611c70856000612529565b90506000611c8362ffffff198716612512565b6001600160601b031690506001600160401b038216611cad57611ca4612521565b94505050611d70565b6000611cb883612672565b60ff16905060005b836001600160401b0316811015611d3657828210611ceb57611ce0612521565b965050505050611d70565b6000611d0b611cfa8486613e63565b60055b62ffffff198c1691906126d0565b9050611d16816126fa565b611d209084613d71565b9250508080611d2e90613ef5565b915050611cc0565b50818114611d5057611d46612521565b9550505050611d70565b611d6a60065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff199081161490565b6000606081611d99611d9482611358565b61274e565b9050611daa62ffffff198216611d77565b15611df55760405162461bcd60e51b815260206004820152601b60248201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b604482015260640161060f565b6000806000806000611e08866000612529565b6001600160401b0316905060005b81811015611ef057611e28878261284f565b9550611e3386612974565b9450611e3e866129c8565b9350611e4984612a12565b925062ffffff198084161415611ecc5789604051602001611e6a9190613b53565b60405160208183030381529060405280519060200120611e8f8662ffffff1916612b34565b604051602001611e9f9190613b53565b604051602081830303815290604052805190602001201415611ec757611ec486612b7a565b98505b611ede565b611edb62ffffff198416612b34565b97505b80611ee881613ef5565b915050611e16565b505050505050509250929050565b600080611f0e8360006001612b9f565b600201519392505050565b600080611f2883600280612b9f565b600101519392505050565b600080611f438360176019612b9f565b600301519392505050565b600080611f5e8360036016612b9f565b601401519392505050565b600080611f2883601a80612b9f565b600080611f2883601b80612b9f565b60606114ad848484604051806060016040528060298152602001613f5260299139612c24565b80471015611ffd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161060f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b50509050806120c35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606482015260840161060f565b505050565b6005546000828152600960205260408082205490516307f3f86760e21b81529192839283928392839283926001600160a01b0390921691631fcfe19c91612116918c91309190600401613cd0565b602060405180830381600087803b15801561213057600080fd5b505af1158015612144573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216891906138c9565b6003546000898152600960205260409020549192506127109161218b9190613e1b565b6121959190613dfb565b6000888152600960208181526040808420600281015460a3845282862054865260a1845291852054948d90529290915290549297509550612710916121da9190613e1b565b6121e49190613dfb565b600088815260096020526040902054909350612201908290613e63565b9150831561228d576006546001600160a01b031663a9059cbb33866040518363ffffffff1660e01b8152600401612239929190613bb8565b602060405180830381600087803b15801561225357600080fd5b505af1158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190613891565b505b841561231d5760065460085460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926122c9929116908990600401613bb8565b602060405180830381600087803b1580156122e357600080fd5b505af11580156122f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231b9190613891565b505b82156123c757600654600088815260a36020908152604080832054835260a29091529081902054905163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612373929116908790600401613bb8565b602060405180830381600087803b15801561238d57600080fd5b505af11580156123a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c59190613891565b505b82846123d38784613e63565b6123dd9190613e63565b6123e79190613e63565b9550509295509295909350565b6000806124018385613d71565b9050604051811115612411575060005b806124235762ffffff19915050610c5e565b5050606092831b9190911790911b1760181b90565b60006124448383612d41565b61250b5760006124636124578560d81c90565b64ffffffffff16612d64565b91505060006124788464ffffffffff16612d64565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b815260040161060f9190613cbd565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b60008061253e62ffffff198516846001612e10565b905060fc81116125595761255181612e40565b915050610757565b8060fd14156125bf57612587612582612573856001613d71565b62ffffff198716906002612eac565b612e40565b915061259282612672565b60ff166003146125ba576125b86125b362ffffff1986168560036000612fef565b613055565b505b61266b565b8060fe1415612614576125e86125826125d9856001613d71565b62ffffff198716906004612eac565b91506125f382612672565b60ff166005146125ba576125b86125b362ffffff1986168560056000612fef565b8060ff141561266b5761263d61258261262e856001613d71565b62ffffff198716906008612eac565b915061264882612672565b60ff1660091461266b576126696125b362ffffff1986168560096000612fef565b505b5092915050565b600060fc826001600160401b03161161268d57506001919050565b61ffff826001600160401b0316116126a757506003919050565b63ffffffff826001600160401b0316116126c357506005919050565b506009919050565b919050565b60006114ad84846126e087612512565b6001600160601b03166126f39190613e63565b8585612fef565b600081600561270881611c2a565b506000612716856024612529565b9050806001600160401b031661272b82612672565b60ff166127389190613d71565b612743906024613d71565b611c18906004613d71565b6000818161275b81611c2a565b5061276b62ffffff198516612512565b6001600160601b031661278057611c5c612521565b600061278d856000612529565b905060006127a062ffffff198716612512565b6001600160601b031690506001600160401b0382166127c157611ca4612521565b60006127cc83612672565b60ff16905060005b836001600160401b0316811015612835578282106127f457611ce0612521565b600061280a6128038486613e63565b600e611cfd565b9050612815816130dd565b61281f9084613d71565b925050808061282d90613ef5565b9150506127d4565b5081811461284557611d46612521565b611d6a600f611d56565b600082600f61285d81611c2a565b50600061286b866000612529565b6001600160401b03169050600061288762ffffff198816612512565b6001600160601b031690508186106128d55760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b604482015260640161060f565b60006128e083612672565b60ff1690506000805b888110156129365761290d6128fe8486613e63565b62ffffff198c1690600e6126d0565b9150612918826130dd565b6129229084613d71565b925061292f600182613d71565b90506128e9565b506129446128038385613e63565b90506000612951826130dd565b905061296662ffffff198b168483600d612fef565b9a9950505050505050505050565b600081600d61298281611c2a565b506000612990856008612529565b9050611c1861299e82612672565b6129a9906008613db4565b60ff166001600160401b03831660075b62ffffff198916929190612fef565b600081600d6129d681611c2a565b5060006129e4856008612529565b9050611c186008826129f584612672565b60ff16612a029190613d89565b6001600160401b031660076129b9565b6000816007612a2081611c2a565b506000612a2e856000612529565b90506000612a4861258262ffffff19881660026001612e10565b9050612a5c62ffffff198716600180612e10565b606a141580612a905750612a71600283613e7a565b6001600160401b0316612a8d62ffffff19881660026001612e10565b14155b15612a9d57611ca4612521565b604d826001600160401b031611158015612ac157506004826001600160401b031610155b612b0d5760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e48656c7065723a20696e76616c6964206f7072657475726e00604482015260640161060f565b612b2a62ffffff19871660036001600160401b038416600c612fef565b9695505050505050565b6060600080612b4284612512565b60405193508392506001600160601b03169050612b6984612b64846020613d71565b613126565b508181016020016040529052919050565b600081600d612b8881611c2a565b506114ad61258262ffffff19861660006008612eac565b60606000835b612bb0846001613d71565b811015612c1b57858181518110612bd757634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b91508282604051602001612bf7929190613b6f565b60405160208183030381529060405292508080612c1390613ef5565b915050612ba5565b50509392505050565b606082471015612c855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060f565b843b612cd35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b03168587604051612cef9190613b53565b60006040518083038185875af1925050503d8060008114612d2c576040519150601f19603f3d011682016040523d82523d6000602084013e612d31565b606091505b5091509150611a80828286613269565b60008164ffffffffff16612d558460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115612dc2576000612d83826008613e3a565b60ff1685901c9050612d94816132a2565b61ffff16841793508160ff16601014612daf57601084901b93505b50612dbb600182613ea2565b9050612d6a565b50600f5b60ff8160ff161015612e0a5760ff600882021684901c612de5816132a2565b61ffff16831792508160ff16600014612e0057601083901b92505b5060001901612dc6565b50915091565b6000612e1d826020613ea2565b612e28906008613e3a565b60ff16612e368585856132d4565b901c949350505050565b60006001600160401b03821115612ea85760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161060f565b5090565b60006114ad612ebc8585856132d4565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff161790506040816001600160401b03600160801b03600160c01b0316901b604082901c6001600160401b03600160801b03600160c01b0316179050608081901b608082901c179050919050565b600080612ffb86613402565b6001600160601b0316905061300f86613411565b8461301a8784613d71565b6130249190613d71565b11156130375762ffffff199150506114ad565b6130418582613d71565b9050612b2a8364ffffffffff1682866123f4565b6060600061309361308e8261308061307262ffffff198816612512565b6001600160601b031661343e565b62ffffff1987169190612e10565b612d64565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d016124e0565b600081600e6130eb81611c2a565b5060006130f9856008612529565b9050806001600160401b031661310e82612672565b60ff1661311b9190613d71565b611c18906008613d71565b60006131318361349f565b61318e5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b606482015260840161060f565b613197836134b1565b6131f75760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b606482015260840161060f565b600061320284612512565b6001600160601b03169050600061321885613402565b6001600160601b0316905060006040519050848111156132385760206060fd5b8285848460045afa50612b2a61324e8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60608315613278575081610c5e565b8251156132885782518084602001fd5b8160405162461bcd60e51b815260040161060f9190613cbd565b60006132b460048360ff16901c6134ef565b60ff1661ffff919091161760081b6132cb826134ef565b60ff1617919050565b600060ff82166132e657506000610c5e565b6132ef84612512565b6001600160601b031661330560ff841685613d71565b11156133555761333c61331785613402565b6001600160601b031661332986612512565b6001600160601b0316858560ff1661364b565b60405162461bcd60e51b815260040161060f9190613cbd565b60208260ff1611156133cc5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b606482015260840161060f565b6008820260006133db86613402565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60781c6001600160601b031690565b600061341c82612512565b61342583613402565b61342f9190613dd9565b6001600160601b031692915050565b600060ff821115612ea85760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b606482015260840161060f565b60006134aa82611d77565b1592915050565b60006134bd8260d81c90565b64ffffffffff1664ffffffffff14156134d857506000919050565b60006134e383613411565b60405110199392505050565b600060f08083179060ff8216141561350a5750603092915050565b8060ff1660f1141561351f5750603192915050565b8060ff1660f214156135345750603292915050565b8060ff1660f314156135495750603392915050565b8060ff1660f4141561355e5750603492915050565b8060ff1660f514156135735750603592915050565b8060ff1660f614156135885750603692915050565b8060ff1660f7141561359d5750603792915050565b8060ff1660f814156135b25750603892915050565b8060ff1660f914156135c75750603992915050565b8060ff1660fa14156135dc5750606192915050565b8060ff1660fb14156135f15750606292915050565b8060ff1660fc14156136065750606392915050565b8060ff1660fd141561361b5750606492915050565b8060ff1660fe14156136305750606592915050565b8060ff1660ff14156136455750606692915050565b50919050565b6060600061365886612d64565b915050600061366686612d64565b915050600061367486612d64565b915050600061368286612d64565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b80356001600160e01b0319811681146126cb57600080fd5b60008083601f84011261379e578182fd5b5081356001600160401b038111156137b4578182fd5b6020830191508360208285010111156137cc57600080fd5b9250929050565b600082601f8301126137e3578081fd5b81356001600160401b03808211156137fd576137fd613f26565b604051601f8301601f19908116603f0116810190828211818310171561382557613825613f26565b8160405283815286602085880101111561383d578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561386a578081fd5b8135610c5e81613f3c565b600060208284031215613886578081fd5b8151610c5e81613f3c565b6000602082840312156138a2578081fd5b81518015158114610c5e578182fd5b6000602082840312156138c2578081fd5b5035919050565b6000602082840312156138da578081fd5b5051919050565b6000806000604084860312156138f5578182fd5b83356001600160401b038082111561390b578384fd5b9085019060e0828803121561391e578384fd5b613926613d49565b61392f83613775565b8152602083013582811115613942578586fd5b61394e898286016137d3565b602083015250604083013582811115613965578586fd5b613971898286016137d3565b60408301525061398360608401613775565b60608201526080830135608082015260a0830135828111156139a3578586fd5b6139af898286016137d3565b60a08301525060c083013560c08201528095505060208601359150808211156139d6578384fd5b506139e38682870161378d565b9497909650939450505050565b60008060408385031215613a02578182fd5b823591506020830135613a1481613f3c565b809150509250929050565b60008060408385031215613a31578182fd5b50508035926020909101359150565b600080600080600080600080610100898b031215613a5c578384fd5b883597506020890135965060408901359550606089013594506080890135613a8381613f3c565b935060a0890135613a9381613f3c565b925060c0890135613aa381613f3c565b915060e0890135613ab381613f3c565b809150509295985092959890939650565b60008151808452613adc816020860160208601613ec5565b601f01601f19169290920160200192915050565b600063ffffffff60e01b80871683528551613b12816004860160208a01613ec5565b855190840190613b29816004840160208a01613ec5565b919094169301600481019390935250506008019392505050565b8183823760009101908152919050565b60008251613b65818460208701613ec5565b9190910192915050565b60008351613b81818460208801613ec5565b6001600160f81b0319939093169190920190815260010192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b8781526001600160a01b038781166020808401919091529087166040830152610160820190606083018760005b6002811015613c1b57815183529183019190830190600101613bfe565b50505060a083018660005b6004811015613c4357815183529183019190830190600101613c26565b50505050610120820193909352610140015295945050505050565b848152836020820152608060408201526000613c7d6080830185613ac4565b905082606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000610c5e6020830184613ac4565b606081526000613ce36060830186613ac4565b6001600160a01b039490941660208301525060400152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60405160e081016001600160401b0381118282101715613d6b57613d6b613f26565b60405290565b60008219821115613d8457613d84613f10565b500190565b60006001600160401b03808316818516808303821115613dab57613dab613f10565b01949350505050565b600060ff821660ff84168060ff03821115613dd157613dd1613f10565b019392505050565b60006001600160601b03828116848216808303821115613dab57613dab613f10565b600082613e1657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613e3557613e35613f10565b500290565b600060ff821660ff84168160ff0481118215151615613e5b57613e5b613f10565b029392505050565b600082821015613e7557613e75613f10565b500390565b60006001600160401b0383811690831681811015613e9a57613e9a613f10565b039392505050565b600060ff821660ff841680821015613ebc57613ebc613f10565b90039392505050565b60005b83811015613ee0578181015183820152602001613ec8565b83811115613eef576000848401525b50505050565b6000600019821415613f0957613f09613f10565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461057357600080fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220dcb3578645ac19eb870b2478205b5225bd7c1d5b7a6f2d386a45c71bc9c71c2564736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80631812adb6146101575780631876dec4146101805780631e7107c7146101b85780633a5d4213146101da57806359fd0b0c146101fa57806361d027b31461022757806370872aa514610247578063715018a61461025d578063765f0233146102725780637ed55748146102fb5780637f0f18171461031b57806380afdea81461033b57806380bc472614610351578063870ba6cf146103815780638d3d78cd146103a15780638d5fc1d4146103c15780638da5cb5b146103e15780638f9eb78b146103f65780639a8a059214610416578063a9b682711461042c578063b14d353214610462578063b59589d114610482578063b866d6ea146104a2578063c805f68b146104b5578063e35a0a88146104d5578063e9770e93146104f5578063f0f4426014610522578063f2fde38b1461054257600080fd5b3661015257005b600080fd5b34801561016357600080fd5b5061016d60035481565b6040519081526020015b60405180910390f35b34801561018c57600080fd5b506005546101a0906001600160a01b031681565b6040516001600160a01b039091168152602001610177565b3480156101c457600080fd5b506101d86101d33660046138b1565b610562565b005b3480156101e657600080fd5b506101d86101f5366004613a40565b610576565b34801561020657600080fd5b5061016d6102153660046138b1565b60a16020526000908152604090205481565b34801561023357600080fd5b506008546101a0906001600160a01b031681565b34801561025357600080fd5b5061016d60005481565b34801561026957600080fd5b506101d86106dc565b34801561027e57600080fd5b506102c961028d3660046138b1565b6009602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff1685565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a001610177565b34801561030757600080fd5b506101d86103163660046138b1565b6106e6565b34801561032757600080fd5b506101d8610336366004613859565b6106f7565b34801561034757600080fd5b5061016d60025481565b34801561035d57600080fd5b5061037161036c3660046138b1565b610734565b6040519015158152602001610177565b34801561038d57600080fd5b506101d861039c366004613859565b61075d565b3480156103ad57600080fd5b506006546101a0906001600160a01b031681565b3480156103cd57600080fd5b506101d86103dc3660046139f0565b610796565b3480156103ed57600080fd5b506101a06107a8565b34801561040257600080fd5b506101d8610411366004613a1f565b6107b7565b34801561042257600080fd5b5061016d60015481565b34801561043857600080fd5b506101a06104473660046138b1565b60a2602052600090815260409020546001600160a01b031681565b34801561046e57600080fd5b506101d861047d366004613859565b6107c9565b34801561048e57600080fd5b506004546101a0906001600160a01b031681565b6103716104b03660046138e1565b610802565b3480156104c157600080fd5b506101d86104d0366004613859565b610c65565b3480156104e157600080fd5b506007546101a0906001600160a01b031681565b34801561050157600080fd5b5061016d6105103660046138b1565b60a36020526000908152604090205481565b34801561052e57600080fd5b506101d861053d366004613859565b610c9e565b34801561054e57600080fd5b506101d861055d366004613859565b610cd7565b61056a610d4d565b61057381610dac565b50565b600a54610100900460ff16158080156105965750600a54600160ff909116105b806105b05750303b1580156105b05750600a5460ff166001145b6106185760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600a805460ff19166001179055801561063b57600a805461ff0019166101001790555b610643610e14565b61064b610e43565b6001879055600286905561065e89610dac565b61066788610e72565b61067085610f1c565b61067984610fae565b61068283611040565b61068b826110d2565b80156106d157600a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6106e4610d4d565b565b6106ee610d4d565b61057381610e72565b806001600160a01b03811661071f5760405163d92e233d60e01b815260040160405180910390fd5b610727610d4d565b61073082611040565b5050565b60008181526009602052604081206004015460ff16610754576000610757565b60015b92915050565b806001600160a01b0381166107855760405163d92e233d60e01b815260040160405180910390fd5b61078d610d4d565b61073082611164565b61079e610d4d565b61073082826111f6565b603d546001600160a01b031690565b6107bf610d4d565b6107308282611292565b806001600160a01b0381166107f15760405163d92e233d60e01b815260040160405180910390fd5b6107f9610d4d565b61073082610fae565b600061080c6112f3565b6007546001600160a01b0316336001600160a01b03161461086f5760405162461bcd60e51b815260206004820181905260248201527f43435472616e73666572526f757465723a20696e76616c69642073656e646572604482015260640161060f565b600054846080015110156108d15760405162461bcd60e51b8152602060048201526024808201527f43435472616e73666572526f757465723a207265717565737420697320746f6f604482015263081bdb1960e21b606482015260840161060f565b60006108ef856000015186602001518760400151886060015161134d565b60008181526009602052604090206004015490915060ff161561096b5760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a20726571756573742068617320626560448201526d656e2075736564206265666f726560901b606482015260840161060f565b60608501516001600160e01b031916156109d85760405162461bcd60e51b815260206004820152602860248201527f43435472616e73666572526f757465723a206c6f636b2074696d65206973206e6044820152676f6e202d7a65726f60c01b606482015260840161060f565b610a1c84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506040870151836114b5565b610a348186608001518760a001518860c0015161190d565b610aa15760405162461bcd60e51b815260206004820152603860248201527f43435472616e73666572526f757465723a207472616e73616374696f6e2068616044820152771cc81b9bdd081899595b88199a5b985b1a5e9959081e595d60421b606482015260840161060f565b6000806000806000610aea89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611a8b915050565b60008b81526009602052604090819020600101549051959a50939850919650945092506001600160a01b031690610b24908b908b90613b43565b60405180910390207fdebe45dc811f213ee5572218ab9c9e7d78fac393b0ca5c50ea9edbe5c8bcb61788600560009054906101000a90046001600160a01b03166001600160a01b031663c4d10b6a8e8e6040518363ffffffff1660e01b8152600401610b91929190613c8e565b60206040518083038186803b158015610ba957600080fd5b505afa158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be19190613875565b60408051808201825260008d8152600960209081528382205483528083018e905283516080810185528c81528082018b90528085018e9052606081018c90528f835260a390915290839020546001549351610c429695943394939291613bd1565b60405180910390a360019650505050505050610c5e6001606f55565b9392505050565b806001600160a01b038116610c8d5760405163d92e233d60e01b815260040160405180910390fd5b610c95610d4d565b61073082610f1c565b806001600160a01b038116610cc65760405163d92e233d60e01b815260040160405180910390fd5b610cce610d4d565b610730826110d2565b610cdf610d4d565b6001600160a01b038116610d445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b61057381611b54565b33610d566107a8565b6001600160a01b0316146106e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060f565b6000548111610e0f5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a206c6f77207374617274696e67426c60448201526837b1b5a73ab6b132b960b91b606482015260840161060f565b600055565b600a54610100900460ff16610e3b5760405162461bcd60e51b815260040161060f90613cfe565b6106e4611ba6565b600a54610100900460ff16610e6a5760405162461bcd60e51b815260040161060f90613cfe565b6106e4611bd6565b806127101015610edb5760405162461bcd60e51b815260206004820152602e60248201527f43435472616e73666572526f757465723a2070726f746f636f6c20666565206960448201526d73206f7574206f662072616e676560901b606482015260840161060f565b60035460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600355565b806001600160a01b038116610f445760405163d92e233d60e01b815260040160405180910390fd5b6004546040517f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f491610f83916001600160a01b03909116908590613b9e565b60405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116610fd65760405163d92e233d60e01b815260040160405180910390fd5b6005546040517ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c391611015916001600160a01b03909116908590613b9e565b60405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166110685760405163d92e233d60e01b815260040160405180910390fd5b6006546040517f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096916110a7916001600160a01b03909116908590613b9e565b60405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166110fa5760405163d92e233d60e01b815260040160405180910390fd5b6008546040517f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591611139916001600160a01b03909116908590613b9e565b60405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b03811661118c5760405163d92e233d60e01b815260040160405180910390fd5b6007546040517f12ad124e13af4c31364ad22aa74320e167b37f005dafb75d71a210c49da3629e916111cb916001600160a01b03909116908590613b9e565b60405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260a26020526040908190205490517f1e73962bcff5b98a9ac70c9b0f71fbb31dc0f5a09348c6d3ceab164169a9e7299161125c9185916001600160a01b03169085909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a1600091825260a2602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b600082815260a16020908152604091829020548251858152918201529081018290527f188adabf806a6b6d814acc1dbd9f09e5a251c8c065d6285749a5824e4579b6459060600160405180910390a1600091825260a1602052604090912055565b6002606f5414156113465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060f565b6002606f55565b60008061136461135f825b8790611bfd565b611c21565b905061137562ffffff198216611d77565b156113bf5760405162461bcd60e51b815260206004820152601a602482015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b604482015260640161060f565b60006002878787876040516020016113da9493929190613af0565b60408051601f19818403018152908290526113f491613b53565b602060405180830381855afa158015611411573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061143491906138c9565b9050600060028260405160200161144d91815260200190565b60408051601f198184030181529082905261146791613b53565b602060405180830381855afa158015611484573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114a791906138c9565b93505050505b949350505050565b60055460405163aff2faa360e01b81526001600160a01b039091169063aff2faa3906114e5908690600401613cbd565b60206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115359190613891565b6115a9576040805162461bcd60e51b81526020600482015260248101919091527f43435472616e73666572526f757465723a206e6f206c6f636b6572207769746860448201527f2074686520676976656e206c6f636b696e672073637269707420657869737473606482015260840161060f565b6115e66040518060a001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581525090565b60606115f28486611d83565b6001600160401b0390911683528051909150601c146116535760405162461bcd60e51b815260206004820152601d60248201527f43435472616e73666572526f757465723a20696e76616c6964206c656e000000604482015260640161060f565b81516116b05760405162461bcd60e51b815260206004820152602660248201527f43435472616e73666572526f757465723a20696e70757420616d6f756e74206960448201526573207a65726f60d01b606482015260840161060f565b6001546116bc82611efe565b61ffff161461171f5760405162461bcd60e51b815260206004820152602960248201527f43435472616e73666572526f757465723a20636861696e206964206973206e6f6044820152681d0818dbdc9c9958dd60ba1b606482015260840161060f565b60025461172b82611f19565b60ff161461178b5760405162461bcd60e51b815260206004820152602760248201527f43435472616e73666572526f757465723a20617070206964206973206e6f742060448201526618dbdc9c9958dd60ca1b606482015260840161060f565b600061179682611f33565b62ffffff16905082600001518111156117ef5760405162461bcd60e51b815260206004820152601b60248201527a43435472616e73666572526f757465723a2077726f6e672066656560281b604482015260640161060f565b604083018190526117ff82611f4e565b6001600160a01b0316602084015261181682611f69565b60ff16606084018190521561187d5760405162461bcd60e51b815260206004820152602760248201527f43435472616e73666572526f757465723a207370656564206973206f7574206f604482015266662072616e676560c81b606482015260840161060f565b61188682611f78565b600085815260a36020908152604080832060ff949094169093556001608087018181529783526009825291839020865181559086015191810180546001600160a01b0319166001600160a01b03909316929092179091559084015160028201556060909301516003840155505090516004909101805460ff19169115159190911790555050565b6004805460405163d0a8973960e01b81529182018590526000602483018190529182916001600160a01b03169063d0a897399060440160206040518083038186803b15801561195b57600080fd5b505afa15801561196f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199391906138c9565b9050803410156119fa5760405162461bcd60e51b815260206004820152602c60248201527f43435472616e73666572526f757465723a207061696420666565206973206e6f60448201526b1d081cdd59999a58da595b9d60a21b606482015260840161060f565b600454604051600091611a57916001600160a01b0390911690611a27908a908a908a908a90602401613c5e565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b17905284611f87565b9050611a6c33611a678434613e63565b611fad565b80806020019051810190611a809190613891565b979650505050505050565b6000806000806000611a9d87876120c8565b60065460008c8152600960205260409081902060010154905163a9059cbb60e01b8152969b5094995092975090955093506001600160a01b039081169263a9059cbb92611af09216908990600401613bb8565b602060405180830381600087803b158015611b0a57600080fd5b505af1158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190613891565b509295509295909350565b6001606f55565b603d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a54610100900460ff16611bcd5760405162461bcd60e51b815260040161060f90613cfe565b6106e433611b54565b600a54610100900460ff16611b4d5760405162461bcd60e51b815260040161060f90613cfe565b815160009060208401611c1864ffffffffff851682846123f4565b95945050505050565b60008181611c37815b62ffffff19841690612438565b50611c4762ffffff198516612512565b6001600160601b0316611c6357611c5c612521565b9250611d70565b6000611c70856000612529565b90506000611c8362ffffff198716612512565b6001600160601b031690506001600160401b038216611cad57611ca4612521565b94505050611d70565b6000611cb883612672565b60ff16905060005b836001600160401b0316811015611d3657828210611ceb57611ce0612521565b965050505050611d70565b6000611d0b611cfa8486613e63565b60055b62ffffff198c1691906126d0565b9050611d16816126fa565b611d209084613d71565b9250508080611d2e90613ef5565b915050611cc0565b50818114611d5057611d46612521565b9550505050611d70565b611d6a60065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff199081161490565b6000606081611d99611d9482611358565b61274e565b9050611daa62ffffff198216611d77565b15611df55760405162461bcd60e51b815260206004820152601b60248201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b604482015260640161060f565b6000806000806000611e08866000612529565b6001600160401b0316905060005b81811015611ef057611e28878261284f565b9550611e3386612974565b9450611e3e866129c8565b9350611e4984612a12565b925062ffffff198084161415611ecc5789604051602001611e6a9190613b53565b60405160208183030381529060405280519060200120611e8f8662ffffff1916612b34565b604051602001611e9f9190613b53565b604051602081830303815290604052805190602001201415611ec757611ec486612b7a565b98505b611ede565b611edb62ffffff198416612b34565b97505b80611ee881613ef5565b915050611e16565b505050505050509250929050565b600080611f0e8360006001612b9f565b600201519392505050565b600080611f2883600280612b9f565b600101519392505050565b600080611f438360176019612b9f565b600301519392505050565b600080611f5e8360036016612b9f565b601401519392505050565b600080611f2883601a80612b9f565b600080611f2883601b80612b9f565b60606114ad848484604051806060016040528060298152602001613f5260299139612c24565b80471015611ffd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161060f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b50509050806120c35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606482015260840161060f565b505050565b6005546000828152600960205260408082205490516307f3f86760e21b81529192839283928392839283926001600160a01b0390921691631fcfe19c91612116918c91309190600401613cd0565b602060405180830381600087803b15801561213057600080fd5b505af1158015612144573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216891906138c9565b6003546000898152600960205260409020549192506127109161218b9190613e1b565b6121959190613dfb565b6000888152600960208181526040808420600281015460a3845282862054865260a1845291852054948d90529290915290549297509550612710916121da9190613e1b565b6121e49190613dfb565b600088815260096020526040902054909350612201908290613e63565b9150831561228d576006546001600160a01b031663a9059cbb33866040518363ffffffff1660e01b8152600401612239929190613bb8565b602060405180830381600087803b15801561225357600080fd5b505af1158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190613891565b505b841561231d5760065460085460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926122c9929116908990600401613bb8565b602060405180830381600087803b1580156122e357600080fd5b505af11580156122f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231b9190613891565b505b82156123c757600654600088815260a36020908152604080832054835260a29091529081902054905163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92612373929116908790600401613bb8565b602060405180830381600087803b15801561238d57600080fd5b505af11580156123a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c59190613891565b505b82846123d38784613e63565b6123dd9190613e63565b6123e79190613e63565b9550509295509295909350565b6000806124018385613d71565b9050604051811115612411575060005b806124235762ffffff19915050610c5e565b5050606092831b9190911790911b1760181b90565b60006124448383612d41565b61250b5760006124636124578560d81c90565b64ffffffffff16612d64565b91505060006124788464ffffffffff16612d64565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b815260040161060f9190613cbd565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b60008061253e62ffffff198516846001612e10565b905060fc81116125595761255181612e40565b915050610757565b8060fd14156125bf57612587612582612573856001613d71565b62ffffff198716906002612eac565b612e40565b915061259282612672565b60ff166003146125ba576125b86125b362ffffff1986168560036000612fef565b613055565b505b61266b565b8060fe1415612614576125e86125826125d9856001613d71565b62ffffff198716906004612eac565b91506125f382612672565b60ff166005146125ba576125b86125b362ffffff1986168560056000612fef565b8060ff141561266b5761263d61258261262e856001613d71565b62ffffff198716906008612eac565b915061264882612672565b60ff1660091461266b576126696125b362ffffff1986168560096000612fef565b505b5092915050565b600060fc826001600160401b03161161268d57506001919050565b61ffff826001600160401b0316116126a757506003919050565b63ffffffff826001600160401b0316116126c357506005919050565b506009919050565b919050565b60006114ad84846126e087612512565b6001600160601b03166126f39190613e63565b8585612fef565b600081600561270881611c2a565b506000612716856024612529565b9050806001600160401b031661272b82612672565b60ff166127389190613d71565b612743906024613d71565b611c18906004613d71565b6000818161275b81611c2a565b5061276b62ffffff198516612512565b6001600160601b031661278057611c5c612521565b600061278d856000612529565b905060006127a062ffffff198716612512565b6001600160601b031690506001600160401b0382166127c157611ca4612521565b60006127cc83612672565b60ff16905060005b836001600160401b0316811015612835578282106127f457611ce0612521565b600061280a6128038486613e63565b600e611cfd565b9050612815816130dd565b61281f9084613d71565b925050808061282d90613ef5565b9150506127d4565b5081811461284557611d46612521565b611d6a600f611d56565b600082600f61285d81611c2a565b50600061286b866000612529565b6001600160401b03169050600061288762ffffff198816612512565b6001600160601b031690508186106128d55760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b604482015260640161060f565b60006128e083612672565b60ff1690506000805b888110156129365761290d6128fe8486613e63565b62ffffff198c1690600e6126d0565b9150612918826130dd565b6129229084613d71565b925061292f600182613d71565b90506128e9565b506129446128038385613e63565b90506000612951826130dd565b905061296662ffffff198b168483600d612fef565b9a9950505050505050505050565b600081600d61298281611c2a565b506000612990856008612529565b9050611c1861299e82612672565b6129a9906008613db4565b60ff166001600160401b03831660075b62ffffff198916929190612fef565b600081600d6129d681611c2a565b5060006129e4856008612529565b9050611c186008826129f584612672565b60ff16612a029190613d89565b6001600160401b031660076129b9565b6000816007612a2081611c2a565b506000612a2e856000612529565b90506000612a4861258262ffffff19881660026001612e10565b9050612a5c62ffffff198716600180612e10565b606a141580612a905750612a71600283613e7a565b6001600160401b0316612a8d62ffffff19881660026001612e10565b14155b15612a9d57611ca4612521565b604d826001600160401b031611158015612ac157506004826001600160401b031610155b612b0d5760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e48656c7065723a20696e76616c6964206f7072657475726e00604482015260640161060f565b612b2a62ffffff19871660036001600160401b038416600c612fef565b9695505050505050565b6060600080612b4284612512565b60405193508392506001600160601b03169050612b6984612b64846020613d71565b613126565b508181016020016040529052919050565b600081600d612b8881611c2a565b506114ad61258262ffffff19861660006008612eac565b60606000835b612bb0846001613d71565b811015612c1b57858181518110612bd757634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b91508282604051602001612bf7929190613b6f565b60405160208183030381529060405292508080612c1390613ef5565b915050612ba5565b50509392505050565b606082471015612c855760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060f565b843b612cd35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b03168587604051612cef9190613b53565b60006040518083038185875af1925050503d8060008114612d2c576040519150601f19603f3d011682016040523d82523d6000602084013e612d31565b606091505b5091509150611a80828286613269565b60008164ffffffffff16612d558460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115612dc2576000612d83826008613e3a565b60ff1685901c9050612d94816132a2565b61ffff16841793508160ff16601014612daf57601084901b93505b50612dbb600182613ea2565b9050612d6a565b50600f5b60ff8160ff161015612e0a5760ff600882021684901c612de5816132a2565b61ffff16831792508160ff16600014612e0057601083901b92505b5060001901612dc6565b50915091565b6000612e1d826020613ea2565b612e28906008613e3a565b60ff16612e368585856132d4565b901c949350505050565b60006001600160401b03821115612ea85760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b606482015260840161060f565b5090565b60006114ad612ebc8585856132d4565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff161790506040816001600160401b03600160801b03600160c01b0316901b604082901c6001600160401b03600160801b03600160c01b0316179050608081901b608082901c179050919050565b600080612ffb86613402565b6001600160601b0316905061300f86613411565b8461301a8784613d71565b6130249190613d71565b11156130375762ffffff199150506114ad565b6130418582613d71565b9050612b2a8364ffffffffff1682866123f4565b6060600061309361308e8261308061307262ffffff198816612512565b6001600160601b031661343e565b62ffffff1987169190612e10565b612d64565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d016124e0565b600081600e6130eb81611c2a565b5060006130f9856008612529565b9050806001600160401b031661310e82612672565b60ff1661311b9190613d71565b611c18906008613d71565b60006131318361349f565b61318e5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b606482015260840161060f565b613197836134b1565b6131f75760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b606482015260840161060f565b600061320284612512565b6001600160601b03169050600061321885613402565b6001600160601b0316905060006040519050848111156132385760206060fd5b8285848460045afa50612b2a61324e8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60608315613278575081610c5e565b8251156132885782518084602001fd5b8160405162461bcd60e51b815260040161060f9190613cbd565b60006132b460048360ff16901c6134ef565b60ff1661ffff919091161760081b6132cb826134ef565b60ff1617919050565b600060ff82166132e657506000610c5e565b6132ef84612512565b6001600160601b031661330560ff841685613d71565b11156133555761333c61331785613402565b6001600160601b031661332986612512565b6001600160601b0316858560ff1661364b565b60405162461bcd60e51b815260040161060f9190613cbd565b60208260ff1611156133cc5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b606482015260840161060f565b6008820260006133db86613402565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60781c6001600160601b031690565b600061341c82612512565b61342583613402565b61342f9190613dd9565b6001600160601b031692915050565b600060ff821115612ea85760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b606482015260840161060f565b60006134aa82611d77565b1592915050565b60006134bd8260d81c90565b64ffffffffff1664ffffffffff14156134d857506000919050565b60006134e383613411565b60405110199392505050565b600060f08083179060ff8216141561350a5750603092915050565b8060ff1660f1141561351f5750603192915050565b8060ff1660f214156135345750603292915050565b8060ff1660f314156135495750603392915050565b8060ff1660f4141561355e5750603492915050565b8060ff1660f514156135735750603592915050565b8060ff1660f614156135885750603692915050565b8060ff1660f7141561359d5750603792915050565b8060ff1660f814156135b25750603892915050565b8060ff1660f914156135c75750603992915050565b8060ff1660fa14156135dc5750606192915050565b8060ff1660fb14156135f15750606292915050565b8060ff1660fc14156136065750606392915050565b8060ff1660fd141561361b5750606492915050565b8060ff1660fe14156136305750606592915050565b8060ff1660ff14156136455750606692915050565b50919050565b6060600061365886612d64565b915050600061366686612d64565b915050600061367486612d64565b915050600061368286612d64565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b80356001600160e01b0319811681146126cb57600080fd5b60008083601f84011261379e578182fd5b5081356001600160401b038111156137b4578182fd5b6020830191508360208285010111156137cc57600080fd5b9250929050565b600082601f8301126137e3578081fd5b81356001600160401b03808211156137fd576137fd613f26565b604051601f8301601f19908116603f0116810190828211818310171561382557613825613f26565b8160405283815286602085880101111561383d578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561386a578081fd5b8135610c5e81613f3c565b600060208284031215613886578081fd5b8151610c5e81613f3c565b6000602082840312156138a2578081fd5b81518015158114610c5e578182fd5b6000602082840312156138c2578081fd5b5035919050565b6000602082840312156138da578081fd5b5051919050565b6000806000604084860312156138f5578182fd5b83356001600160401b038082111561390b578384fd5b9085019060e0828803121561391e578384fd5b613926613d49565b61392f83613775565b8152602083013582811115613942578586fd5b61394e898286016137d3565b602083015250604083013582811115613965578586fd5b613971898286016137d3565b60408301525061398360608401613775565b60608201526080830135608082015260a0830135828111156139a3578586fd5b6139af898286016137d3565b60a08301525060c083013560c08201528095505060208601359150808211156139d6578384fd5b506139e38682870161378d565b9497909650939450505050565b60008060408385031215613a02578182fd5b823591506020830135613a1481613f3c565b809150509250929050565b60008060408385031215613a31578182fd5b50508035926020909101359150565b600080600080600080600080610100898b031215613a5c578384fd5b883597506020890135965060408901359550606089013594506080890135613a8381613f3c565b935060a0890135613a9381613f3c565b925060c0890135613aa381613f3c565b915060e0890135613ab381613f3c565b809150509295985092959890939650565b60008151808452613adc816020860160208601613ec5565b601f01601f19169290920160200192915050565b600063ffffffff60e01b80871683528551613b12816004860160208a01613ec5565b855190840190613b29816004840160208a01613ec5565b919094169301600481019390935250506008019392505050565b8183823760009101908152919050565b60008251613b65818460208701613ec5565b9190910192915050565b60008351613b81818460208801613ec5565b6001600160f81b0319939093169190920190815260010192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b8781526001600160a01b038781166020808401919091529087166040830152610160820190606083018760005b6002811015613c1b57815183529183019190830190600101613bfe565b50505060a083018660005b6004811015613c4357815183529183019190830190600101613c26565b50505050610120820193909352610140015295945050505050565b848152836020820152608060408201526000613c7d6080830185613ac4565b905082606083015295945050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b602081526000610c5e6020830184613ac4565b606081526000613ce36060830186613ac4565b6001600160a01b039490941660208301525060400152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60405160e081016001600160401b0381118282101715613d6b57613d6b613f26565b60405290565b60008219821115613d8457613d84613f10565b500190565b60006001600160401b03808316818516808303821115613dab57613dab613f10565b01949350505050565b600060ff821660ff84168060ff03821115613dd157613dd1613f10565b019392505050565b60006001600160601b03828116848216808303821115613dab57613dab613f10565b600082613e1657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613e3557613e35613f10565b500290565b600060ff821660ff84168160ff0481118215151615613e5b57613e5b613f10565b029392505050565b600082821015613e7557613e75613f10565b500390565b60006001600160401b0383811690831681811015613e9a57613e9a613f10565b039392505050565b600060ff821660ff841680821015613ebc57613ebc613f10565b90039392505050565b60005b83811015613ee0578181015183820152602001613ec8565b83811115613eef576000848401525b50505050565b6000600019821415613f0957613f09613f10565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461057357600080fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220dcb3578645ac19eb870b2478205b5225bd7c1d5b7a6f2d386a45c71bc9c71c2564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(uint256,uint256,uint256,uint256,address,address,address,address)": {
        "params": {
          "_appId": "Id of ccTransfer dApp",
          "_chainId": "Id of the underlying chain",
          "_lockers": "Lockers' contract address",
          "_protocolPercentageFee": "Percentage amount of protocol fee (min: %0.01)",
          "_relay": "The Relay address to validate data from source chain",
          "_startingBlockNumber": "Requests that are included in a block older than _startingBlockNumber cannot be executed",
          "_teleBTC": "TeleportDAO BTC ERC20 token address",
          "_treasury": "Address of treasury that collects protocol fees"
        }
      },
      "isRequestUsed(bytes32)": {
        "details": "This is to avoid re-submitting a used request",
        "params": {
          "_txId": "The txId of request on the source chain"
        },
        "returns": {
          "_0": "True if the request has been executed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setInstantRouter(address)": {
        "details": "Only owner can call this",
        "params": {
          "_instantRouter": "Address of the instant router contract"
        }
      },
      "setLockers(address)": {
        "details": "Only owner can call this",
        "params": {
          "_lockers": "Address of the lockers contract"
        }
      },
      "setProtocolPercentageFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_protocolPercentageFee": "Percentage amount of protocol fee"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "Address of the relay contract"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "TeleportDAO BTC ERC20 token address"
        }
      },
      "setThirdPartyAddress(uint256,address)": {
        "details": "Only owner can call this",
        "params": {
          "_thirdPartyAddress": "third party address"
        }
      },
      "setThirdPartyFee(uint256,uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_thirdPartyFee": "third party fee"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call this",
        "params": {
          "_treasury": "Treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "wrap((bytes4,bytes,bytes,bytes4,uint256,bytes,uint256),bytes)": {
        "details": "Validates the transfer request, then,                                     if speed is 1, the request is instant                                     which pays back the loan,                                     if the speed is 0, it is a normal transfer",
        "params": {
          "_lockerLockingScript": "Locking script of locker that user has sent BTC to it",
          "_txAndProof": "Transaction and merkle proof data"
        },
        "returns": {
          "_0": "True if the transfer is successful"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewInstantRouter(address,address)": {
        "notice": "Emits when changes made to InstantRouter address"
      },
      "NewLockers(address,address)": {
        "notice": "Emits when changes made to Lockers address"
      },
      "NewProtocolPercentageFee(uint256,uint256)": {
        "notice": "Emits when changes made to protocol percentage fee"
      },
      "NewRelay(address,address)": {
        "notice": "Emits when changes made to relay address"
      },
      "NewTeleBTC(address,address)": {
        "notice": "Emits when changes made to TeleBTC address"
      },
      "NewThirdPartyAddress(uint256,address,address)": {
        "notice": "Emits when changes made to third party address"
      },
      "NewThirdPartyFee(uint256,uint256,uint256)": {
        "notice": "Emits when changes made to third party fee"
      },
      "NewTreasury(address,address)": {
        "notice": "Emits when changes made to Treasury address"
      },
      "NewWrap(bytes32,bytes,address,address,address,uint256[2],uint256[4],uint256,uint256)": {
        "notice": "Emits when a cc transfer request gets done"
      }
    },
    "kind": "user",
    "methods": {
      "initialize(uint256,uint256,uint256,uint256,address,address,address,address)": {
        "notice": "Gives default params to initiate cc transfer router"
      },
      "isRequestUsed(bytes32)": {
        "notice": "Check if the request has been executed before"
      },
      "setInstantRouter(address)": {
        "notice": "Setter for instant router"
      },
      "setLockers(address)": {
        "notice": "Setter for lockers"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Setter for protocol percentage fee"
      },
      "setRelay(address)": {
        "notice": "Setter for relay"
      },
      "setStartingBlockNumber(uint256)": {
        "notice": "Setter for starting block number"
      },
      "setTeleBTC(address)": {
        "notice": "Setter for teleBTC"
      },
      "setThirdPartyAddress(uint256,address)": {
        "notice": "Setter for third party address"
      },
      "setThirdPartyFee(uint256,uint256)": {
        "notice": "Setter for third party fee"
      },
      "setTreasury(address)": {
        "notice": "Setter for treasury"
      },
      "wrap((bytes4,bytes,bytes,bytes4,uint256,bytes,uint256),bytes)": {
        "notice": "Executes the cross chain transfer request"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16879,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "startingBlockNumber",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 16882,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "chainId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16885,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "appId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16888,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16891,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "relay",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 16894,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "lockers",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 16897,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "teleBTC",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16900,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "instantRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 16903,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 16908,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "ccTransferRequests",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(ccTransferRequest)18938_storage)"
      },
      {
        "astId": 396,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 399,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1161,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 268,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 388,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "62",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 699,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "_status",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 757,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16916,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "thirdPartyFee",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16920,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "thirdPartyAddress",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16924,
        "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
        "label": "thirdParty",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(ccTransferRequest)18938_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICcTransferRouter.ccTransferRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ccTransferRequest)18938_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ccTransferRequest)18938_storage": {
        "encoding": "inplace",
        "label": "struct ICcTransferRouter.ccTransferRequest",
        "members": [
          {
            "astId": 18929,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "inputAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18931,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18933,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18935,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "speed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18937,
            "contract": "contracts/routers/CcTransferRouterLogic.sol:CcTransferRouterLogic",
            "label": "isUsed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}