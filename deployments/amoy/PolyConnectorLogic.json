{
  "address": "0x8f5e9BA7Aca3aB3129C80D47a5C1Ee74baFE0DA6",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAcross",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAcross",
          "type": "address"
        }
      ],
      "name": "AcrossUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBurnRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBurnRouter",
          "type": "address"
        }
      ],
      "name": "BurnRouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEthConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEthConnector",
          "type": "address"
        }
      ],
      "name": "EthConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "FailedBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLockersProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockersProxy",
          "type": "address"
        }
      ],
      "name": "LockersProxyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "functionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MsgReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "NewBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "across",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acrossV3",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRouterProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethConnectorProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "failedReqs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenSent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_fillCompleted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handleAcrossMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenSent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handleV3AcrossMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockersProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnRouterProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_across",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_acrossV3",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sourceChainId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockersProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "retrySwapAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_across",
          "type": "address"
        }
      ],
      "name": "setAcross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_acrossV3",
          "type": "address"
        }
      ],
      "name": "setAcrossV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burnRouterProxy",
          "type": "address"
        }
      ],
      "name": "setBurnRouterProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ethConnectorProxy",
          "type": "address"
        }
      ],
      "name": "setEthConnectorProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockersProxy",
          "type": "address"
        }
      ],
      "name": "setLockersProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "withdrawFundsToEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25fc518a9968810546acfb85c8ef1dfa8b05f4b889cb5970b7c70219ffd3b3d4",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0x8f5e9BA7Aca3aB3129C80D47a5C1Ee74baFE0DA6",
    "transactionIndex": 2,
    "gasUsed": "2084505",
    "logsBloom": "0x
    "blockHash": "0x56391515c46cb48e4a6def6888578394c16137137eec5d55100e82901493e2da",
    "transactionHash": "0x25fc518a9968810546acfb85c8ef1dfa8b05f4b889cb5970b7c70219ffd3b3d4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5983125,
        "transactionHash": "0x25fc518a9968810546acfb85c8ef1dfa8b05f4b889cb5970b7c70219ffd3b3d4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x0000000000000000000000006ab3d36c46ecfb9b9c0bd51cb1c3da5a2c81cea6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000145d93c2f6ccb0f00000000000000000000000000000000000000000000000235a812dd4f4198f40000000000000000000000000000000000000000000000ea1c9b00563c8f7e16000000000000000000000000000000000000000000000002346239a11fd4cde50000000000000000000000000000000000000000000000ea1de0d9926bfc4925",
        "logIndex": 8,
        "blockHash": "0x56391515c46cb48e4a6def6888578394c16137137eec5d55100e82901493e2da"
      }
    ],
    "blockNumber": 5983125,
    "cumulativeGasUsed": "2349087",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3849a4863b3f479a54c4c9d266f63097",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAcross\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAcross\",\"type\":\"address\"}],\"name\":\"AcrossUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBurnRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBurnRouter\",\"type\":\"address\"}],\"name\":\"BurnRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEthConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEthConnector\",\"type\":\"address\"}],\"name\":\"EthConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"FailedBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockersProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockersProxy\",\"type\":\"address\"}],\"name\":\"LockersProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MsgReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"NewBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"across\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acrossV3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRouterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethConnectorProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"failedReqs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fillCompleted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handleAcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handleV3AcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockersProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnRouterProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_across\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_acrossV3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sourceChainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockersProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"retrySwapAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_across\",\"type\":\"address\"}],\"name\":\"setAcross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acrossV3\",\"type\":\"address\"}],\"name\":\"setAcrossV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnRouterProxy\",\"type\":\"address\"}],\"name\":\"setBurnRouterProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethConnectorProxy\",\"type\":\"address\"}],\"name\":\"setEthConnectorProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockersProxy\",\"type\":\"address\"}],\"name\":\"setLockersProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawFundsToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address,address,uint256)\":{\"details\":\"Only owner can call this\"},\"handleAcrossMessage(address,uint256,bool,address,bytes)\":{\"details\":\"Only Across can call this. Will be reverted if tokens have not been received fully yet.\",\"params\":{\"_amount\":\"Amount received by the contract (after reducing fees)\",\"_fillCompleted\":\"True if all tokens have been received\",\"_message\":\"that user sent (from Ethereum)\",\"_relayer\":\"Addres of relayer who submitted the request\",\"_tokenSent\":\"Address of exchanging token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)\":{\"details\":\"User signs a message for retrying its request\",\"params\":{\"_message\":\"The signed message\",\"_r\":\"Signature r\",\"_s\":\"Signature s\",\"_v\":\"Signature v\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFundsToEth(bytes,uint8,bytes32,bytes32)\":{\"details\":\"User signs a message requesting for withdrawing a bid\",\"params\":{\"_message\":\"The signed message\",\"_r\":\"Signature r\",\"_s\":\"Signature s\",\"_v\":\"Signature v\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address,address,uint256)\":{\"notice\":\"Withdraws tokens in the emergency case\"},\"handleAcrossMessage(address,uint256,bool,address,bytes)\":{\"notice\":\"Processes requests coming from Ethereum (using Across)\"},\"handleV3AcrossMessage(address,uint256,address,bytes)\":{\"notice\":\"Process requests coming from Ethereum (using Across V3)\"},\"retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)\":{\"notice\":\"Retry failed exchange and burn requests\"},\"setAcross(address)\":{\"notice\":\"Setter for Across\"},\"setAcrossV3(address)\":{\"notice\":\"Setter for AcrossV3\"},\"setBurnRouterProxy(address)\":{\"notice\":\"Setter for BurnRouterProxy\"},\"setEthConnectorProxy(address)\":{\"notice\":\"Setter for EthConnectorProxy\"},\"setLockersProxy(address)\":{\"notice\":\"Setter for LockersProxy\"},\"withdrawFundsToEth(bytes,uint8,bytes32,bytes32)\":{\"notice\":\"Withdraws user's bid\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/PolyConnectorLogic.sol\":\"PolyConnectorLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@across-protocol/contracts-v2/contracts/interfaces/SpokePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Contains common data structures and functions used by all SpokePool implementations.\\n */\\ninterface SpokePoolInterface {\\n    // This leaf is meant to be decoded in the SpokePool to pay out successful relayers.\\n    struct RelayerRefundLeaf {\\n        // This is the amount to return to the HubPool. This occurs when there is a PoolRebalanceLeaf netSendAmount that\\n        // is negative. This is just the negative of this value.\\n        uint256 amountToReturn;\\n        // Used to verify that this is being executed on the correct destination chainId.\\n        uint256 chainId;\\n        // This array designates how much each of those addresses should be refunded.\\n        uint256[] refundAmounts;\\n        // Used as the index in the bitmap to track whether this leaf has been executed or not.\\n        uint32 leafId;\\n        // The associated L2TokenAddress that these claims apply to.\\n        address l2TokenAddress;\\n        // Must be same length as refundAmounts and designates each address that must be refunded.\\n        address[] refundAddresses;\\n    }\\n\\n    // This struct represents the data to fully specify a relay. If any portion of this data differs, the relay is\\n    // considered to be completely distinct. Only one relay for a particular depositId, chainId pair should be\\n    // considered valid and repaid. This data is hashed and inserted into the slow relay merkle root so that an off\\n    // chain validator can choose when to refund slow relayers.\\n    struct RelayData {\\n        // The address that made the deposit on the origin chain.\\n        address depositor;\\n        // The recipient address on the destination chain.\\n        address recipient;\\n        // The corresponding token address on the destination chain.\\n        address destinationToken;\\n        // The total relay amount before fees are taken out.\\n        uint256 amount;\\n        // Origin chain id.\\n        uint256 originChainId;\\n        // Destination chain id.\\n        uint256 destinationChainId;\\n        // The LP Fee percentage computed by the relayer based on the deposit's quote timestamp\\n        // and the HubPool's utilization.\\n        int64 realizedLpFeePct;\\n        // The relayer fee percentage specified in the deposit.\\n        int64 relayerFeePct;\\n        // The id uniquely identifying this deposit on the origin chain.\\n        uint32 depositId;\\n        // Data that is forwarded to the recipient.\\n        bytes message;\\n    }\\n\\n    struct SlowFill {\\n        RelayData relayData;\\n        int256 payoutAdjustmentPct;\\n    }\\n\\n    // Stores collection of merkle roots that can be published to this contract from the HubPool, which are referenced\\n    // by \\\"data workers\\\" via inclusion proofs to execute leaves in the roots.\\n    struct RootBundle {\\n        // Merkle root of slow relays that were not fully filled and whose recipient is still owed funds from the LP pool.\\n        bytes32 slowRelayRoot;\\n        // Merkle root of relayer refunds for successful relays.\\n        bytes32 relayerRefundRoot;\\n        // This is a 2D bitmap tracking which leaves in the relayer refund root have been claimed, with max size of\\n        // 256x(2^248) leaves per root.\\n        mapping(uint256 => uint256) claimedBitmap;\\n    }\\n\\n    function setCrossDomainAdmin(address newCrossDomainAdmin) external;\\n\\n    function setHubPool(address newHubPool) external;\\n\\n    function setEnableRoute(\\n        address originToken,\\n        uint256 destinationChainId,\\n        bool enable\\n    ) external;\\n\\n    function pauseDeposits(bool pause) external;\\n\\n    function pauseFills(bool pause) external;\\n\\n    function setDepositQuoteTimeBuffer(uint32 buffer) external;\\n\\n    function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot) external;\\n\\n    function emergencyDeleteRootBundle(uint256 rootBundleId) external;\\n\\n    function deposit(\\n        address recipient,\\n        address originToken,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        int64 relayerFeePct,\\n        uint32 quoteTimestamp,\\n        bytes memory message,\\n        uint256 maxCount\\n    ) external payable;\\n\\n    function depositNow(\\n        address recipient,\\n        address originToken,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        int64 relayerFeePct,\\n        bytes memory message,\\n        uint256 maxCount\\n    ) external payable;\\n\\n    function speedUpDeposit(\\n        address depositor,\\n        int64 updatedRelayerFeePct,\\n        uint32 depositId,\\n        address updatedRecipient,\\n        bytes memory updatedMessage,\\n        bytes memory depositorSignature\\n    ) external;\\n\\n    function fillRelay(\\n        address depositor,\\n        address recipient,\\n        address destinationToken,\\n        uint256 amount,\\n        uint256 maxTokensToSend,\\n        uint256 repaymentChainId,\\n        uint256 originChainId,\\n        int64 realizedLpFeePct,\\n        int64 relayerFeePct,\\n        uint32 depositId,\\n        bytes memory message,\\n        uint256 maxCount\\n    ) external;\\n\\n    function fillRelayWithUpdatedDeposit(\\n        address depositor,\\n        address recipient,\\n        address updatedRecipient,\\n        address destinationToken,\\n        uint256 amount,\\n        uint256 maxTokensToSend,\\n        uint256 repaymentChainId,\\n        uint256 originChainId,\\n        int64 realizedLpFeePct,\\n        int64 relayerFeePct,\\n        int64 updatedRelayerFeePct,\\n        uint32 depositId,\\n        bytes memory message,\\n        bytes memory updatedMessage,\\n        bytes memory depositorSignature,\\n        uint256 maxCount\\n    ) external;\\n\\n    function executeSlowRelayLeaf(\\n        address depositor,\\n        address recipient,\\n        address destinationToken,\\n        uint256 amount,\\n        uint256 originChainId,\\n        int64 realizedLpFeePct,\\n        int64 relayerFeePct,\\n        uint32 depositId,\\n        uint32 rootBundleId,\\n        bytes memory message,\\n        int256 payoutAdjustment,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    function executeRelayerRefundLeaf(\\n        uint32 rootBundleId,\\n        SpokePoolInterface.RelayerRefundLeaf memory relayerRefundLeaf,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    function chainId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8ca5e32ee496553c1055954283747b6725356548dc35f5aad565e5cf37bf6449\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewTST(\\n        address oldTST,\\n        address newTST\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTSTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x2dfb0206a8c767ccfb583dc3951bdf5596cec3295597dd40b3bd3280f002b94b\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\n\\nabstract contract BurnRouterStorage is IBurnRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    address public override bitcoinFeeOracle;\\n    uint public override startingBlockNumber;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    \\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n}\",\"keccak256\":\"0x7d070b246c54b207911d56bae926d134732bb3cb434a0603a6890a55e4b4149e\",\"license\":\"MIT\"},\"contracts/routers/PolyConnectorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@across-protocol/contracts-v2/contracts/interfaces/SpokePoolInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\nimport \\\"./BurnRouterStorage.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\nimport \\\"./PolyConnectorStorage.sol\\\";\\nimport \\\"./interfaces/IPolyConnectorLogic.sol\\\";\\nimport \\\"./interfaces/AcrossMessageHandler.sol\\\";\\n\\ncontract PolyConnectorLogic is IPolyConnectorLogic, PolyConnectorStorage, \\n    OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, AcrossMessageHandler {\\n\\n    error ZeroAddress();\\n\\n    modifier nonZeroAddress(address _address) {\\n        if (_address == address(0))\\n            revert ZeroAddress();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _lockersProxy,\\n        address _burnRouterProxy,\\n        address _across,\\n        address _acrossV3,\\n        uint256 _sourceChainId\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        lockersProxy = _lockersProxy;\\n        burnRouterProxy = _burnRouterProxy;\\n        across = _across;\\n        acrossV3 = _acrossV3;\\n        sourceChainId = _sourceChainId;\\n    }\\n\\n    /// @notice Setter for EthConnectorProxy\\n    function setEthConnectorProxy(address _ethConnectorProxy) external override onlyOwner nonZeroAddress(_ethConnectorProxy) {\\n        ethConnectorProxy = _ethConnectorProxy;\\n    }\\n\\n    /// @notice Setter for LockersProxy\\n    function setLockersProxy(address _lockersProxy) external override onlyOwner nonZeroAddress(_lockersProxy){\\n        lockersProxy = _lockersProxy;\\n    }\\n\\n    /// @notice Setter for BurnRouterProxy\\n    function setBurnRouterProxy(address _burnRouterProxy) external override onlyOwner nonZeroAddress(_burnRouterProxy){\\n        burnRouterProxy = _burnRouterProxy;\\n    }\\n\\n    /// @notice Setter for Across\\n    function setAcross(address _across) external override onlyOwner nonZeroAddress(_across){\\n        across = _across;\\n    }\\n\\n    /// @notice Setter for AcrossV3\\n    function setAcrossV3(address _acrossV3) external override onlyOwner nonZeroAddress(_acrossV3){\\n        acrossV3 = _acrossV3;\\n    }\\n\\n    /// @notice Processes requests coming from Ethereum (using Across)\\n    /// @dev Only Across can call this. Will be reverted if tokens have not been received fully yet.\\n    /// @param _tokenSent Address of exchanging token\\n    /// @param _amount Amount received by the contract (after reducing fees)\\n    /// @param _fillCompleted True if all tokens have been received\\n    /// @param _relayer Addres of relayer who submitted the request\\n    /// @param _message that user sent (from Ethereum)\\n    function handleAcrossMessage(\\n        address _tokenSent,\\n        uint256 _amount,\\n        bool _fillCompleted,\\n        address _relayer,\\n        bytes memory _message\\n    ) external nonReentrant override {\\n        // Checks the msg origin and fill completion (full amount has been received)\\n        require(msg.sender == across, \\\"PolygonConnectorLogic: not across\\\");\\n\\n        // // FIXME: handle cases the fillCompleted is not true\\n        // require(_fillCompleted, \\\"PolygonConnectorLogic: partial fill\\\");\\n\\n        // Determines the function call\\n        (string memory purpose, uint uniqueCounter) = abi.decode(_message, (string, uint));\\n        emit MsgReceived(uniqueCounter, purpose, _message);\\n\\n        if (_isEqualString(purpose, \\\"exchangeForBtcAcross\\\")) {\\n            _exchangeForBtcAcross(_amount, _message, _tokenSent);\\n        }\\n    }\\n\\n    /// @notice Process requests coming from Ethereum (using Across V3)\\n    function handleV3AcrossMessage(\\n        address _tokenSent,\\n        uint256 _amount,\\n        address _relayer, \\n        bytes memory _message\\n    ) external nonReentrant override {\\n        // Checks the msg origin and fill completion (full amount has been received)\\n        require(msg.sender == acrossV3, \\\"PolyConnectorLogic: not acrossV3\\\");\\n\\n        // Determines the function call\\n        (string memory purpose, uint uniqueCounter) = abi.decode(_message, (string, uint));\\n        emit MsgReceived(uniqueCounter, purpose, _message);\\n\\n        if (_isEqualString(purpose, \\\"exchangeForBtcAcross\\\")) {\\n            _exchangeForBtcAcross(_amount, _message, _tokenSent);\\n        }\\n    }\\n\\n    /// @notice Withdraws user's bid\\n    /// @dev User signs a message requesting for withdrawing a bid\\n    /// @param _message The signed message\\n    /// @param _v Signature v\\n    /// @param _r Signature r\\n    /// @param _s Signature s\\n\\n    function withdrawFundsToEth(\\n        bytes memory _message,\\n        uint8 _v, \\n        bytes32 _r, \\n        bytes32 _s\\n    ) external nonReentrant override {\\n\\n        (\\n            address _token, \\n            uint256 _amount, \\n            int64 _relayerFeePercentage\\n        ) = abi.decode(\\n            _message,\\n            (\\n                address,\\n                uint256, \\n                int64\\n            )\\n        );\\n\\n        // Verifies the signature and finds the buyer\\n        address user = _verifySig(\\n            _message,\\n            _r,\\n            _s,\\n            _v\\n        );\\n\\n        // Checks that bid exists\\n        require(\\n            _amount > 0 && failedReqs[user][_token] >= _amount,\\n            \\\"PolygonConnectorLogic: low balance\\\"\\n        );\\n\\n        // TODO test onchain \\n        // Sends token back to the buyer\\n        _sendTokenUsingAcross(\\n            user,\\n            _token,\\n            _amount,\\n            _relayerFeePercentage\\n        );\\n        \\n        // Delets the bid\\n        failedReqs[user][_token] -= _amount;\\n    }\\n\\n    /// @notice Retry failed exchange and burn requests\\n    /// @dev User signs a message for retrying its request\\n    /// @param _message The signed message\\n    /// @param _v Signature v\\n    /// @param _r Signature r\\n    /// @param _s Signature s\\n\\n    function retrySwapAndUnwrap(\\n        bytes memory _message,\\n        uint8 _v, \\n        bytes32 _r, \\n        bytes32 _s\\n    ) external nonReentrant override {\\n        (\\n            address _token, \\n            uint256 _amount, \\n            address exchangeConnector,\\n            uint256 minOutputAmount,\\n            bytes memory userScript,\\n            ScriptTypes scriptType,\\n            bytes memory lockerLockingScript,\\n            address[] memory path\\n        ) = abi.decode(\\n            _message,\\n            (\\n                address,\\n                uint256, \\n                address,\\n                uint256,\\n                bytes,\\n                ScriptTypes,\\n                bytes,\\n                address[]\\n            )\\n        );\\n\\n        // Verifies the signature and finds the buyer\\n        address user = _verifySig(\\n            _message,\\n            _r,\\n            _s,\\n            _v\\n        );\\n\\n        // Checks that bid exists\\n        require(\\n            _amount > 0 && failedReqs[user][_token] >= _amount,\\n            \\\"PolygonConnectorLogic: low balance\\\"\\n        );\\n\\n        failedReqs[user][_token] -= _amount;\\n\\n        uint[] memory amounts = new uint[](2);\\n        amounts[0] = _amount;\\n        amounts[1] = minOutputAmount;\\n\\n        IERC20(path[0]).approve(burnRouterProxy, _amount);\\n        IBurnRouter(burnRouterProxy).swapAndUnwrap(\\n            exchangeConnector, \\n            amounts, \\n            true, // Input token amount is fixed\\n            path, \\n            block.timestamp, \\n            userScript, \\n            scriptType, \\n            lockerLockingScript,\\n            0\\n        );\\n\\n        address lockerTargetAddress = ILockersManager(lockersProxy).getLockerTargetAddress(lockerLockingScript);\\n        \\n        emit NewBurn(\\n            exchangeConnector,\\n            _token,\\n            _amount,\\n            user,\\n            userScript,\\n            scriptType,\\n            lockerTargetAddress,\\n            BurnRouterStorage(burnRouterProxy).burnRequestCounter(\\n                lockerTargetAddress\\n            ) - 1,\\n            path\\n        );\\n    }\\n\\n    \\n    /// @notice Helper for exchanging token for BTC\\n    function _exchangeForBtcAcross(\\n        uint256 _amount,\\n        bytes memory _message,\\n        address _tokenSent\\n    ) internal {\\n        IPolyConnectorLogic.exchangeForBtcArguments memory arguments;\\n        (\\n            ,,\\n            arguments.user,\\n            arguments.exchangeConnector,\\n            arguments.minOutputAmount,\\n            arguments.path,\\n            arguments.userScript,\\n            arguments.scriptType,\\n            arguments.lockerLockingScript,\\n            arguments.thirdParty\\n        ) = abi.decode(\\n            _message, \\n            (\\n                string,\\n                uint,\\n                address,\\n                address,\\n                uint,\\n                address[],\\n                bytes,\\n                ScriptTypes,\\n                bytes,\\n                uint\\n            )\\n        );\\n\\n        uint[] memory amounts = new uint[](2);\\n        amounts[0] = _amount;\\n        amounts[1] = arguments.minOutputAmount;\\n\\n        IERC20(arguments.path[0]).approve(burnRouterProxy, _amount);\\n        \\n        try IBurnRouter(burnRouterProxy).swapAndUnwrap(\\n            arguments.exchangeConnector, \\n            amounts, \\n            true, // Input token amount is fixed\\n            arguments.path, \\n            block.timestamp, \\n            arguments.userScript, \\n            arguments.scriptType, \\n            arguments.lockerLockingScript,\\n            arguments.thirdParty\\n        ) {\\n            emit NewBurn(\\n                arguments.exchangeConnector,\\n                _tokenSent,\\n                _amount,\\n                arguments.user,\\n                arguments.userScript,\\n                arguments.scriptType,\\n                ILockersManager(lockersProxy).getLockerTargetAddress(arguments.lockerLockingScript),\\n                BurnRouterStorage(burnRouterProxy).burnRequestCounter(\\n                    ILockersManager(lockersProxy).getLockerTargetAddress(arguments.lockerLockingScript)\\n                ) - 1,\\n                arguments.path\\n            );\\n        } catch {\\n            // Removes spending allowance\\n            IERC20(arguments.path[0]).approve(burnRouterProxy, 0);\\n\\n            // Saves token amount so user can withdraw it in future\\n            failedReqs[arguments.user][_tokenSent] += _amount;\\n            emit FailedBurn(\\n                arguments.exchangeConnector,\\n                _tokenSent,\\n                _amount,\\n                arguments.user,\\n                arguments.userScript,\\n                arguments.scriptType,\\n                arguments.path\\n            );\\n        }\\n    }\\n\\n    /// @notice Withdraws tokens in the emergency case\\n    /// @dev Only owner can call this\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint _amount\\n    ) external override onlyOwner {\\n        if (_token == ETH_ADDR) \\n            _to.call{value: _amount}(\\\"\\\");\\n        else\\n            IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n    /// @notice Sends tokens to Ethereum using Across\\n    /// @dev This will be used for withdrawing funds\\n    function _sendTokenUsingAcross(\\n        address _user,\\n        address _token,\\n        uint _amount,\\n        int64 _relayerFeePercentage\\n    ) internal {\\n        bytes memory nullData;\\n        IERC20(_token).approve(\\n            across, \\n            _amount\\n        );\\n\\n        SpokePoolInterface(across).deposit(\\n            _user,\\n            _token,\\n            _amount,\\n            sourceChainId,\\n            _relayerFeePercentage,\\n            uint32(block.timestamp),\\n            nullData,\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n    }\\n\\n    // TODO: move to a library\\n    function _verifySig(\\n        bytes memory message,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal pure returns (address) {\\n        // Compute the message hash\\n        bytes32 messageHash = keccak256(message);\\n\\n        // Prefix the message hash as per the Ethereum signing standard\\n        bytes32 ethSignedMessageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n        );\\n\\n        // Verify the message using ecrecover\\n        address signer = ecrecover(ethSignedMessageHash, v, r, s);\\n        require(signer != address(0), \\\"PolygonConnectorLogic: Invalid sig\\\");\\n\\n        return signer;\\n    }\\n\\n    // TODO: move to a library\\n    // Helper function to convert uint to string\\n    function uintToString(uint v) private pure returns (string memory str) {\\n        if (v == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = v;\\n        uint length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(length);\\n        uint k = length;\\n        while (v != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(v - v / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            v /= 10;\\n        }\\n        str = string(bstr);\\n    }\\n\\n    /// @notice Checks if two strings are equal\\n    function _isEqualString(string memory _a, string memory _b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n}\",\"keccak256\":\"0x89ddf8014736d7e5395f0f75ff8def8c3fc277f0c65ecb4de08b6b3accdd010a\",\"license\":\"MIT\"},\"contracts/routers/PolyConnectorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\nimport \\\"./interfaces/IPolyConnectorLogic.sol\\\";\\n\\nabstract contract PolyConnectorStorage {\\n    \\n    struct Bid {\\n        uint amount; \\n        address token;\\n    }\\n   \\n    address constant public ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; \\n\\n    address public lockersProxy;\\n    address public burnRouterProxy;\\n    address public ethConnectorProxy;\\n    address public across;\\n    address public acrossV3;\\n    uint256 public sourceChainId;\\n\\n    mapping(address => mapping(address => uint)) public failedReqs;\\n    // ^ Mapping from [user][token] to amount\\n\\n    struct UserScriptData {\\n        bytes userScript;\\n        ScriptTypes scriptType;\\n    }\\n\\n}\",\"keccak256\":\"0x815064bc1eb02bc829d9fc9cbfb9b9e331eb874aab5bad71c05956065d17a16a\",\"license\":\"MIT\"},\"contracts/routers/interfaces/AcrossMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/// @notice This interface is expected to be implemented by any contract \\n///         that expects to recieve messages from the SpokePool.\\ninterface AcrossMessageHandler {\\n    function handleAcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        bool fillCompleted,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n}\",\"keccak256\":\"0x8ef3a87927566cc6197af328b61119adfad8a3e546a614040393c560e1959798\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param userTargetAddress Address of the user on EVM\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n\\t/// @param thirdPartyId Id of third party\\n\\t/// @param inputToken inputToken address\\n\\t/// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n\\t/// @param fees [network fee, locker fee, protocol fee, third party fee]\\n\\t\\n  \\tevent NewUnwrap(\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline,\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress inputToken,\\n\\t\\tuint[3] amounts,\\n\\t\\tuint[4] fees\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidUnwrap(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when network fee is updated\\n    event NewNetworkFee(\\n        uint oldNetworkFee, \\n        uint newNetworkFee\\n    );\\n\\n\\t/// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle, \\n        address newNetworkFeeOracle\\n    );\\n\\n\\t/// @notice                     Emits when changes made to third party address\\n\\tevent NewThirdPartyAddress(\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress oldThirdPartyAddress, \\n\\t\\taddress newThirdPartyAddress\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to third party fee\\n\\tevent NewThirdPartyFee(\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint oldThirdPartyFee, \\n\\t\\tuint newThirdPartyFee\\n\\t);\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\tfunction bitcoinFeeOracle() external view returns (address);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setNetworkFee(uint _networkFee) external;\\n\\n\\tfunction setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n\\tfunction setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external;\\n\\n\\tfunction setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n\\tfunction unwrap(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\",\"keccak256\":\"0x114bdfd7564dcf4ac8f10be8805273b17d82965d24dfc50ad239839239e4d30d\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IPolyConnectorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IPolyConnectorLogic {\\n\\n    /// @notice Structure for _exchangeForBtcAcross function\\n    struct exchangeForBtcArguments {\\n        address user;\\n        address exchangeConnector;\\n        uint minOutputAmount;\\n        address[] path;\\n        bytes userScript;\\n        ScriptTypes scriptType;\\n        bytes lockerLockingScript;\\n        uint thirdParty;\\n    }\\n\\n    // Events\\n    \\n   \\tevent NewBurn(\\n        address exchangeConnector,\\n\\t\\taddress inputToken,\\n\\t\\tuint inputAmount,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n        address[] path\\n\\t);\\n\\n   \\tevent FailedBurn(\\n\\t\\taddress exchangeConnector,\\n\\t\\taddress inputToken,\\n\\t\\tuint inputAmount,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        address[] path\\n\\t);\\n\\n    event MsgReceived(\\n        uint uniqueCounter,\\n        string functionName,\\n        bytes data\\n    );\\n\\n    event AcrossUpdated( \\n        address oldAcross,\\n        address newAcross\\n    );\\n\\n    event EthConnectorUpdated( \\n        address oldEthConnector,\\n        address newEthConnector\\n    );\\n\\n    event BurnRouterUpdated( \\n        address oldBurnRouter,\\n        address newBurnRouter\\n    );\\n\\n    event LockersProxyUpdated( \\n        address oldLockersProxy,\\n        address newLockersProxy\\n    );\\n\\n    function setAcross(address _across) external;\\n\\n    function setAcrossV3(address _acrossV3) external;\\n\\n    function setEthConnectorProxy(address _ethConnectorProxy) external;\\n\\n    function setBurnRouterProxy(address _burnRouterProxy) external;\\n\\n    function setLockersProxy(address _lockersProxy) external;\\n\\n    function withdrawFundsToEth(\\n        bytes memory _message,\\n        // address _token,\\n        // uint _amount,\\n        // int64 _relayerFeePercentage,\\n        uint8 _v, \\n        bytes32 _r, \\n        bytes32 _s\\n    ) external;\\n\\n    function retrySwapAndUnwrap(\\n        bytes memory _message,\\n        uint8 _v, \\n        bytes32 _r, \\n        bytes32 _s\\n    ) external;\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint _amount\\n    ) external;\\n}\",\"keccak256\":\"0xe623d10d0122aa32d93dd52c63f9ce884b04038aa3764cde92ca989806aaf729\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124ba806100206000396000f3fe608060405234801561001057600080fd5b506004361061011d5760003560e01c80630ea1f938146101225780631544298e14610137578063292c1d9214610153578063296079f1146101735780633a5be8cb146101865780633f8c6ae0146101995780634d6e8f9d146101ac57806359841888146101bf5780635c975abb146101d257806361be10f2146101e8578063715018a6146101fb5780637753f47b146102035780637c5a4ccb1461021e57806384308271146102495780638da5cb5b1461025c5780639d28a64414610264578063b4af0a2714610277578063c67684eb1461028a578063cf2568541461029d578063e63ea408146102b0578063f2fde38b146102c3578063f374be5f146102d6578063f7013ef6146102e9575b600080fd5b610135610130366004611d8b565b6102fc565b005b61014060055481565b6040519081526020015b60405180910390f35b600354610166906001600160a01b031681565b60405161014a91906120b4565b600054610166906001600160a01b031681565b610135610194366004611d22565b61041c565b600154610166906001600160a01b031681565b6101356101ba366004611af7565b61052c565b6101356101cd366004611af7565b61057f565b609e5460ff16604051901515815260200161014a565b6101356101f6366004611af7565b6105d2565b610135610625565b61016673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61014061022c366004611c47565b600660209081526000928352604080842090915290825290205481565b610135610257366004611af7565b610639565b61016661068c565b610135610272366004611af7565b61069b565b600254610166906001600160a01b031681565b600454610166906001600160a01b031681565b6101356102ab366004611e23565b6106ee565b6101356102be366004611ce2565b610b08565b6101356102d1366004611af7565b610c0b565b6101356102e4366004611e23565b610c84565b6101356102f7366004611c7f565b610d63565b610304610ed7565b6003546001600160a01b0316331461036d5760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a206e6f74206163726f736044820152607360f81b60648201526084015b60405180910390fd5b600080828060200190518101906103849190611e84565b915091507ff457ed8068d0e1536c9c3ee16b7aa6f7f3558fd38686e45061863a066bf8aa0d8183856040516103bb9392919061234e565b60405180910390a16103f9826040518060400160405280601481526020017365786368616e6765466f724274634163726f737360601b815250610f31565b1561040957610409868489610f8a565b50506104156001606c55565b5050505050565b610424610ed7565b6004546001600160a01b0316331461047e5760405162461bcd60e51b815260206004820181905260248201527f506f6c79436f6e6e6563746f724c6f6769633a206e6f74206163726f737356336044820152606401610364565b600080828060200190518101906104959190611e84565b915091507ff457ed8068d0e1536c9c3ee16b7aa6f7f3558fd38686e45061863a066bf8aa0d8183856040516104cc9392919061234e565b60405180910390a161050a826040518060400160405280601481526020017365786368616e6765466f724274634163726f737360601b815250610f31565b1561051a5761051a858488610f8a565b50506105266001606c55565b50505050565b6105346115b7565b806001600160a01b03811661055c5760405163d92e233d60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6105876115b7565b806001600160a01b0381166105af5760405163d92e233d60e01b815260040160405180910390fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6105da6115b7565b806001600160a01b0381166106025760405163d92e233d60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b61062d6115b7565b6106376000611616565b565b6106416115b7565b806001600160a01b0381166106695760405163d92e233d60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b603a546001600160a01b031690565b6106a36115b7565b806001600160a01b0381166106cb5760405163d92e233d60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6106f6610ed7565b6000806000806000806000808b8060200190518101906107169190611b36565b9750975097509750975097509750975060006107348d8c8c8f611668565b905060008811801561076b57506001600160a01b038082166000908152600660209081526040808320938d16835292905220548811155b6107875760405162461bcd60e51b8152600401610364906122c1565b6001600160a01b038082166000908152600660209081526040808320938d16835292905290812080548a92906107be9084906123f2565b9091555050604080516002808252606082018352600092602083019080368337019050509050888160008151811061080657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050868160018151811061083457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508260008151811061086157634e487b7160e01b600052603260045260246000fd5b602090810291909101015160015460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261089f929116908d90600401612295565b602060405180830381600087803b1580156108b957600080fd5b505af11580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f19190611e07565b50600180546040516344dd6aa560e01b81526001600160a01b03909116916344dd6aa591610933918c91869190899042908e908e908e90600090600401612201565b602060405180830381600087803b15801561094d57600080fd5b505af1158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190611fc0565b506000805460405163626885b560e11b81526001600160a01b039091169063c4d10b6a906109b79088906004016122ae565b60206040518083038186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190611b1a565b9050826001600160a01b03167f8fa5daae7a5c2fc114239650d841eda356c27403e56f9a5ca6f0e3f689286d758a8d8d8b8b8760018060009054906101000a90046001600160a01b03166001600160a01b031663930a60e88b6040518263ffffffff1660e01b8152600401610a7c91906120b4565b60206040518083038186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190611fc0565b610ad691906123f2565b8c604051610aeb9897969594939291906120c8565b60405180910390a250505050505050505050506105266001606c55565b610b106115b7565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b8b576040516001600160a01b038316908290600081818185875af1925050503d8060008114610b7e576040519150601f19603f3d011682016040523d82523d6000602084013e610b83565b606091505b505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90610bb99085908590600401612295565b602060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190611e07565b610c136115b7565b6001600160a01b038116610c785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610364565b610c8181611616565b50565b610c8c610ed7565b600080600086806020019051810190610ca59190611bff565b9250925092506000610cb98887878a611668565b9050600083118015610cf057506001600160a01b038082166000908152600660209081526040808320938816835292905220548311155b610d0c5760405162461bcd60e51b8152600401610364906122c1565b610d1881858585611797565b6001600160a01b03808216600090815260066020908152604080832093881683529290529081208054859290610d4f9084906123f2565b90915550506001606c555061052692505050565b600754610100900460ff1615808015610d835750600754600160ff909116105b80610d9d5750303b158015610d9d575060075460ff166001145b610e005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610364565b6007805460ff191660011790558015610e23576007805461ff0019166101001790555b610e2b61189a565b610e336118c9565b610e3b6118f8565b600080546001600160a01b038089166001600160a01b0319928316179092556001805488841690831617905560038054878416908316179055600480549286169290911691909117905560058290558015610b83576007805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6002606c541415610f2a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610364565b6002606c55565b600081604051602001610f449190612098565b6040516020818303038152906040528051906020012083604051602001610f6b9190612098565b6040516020818303038152906040528051906020012014905092915050565b610fd16040805161010081018252600080825260208201819052918101829052606080820181905260808201529060a0820190815260200160608152602001600081525090565b82806020019051810190610fe59190611ec8565b60e08b0181905260c08b0182905296985094965092949193909291886020810160408201606083016080840160a0850188600581111561103557634e487b7160e01b600052602160045260246000fd5b600581111561105457634e487b7160e01b600052602160045260246000fd5b905297909752969095529590945250506001600160a01b039384169052509116905260408051600280825260608201835260009260208301908036833701905050905084816000815181106110b957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508160400151816001815181106110eb57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050816060015160008151811061111c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160015460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261115a929116908990600401612295565b602060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac9190611e07565b506001805460208401516060850151608086015160a087015160c088015160e08901516040516344dd6aa560e01b81526001600160a01b03909716976344dd6aa59761120897968b969295909442949192909190600401612201565b602060405180830381600087803b15801561122257600080fd5b505af1925050508015611252575060408051601f3d908101601f1916820190925261124f91810190611fc0565b60015b6113ae57816060015160008151811061127b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160015460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926112ba92911690600090600401612295565b602060405180830381600087803b1580156112d457600080fd5b505af11580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c9190611e07565b5081516001600160a01b039081166000908152600660209081526040808320938716835292905290812080548792906113469084906123da565b909155505081516020830151608084015160a085015160608601516040516001600160a01b03909516947f2956c7201c919e433f35527008c29ca742eb150853d79f5cc6546e8c3bc046af946113a19490938a938d9361213b565b60405180910390a2610415565b5081600001516001600160a01b03167f8fa5daae7a5c2fc114239650d841eda356c27403e56f9a5ca6f0e3f689286d758360200151858886608001518760a0015160008054906101000a90046001600160a01b03166001600160a01b031663c4d10b6a8a60c001516040518263ffffffff1660e01b815260040161143291906122ae565b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190611b1a565b6001805460005460c08d015160405163626885b560e11b81526001600160a01b039384169363930a60e893169163c4d10b6a916114c291906004016122ae565b60206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190611b1a565b6040518263ffffffff1660e01b815260040161152e91906120b4565b60206040518083038186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e9190611fc0565b61158891906123f2565b8a606001516040516115a19897969594939291906120c8565b60405180910390a25050505050565b6001606c55565b336115c061068c565b6001600160a01b0316146106375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610364565b603a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080858051906020012090506000816040516020016116b391907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa15801561171e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661178c5760405162461bcd60e51b815260206004820152602260248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20496e76616c69642073604482015261696760f01b6064820152608401610364565b979650505050505050565b60035460405163095ea7b360e01b81526060916001600160a01b038087169263095ea7b3926117cc9216908790600401612295565b602060405180830381600087803b1580156117e657600080fd5b505af11580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e9190611e07565b50600354600554604051631186ec3360e01b81526001600160a01b0390921691631186ec33916118619189918991899190899042908a906000199060040161219a565b600060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050505050505050565b600754610100900460ff166118c15760405162461bcd60e51b815260040161036490612303565b610637611927565b600754610100900460ff166118f05760405162461bcd60e51b815260040161036490612303565b610637611957565b600754610100900460ff1661191f5760405162461bcd60e51b815260040161036490612303565b61063761197e565b600754610100900460ff1661194e5760405162461bcd60e51b815260040161036490612303565b61063733611616565b600754610100900460ff166115b05760405162461bcd60e51b815260040161036490612303565b600754610100900460ff166119a55760405162461bcd60e51b815260040161036490612303565b609e805460ff19169055565b80516119bc81612461565b919050565b600082601f8301126119d1578081fd5b815160206001600160401b038211156119ec576119ec61244b565b8160051b6119fb828201612383565b838152828101908684018388018501891015611a15578687fd5b8693505b85841015611a40578051611a2c81612461565b835260019390930192918401918401611a19565b50979650505050505050565b600082601f830112611a5c578081fd5b8135611a6f611a6a826123b3565b612383565b818152846020838601011115611a83578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611aad578081fd5b8151611abb611a6a826123b3565b818152846020838601011115611acf578283fd5b611ae0826020830160208701612409565b949350505050565b8051600681106119bc57600080fd5b600060208284031215611b08578081fd5b8135611b1381612461565b9392505050565b600060208284031215611b2b578081fd5b8151611b1381612461565b600080600080600080600080610100898b031215611b52578384fd5b611b5b896119b1565b975060208901519650611b7060408a016119b1565b95506060890151945060808901516001600160401b0380821115611b92578586fd5b611b9e8c838d01611a9d565b9550611bac60a08c01611ae8565b945060c08b0151915080821115611bc1578384fd5b611bcd8c838d01611a9d565b935060e08b0151915080821115611be2578283fd5b50611bef8b828c016119c1565b9150509295985092959890939650565b600080600060608486031215611c13578283fd5b8351611c1e81612461565b809350506020840151915060408401518060070b8114611c3c578182fd5b809150509250925092565b60008060408385031215611c59578182fd5b8235611c6481612461565b91506020830135611c7481612461565b809150509250929050565b600080600080600060a08688031215611c96578081fd5b8535611ca181612461565b94506020860135611cb181612461565b93506040860135611cc181612461565b92506060860135611cd181612461565b949793965091946080013592915050565b600080600060608486031215611cf6578081fd5b8335611d0181612461565b92506020840135611d1181612461565b929592945050506040919091013590565b60008060008060808587031215611d37578182fd5b8435611d4281612461565b9350602085013592506040850135611d5981612461565b915060608501356001600160401b03811115611d73578182fd5b611d7f87828801611a4c565b91505092959194509250565b600080600080600060a08688031215611da2578283fd5b8535611dad81612461565b9450602086013593506040860135611dc481612476565b92506060860135611dd481612461565b915060808601356001600160401b03811115611dee578182fd5b611dfa88828901611a4c565b9150509295509295909350565b600060208284031215611e18578081fd5b8151611b1381612476565b60008060008060808587031215611e38578182fd5b84356001600160401b03811115611e4d578283fd5b611e5987828801611a4c565b945050602085013560ff81168114611e6f578283fd5b93969395505050506040820135916060013590565b60008060408385031215611e96578182fd5b82516001600160401b03811115611eab578283fd5b611eb785828601611a9d565b925050602083015190509250929050565b6000806000806000806000806000806101408b8d031215611ee7578384fd5b8a516001600160401b0380821115611efd578586fd5b611f098e838f01611a9d565b9b5060208d01519a50611f1e60408e016119b1565b9950611f2c60608e016119b1565b985060808d0151975060a08d0151915080821115611f48578586fd5b611f548e838f016119c1565b965060c08d0151915080821115611f69578586fd5b611f758e838f01611a9d565b9550611f8360e08e01611ae8565b94506101008d0151915080821115611f99578384fd5b50611fa68d828e01611a9d565b9250506101208b015190509295989b9194979a5092959850565b600060208284031215611fd1578081fd5b5051919050565b6000815180845260208085019450808401835b838110156120105781516001600160a01b031687529582019590820190600101611feb565b509495945050505050565b6000815180845260208085019450808401835b838110156120105781518752958201959082019060010161202e565b60008151808452612062816020860160208601612409565b601f01601f19169290920160200192915050565b6006811061209457634e487b7160e01b600052602160045260246000fd5b9052565b600082516120aa818460208701612409565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038981168252888116602083015260408201889052610100606083018190526000916120fd8483018a61204a565b915061210c6080850189612076565b861660a084015260c0830185905282810360e084015261212c8185611fd8565b9b9a5050505050505050505050565b6001600160a01b038781168252861660208201526040810185905260c06060820181905260009061216e9083018661204a565b61217b6080840186612076565b82810360a084015261218d8185611fd8565b9998505050505050505050565b6001600160a01b038981168252881660208201526040810187905260608101869052600785900b608082015263ffffffff841660a082015261010060c082018190526000906121eb8382018661204a565b9150508260e08301529998505050505050505050565b6001600160a01b038a168152610120602082018190526000906122268382018c61201b565b905089151560408401528281036060840152612242818a611fd8565b905087608084015282810360a084015261225c818861204a565b905061226b60c0840187612076565b82810360e084015261227d818661204a565b915050826101008301529a9950505050505050505050565b6001600160a01b03929092168252602082015260400190565b602081526000611b13602083018461204a565b60208082526022908201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a206c6f772062616c616e604082015261636560f01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b838152606060208201526000612367606083018561204a565b8281036040840152612379818561204a565b9695505050505050565b604051601f8201601f191681016001600160401b03811182821017156123ab576123ab61244b565b604052919050565b60006001600160401b038211156123cc576123cc61244b565b50601f01601f191660200190565b600082198211156123ed576123ed612435565b500190565b60008282101561240457612404612435565b500390565b60005b8381101561242457818101518382015260200161240c565b838111156105265750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8157600080fd5b8015158114610c8157600080fdfea26469706673582212207f7f9a2eb0751be81fb2ad40af064664bbeca6a18dbe7df2f3fe65625005894e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011d5760003560e01c80630ea1f938146101225780631544298e14610137578063292c1d9214610153578063296079f1146101735780633a5be8cb146101865780633f8c6ae0146101995780634d6e8f9d146101ac57806359841888146101bf5780635c975abb146101d257806361be10f2146101e8578063715018a6146101fb5780637753f47b146102035780637c5a4ccb1461021e57806384308271146102495780638da5cb5b1461025c5780639d28a64414610264578063b4af0a2714610277578063c67684eb1461028a578063cf2568541461029d578063e63ea408146102b0578063f2fde38b146102c3578063f374be5f146102d6578063f7013ef6146102e9575b600080fd5b610135610130366004611d8b565b6102fc565b005b61014060055481565b6040519081526020015b60405180910390f35b600354610166906001600160a01b031681565b60405161014a91906120b4565b600054610166906001600160a01b031681565b610135610194366004611d22565b61041c565b600154610166906001600160a01b031681565b6101356101ba366004611af7565b61052c565b6101356101cd366004611af7565b61057f565b609e5460ff16604051901515815260200161014a565b6101356101f6366004611af7565b6105d2565b610135610625565b61016673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61014061022c366004611c47565b600660209081526000928352604080842090915290825290205481565b610135610257366004611af7565b610639565b61016661068c565b610135610272366004611af7565b61069b565b600254610166906001600160a01b031681565b600454610166906001600160a01b031681565b6101356102ab366004611e23565b6106ee565b6101356102be366004611ce2565b610b08565b6101356102d1366004611af7565b610c0b565b6101356102e4366004611e23565b610c84565b6101356102f7366004611c7f565b610d63565b610304610ed7565b6003546001600160a01b0316331461036d5760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a206e6f74206163726f736044820152607360f81b60648201526084015b60405180910390fd5b600080828060200190518101906103849190611e84565b915091507ff457ed8068d0e1536c9c3ee16b7aa6f7f3558fd38686e45061863a066bf8aa0d8183856040516103bb9392919061234e565b60405180910390a16103f9826040518060400160405280601481526020017365786368616e6765466f724274634163726f737360601b815250610f31565b1561040957610409868489610f8a565b50506104156001606c55565b5050505050565b610424610ed7565b6004546001600160a01b0316331461047e5760405162461bcd60e51b815260206004820181905260248201527f506f6c79436f6e6e6563746f724c6f6769633a206e6f74206163726f737356336044820152606401610364565b600080828060200190518101906104959190611e84565b915091507ff457ed8068d0e1536c9c3ee16b7aa6f7f3558fd38686e45061863a066bf8aa0d8183856040516104cc9392919061234e565b60405180910390a161050a826040518060400160405280601481526020017365786368616e6765466f724274634163726f737360601b815250610f31565b1561051a5761051a858488610f8a565b50506105266001606c55565b50505050565b6105346115b7565b806001600160a01b03811661055c5760405163d92e233d60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6105876115b7565b806001600160a01b0381166105af5760405163d92e233d60e01b815260040160405180910390fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6105da6115b7565b806001600160a01b0381166106025760405163d92e233d60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b61062d6115b7565b6106376000611616565b565b6106416115b7565b806001600160a01b0381166106695760405163d92e233d60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b603a546001600160a01b031690565b6106a36115b7565b806001600160a01b0381166106cb5760405163d92e233d60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6106f6610ed7565b6000806000806000806000808b8060200190518101906107169190611b36565b9750975097509750975097509750975060006107348d8c8c8f611668565b905060008811801561076b57506001600160a01b038082166000908152600660209081526040808320938d16835292905220548811155b6107875760405162461bcd60e51b8152600401610364906122c1565b6001600160a01b038082166000908152600660209081526040808320938d16835292905290812080548a92906107be9084906123f2565b9091555050604080516002808252606082018352600092602083019080368337019050509050888160008151811061080657634e487b7160e01b600052603260045260246000fd5b602002602001018181525050868160018151811061083457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508260008151811061086157634e487b7160e01b600052603260045260246000fd5b602090810291909101015160015460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261089f929116908d90600401612295565b602060405180830381600087803b1580156108b957600080fd5b505af11580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f19190611e07565b50600180546040516344dd6aa560e01b81526001600160a01b03909116916344dd6aa591610933918c91869190899042908e908e908e90600090600401612201565b602060405180830381600087803b15801561094d57600080fd5b505af1158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190611fc0565b506000805460405163626885b560e11b81526001600160a01b039091169063c4d10b6a906109b79088906004016122ae565b60206040518083038186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190611b1a565b9050826001600160a01b03167f8fa5daae7a5c2fc114239650d841eda356c27403e56f9a5ca6f0e3f689286d758a8d8d8b8b8760018060009054906101000a90046001600160a01b03166001600160a01b031663930a60e88b6040518263ffffffff1660e01b8152600401610a7c91906120b4565b60206040518083038186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190611fc0565b610ad691906123f2565b8c604051610aeb9897969594939291906120c8565b60405180910390a250505050505050505050506105266001606c55565b610b106115b7565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b8b576040516001600160a01b038316908290600081818185875af1925050503d8060008114610b7e576040519150601f19603f3d011682016040523d82523d6000602084013e610b83565b606091505b505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90610bb99085908590600401612295565b602060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190611e07565b610c136115b7565b6001600160a01b038116610c785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610364565b610c8181611616565b50565b610c8c610ed7565b600080600086806020019051810190610ca59190611bff565b9250925092506000610cb98887878a611668565b9050600083118015610cf057506001600160a01b038082166000908152600660209081526040808320938816835292905220548311155b610d0c5760405162461bcd60e51b8152600401610364906122c1565b610d1881858585611797565b6001600160a01b03808216600090815260066020908152604080832093881683529290529081208054859290610d4f9084906123f2565b90915550506001606c555061052692505050565b600754610100900460ff1615808015610d835750600754600160ff909116105b80610d9d5750303b158015610d9d575060075460ff166001145b610e005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610364565b6007805460ff191660011790558015610e23576007805461ff0019166101001790555b610e2b61189a565b610e336118c9565b610e3b6118f8565b600080546001600160a01b038089166001600160a01b0319928316179092556001805488841690831617905560038054878416908316179055600480549286169290911691909117905560058290558015610b83576007805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6002606c541415610f2a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610364565b6002606c55565b600081604051602001610f449190612098565b6040516020818303038152906040528051906020012083604051602001610f6b9190612098565b6040516020818303038152906040528051906020012014905092915050565b610fd16040805161010081018252600080825260208201819052918101829052606080820181905260808201529060a0820190815260200160608152602001600081525090565b82806020019051810190610fe59190611ec8565b60e08b0181905260c08b0182905296985094965092949193909291886020810160408201606083016080840160a0850188600581111561103557634e487b7160e01b600052602160045260246000fd5b600581111561105457634e487b7160e01b600052602160045260246000fd5b905297909752969095529590945250506001600160a01b039384169052509116905260408051600280825260608201835260009260208301908036833701905050905084816000815181106110b957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508160400151816001815181106110eb57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050816060015160008151811061111c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160015460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261115a929116908990600401612295565b602060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac9190611e07565b506001805460208401516060850151608086015160a087015160c088015160e08901516040516344dd6aa560e01b81526001600160a01b03909716976344dd6aa59761120897968b969295909442949192909190600401612201565b602060405180830381600087803b15801561122257600080fd5b505af1925050508015611252575060408051601f3d908101601f1916820190925261124f91810190611fc0565b60015b6113ae57816060015160008151811061127b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160015460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926112ba92911690600090600401612295565b602060405180830381600087803b1580156112d457600080fd5b505af11580156112e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130c9190611e07565b5081516001600160a01b039081166000908152600660209081526040808320938716835292905290812080548792906113469084906123da565b909155505081516020830151608084015160a085015160608601516040516001600160a01b03909516947f2956c7201c919e433f35527008c29ca742eb150853d79f5cc6546e8c3bc046af946113a19490938a938d9361213b565b60405180910390a2610415565b5081600001516001600160a01b03167f8fa5daae7a5c2fc114239650d841eda356c27403e56f9a5ca6f0e3f689286d758360200151858886608001518760a0015160008054906101000a90046001600160a01b03166001600160a01b031663c4d10b6a8a60c001516040518263ffffffff1660e01b815260040161143291906122ae565b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190611b1a565b6001805460005460c08d015160405163626885b560e11b81526001600160a01b039384169363930a60e893169163c4d10b6a916114c291906004016122ae565b60206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190611b1a565b6040518263ffffffff1660e01b815260040161152e91906120b4565b60206040518083038186803b15801561154657600080fd5b505afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e9190611fc0565b61158891906123f2565b8a606001516040516115a19897969594939291906120c8565b60405180910390a25050505050565b6001606c55565b336115c061068c565b6001600160a01b0316146106375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610364565b603a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080858051906020012090506000816040516020016116b391907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa15801561171e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661178c5760405162461bcd60e51b815260206004820152602260248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20496e76616c69642073604482015261696760f01b6064820152608401610364565b979650505050505050565b60035460405163095ea7b360e01b81526060916001600160a01b038087169263095ea7b3926117cc9216908790600401612295565b602060405180830381600087803b1580156117e657600080fd5b505af11580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e9190611e07565b50600354600554604051631186ec3360e01b81526001600160a01b0390921691631186ec33916118619189918991899190899042908a906000199060040161219a565b600060405180830381600087803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b505050505050505050565b600754610100900460ff166118c15760405162461bcd60e51b815260040161036490612303565b610637611927565b600754610100900460ff166118f05760405162461bcd60e51b815260040161036490612303565b610637611957565b600754610100900460ff1661191f5760405162461bcd60e51b815260040161036490612303565b61063761197e565b600754610100900460ff1661194e5760405162461bcd60e51b815260040161036490612303565b61063733611616565b600754610100900460ff166115b05760405162461bcd60e51b815260040161036490612303565b600754610100900460ff166119a55760405162461bcd60e51b815260040161036490612303565b609e805460ff19169055565b80516119bc81612461565b919050565b600082601f8301126119d1578081fd5b815160206001600160401b038211156119ec576119ec61244b565b8160051b6119fb828201612383565b838152828101908684018388018501891015611a15578687fd5b8693505b85841015611a40578051611a2c81612461565b835260019390930192918401918401611a19565b50979650505050505050565b600082601f830112611a5c578081fd5b8135611a6f611a6a826123b3565b612383565b818152846020838601011115611a83578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611aad578081fd5b8151611abb611a6a826123b3565b818152846020838601011115611acf578283fd5b611ae0826020830160208701612409565b949350505050565b8051600681106119bc57600080fd5b600060208284031215611b08578081fd5b8135611b1381612461565b9392505050565b600060208284031215611b2b578081fd5b8151611b1381612461565b600080600080600080600080610100898b031215611b52578384fd5b611b5b896119b1565b975060208901519650611b7060408a016119b1565b95506060890151945060808901516001600160401b0380821115611b92578586fd5b611b9e8c838d01611a9d565b9550611bac60a08c01611ae8565b945060c08b0151915080821115611bc1578384fd5b611bcd8c838d01611a9d565b935060e08b0151915080821115611be2578283fd5b50611bef8b828c016119c1565b9150509295985092959890939650565b600080600060608486031215611c13578283fd5b8351611c1e81612461565b809350506020840151915060408401518060070b8114611c3c578182fd5b809150509250925092565b60008060408385031215611c59578182fd5b8235611c6481612461565b91506020830135611c7481612461565b809150509250929050565b600080600080600060a08688031215611c96578081fd5b8535611ca181612461565b94506020860135611cb181612461565b93506040860135611cc181612461565b92506060860135611cd181612461565b949793965091946080013592915050565b600080600060608486031215611cf6578081fd5b8335611d0181612461565b92506020840135611d1181612461565b929592945050506040919091013590565b60008060008060808587031215611d37578182fd5b8435611d4281612461565b9350602085013592506040850135611d5981612461565b915060608501356001600160401b03811115611d73578182fd5b611d7f87828801611a4c565b91505092959194509250565b600080600080600060a08688031215611da2578283fd5b8535611dad81612461565b9450602086013593506040860135611dc481612476565b92506060860135611dd481612461565b915060808601356001600160401b03811115611dee578182fd5b611dfa88828901611a4c565b9150509295509295909350565b600060208284031215611e18578081fd5b8151611b1381612476565b60008060008060808587031215611e38578182fd5b84356001600160401b03811115611e4d578283fd5b611e5987828801611a4c565b945050602085013560ff81168114611e6f578283fd5b93969395505050506040820135916060013590565b60008060408385031215611e96578182fd5b82516001600160401b03811115611eab578283fd5b611eb785828601611a9d565b925050602083015190509250929050565b6000806000806000806000806000806101408b8d031215611ee7578384fd5b8a516001600160401b0380821115611efd578586fd5b611f098e838f01611a9d565b9b5060208d01519a50611f1e60408e016119b1565b9950611f2c60608e016119b1565b985060808d0151975060a08d0151915080821115611f48578586fd5b611f548e838f016119c1565b965060c08d0151915080821115611f69578586fd5b611f758e838f01611a9d565b9550611f8360e08e01611ae8565b94506101008d0151915080821115611f99578384fd5b50611fa68d828e01611a9d565b9250506101208b015190509295989b9194979a5092959850565b600060208284031215611fd1578081fd5b5051919050565b6000815180845260208085019450808401835b838110156120105781516001600160a01b031687529582019590820190600101611feb565b509495945050505050565b6000815180845260208085019450808401835b838110156120105781518752958201959082019060010161202e565b60008151808452612062816020860160208601612409565b601f01601f19169290920160200192915050565b6006811061209457634e487b7160e01b600052602160045260246000fd5b9052565b600082516120aa818460208701612409565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038981168252888116602083015260408201889052610100606083018190526000916120fd8483018a61204a565b915061210c6080850189612076565b861660a084015260c0830185905282810360e084015261212c8185611fd8565b9b9a5050505050505050505050565b6001600160a01b038781168252861660208201526040810185905260c06060820181905260009061216e9083018661204a565b61217b6080840186612076565b82810360a084015261218d8185611fd8565b9998505050505050505050565b6001600160a01b038981168252881660208201526040810187905260608101869052600785900b608082015263ffffffff841660a082015261010060c082018190526000906121eb8382018661204a565b9150508260e08301529998505050505050505050565b6001600160a01b038a168152610120602082018190526000906122268382018c61201b565b905089151560408401528281036060840152612242818a611fd8565b905087608084015282810360a084015261225c818861204a565b905061226b60c0840187612076565b82810360e084015261227d818661204a565b915050826101008301529a9950505050505050505050565b6001600160a01b03929092168252602082015260400190565b602081526000611b13602083018461204a565b60208082526022908201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a206c6f772062616c616e604082015261636560f01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b838152606060208201526000612367606083018561204a565b8281036040840152612379818561204a565b9695505050505050565b604051601f8201601f191681016001600160401b03811182821017156123ab576123ab61244b565b604052919050565b60006001600160401b038211156123cc576123cc61244b565b50601f01601f191660200190565b600082198211156123ed576123ed612435565b500190565b60008282101561240457612404612435565b500390565b60005b8381101561242457818101518382015260200161240c565b838111156105265750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c8157600080fd5b8015158114610c8157600080fdfea26469706673582212207f7f9a2eb0751be81fb2ad40af064664bbeca6a18dbe7df2f3fe65625005894e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address,address,uint256)": {
        "details": "Only owner can call this"
      },
      "handleAcrossMessage(address,uint256,bool,address,bytes)": {
        "details": "Only Across can call this. Will be reverted if tokens have not been received fully yet.",
        "params": {
          "_amount": "Amount received by the contract (after reducing fees)",
          "_fillCompleted": "True if all tokens have been received",
          "_message": "that user sent (from Ethereum)",
          "_relayer": "Addres of relayer who submitted the request",
          "_tokenSent": "Address of exchanging token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)": {
        "details": "User signs a message for retrying its request",
        "params": {
          "_message": "The signed message",
          "_r": "Signature r",
          "_s": "Signature s",
          "_v": "Signature v"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFundsToEth(bytes,uint8,bytes32,bytes32)": {
        "details": "User signs a message requesting for withdrawing a bid",
        "params": {
          "_message": "The signed message",
          "_r": "Signature r",
          "_s": "Signature s",
          "_v": "Signature v"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address,address,uint256)": {
        "notice": "Withdraws tokens in the emergency case"
      },
      "handleAcrossMessage(address,uint256,bool,address,bytes)": {
        "notice": "Processes requests coming from Ethereum (using Across)"
      },
      "handleV3AcrossMessage(address,uint256,address,bytes)": {
        "notice": "Process requests coming from Ethereum (using Across V3)"
      },
      "retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)": {
        "notice": "Retry failed exchange and burn requests"
      },
      "setAcross(address)": {
        "notice": "Setter for Across"
      },
      "setAcrossV3(address)": {
        "notice": "Setter for AcrossV3"
      },
      "setBurnRouterProxy(address)": {
        "notice": "Setter for BurnRouterProxy"
      },
      "setEthConnectorProxy(address)": {
        "notice": "Setter for EthConnectorProxy"
      },
      "setLockersProxy(address)": {
        "notice": "Setter for LockersProxy"
      },
      "withdrawFundsToEth(bytes,uint8,bytes32,bytes32)": {
        "notice": "Withdraws user's bid"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17914,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "lockersProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17916,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "burnRouterProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17918,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "ethConnectorProxy",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17920,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "across",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17922,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "acrossV3",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17924,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "sourceChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 17930,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "failedReqs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 396,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 399,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 1161,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 268,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      },
      {
        "astId": 388,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 699,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_status",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 757,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 579,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_paused",
        "offset": 0,
        "slot": "158",
        "type": "t_bool"
      },
      {
        "astId": 684,
        "contract": "contracts/routers/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}