{
  "address": "0xF48FE44e0B1B8F3119Ac437c352555e6a0A2805B",
  "abi": [],
  "transactionHash": "0xf1b735f9cb49c938d8630acf6fd7ca51e35f37a09ea6a7a767508a00d5f74f19",
  "receipt": {
    "to": null,
    "from": "0x4234c3aBeA751301579448594D3EA2398452a982",
    "contractAddress": "0xF48FE44e0B1B8F3119Ac437c352555e6a0A2805B",
    "transactionIndex": 0,
    "gasUsed": "3883783",
    "logsBloom": "0x
    "blockHash": "0x4749258d7d553a11e1ee55c7403bcd1fc881eb909dcd29704fd486cd8e5b7170",
    "transactionHash": "0xf1b735f9cb49c938d8630acf6fd7ca51e35f37a09ea6a7a767508a00d5f74f19",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10878521,
        "transactionHash": "0xf1b735f9cb49c938d8630acf6fd7ca51e35f37a09ea6a7a767508a00d5f74f19",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004234c3abea751301579448594d3ea2398452a982",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018257d77acaa800000000000000000000000000000000000000000000000003ff5c79bc26041a8b00000000000000000000000000000000000000000000033eb058ada4eda9be2a000000000000000000000000000000000000000000000003fdda21e4ab39728b00000000000000000000000000000000000000000000033eb1db057c6874662a",
        "logIndex": 0,
        "blockHash": "0x4749258d7d553a11e1ee55c7403bcd1fc881eb909dcd29704fd486cd8e5b7170"
      }
    ],
    "blockNumber": 10878521,
    "cumulativeGasUsed": "3883783",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4fbf7721d8a429611fb54ec0762f3471",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkTx(uint256,address,bytes4,bytes,bytes,bytes4,uint256,bytes,uint256)\":{\"notice\":\"Check tx inclusion proof\"},\"unwrapHelper(address,uint256,uint256,IRuneRouter.runeUnwrapRequest[] storage,mapping(uint256 => IRuneRouter.thirdParty) storage,uint256,uint256,bytes,ScriptTypes)\":{\"notice\":\"Save unwrap request after checking user script validity and         return fees and bunrt amount\"},\"wrapHelper(uint256,bytes,bytes32,mapping(bytes32 => IRuneRouter.runeWrapRequest) storage,mapping(uint256 => address) storage,mapping(uint256 => IRuneRouter.thirdParty) storage,uint256,uint256)\":{\"notice\":\"Extract request info and store it\"}},\"notice\":\"Helper library for Brc20Router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rune_router/RuneRouterLib.sol\":\"RuneRouterLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        // Validates Vin length\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64 _value) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n        output = indexVout(voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n        \\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n        \\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength. \\n            // note: script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 77 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0x1f25b83df29185010e565471c841e0456d7c76e0c02fd0d7fe6fe4e427b37d44\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x51c24c7c86620e39b732ba1b0de62c314842541748905323df7600a2797a2bd4\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x8f4b9c9ad505ba1184d4e2c6694d725eacaf19c42942075bae2b1608bdbd9ef5\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x65d6ce283fb19a20a37abd09247371c2362932c49a6b40dafab022c2f1153710\",\"license\":\"MIT\"},\"contracts/erc20/WRuneLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IRune.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract WRuneLogic is IRune, ERC20Upgradeable, \\n    OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n \\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"WRuneLogic: not minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"WRuneLogic: not burner\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"WRuneLogic: zero value\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    uint8 public decimal;\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimal\\n    ) public initializer {\\n        ERC20Upgradeable.__ERC20_init(\\n            _name,\\n            _symbol\\n        );\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        decimal = _decimal;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    function decimals() public view virtual override(ERC20Upgradeable, IRune) returns (uint8) {\\n        return decimal;\\n    }\\n\\n    /// @notice Return true if account is minter \\n    function isMinter(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"WRuneLogic: zero address\\\");\\n        return minters[account];\\n    }\\n\\n    /// @notice Return true if account is burner \\n    function isBurner(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"WRuneLogic: zero address\\\");\\n        return burners[account];\\n    }\\n\\n    /// @notice Add a minter\\n    function addMinter(address account) external override onlyOwner {\\n        require(!isMinter(account), \\\"WRuneLogic: already minter\\\");\\n        minters[account] = true;\\n        emit MinterAdded(account);\\n    }\\n\\n    /// @notice Remover a minter\\n    function removeMinter(address account) external override onlyOwner {\\n        require(isMinter(account), \\\"WRuneLogic: not minter\\\");\\n        minters[account] = false;\\n        emit MinterRemoved(account);\\n    }\\n\\n    /// @notice Add a burner\\n    function addBurner(address account) external override onlyOwner {\\n        require(!isBurner(account), \\\"WRuneLogic: already burner\\\");\\n        burners[account] = true;\\n        emit BurnerAdded(account);\\n    }\\n\\n    /// @notice Remover a burner\\n    function removeBurner(address account) external override onlyOwner {\\n        require(isBurner(account), \\\"WRuneLogic: not burner\\\");\\n        burners[account] = false;\\n        emit BurnerRemoved(account);\\n    }\\n\\n    /// @notice Burn tokens of msg.sender\\n    /// @dev Only burners can call this\\n    /// @param _amount of burnt tokens\\n    function burn(uint _amount) external nonReentrant onlyBurner override returns (bool) {\\n        _burn(_msgSender(), _amount);\\n        emit Burn(_msgSender(), _msgSender(), _amount);\\n        return true;\\n    }\\n\\n    /// @notice Mint tokens for _receiver\\n    /// @dev Only minters can call this\\n    /// @param _receiver Address of token receiver\\n    /// @param _amount of minted tokens\\n    function mint(address _receiver, uint _amount) external nonReentrant onlyMinter override returns (bool) {\\n        _mint(_receiver, _amount);\\n        emit Mint(_msgSender(), _receiver, _amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x0607a6854755eddea089ca4ca2433431bbde1c5a0def8b86621d786d083867dd\",\"license\":\"MIT\"},\"contracts/erc20/WRuneProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract WRuneProxy is TransparentUpgradeableProxy {\\n\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n}\",\"keccak256\":\"0x6789d68c850ba4eaf5837497f101f581cc9148ba6710b942b1ecd0fae5e39814\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IRune.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IRune is IERC20Upgradeable {\\n\\n    // Events\\n    \\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    // Read-only functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // State-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n}\",\"keccak256\":\"0x7657c53516a6e34b21f246646d17b0e4c832a4fa2005b229587775f7274e36b0\",\"license\":\"MIT\"},\"contracts/rune_router/RuneRouterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./RuneRouterStorage.sol\\\";\\nimport \\\"../erc20/WRuneProxy.sol\\\";\\nimport \\\"../erc20/WRuneLogic.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @notice Helper library for Brc20Router\\nlibrary RuneRouterLib {\\n    function addRuneHelper() external returns (address) {\\n        // Deploy upgradable contract\\n        WRuneLogic _wRuneLogic = new WRuneLogic();\\n        return address(_wRuneLogic);\\n    }\\n\\n    /// @notice Check tx inclusion proof\\n    function checkTx(\\n        uint _startingBlockNumber,\\n        address _relay,\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index\\n    ) external returns (bytes32 _txId) {\\n        // Basic checks\\n        require(\\n            _blockNumber >= _startingBlockNumber,\\n            \\\"RuneRouterLib: old proof\\\"\\n        );\\n        require(_locktime == bytes4(0), \\\"RuneRouterLib: non-zero locktime\\\");\\n\\n        // Find txId on Bitcoin\\n        _txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n\\n        // Check tx inclusion on Bitcoin\\n        require(\\n            _isConfirmed(\\n                _relay,\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"RuneRouterLib: not finalized\\\"\\n        );\\n    }\\n\\n    /// @notice Extract request info and store it\\n    function wrapHelper(\\n        uint _chainId,\\n        bytes memory _vout,\\n        bytes32 _txId,\\n        mapping(bytes32 => RuneRouterStorage.runeWrapRequest)\\n            storage _runeWrapRequests,\\n        mapping(uint => address) storage _supportedRunes,\\n        mapping(uint => RuneRouterStorage.thirdParty) storage _thirdParties,\\n        uint _protocolPercentageFee,\\n        uint _lockerPercentageFee\\n    )\\n        external\\n        returns (\\n            uint _remainingAmount,\\n            RuneRouterStorage.fees memory _fee,\\n            address _thirdPartyAddress,\\n            address _wrappedRune\\n        )\\n    {\\n        require(\\n            !_runeWrapRequests[_txId].isUsed,\\n            \\\"RuneRouterLib: already used\\\"\\n        );\\n\\n        // Extract OP_RETURN output\\n        RuneRouterStorage.runeWrapRequest memory request;\\n\\n        (\\n            ,\\n            // Value\\n            bytes memory requestData\\n        ) = BitcoinHelper.parseValueAndDataHavingLockingScriptSmallPayload(\\n                _vout,\\n                \\\"0x\\\"\\n            );\\n\\n        // 41 for wrap, 74 for wrapAndSwap\\n        require(\\n            requestData.length == 41 || requestData.length == 74,\\n            \\\"RuneRouterLib: invalid len\\\"\\n        );\\n\\n        /* \\n            OP_RETURN data is as follow:\\n            1) chainId, 2 byte: max 65535 chains\\n            2) appId, 1 byte: max 256 apps\\n            3) tokenId, 4 byte: max 4294967296 tokens\\n            4) inputAmount, 13 byte: max 10^30 (= 1T * 10^18)\\n            5) recipientAddress, 20 byte: EVM account\\n            6) thirdPartyId, 1 byte: max 256 third party\\n            TOTAL = 41 BYTE (WRAP)\\n            7) outputToken, 20 byte: token address\\n            8) outputAmount, 13 byte: max 10^30 (= 1T * 10^18)\\n            TOTAL = 74 BYTE (WRAP & EXCHANGE)\\n        */\\n        request.isUsed = true;\\n        request.chainId = _parseChainId(requestData);\\n        request.appId = _parseAppId(requestData);\\n        request.tokenId = _parseTokenId(requestData);\\n        request.inputAmount = _parseInputAmount(requestData);\\n        request.recipientAddress = _parseRecipientAddress(requestData);\\n        request.thirdPartyId = _parseThirdPartyId(requestData);\\n\\n        _thirdPartyAddress = _thirdParties[request.thirdPartyId]\\n            .thirdPartyAddress;\\n\\n        if (requestData.length == 41) {\\n            require(request.appId == 0, \\\"RuneRouterLib: wrong app id\\\");\\n        } else {\\n            require(request.appId != 0, \\\"RuneRouterLib: wrong app id\\\");\\n            request.outputToken = _parseOutputToken(requestData);\\n            request.outputAmount = _parseOutputAmount(requestData);\\n        }\\n\\n        // Some checks:\\n        require(request.inputAmount > 0, \\\"RuneRouterLib: zero input\\\");\\n        require(request.chainId == _chainId, \\\"RuneRouterLib: wrong chain\\\");\\n\\n        _wrappedRune = _supportedRunes[request.tokenId];\\n        require(_wrappedRune != address(0), \\\"RuneRouterLib: not supported\\\");\\n        request.inputToken = _wrappedRune;\\n\\n        uint inputAmount = request.inputAmount;\\n        _fee.protocolFee = (inputAmount * _protocolPercentageFee) / 10000;\\n        _fee.lockerFee = (inputAmount * _lockerPercentageFee) / 10000;\\n        _fee.thirdPartyFee =\\n            (inputAmount * _thirdParties[request.thirdPartyId].thirdPartyFee) /\\n            10000;\\n        _remainingAmount =\\n            inputAmount -\\n            _fee.protocolFee -\\n            _fee.lockerFee -\\n            _fee.thirdPartyFee;\\n\\n        request.fee = _fee.protocolFee + _fee.lockerFee + _fee.thirdPartyFee;\\n\\n        // Save the request\\n        _runeWrapRequests[_txId] = request;\\n    }\\n\\n    /// @notice Save unwrap request after checking user script validity and\\n    ///         return fees and bunrt amount\\n    function unwrapHelper(\\n        address _user,\\n        uint _protocolPercentageFee,\\n        uint _lockerPercentageFee,\\n        RuneRouterStorage.runeUnwrapRequest[] storage _runeUnwrapRequests,\\n        mapping(uint => RuneRouterStorage.thirdParty) storage _thirdParties,\\n        uint _thirdPartyId,\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType\\n    )\\n        external\\n        returns (\\n            RuneRouterStorage.fees memory _fee,\\n            address _thirdPartyAddress,\\n            uint _remainingAmount\\n        )\\n    {\\n        _thirdPartyAddress = _thirdParties[_thirdPartyId].thirdPartyAddress;\\n\\n        // Find locker and protocol fee\\n        _fee.protocolFee = (_amount * _protocolPercentageFee) / 10000;\\n        _fee.lockerFee = (_amount * _lockerPercentageFee) / 10000;\\n        _fee.thirdPartyFee =\\n            (_amount * _thirdParties[_thirdPartyId].thirdPartyFee) /\\n            10000;\\n\\n        _remainingAmount =\\n            _amount -\\n            _fee.protocolFee -\\n            _fee.lockerFee -\\n            _fee.thirdPartyFee;\\n        require(_remainingAmount > 0, \\\"RuneRouterLib: low amount\\\");\\n\\n        // Check validity of user script\\n        if (\\n            _scriptType == ScriptTypes.P2PK ||\\n            _scriptType == ScriptTypes.P2WSH ||\\n            _scriptType == ScriptTypes.P2TR\\n        ) {\\n            require(_userScript.length == 32, \\\"RuneRouterLib: invalid script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"RuneRouterLib: invalid script\\\");\\n        }\\n\\n        // Save unwrap request\\n        RuneRouterStorage.runeUnwrapRequest memory request;\\n        request.isProcessed = false;\\n        request.amount = _amount;\\n        request.burntAmount = _remainingAmount;\\n        request.sender = _user;\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        _runeUnwrapRequests.push(request);\\n    }\\n\\n    /// @notice Return chain id of the request\\n    /// @param _requestData Data written in Bitcoin tx\\n    function _parseChainId(\\n        bytes memory _requestData\\n    ) internal pure returns (uint16 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 0, 1);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice Return app id of the request\\n    /// @dev Determines the app that request belongs to (e.g. wrap app id is 0)\\n    function _parseAppId(\\n        bytes memory _requestData\\n    ) internal pure returns (uint8 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 2, 2);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Return token id of the request\\n    function _parseTokenId(\\n        bytes memory _requestData\\n    ) internal pure returns (uint16 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 3, 6);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 4))\\n        }\\n    }\\n\\n    /// @notice Return input amount\\n    function _parseInputAmount(\\n        bytes memory _requestData\\n    ) internal pure returns (uint104 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 7, 19);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 13))\\n        }\\n    }\\n\\n    /// @notice Return recipient address\\n    function _parseRecipientAddress(\\n        bytes memory _requestData\\n    ) internal pure returns (address _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 20, 39);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice Return recipient address\\n    function _parseThirdPartyId(\\n        bytes memory _requestData\\n    ) internal pure returns (uint8 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 40, 40);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Return address of exchange token\\n    function _parseOutputToken(\\n        bytes memory _requestData\\n    ) internal pure returns (address _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 41, 60);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice Return min expected output amount\\n    function _parseOutputAmount(\\n        bytes memory _requestData\\n    ) internal pure returns (uint104 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 61, 73);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 13))\\n        }\\n    }\\n\\n    /// @notice Returns the sliced bytes\\n    /// @param _data Slicing data\\n    /// @param _start index of slicing\\n    /// @param _end index of slicing\\n    function _sliceBytes(\\n        bytes memory _data,\\n        uint _start,\\n        uint _end\\n    ) internal pure returns (bytes memory _result) {\\n        bytes1 temp;\\n        for (uint i = _start; i < _end + 1; i++) {\\n            temp = _data[i];\\n            _result = abi.encodePacked(_result, temp);\\n        }\\n    }\\n\\n    /// @notice Check if tx has been finalized on Bitcoin\\n    /// @dev Locker needs to pay for the relay fee\\n    function _isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Get fee amount\\n        uint feeAmount = IBitcoinRelay(_relay).getBlockHeaderFee(\\n            _blockNumber,\\n            0\\n        );\\n        require(msg.value >= feeAmount, \\\"RuneRouterLib: low fee\\\");\\n\\n        // Query relay (send all msg.value to it)\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Send extra ETH back to user\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xe4cc1be5429007f6a4d719c47df2b5faf3660c75005e36395f0fa6e3e4dcbab1\",\"license\":\"MIT\"},\"contracts/rune_router/RuneRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IRuneRouter.sol\\\";\\n\\nabstract contract RuneRouterStorage is IRuneRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override protocolPercentageFee; // In range of [0, 10000]\\n    uint public lockerPercentageFee; // In range of [0, 10000]\\n    uint public runeUnwrapCounter;\\n    address public override relay;\\n    address public override treasury;\\n    address public override locker;\\n    mapping(uint => address) public supportedRunes; // Mapping from tokenId to tokenAddress\\n    mapping(string => uint) public runeTokenIds; // Mapping from name to tokenId\\n    mapping(bytes32 => runeWrapRequest) public runeWrapRequests;\\n    mapping(uint => address) public override exchangeConnector; \\n    // ^ Mapping from app id to exchange connector address\\n    runeUnwrapRequest[] public runeUnwrapRequests;\\n    bytes public override lockerLockingScript;\\n    ScriptTypes public override lockerScriptType;\\n    address public override teleporter;\\n    mapping(uint => thirdParty) public thirdParties; // Mapping from thirdPartyId to thirdParty (address, fee)\\n    uint public unwrapFee; // This fee (which is in native token) covers cost of sending RUNE tokens to the user\\n}\\n\",\"keccak256\":\"0xffc3ec301f528e1b81e9aa536eb67bf3a17e9bf2e271f778661dd9fab27392cd\",\"license\":\"MIT\"},\"contracts/rune_router/interfaces/IRuneRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IRuneRouter {\\n    // Structures\\n\\n    /// @notice Structure for recording wrap and wrap&swap requests\\n    struct runeWrapRequest {\\n        bool isUsed;\\n        uint chainId;\\n        uint appId;\\n        uint tokenId;\\n        uint inputAmount;\\n        address inputToken;\\n        address recipientAddress;\\n        uint thirdPartyId;\\n        uint fee;\\n        uint outputAmount;\\n        address outputToken;\\n    }\\n\\n    /// @notice Structure for recording unwrap and swap&unwrap requests\\n    struct runeUnwrapRequest {\\n        bool isProcessed;\\n        uint amount;\\n        uint burntAmount;\\n        uint appId;\\n        address sender;\\n        bytes userScript;\\n\\t\\tScriptTypes scriptType;\\n    }\\n\\n    struct thirdParty {\\n        address thirdPartyAddress;\\n        uint thirdPartyFee;\\n    }\\n\\n    struct fees {\\n        uint protocolFee;\\n        uint lockerFee;\\n        uint thirdPartyFee;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when appId for an exchange connector is set\\n    /// @param appId Assigned application id to exchange\\n    /// @param exchangeConnector Address of exchange connector contract\\n    event SetExchangeConnector(\\n        uint appId,\\n        address exchangeConnector\\n    );\\n\\n    /// @notice Emit when relay address updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n    /// @notice Emit when locker address updated\\n    event NewLocker(\\n        address oldLocker, \\n        address newLocker\\n    );\\n\\n    /// @notice Emit when teleporter address updated\\n    event NewTeleporter(\\n        address oldTeleporter, \\n        address newTeleporter\\n    );\\n\\n    /// @notice Emit when protocol fee updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice Emit when treasury address updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n    /// @notice Emit when new Rune added\\n    event NewRune(\\n        string name, \\n        uint decimal,\\n        uint tokenId, \\n        address wRuneProxy, \\n        address wRuneLogic\\n    );\\n\\n    /// @notice Emit when Rune removed\\n    event RuneRemoved(\\n        uint tokenId, \\n        address wRuneProxy\\n    );\\n\\n    /// @notice Emit when unwrap fee updated\\n    event UnwrapFeeUpdated(\\n        uint oldFee, \\n        uint newFee\\n    );\\n\\n    /// @notice Emit when third party fee updated\\n    event ThirdPartyInfoUpdated(\\n        uint thirdPartyId,\\n        address oldAddress,\\n        uint oldFee,\\n        address newAddress,\\n        uint newFee\\n    );\\n\\n    /// @notice Emit when a rune wrap request is processed\\n    event NewRuneWrap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a wrap&swap request is processed\\n    event NewRuneWrapAndSwap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        address outputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a wrap&swap request is processed but swap failed\\n    event FailedRuneWrapAndSwap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        address outputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a unwrap request is processed\\n    event UnwrapRuneProcessed(\\n        address user,\\n        uint remainingAmount,\\n        bytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        uint reqIdx\\n    );\\n\\n    /// @notice Emit when a new rune unwrap request is created\\n    event NewRuneUnwrap(\\n        address user,\\n        bytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        address inputToken,\\n        uint inputAmount,\\n        uint remainingAmount,\\n        fees fee,\\n        uint unwrapFee,\\n        address thirdPartyAddress,\\n        uint reqIdx\\n    );\\n\\n    /// @notice Emit when a new rune swap&unwrap request is created\\n    event NewRuneSwapAndUnwrap(\\n        address user,\\n        bytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        uint inputAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        uint remainingAmount,\\n        address outputToken,\\n        fees fee,\\n        uint unwrapFee,\\n        address thirdPartyAddress,\\n        uint reqIdx\\n    );\\n\\n    // Read-only functions\\n    \\n    function isWrapRequestProcessed(bytes32 _txId) external view returns (bool);\\n\\n    function isUnwrapRequestProcessed(uint _reqIdx) external view returns (bool);\\n    \\n    function startingBlockNumber() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n    \\n    function chainId() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function locker() external view returns (address);\\n\\n    function teleporter() external view returns (address);\\n\\n    function exchangeConnector(uint appId) external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function lockerLockingScript() external view returns (bytes memory);\\n\\n    function lockerScriptType() external view returns (ScriptTypes);\\n\\n    // State-changing functions\\n\\n    function setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setLocker(address _locker) external;\\n\\n    function setTeleporter(address _teleporter) external;\\n\\n    function setExchangeConnector(uint _appId, address _exchangeConnector) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function setChainId(uint _chainId) external;\\n\\n    function setLockerLockingScript(\\n        bytes memory _lockerLockingScript,\\n        ScriptTypes _lockerScriptType\\n    ) external;\\n\\n    function setUnwrapFee(\\n        uint _newFee\\n    ) external;\\n\\n    function setThirdParty(\\n        uint _thirdPartyId,\\n        address _thirdPartyAddress,\\n        uint _thirdPartyFee\\n    ) external;\\n\\n    function addRune(\\n        string memory _name,\\n        uint8 _decimal,\\n        uint _tokenId\\n    ) external;\\n\\n    function removeRune(\\n        uint _tokenId\\n    ) external;\\n\\n    function wrapRune(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address[] memory _path\\n    ) external payable;\\n\\n\\n    function unwrapProofRune(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        uint[] memory _reqIndexes\\n    ) external payable;\\n\\n    function unwrapRune(\\n        uint _thirdPartyId,\\n        uint _tokenId,\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _appId,\\n        uint _inputAmount,\\n        address[] memory _path\\n    ) external payable;\\n\\n}\",\"keccak256\":\"0x1288d16b44185095de95d3aa8d3c7a178665502b23a005ef211f2e95fa4d547a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61454661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806374c6d02c1461005b57806394d8bc6a1461008d578063d27fd71f146100bc578063e291283d146100ec575b600080fd5b81801561006757600080fd5b5061007061011a565b6040516001600160a01b0390911681526020015b60405180910390f35b81801561009957600080fd5b506100ad6100a836600461284f565b61014c565b60405161008493929190612c15565b8180156100c857600080fd5b506100dc6100d7366004612a0a565b610491565b6040516100849493929190612c3d565b8180156100f857600080fd5b5061010c610107366004612924565b6109b8565b604051908152602001610084565b60008060405161012990612696565b604051809103906000f080158015610145573d6000803e3d6000fd5b5091505090565b6101546126a3565b6000858152602087905260408120546001600160a01b03169061271061017a8c88612d1e565b6101849190612cfe565b83526127106101938b88612d1e565b61019d9190612cfe565b6020808501919091526000888152908990526040902060010154612710906101c59088612d1e565b6101cf9190612cfe565b60408401819052602084015184516101e79089612d66565b6101f19190612d66565b6101fb9190612d66565b90506000811161024e5760405162461bcd60e51b8152602060048201526019602482015278149d5b99549bdd5d195c931a588e881b1bddc8185b5bdd5b9d603a1b60448201526064015b60405180910390fd5b600084600581111561027057634e487b7160e01b600052602160045260246000fd5b148061029b5750600484600581111561029957634e487b7160e01b600052602160045260246000fd5b145b806102c5575060058460058111156102c357634e487b7160e01b600052602160045260246000fd5b145b156102f05784516020146102eb5760405162461bcd60e51b815260040161024590612bde565b610311565b84516014146103115760405162461bcd60e51b815260040161024590612bde565b61034d6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a08201529060c082015290565b6000815260208101879052604081018290526001600160a01b038d16608082015260a0810186905260c0810185600581111561039957634e487b7160e01b600052602160045260246000fd5b908160058111156103ba57634e487b7160e01b600052602160045260246000fd5b905250895460018082018c5560008c81526020908190208451600790940201805460ff19169315159390931783558381015191830191909155604083015160028301556060830151600383015560808301516004830180546001600160a01b0319166001600160a01b0390921691909117905560a083015180518493926104489260058501929101906126c4565b5060c082015160068201805460ff1916600183600581111561047a57634e487b7160e01b600052602160045260246000fd5b021790555050505099509950999650505050505050565b600061049b6126a3565b600088815260208890526040812054819060ff16156104fa5760405162461bcd60e51b815260206004820152601b60248201527a149d5b99549bdd5d195c931a588e88185b1c9958591e481d5cd959602a1b6044820152606401610245565b6105746040518061016001604052806000151581526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b600061059a8d60405180604001604052806002815260200161060f60f31b815250610b40565b9150508051602914806105ae57508051604a145b6105f75760405162461bcd60e51b815260206004820152601a602482015279293ab732a937baba32b92634b11d1034b73b30b634b2103632b760311b6044820152606401610245565b6001825261060481610cbe565b61ffff16602083015261061681610cd9565b60ff16604083015261062781610cf3565b61ffff16606083015261063981610d0e565b6001600160681b0316608083015261065081610d29565b6001600160a01b031660c083015261066781610d44565b60ff1660e08301819052600090815260208a9052604090205481516001600160a01b039091169450602914156106be576040820151156106b95760405162461bcd60e51b815260040161024590612ba9565b610710565b60408201516106df5760405162461bcd60e51b815260040161024590612ba9565b6106e881610d53565b6001600160a01b031661014083015261070081610d63565b6001600160681b03166101208301525b60008260800151116107605760405162461bcd60e51b8152602060048201526019602482015278149d5b99549bdd5d195c931a588e881e995c9bc81a5b9c1d5d603a1b6044820152606401610245565b8d8260200151146107b05760405162461bcd60e51b815260206004820152601a602482015279293ab732a937baba32b92634b11d103bb937b7339031b430b4b760311b6044820152606401610245565b6060820151600090815260208b905260409020546001600160a01b031692508261081b5760405162461bcd60e51b815260206004820152601c60248201527b149d5b99549bdd5d195c931a588e881b9bdd081cdd5c1c1bdc9d195960221b6044820152606401610245565b6001600160a01b03831660a0830152608082015161271061083c8a83612d1e565b6108469190612cfe565b86526127106108558983612d1e565b61085f9190612cfe565b60208088019190915260e08401516000908152908b905260409020600101546127109061088c9083612d1e565b6108969190612cfe565b60408701819052602087015187516108ae9084612d66565b6108b89190612d66565b6108c29190612d66565b96508560400151866020015187600001516108dd9190612c74565b6108e79190612c74565b610100840190815260009d8e5260209c8d5260409d8e90208451815460ff19169015151781559c84015160018e01559c83015160028d01555050606081015160038b0155608081015160048b015560a081015160058b0180546001600160a01b03199081166001600160a01b039384161790915560c083015160068d018054831691841691909117905560e083015160078d01559b5160088c015561012082015160098c015561014090910151600a909a018054909b16991698909817909855909990985095965093949350505050565b60008b851015610a055760405162461bcd60e51b8152602060048201526018602482015277293ab732a937baba32b92634b11d1037b63210383937b7b360411b6044820152606401610245565b6001600160e01b0319861615610a5d5760405162461bcd60e51b815260206004820181905260248201527f52756e65526f757465724c69623a206e6f6e2d7a65726f206c6f636b74696d656044820152606401610245565b610aa08a8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250610d73915050565b9050610ae68b828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250610ed8915050565b610b315760405162461bcd60e51b815260206004820152601c60248201527b149d5b99549bdd5d195c931a588e881b9bdd08199a5b985b1a5e995960221b6044820152606401610245565b9b9a5050505050505050505050565b6000606081610b59610b54825b8790611029565b61104f565b9050610b6a62ffffff1982166111a5565b15610bb55760405162461bcd60e51b815260206004820152601b60248201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b6044820152606401610245565b6000806000806000610bc88660006111b4565b6001600160401b0316905060005b81811015610cb057610be887826112fd565b9550610bf386611422565b9450610bfe8661147f565b9350610c09846114c9565b925062ffffff198084161415610c8c5789604051602001610c2a9190612b1b565b60405160208183030381529060405280519060200120610c4f8662ffffff19166115eb565b604051602001610c5f9190612b1b565b604051602081830303815290604052805190602001201415610c8757610c8486611631565b98505b610c9e565b610c9b62ffffff1984166115eb565b97505b80610ca881612e2d565b915050610bd6565b505050505050509250929050565b600080610cce8360006001611656565b600201519392505050565b600080610ce883600280611656565b600101519392505050565b600080610d038360036006611656565b600401519392505050565b600080610d1e8360076013611656565b600d01519392505050565b600080610d398360146027611656565b601401519392505050565b600080610ce883602880611656565b600080610d39836029603c611656565b600080610d1e83603d6049611656565b600080610d87610d8282610b4d565b6116db565b9050610d9862ffffff1982166111a5565b15610de25760405162461bcd60e51b815260206004820152601a602482015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b6044820152606401610245565b6000600287878787604051602001610dfd9493929190612ac8565b60408051601f1981840301815290829052610e1791612b1b565b602060405180830381855afa158015610e34573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610e57919061290c565b90506000600282604051602001610e7091815260200190565b60408051601f1981840301815290829052610e8a91612b1b565b602060405180830381855afa158015610ea7573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610eca919061290c565b93505050505b949350505050565b60405163d0a8973960e01b8152600481018490526000602482018190529081906001600160a01b0388169063d0a897399060440160206040518083038186803b158015610f2457600080fd5b505afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5c919061290c565b905080341015610fa75760405162461bcd60e51b815260206004820152601660248201527552756e65526f757465724c69623a206c6f772066656560501b6044820152606401610245565b6000610ff48888888888604051602401610fc49493929190612b66565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052846117dc565b9050611009336110048434612d66565b61180c565b8080602001905181019061101d91906128ec565b98975050505050505050565b81516000906020840161104464ffffffffff85168284611927565b925050505b92915050565b60008181611065815b62ffffff1984169061196b565b5061107562ffffff198516611a45565b6001600160601b03166110915761108a611a54565b925061119e565b600061109e8560006111b4565b905060006110b162ffffff198716611a45565b6001600160601b031690506001600160401b0382166110db576110d2611a54565b9450505061119e565b60006110e683611a5c565b60ff16905060005b836001600160401b0316811015611164578282106111195761110e611a54565b96505050505061119e565b60006111396111288486612d66565b600e5b62ffffff198c169190611ab5565b905061114481611adf565b61114e9084612c74565b925050808061115c90612e2d565b9150506110ee565b5081811461117e57611174611a54565b955050505061119e565b611198600f5b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff19818116145b919050565b6000806111c962ffffff198516846001611b28565b905060fc81116111e4576111dc81611b58565b915050611049565b8060fd141561124a5761121261120d6111fe856001612c74565b62ffffff198716906002611bc4565b611b58565b915061121d82611a5c565b60ff166003146112455761124361123e62ffffff1986168560036000611d00565b611d66565b505b6112f6565b8060fe141561129f5761127361120d611264856001612c74565b62ffffff198716906004611bc4565b915061127e82611a5c565b60ff166005146112455761124361123e62ffffff1986168560056000611d00565b8060ff14156112f6576112c861120d6112b9856001612c74565b62ffffff198716906008611bc4565b91506112d382611a5c565b60ff166009146112f6576112f461123e62ffffff1986168560096000611d00565b505b5092915050565b600082600f61130b81611058565b5060006113198660006111b4565b6001600160401b03169050600061133562ffffff198816611a45565b6001600160601b031690508186106113835760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610245565b600061138e83611a5c565b60ff1690506000805b888110156113e4576113bb6113ac8486612d66565b62ffffff198c1690600e611ab5565b91506113c682611adf565b6113d09084612c74565b92506113dd600182612c74565b9050611397565b506113f26111288385612d66565b905060006113ff82611adf565b905061141462ffffff198b168483600d611d00565b9a9950505050505050505050565b600081600d61143081611058565b50600061143e8560086111b4565b905061147661144c82611a5c565b611457906008612cb7565b60ff166001600160401b03831660075b62ffffff198916929190611d00565b95945050505050565b600081600d61148d81611058565b50600061149b8560086111b4565b90506114766008826114ac84611a5c565b60ff166114b99190612c8c565b6001600160401b03166007611467565b60008160076114d781611058565b5060006114e58560006111b4565b905060006114ff61120d62ffffff19881660026001611b28565b905061151362ffffff198716600180611b28565b606a1415806115475750611528600283612d7d565b6001600160401b031661154462ffffff19881660026001611b28565b14155b15611554576110d2611a54565b604d826001600160401b03161115801561157857506004826001600160401b031610155b6115c45760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e48656c7065723a20696e76616c6964206f7072657475726e006044820152606401610245565b6115e162ffffff19871660036001600160401b038416600c611d00565b9695505050505050565b60606000806115f984611a45565b60405193508392506001600160601b031690506116208461161b846020612c74565b611dee565b508181016020016040529052919050565b600081600d61163f81611058565b50610ed061120d62ffffff19861660006008611bc4565b60606000835b611667846001612c74565b8110156116d25785818151811061168e57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b915082826040516020016116ae929190612b37565b604051602081830303815290604052925080806116ca90612e2d565b91505061165c565b50509392505050565b600081816116e881611058565b506116f862ffffff198516611a45565b6001600160601b031661170d5761108a611a54565b600061171a8560006111b4565b9050600061172d62ffffff198716611a45565b6001600160601b031690506001600160401b03821661174e576110d2611a54565b600061175983611a5c565b60ff16905060005b836001600160401b03168110156117c2578282106117815761110e611a54565b60006117976117908486612d66565b600561112b565b90506117a281611f31565b6117ac9084612c74565b92505080806117ba90612e2d565b915050611761565b508181146117d257611174611a54565b6111986006611184565b60606118028484846040518060600160405280602981526020016144e860299139611f85565b90505b9392505050565b8047101561185c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610245565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146118a9576040519150601f19603f3d011682016040523d82523d6000602084013e6118ae565b606091505b50509050806119225760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610245565b505050565b6000806119348385612c74565b9050604051811115611944575060005b806119565762ffffff19915050611805565b5050606092831b9190911790911b1760181b90565b600061197783836120ad565b611a3e57600061199661198a8560d81c90565b64ffffffffff166120d0565b91505060006119ab8464ffffffffff166120d0565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016102459190612b96565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b600060fc826001600160401b031611611a77575060016111af565b61ffff826001600160401b031611611a91575060036111af565b63ffffffff826001600160401b031611611aad575060056111af565b5060096111af565b60006118028484611ac587611a45565b6001600160601b0316611ad89190612d66565b8585611d00565b600081600e611aed81611058565b506000611afb8560086111b4565b9050806001600160401b0316611b1082611a5c565b60ff16611b1d9190612c74565b611476906008612c74565b6000611b35826020612da5565b611b40906008612d3d565b60ff16611b4e85858561217c565b901c949350505050565b60006001600160401b03821115611bc05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610245565b5090565b6000611802611bd485858561217c565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff199290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167bffffffff00000000ffffffff00000000ffffffff00000000ffffffff199290911b9190911617604081811c6001600160401b03600160801b03600160c01b03166001600160401b03600160801b03600160c01b03199290911b9190911617608081811c91901b1790565b600080611d0c866122aa565b6001600160601b03169050611d20866122b9565b84611d2b8784612c74565b611d359190612c74565b1115611d485762ffffff19915050610ed0565b611d528582612c74565b90506115e18364ffffffffff168286611927565b60606000611da4611d9f82611d91611d8362ffffff198816611a45565b6001600160601b03166122e6565b62ffffff1987169190611b28565b6120d0565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d01611a13565b6000611df983612347565b611e565760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610245565b611e5f83612359565b611ebf5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610245565b6000611eca84611a45565b6001600160601b031690506000611ee0856122aa565b6001600160601b031690506000604051905084811115611f005760206060fd5b8285848460045afa506115e1611f168760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b6000816005611f3f81611058565b506000611f4d8560246111b4565b9050806001600160401b0316611f6282611a5c565b60ff16611f6f9190612c74565b611f7a906024612c74565b611476906004612c74565b606082471015611fe65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610245565b843b6120345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610245565b600080866001600160a01b031685876040516120509190612b1b565b60006040518083038185875af1925050503d806000811461208d576040519150601f19603f3d011682016040523d82523d6000602084013e612092565b606091505b50915091506120a2828286612397565b979650505050505050565b60008164ffffffffff166120c18460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561212e5760006120ef826008612d3d565b60ff1685901c9050612100816123d0565b61ffff16841793508160ff1660101461211b57601084901b93505b50612127600182612da5565b90506120d6565b50600f5b60ff8160ff1610156121765760ff600882021684901c612151816123d0565b61ffff16831792508160ff1660001461216c57601083901b92505b5060001901612132565b50915091565b600060ff821661218e57506000611805565b61219784611a45565b6001600160601b03166121ad60ff841685612c74565b11156121fd576121e46121bf856122aa565b6001600160601b03166121d186611a45565b6001600160601b0316858560ff16612400565b60405162461bcd60e51b81526004016102459190612b96565b60208260ff1611156122745760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b6064820152608401610245565b600882026000612283866122aa565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60781c6001600160601b031690565b60006122c482611a45565b6122cd836122aa565b6122d79190612cdc565b6001600160601b031692915050565b600060ff821115611bc05760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610245565b6000612352826111a5565b1592915050565b60006123658260d81c90565b64ffffffffff1664ffffffffff1415612380575060006111af565b600061238b836122b9565b60405110199392505050565b606083156123a6575081611805565b8251156123b65782518084602001fd5b8160405162461bcd60e51b81526004016102459190612b96565b60006123e260048360ff16901c61252a565b60ff161760081b62ffff00166123f78261252a565b60ff1617919050565b6060600061240d866120d0565b915050600061241b866120d0565b9150506000612429866120d0565b9150506000612437866120d0565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b600060f08083179060ff821614156125465760309150506111af565b8060ff1660f1141561255c5760319150506111af565b8060ff1660f214156125725760329150506111af565b8060ff1660f314156125885760339150506111af565b8060ff1660f4141561259e5760349150506111af565b8060ff1660f514156125b45760359150506111af565b8060ff1660f614156125ca5760369150506111af565b8060ff1660f714156125e05760379150506111af565b8060ff1660f814156125f65760389150506111af565b8060ff1660f9141561260c5760399150506111af565b8060ff1660fa14156126225760619150506111af565b8060ff1660fb14156126385760629150506111af565b8060ff1660fc141561264e5760639150506111af565b8060ff1660fd14156126645760649150506111af565b8060ff1660fe141561267a5760659150506111af565b8060ff1660ff14156126905760669150506111af565b50919050565b61167380612e7583390190565b60405180606001604052806000815260200160008152602001600081525090565b8280546126d090612df8565b90600052602060002090601f0160209004810192826126f25760008555612738565b82601f1061270b57805160ff1916838001178555612738565b82800160010185558215612738579182015b8281111561273857825182559160200191906001019061271d565b50611bc09291505b80821115611bc05760008155600101612740565b80356001600160a01b03811681146111af57600080fd5b80356001600160e01b0319811681146111af57600080fd5b60008083601f840112612794578182fd5b5081356001600160401b038111156127aa578182fd5b6020830191508360208285010111156127c257600080fd5b9250929050565b600082601f8301126127d9578081fd5b81356001600160401b03808211156127f3576127f3612e5e565b604051601f8301601f19908116603f0116810190828211818310171561281b5761281b612e5e565b81604052838152866020858801011115612833578485fd5b8360208701602083013792830160200193909352509392505050565b60008060008060008060008060006101208a8c03121561286d578485fd5b6128768a612754565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b038111156128ba578283fd5b6128c68c828d016127c9565b9250506101008a0135600681106128db578182fd5b809150509295985092959850929598565b6000602082840312156128fd578081fd5b81518015158114611805578182fd5b60006020828403121561291d578081fd5b5051919050565b60008060008060008060008060008060006101208c8e031215612945578182fd5b8b359a5061295560208d01612754565b995061296360408d0161276b565b98506001600160401b0360608d013581101561297d578283fd5b61298d8e60608f01358f016127c9565b98508060808e0135111561299f578283fd5b6129af8e60808f01358f01612783565b90985096506129c060a08e0161276b565b955060c08d013594508060e08e013511156129d9578283fd5b506129ea8d60e08e01358e01612783565b81945080935050506101008c013590509295989b509295989b9093969950565b600080600080600080600080610100898b031215612a26578384fd5b8835975060208901356001600160401b03811115612a42578485fd5b612a4e8b828c016127c9565b989b989a505050506040870135966060810135966080820135965060a0820135955060c0820135945060e09091013592509050565b60008151808452612a9b816020860160208601612dc8565b601f01601f19169290920160200192915050565b8051825260208082015190830152604090810151910152565b600063ffffffff60e01b80871683528551612aea816004860160208a01612dc8565b855190840190612b01816004840160208a01612dc8565b919094169301600481019390935250506008019392505050565b60008251612b2d818460208701612dc8565b9190910192915050565b60008351612b49818460208801612dc8565b6001600160f81b0319939093169190920190815260010192915050565b600085825284602083015260806040830152612b856080830185612a83565b905082606083015295945050505050565b6000602082526118056020830184612a83565b6020808252601b908201527a149d5b99549bdd5d195c931a588e881ddc9bdb99c8185c1c081a59602a1b604082015260600190565b6020808252601d908201527f52756e65526f757465724c69623a20696e76616c696420736372697074000000604082015260600190565b60a08101612c238286612aaf565b6001600160a01b0393909316606082015260800152919050565b84815260c08101612c516020830186612aaf565b6001600160a01b0393841660808301529190921660a09092019190915292915050565b60008219821115612c8757612c87612e48565b500190565b60006001600160401b03828116848216808303821115612cae57612cae612e48565b01949350505050565b600060ff821660ff84168060ff03821115612cd457612cd4612e48565b019392505050565b60006001600160601b03828116848216808303821115612cae57612cae612e48565b600082612d1957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d3857612d38612e48565b500290565b600060ff821660ff84168160ff0481118215151615612d5e57612d5e612e48565b029392505050565b600082821015612d7857612d78612e48565b500390565b60006001600160401b0383811690831681811015612d9d57612d9d612e48565b039392505050565b600060ff821660ff841680821015612dbf57612dbf612e48565b90039392505050565b60005b83811015612de3578181015183820152602001612dcb565b83811115612df2576000848401525b50505050565b600281046001821680612e0c57607f821691505b6020821081141561269057634e487b7160e01b600052602260045260246000fd5b6000600019821415612e4157612e41612e48565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405234801561001057600080fd5b50611653806100206000396000f3fe608060405234801561001057600080fd5b50600436106101285760003560e01c8063028468581461012d57806303d41e0e1461014257806306fdde031461017a578063095ea7b31461018f5780631624f6c6146101a257806318160ddd146101b557806323b872dd146101c75780633092afd5146101da578063313ce567146101ed578063395093511461020657806340c10f191461021957806342966c681461022c57806370a082311461023f578063715018a61461026857806376809ce3146102705780638da5cb5b1461027d57806395d89b411461029d578063983b2d56146102a5578063a457c2d7146102b8578063a9059cbb146102cb578063dd62ed3e146102de578063f2fde38b146102f1578063f44637ba14610304578063f46eccc414610317575b600080fd5b61014061013b366004611310565b61033a565b005b610165610150366004611310565b60cb6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101826103b9565b6040516101719190611458565b61016561019d36600461139e565b61044b565b6101406101b03660046113c7565b610465565b6035545b604051908152602001610171565b6101656101d5366004611363565b61059a565b6101406101e8366004611310565b6105be565b60c95460ff165b60405160ff9091168152602001610171565b61016561021436600461139e565b610634565b61016561022736600461139e565b610656565b61016561023a366004611440565b6106dc565b6101b961024d366004611310565b6001600160a01b031660009081526033602052604090205490565b61014061075e565b60c9546101f49060ff1681565b610285610768565b6040516001600160a01b039091168152602001610171565b610182610777565b6101406102b3366004611310565b610786565b6101656102c636600461139e565b61082d565b6101656102d936600461139e565b6108a8565b6101b96102ec366004611331565b6108b6565b6101406102ff366004611310565b6108e1565b610140610312366004611310565b61095a565b610165610325366004611310565b60ca6020526000908152604090205460ff1681565b610342610a01565b61034b81610a60565b6103705760405162461bcd60e51b815260040161036790611558565b60405180910390fd5b6001600160a01b038116600081815260cb6020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b6060603680546103c8906115ac565b80601f01602080910402602001604051908101604052809291908181526020018280546103f4906115ac565b80156104415780601f1061041657610100808354040283529160200191610441565b820191906000526020600020905b81548152906001019060200180831161042457829003601f168201915b5050505050905090565b600033610459818585610aa7565b60019150505b92915050565b600054610100900460ff16158080156104855750600054600160ff909116105b8061049f5750303b15801561049f575060005460ff166001145b6105025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610367565b6000805460ff191660011790558015610525576000805461ff0019166101001790555b61052f8484610bcc565b610537610c01565b61053f610c30565b60c9805460ff191660ff84161790558015610594576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000336105a8858285610c5f565b6105b3858585610cd3565b506001949350505050565b6105c6610a01565b6105cf81610e6c565b6105eb5760405162461bcd60e51b8152600401610367906114dd565b6001600160a01b038116600081815260ca6020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b60003361045981858561064783836108b6565b6106519190611588565b610aa7565b6000610660610eb3565b61066933610e6c565b6106855760405162461bcd60e51b8152600401610367906114dd565b61068f8383610f0d565b6040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89060200160405180910390a350600161045f6001609755565b60006106e6610eb3565b6106ef33610a60565b61070b5760405162461bcd60e51b815260040161036790611558565b6107153383610fc4565b604051828152339081907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200160405180910390a35060016107596001609755565b919050565b610766610a01565b565b6065546001600160a01b031690565b6060603780546103c8906115ac565b61078e610a01565b61079781610e6c565b156107e15760405162461bcd60e51b815260206004820152601a6024820152792ba93ab732a637b3b4b19d1030b63932b0b23c9036b4b73a32b960311b6044820152606401610367565b6001600160a01b038116600081815260ca6020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b6000338161083b82866108b6565b90508381101561089b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610367565b6105b38286868403610aa7565b600033610459818585610cd3565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6108e9610a01565b6001600160a01b03811661094e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610367565b610957816110e3565b50565b610962610a01565b61096b81610a60565b156109b55760405162461bcd60e51b815260206004820152601a6024820152792ba93ab732a637b3b4b19d1030b63932b0b23c90313ab93732b960311b6044820152606401610367565b6001600160a01b038116600081815260cb6020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b33610a0a610768565b6001600160a01b0316146107665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610367565b60006001600160a01b038216610a885760405162461bcd60e51b8152600401610367906114ab565b506001600160a01b0316600090815260cb602052604090205460ff1690565b6001600160a01b038316610b095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610367565b6001600160a01b038216610b6a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610367565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600054610100900460ff16610bf35760405162461bcd60e51b81526004016103679061150d565b610bfd8282611135565b5050565b600054610100900460ff16610c285760405162461bcd60e51b81526004016103679061150d565b610766611183565b600054610100900460ff16610c575760405162461bcd60e51b81526004016103679061150d565b6107666111b3565b6000610c6b84846108b6565b905060001981146105945781811015610cc65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610367565b6105948484848403610aa7565b6001600160a01b038316610d375760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610367565b6001600160a01b038216610d995760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610367565b6001600160a01b03831660009081526033602052604090205481811015610e115760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610367565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591516000805160206115fe83398151915290610e5f9086815260200190565b60405180910390a3610594565b60006001600160a01b038216610e945760405162461bcd60e51b8152600401610367906114ab565b506001600160a01b0316600090815260ca602052604090205460ff1690565b60026097541415610f065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610367565b6002609755565b6001600160a01b038216610f635760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610367565b8060356000828254610f759190611588565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481526000805160206115fe833981519152910160405180910390a3610bfd565b6001609755565b6001600160a01b0382166110245760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610367565b6001600160a01b038216600090815260336020526040902054818110156110985760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610367565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192916000805160206115fe8339815191529101610bbf565b505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661115c5760405162461bcd60e51b81526004016103679061150d565b815161116f9060369060208501906111da565b5080516110de9060379060208401906111da565b600054610100900460ff166111aa5760405162461bcd60e51b81526004016103679061150d565b610766336110e3565b600054610100900460ff16610fbd5760405162461bcd60e51b81526004016103679061150d565b8280546111e6906115ac565b90600052602060002090601f016020900481019282611208576000855561124e565b82601f1061122157805160ff191683800117855561124e565b8280016001018555821561124e579182015b8281111561124e578251825591602001919060010190611233565b5061125a92915061125e565b5090565b5b8082111561125a576000815560010161125f565b80356001600160a01b038116811461075957600080fd5b600082601f83011261129a578081fd5b81356001600160401b03808211156112b4576112b46115e7565b604051601f8301601f19908116603f011681019082821181831017156112dc576112dc6115e7565b816040528381528660208588010111156112f4578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611321578081fd5b61132a82611273565b9392505050565b60008060408385031215611343578081fd5b61134c83611273565b915061135a60208401611273565b90509250929050565b600080600060608486031215611377578081fd5b61138084611273565b925061138e60208501611273565b9150604084013590509250925092565b600080604083850312156113b0578182fd5b6113b983611273565b946020939093013593505050565b6000806000606084860312156113db578283fd5b83356001600160401b03808211156113f1578485fd5b6113fd8783880161128a565b94506020860135915080821115611412578384fd5b5061141f8682870161128a565b925050604084013560ff81168114611435578182fd5b809150509250925092565b600060208284031215611451578081fd5b5035919050565b6000602080835283518082850152825b8181101561148457858101830151858201604001528201611468565b818111156114955783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601890820152775752756e654c6f6769633a207a65726f206164647265737360401b604082015260600190565b6020808252601690820152752ba93ab732a637b3b4b19d103737ba1036b4b73a32b960511b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601690820152752ba93ab732a637b3b4b19d103737ba10313ab93732b960511b604082015260600190565b600082198211156115a757634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806115c057607f821691505b602082108114156115e157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e597f14a3e526909f18ad6a5e07a3b2080de035ac3713c5033b60843cd3cf87b64736f6c63430008020033416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122033871484d9fd730bf1e37688508275cdc896cd1d3be700b381f3ff41f05661d564736f6c63430008020033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806374c6d02c1461005b57806394d8bc6a1461008d578063d27fd71f146100bc578063e291283d146100ec575b600080fd5b81801561006757600080fd5b5061007061011a565b6040516001600160a01b0390911681526020015b60405180910390f35b81801561009957600080fd5b506100ad6100a836600461284f565b61014c565b60405161008493929190612c15565b8180156100c857600080fd5b506100dc6100d7366004612a0a565b610491565b6040516100849493929190612c3d565b8180156100f857600080fd5b5061010c610107366004612924565b6109b8565b604051908152602001610084565b60008060405161012990612696565b604051809103906000f080158015610145573d6000803e3d6000fd5b5091505090565b6101546126a3565b6000858152602087905260408120546001600160a01b03169061271061017a8c88612d1e565b6101849190612cfe565b83526127106101938b88612d1e565b61019d9190612cfe565b6020808501919091526000888152908990526040902060010154612710906101c59088612d1e565b6101cf9190612cfe565b60408401819052602084015184516101e79089612d66565b6101f19190612d66565b6101fb9190612d66565b90506000811161024e5760405162461bcd60e51b8152602060048201526019602482015278149d5b99549bdd5d195c931a588e881b1bddc8185b5bdd5b9d603a1b60448201526064015b60405180910390fd5b600084600581111561027057634e487b7160e01b600052602160045260246000fd5b148061029b5750600484600581111561029957634e487b7160e01b600052602160045260246000fd5b145b806102c5575060058460058111156102c357634e487b7160e01b600052602160045260246000fd5b145b156102f05784516020146102eb5760405162461bcd60e51b815260040161024590612bde565b610311565b84516014146103115760405162461bcd60e51b815260040161024590612bde565b61034d6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a08201529060c082015290565b6000815260208101879052604081018290526001600160a01b038d16608082015260a0810186905260c0810185600581111561039957634e487b7160e01b600052602160045260246000fd5b908160058111156103ba57634e487b7160e01b600052602160045260246000fd5b905250895460018082018c5560008c81526020908190208451600790940201805460ff19169315159390931783558381015191830191909155604083015160028301556060830151600383015560808301516004830180546001600160a01b0319166001600160a01b0390921691909117905560a083015180518493926104489260058501929101906126c4565b5060c082015160068201805460ff1916600183600581111561047a57634e487b7160e01b600052602160045260246000fd5b021790555050505099509950999650505050505050565b600061049b6126a3565b600088815260208890526040812054819060ff16156104fa5760405162461bcd60e51b815260206004820152601b60248201527a149d5b99549bdd5d195c931a588e88185b1c9958591e481d5cd959602a1b6044820152606401610245565b6105746040518061016001604052806000151581526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b600061059a8d60405180604001604052806002815260200161060f60f31b815250610b40565b9150508051602914806105ae57508051604a145b6105f75760405162461bcd60e51b815260206004820152601a602482015279293ab732a937baba32b92634b11d1034b73b30b634b2103632b760311b6044820152606401610245565b6001825261060481610cbe565b61ffff16602083015261061681610cd9565b60ff16604083015261062781610cf3565b61ffff16606083015261063981610d0e565b6001600160681b0316608083015261065081610d29565b6001600160a01b031660c083015261066781610d44565b60ff1660e08301819052600090815260208a9052604090205481516001600160a01b039091169450602914156106be576040820151156106b95760405162461bcd60e51b815260040161024590612ba9565b610710565b60408201516106df5760405162461bcd60e51b815260040161024590612ba9565b6106e881610d53565b6001600160a01b031661014083015261070081610d63565b6001600160681b03166101208301525b60008260800151116107605760405162461bcd60e51b8152602060048201526019602482015278149d5b99549bdd5d195c931a588e881e995c9bc81a5b9c1d5d603a1b6044820152606401610245565b8d8260200151146107b05760405162461bcd60e51b815260206004820152601a602482015279293ab732a937baba32b92634b11d103bb937b7339031b430b4b760311b6044820152606401610245565b6060820151600090815260208b905260409020546001600160a01b031692508261081b5760405162461bcd60e51b815260206004820152601c60248201527b149d5b99549bdd5d195c931a588e881b9bdd081cdd5c1c1bdc9d195960221b6044820152606401610245565b6001600160a01b03831660a0830152608082015161271061083c8a83612d1e565b6108469190612cfe565b86526127106108558983612d1e565b61085f9190612cfe565b60208088019190915260e08401516000908152908b905260409020600101546127109061088c9083612d1e565b6108969190612cfe565b60408701819052602087015187516108ae9084612d66565b6108b89190612d66565b6108c29190612d66565b96508560400151866020015187600001516108dd9190612c74565b6108e79190612c74565b610100840190815260009d8e5260209c8d5260409d8e90208451815460ff19169015151781559c84015160018e01559c83015160028d01555050606081015160038b0155608081015160048b015560a081015160058b0180546001600160a01b03199081166001600160a01b039384161790915560c083015160068d018054831691841691909117905560e083015160078d01559b5160088c015561012082015160098c015561014090910151600a909a018054909b16991698909817909855909990985095965093949350505050565b60008b851015610a055760405162461bcd60e51b8152602060048201526018602482015277293ab732a937baba32b92634b11d1037b63210383937b7b360411b6044820152606401610245565b6001600160e01b0319861615610a5d5760405162461bcd60e51b815260206004820181905260248201527f52756e65526f757465724c69623a206e6f6e2d7a65726f206c6f636b74696d656044820152606401610245565b610aa08a8a8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c9250610d73915050565b9050610ae68b828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250610ed8915050565b610b315760405162461bcd60e51b815260206004820152601c60248201527b149d5b99549bdd5d195c931a588e881b9bdd08199a5b985b1a5e995960221b6044820152606401610245565b9b9a5050505050505050505050565b6000606081610b59610b54825b8790611029565b61104f565b9050610b6a62ffffff1982166111a5565b15610bb55760405162461bcd60e51b815260206004820152601b60248201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b6044820152606401610245565b6000806000806000610bc88660006111b4565b6001600160401b0316905060005b81811015610cb057610be887826112fd565b9550610bf386611422565b9450610bfe8661147f565b9350610c09846114c9565b925062ffffff198084161415610c8c5789604051602001610c2a9190612b1b565b60405160208183030381529060405280519060200120610c4f8662ffffff19166115eb565b604051602001610c5f9190612b1b565b604051602081830303815290604052805190602001201415610c8757610c8486611631565b98505b610c9e565b610c9b62ffffff1984166115eb565b97505b80610ca881612e2d565b915050610bd6565b505050505050509250929050565b600080610cce8360006001611656565b600201519392505050565b600080610ce883600280611656565b600101519392505050565b600080610d038360036006611656565b600401519392505050565b600080610d1e8360076013611656565b600d01519392505050565b600080610d398360146027611656565b601401519392505050565b600080610ce883602880611656565b600080610d39836029603c611656565b600080610d1e83603d6049611656565b600080610d87610d8282610b4d565b6116db565b9050610d9862ffffff1982166111a5565b15610de25760405162461bcd60e51b815260206004820152601a602482015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b6044820152606401610245565b6000600287878787604051602001610dfd9493929190612ac8565b60408051601f1981840301815290829052610e1791612b1b565b602060405180830381855afa158015610e34573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610e57919061290c565b90506000600282604051602001610e7091815260200190565b60408051601f1981840301815290829052610e8a91612b1b565b602060405180830381855afa158015610ea7573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610eca919061290c565b93505050505b949350505050565b60405163d0a8973960e01b8152600481018490526000602482018190529081906001600160a01b0388169063d0a897399060440160206040518083038186803b158015610f2457600080fd5b505afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5c919061290c565b905080341015610fa75760405162461bcd60e51b815260206004820152601660248201527552756e65526f757465724c69623a206c6f772066656560501b6044820152606401610245565b6000610ff48888888888604051602401610fc49493929190612b66565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052846117dc565b9050611009336110048434612d66565b61180c565b8080602001905181019061101d91906128ec565b98975050505050505050565b81516000906020840161104464ffffffffff85168284611927565b925050505b92915050565b60008181611065815b62ffffff1984169061196b565b5061107562ffffff198516611a45565b6001600160601b03166110915761108a611a54565b925061119e565b600061109e8560006111b4565b905060006110b162ffffff198716611a45565b6001600160601b031690506001600160401b0382166110db576110d2611a54565b9450505061119e565b60006110e683611a5c565b60ff16905060005b836001600160401b0316811015611164578282106111195761110e611a54565b96505050505061119e565b60006111396111288486612d66565b600e5b62ffffff198c169190611ab5565b905061114481611adf565b61114e9084612c74565b925050808061115c90612e2d565b9150506110ee565b5081811461117e57611174611a54565b955050505061119e565b611198600f5b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff19818116145b919050565b6000806111c962ffffff198516846001611b28565b905060fc81116111e4576111dc81611b58565b915050611049565b8060fd141561124a5761121261120d6111fe856001612c74565b62ffffff198716906002611bc4565b611b58565b915061121d82611a5c565b60ff166003146112455761124361123e62ffffff1986168560036000611d00565b611d66565b505b6112f6565b8060fe141561129f5761127361120d611264856001612c74565b62ffffff198716906004611bc4565b915061127e82611a5c565b60ff166005146112455761124361123e62ffffff1986168560056000611d00565b8060ff14156112f6576112c861120d6112b9856001612c74565b62ffffff198716906008611bc4565b91506112d382611a5c565b60ff166009146112f6576112f461123e62ffffff1986168560096000611d00565b505b5092915050565b600082600f61130b81611058565b5060006113198660006111b4565b6001600160401b03169050600061133562ffffff198816611a45565b6001600160601b031690508186106113835760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610245565b600061138e83611a5c565b60ff1690506000805b888110156113e4576113bb6113ac8486612d66565b62ffffff198c1690600e611ab5565b91506113c682611adf565b6113d09084612c74565b92506113dd600182612c74565b9050611397565b506113f26111288385612d66565b905060006113ff82611adf565b905061141462ffffff198b168483600d611d00565b9a9950505050505050505050565b600081600d61143081611058565b50600061143e8560086111b4565b905061147661144c82611a5c565b611457906008612cb7565b60ff166001600160401b03831660075b62ffffff198916929190611d00565b95945050505050565b600081600d61148d81611058565b50600061149b8560086111b4565b90506114766008826114ac84611a5c565b60ff166114b99190612c8c565b6001600160401b03166007611467565b60008160076114d781611058565b5060006114e58560006111b4565b905060006114ff61120d62ffffff19881660026001611b28565b905061151362ffffff198716600180611b28565b606a1415806115475750611528600283612d7d565b6001600160401b031661154462ffffff19881660026001611b28565b14155b15611554576110d2611a54565b604d826001600160401b03161115801561157857506004826001600160401b031610155b6115c45760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e48656c7065723a20696e76616c6964206f7072657475726e006044820152606401610245565b6115e162ffffff19871660036001600160401b038416600c611d00565b9695505050505050565b60606000806115f984611a45565b60405193508392506001600160601b031690506116208461161b846020612c74565b611dee565b508181016020016040529052919050565b600081600d61163f81611058565b50610ed061120d62ffffff19861660006008611bc4565b60606000835b611667846001612c74565b8110156116d25785818151811061168e57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b915082826040516020016116ae929190612b37565b604051602081830303815290604052925080806116ca90612e2d565b91505061165c565b50509392505050565b600081816116e881611058565b506116f862ffffff198516611a45565b6001600160601b031661170d5761108a611a54565b600061171a8560006111b4565b9050600061172d62ffffff198716611a45565b6001600160601b031690506001600160401b03821661174e576110d2611a54565b600061175983611a5c565b60ff16905060005b836001600160401b03168110156117c2578282106117815761110e611a54565b60006117976117908486612d66565b600561112b565b90506117a281611f31565b6117ac9084612c74565b92505080806117ba90612e2d565b915050611761565b508181146117d257611174611a54565b6111986006611184565b60606118028484846040518060600160405280602981526020016144e860299139611f85565b90505b9392505050565b8047101561185c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610245565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146118a9576040519150601f19603f3d011682016040523d82523d6000602084013e6118ae565b606091505b50509050806119225760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610245565b505050565b6000806119348385612c74565b9050604051811115611944575060005b806119565762ffffff19915050611805565b5050606092831b9190911790911b1760181b90565b600061197783836120ad565b611a3e57600061199661198a8560d81c90565b64ffffffffff166120d0565b91505060006119ab8464ffffffffff166120d0565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016102459190612b96565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b600060fc826001600160401b031611611a77575060016111af565b61ffff826001600160401b031611611a91575060036111af565b63ffffffff826001600160401b031611611aad575060056111af565b5060096111af565b60006118028484611ac587611a45565b6001600160601b0316611ad89190612d66565b8585611d00565b600081600e611aed81611058565b506000611afb8560086111b4565b9050806001600160401b0316611b1082611a5c565b60ff16611b1d9190612c74565b611476906008612c74565b6000611b35826020612da5565b611b40906008612d3d565b60ff16611b4e85858561217c565b901c949350505050565b60006001600160401b03821115611bc05760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610245565b5090565b6000611802611bd485858561217c565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff199290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167bffffffff00000000ffffffff00000000ffffffff00000000ffffffff199290911b9190911617604081811c6001600160401b03600160801b03600160c01b03166001600160401b03600160801b03600160c01b03199290911b9190911617608081811c91901b1790565b600080611d0c866122aa565b6001600160601b03169050611d20866122b9565b84611d2b8784612c74565b611d359190612c74565b1115611d485762ffffff19915050610ed0565b611d528582612c74565b90506115e18364ffffffffff168286611927565b60606000611da4611d9f82611d91611d8362ffffff198816611a45565b6001600160601b03166122e6565b62ffffff1987169190611b28565b6120d0565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d01611a13565b6000611df983612347565b611e565760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610245565b611e5f83612359565b611ebf5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610245565b6000611eca84611a45565b6001600160601b031690506000611ee0856122aa565b6001600160601b031690506000604051905084811115611f005760206060fd5b8285848460045afa506115e1611f168760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b6000816005611f3f81611058565b506000611f4d8560246111b4565b9050806001600160401b0316611f6282611a5c565b60ff16611f6f9190612c74565b611f7a906024612c74565b611476906004612c74565b606082471015611fe65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610245565b843b6120345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610245565b600080866001600160a01b031685876040516120509190612b1b565b60006040518083038185875af1925050503d806000811461208d576040519150601f19603f3d011682016040523d82523d6000602084013e612092565b606091505b50915091506120a2828286612397565b979650505050505050565b60008164ffffffffff166120c18460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561212e5760006120ef826008612d3d565b60ff1685901c9050612100816123d0565b61ffff16841793508160ff1660101461211b57601084901b93505b50612127600182612da5565b90506120d6565b50600f5b60ff8160ff1610156121765760ff600882021684901c612151816123d0565b61ffff16831792508160ff1660001461216c57601083901b92505b5060001901612132565b50915091565b600060ff821661218e57506000611805565b61219784611a45565b6001600160601b03166121ad60ff841685612c74565b11156121fd576121e46121bf856122aa565b6001600160601b03166121d186611a45565b6001600160601b0316858560ff16612400565b60405162461bcd60e51b81526004016102459190612b96565b60208260ff1611156122745760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b6064820152608401610245565b600882026000612283866122aa565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60781c6001600160601b031690565b60006122c482611a45565b6122cd836122aa565b6122d79190612cdc565b6001600160601b031692915050565b600060ff821115611bc05760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610245565b6000612352826111a5565b1592915050565b60006123658260d81c90565b64ffffffffff1664ffffffffff1415612380575060006111af565b600061238b836122b9565b60405110199392505050565b606083156123a6575081611805565b8251156123b65782518084602001fd5b8160405162461bcd60e51b81526004016102459190612b96565b60006123e260048360ff16901c61252a565b60ff161760081b62ffff00166123f78261252a565b60ff1617919050565b6060600061240d866120d0565b915050600061241b866120d0565b9150506000612429866120d0565b9150506000612437866120d0565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b600060f08083179060ff821614156125465760309150506111af565b8060ff1660f1141561255c5760319150506111af565b8060ff1660f214156125725760329150506111af565b8060ff1660f314156125885760339150506111af565b8060ff1660f4141561259e5760349150506111af565b8060ff1660f514156125b45760359150506111af565b8060ff1660f614156125ca5760369150506111af565b8060ff1660f714156125e05760379150506111af565b8060ff1660f814156125f65760389150506111af565b8060ff1660f9141561260c5760399150506111af565b8060ff1660fa14156126225760619150506111af565b8060ff1660fb14156126385760629150506111af565b8060ff1660fc141561264e5760639150506111af565b8060ff1660fd14156126645760649150506111af565b8060ff1660fe141561267a5760659150506111af565b8060ff1660ff14156126905760669150506111af565b50919050565b61167380612e7583390190565b60405180606001604052806000815260200160008152602001600081525090565b8280546126d090612df8565b90600052602060002090601f0160209004810192826126f25760008555612738565b82601f1061270b57805160ff1916838001178555612738565b82800160010185558215612738579182015b8281111561273857825182559160200191906001019061271d565b50611bc09291505b80821115611bc05760008155600101612740565b80356001600160a01b03811681146111af57600080fd5b80356001600160e01b0319811681146111af57600080fd5b60008083601f840112612794578182fd5b5081356001600160401b038111156127aa578182fd5b6020830191508360208285010111156127c257600080fd5b9250929050565b600082601f8301126127d9578081fd5b81356001600160401b03808211156127f3576127f3612e5e565b604051601f8301601f19908116603f0116810190828211818310171561281b5761281b612e5e565b81604052838152866020858801011115612833578485fd5b8360208701602083013792830160200193909352509392505050565b60008060008060008060008060006101208a8c03121561286d578485fd5b6128768a612754565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356001600160401b038111156128ba578283fd5b6128c68c828d016127c9565b9250506101008a0135600681106128db578182fd5b809150509295985092959850929598565b6000602082840312156128fd578081fd5b81518015158114611805578182fd5b60006020828403121561291d578081fd5b5051919050565b60008060008060008060008060008060006101208c8e031215612945578182fd5b8b359a5061295560208d01612754565b995061296360408d0161276b565b98506001600160401b0360608d013581101561297d578283fd5b61298d8e60608f01358f016127c9565b98508060808e0135111561299f578283fd5b6129af8e60808f01358f01612783565b90985096506129c060a08e0161276b565b955060c08d013594508060e08e013511156129d9578283fd5b506129ea8d60e08e01358e01612783565b81945080935050506101008c013590509295989b509295989b9093969950565b600080600080600080600080610100898b031215612a26578384fd5b8835975060208901356001600160401b03811115612a42578485fd5b612a4e8b828c016127c9565b989b989a505050506040870135966060810135966080820135965060a0820135955060c0820135945060e09091013592509050565b60008151808452612a9b816020860160208601612dc8565b601f01601f19169290920160200192915050565b8051825260208082015190830152604090810151910152565b600063ffffffff60e01b80871683528551612aea816004860160208a01612dc8565b855190840190612b01816004840160208a01612dc8565b919094169301600481019390935250506008019392505050565b60008251612b2d818460208701612dc8565b9190910192915050565b60008351612b49818460208801612dc8565b6001600160f81b0319939093169190920190815260010192915050565b600085825284602083015260806040830152612b856080830185612a83565b905082606083015295945050505050565b6000602082526118056020830184612a83565b6020808252601b908201527a149d5b99549bdd5d195c931a588e881ddc9bdb99c8185c1c081a59602a1b604082015260600190565b6020808252601d908201527f52756e65526f757465724c69623a20696e76616c696420736372697074000000604082015260600190565b60a08101612c238286612aaf565b6001600160a01b0393909316606082015260800152919050565b84815260c08101612c516020830186612aaf565b6001600160a01b0393841660808301529190921660a09092019190915292915050565b60008219821115612c8757612c87612e48565b500190565b60006001600160401b03828116848216808303821115612cae57612cae612e48565b01949350505050565b600060ff821660ff84168060ff03821115612cd457612cd4612e48565b019392505050565b60006001600160601b03828116848216808303821115612cae57612cae612e48565b600082612d1957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d3857612d38612e48565b500290565b600060ff821660ff84168160ff0481118215151615612d5e57612d5e612e48565b029392505050565b600082821015612d7857612d78612e48565b500390565b60006001600160401b0383811690831681811015612d9d57612d9d612e48565b039392505050565b600060ff821660ff841680821015612dbf57612dbf612e48565b90039392505050565b60005b83811015612de3578181015183820152602001612dcb565b83811115612df2576000848401525b50505050565b600281046001821680612e0c57607f821691505b6020821081141561269057634e487b7160e01b600052602260045260246000fd5b6000600019821415612e4157612e41612e48565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe608060405234801561001057600080fd5b50611653806100206000396000f3fe608060405234801561001057600080fd5b50600436106101285760003560e01c8063028468581461012d57806303d41e0e1461014257806306fdde031461017a578063095ea7b31461018f5780631624f6c6146101a257806318160ddd146101b557806323b872dd146101c75780633092afd5146101da578063313ce567146101ed578063395093511461020657806340c10f191461021957806342966c681461022c57806370a082311461023f578063715018a61461026857806376809ce3146102705780638da5cb5b1461027d57806395d89b411461029d578063983b2d56146102a5578063a457c2d7146102b8578063a9059cbb146102cb578063dd62ed3e146102de578063f2fde38b146102f1578063f44637ba14610304578063f46eccc414610317575b600080fd5b61014061013b366004611310565b61033a565b005b610165610150366004611310565b60cb6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6101826103b9565b6040516101719190611458565b61016561019d36600461139e565b61044b565b6101406101b03660046113c7565b610465565b6035545b604051908152602001610171565b6101656101d5366004611363565b61059a565b6101406101e8366004611310565b6105be565b60c95460ff165b60405160ff9091168152602001610171565b61016561021436600461139e565b610634565b61016561022736600461139e565b610656565b61016561023a366004611440565b6106dc565b6101b961024d366004611310565b6001600160a01b031660009081526033602052604090205490565b61014061075e565b60c9546101f49060ff1681565b610285610768565b6040516001600160a01b039091168152602001610171565b610182610777565b6101406102b3366004611310565b610786565b6101656102c636600461139e565b61082d565b6101656102d936600461139e565b6108a8565b6101b96102ec366004611331565b6108b6565b6101406102ff366004611310565b6108e1565b610140610312366004611310565b61095a565b610165610325366004611310565b60ca6020526000908152604090205460ff1681565b610342610a01565b61034b81610a60565b6103705760405162461bcd60e51b815260040161036790611558565b60405180910390fd5b6001600160a01b038116600081815260cb6020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b6060603680546103c8906115ac565b80601f01602080910402602001604051908101604052809291908181526020018280546103f4906115ac565b80156104415780601f1061041657610100808354040283529160200191610441565b820191906000526020600020905b81548152906001019060200180831161042457829003601f168201915b5050505050905090565b600033610459818585610aa7565b60019150505b92915050565b600054610100900460ff16158080156104855750600054600160ff909116105b8061049f5750303b15801561049f575060005460ff166001145b6105025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610367565b6000805460ff191660011790558015610525576000805461ff0019166101001790555b61052f8484610bcc565b610537610c01565b61053f610c30565b60c9805460ff191660ff84161790558015610594576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000336105a8858285610c5f565b6105b3858585610cd3565b506001949350505050565b6105c6610a01565b6105cf81610e6c565b6105eb5760405162461bcd60e51b8152600401610367906114dd565b6001600160a01b038116600081815260ca6020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b60003361045981858561064783836108b6565b6106519190611588565b610aa7565b6000610660610eb3565b61066933610e6c565b6106855760405162461bcd60e51b8152600401610367906114dd565b61068f8383610f0d565b6040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89060200160405180910390a350600161045f6001609755565b60006106e6610eb3565b6106ef33610a60565b61070b5760405162461bcd60e51b815260040161036790611558565b6107153383610fc4565b604051828152339081907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200160405180910390a35060016107596001609755565b919050565b610766610a01565b565b6065546001600160a01b031690565b6060603780546103c8906115ac565b61078e610a01565b61079781610e6c565b156107e15760405162461bcd60e51b815260206004820152601a6024820152792ba93ab732a637b3b4b19d1030b63932b0b23c9036b4b73a32b960311b6044820152606401610367565b6001600160a01b038116600081815260ca6020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b6000338161083b82866108b6565b90508381101561089b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610367565b6105b38286868403610aa7565b600033610459818585610cd3565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6108e9610a01565b6001600160a01b03811661094e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610367565b610957816110e3565b50565b610962610a01565b61096b81610a60565b156109b55760405162461bcd60e51b815260206004820152601a6024820152792ba93ab732a637b3b4b19d1030b63932b0b23c90313ab93732b960311b6044820152606401610367565b6001600160a01b038116600081815260cb6020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b33610a0a610768565b6001600160a01b0316146107665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610367565b60006001600160a01b038216610a885760405162461bcd60e51b8152600401610367906114ab565b506001600160a01b0316600090815260cb602052604090205460ff1690565b6001600160a01b038316610b095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610367565b6001600160a01b038216610b6a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610367565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600054610100900460ff16610bf35760405162461bcd60e51b81526004016103679061150d565b610bfd8282611135565b5050565b600054610100900460ff16610c285760405162461bcd60e51b81526004016103679061150d565b610766611183565b600054610100900460ff16610c575760405162461bcd60e51b81526004016103679061150d565b6107666111b3565b6000610c6b84846108b6565b905060001981146105945781811015610cc65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610367565b6105948484848403610aa7565b6001600160a01b038316610d375760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610367565b6001600160a01b038216610d995760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610367565b6001600160a01b03831660009081526033602052604090205481811015610e115760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610367565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591516000805160206115fe83398151915290610e5f9086815260200190565b60405180910390a3610594565b60006001600160a01b038216610e945760405162461bcd60e51b8152600401610367906114ab565b506001600160a01b0316600090815260ca602052604090205460ff1690565b60026097541415610f065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610367565b6002609755565b6001600160a01b038216610f635760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610367565b8060356000828254610f759190611588565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481526000805160206115fe833981519152910160405180910390a3610bfd565b6001609755565b6001600160a01b0382166110245760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610367565b6001600160a01b038216600090815260336020526040902054818110156110985760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610367565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192916000805160206115fe8339815191529101610bbf565b505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661115c5760405162461bcd60e51b81526004016103679061150d565b815161116f9060369060208501906111da565b5080516110de9060379060208401906111da565b600054610100900460ff166111aa5760405162461bcd60e51b81526004016103679061150d565b610766336110e3565b600054610100900460ff16610fbd5760405162461bcd60e51b81526004016103679061150d565b8280546111e6906115ac565b90600052602060002090601f016020900481019282611208576000855561124e565b82601f1061122157805160ff191683800117855561124e565b8280016001018555821561124e579182015b8281111561124e578251825591602001919060010190611233565b5061125a92915061125e565b5090565b5b8082111561125a576000815560010161125f565b80356001600160a01b038116811461075957600080fd5b600082601f83011261129a578081fd5b81356001600160401b03808211156112b4576112b46115e7565b604051601f8301601f19908116603f011681019082821181831017156112dc576112dc6115e7565b816040528381528660208588010111156112f4578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611321578081fd5b61132a82611273565b9392505050565b60008060408385031215611343578081fd5b61134c83611273565b915061135a60208401611273565b90509250929050565b600080600060608486031215611377578081fd5b61138084611273565b925061138e60208501611273565b9150604084013590509250925092565b600080604083850312156113b0578182fd5b6113b983611273565b946020939093013593505050565b6000806000606084860312156113db578283fd5b83356001600160401b03808211156113f1578485fd5b6113fd8783880161128a565b94506020860135915080821115611412578384fd5b5061141f8682870161128a565b925050604084013560ff81168114611435578182fd5b809150509250925092565b600060208284031215611451578081fd5b5035919050565b6000602080835283518082850152825b8181101561148457858101830151858201604001528201611468565b818111156114955783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601890820152775752756e654c6f6769633a207a65726f206164647265737360401b604082015260600190565b6020808252601690820152752ba93ab732a637b3b4b19d103737ba1036b4b73a32b960511b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601690820152752ba93ab732a637b3b4b19d103737ba10313ab93732b960511b604082015260600190565b600082198211156115a757634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806115c057607f821691505b602082108114156115e157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e597f14a3e526909f18ad6a5e07a3b2080de035ac3713c5033b60843cd3cf87b64736f6c63430008020033416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122033871484d9fd730bf1e37688508275cdc896cd1d3be700b381f3ff41f05661d564736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkTx(uint256,address,bytes4,bytes,bytes,bytes4,uint256,bytes,uint256)": {
        "notice": "Check tx inclusion proof"
      },
      "unwrapHelper(address,uint256,uint256,IRuneRouter.runeUnwrapRequest[] storage,mapping(uint256 => IRuneRouter.thirdParty) storage,uint256,uint256,bytes,ScriptTypes)": {
        "notice": "Save unwrap request after checking user script validity and         return fees and bunrt amount"
      },
      "wrapHelper(uint256,bytes,bytes32,mapping(bytes32 => IRuneRouter.runeWrapRequest) storage,mapping(uint256 => address) storage,mapping(uint256 => IRuneRouter.thirdParty) storage,uint256,uint256)": {
        "notice": "Extract request info and store it"
      }
    },
    "notice": "Helper library for Brc20Router",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}