{
  "address": "0x80b193DD1d819041852eeB65600880Dc8E0cCAaB",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "teleportDAOToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teleBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTDTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTNTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inactivationDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceOfCollateral",
          "type": "uint256"
        }
      ],
      "name": "neededTeleBTCToBuyCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "teleportDAOToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teleBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTDTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTNTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inactivationDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        }
      ],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa72af2f3184dba290e861cbca7909c52e42ec7d54399768f248222f7b8d3cfcd",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0x80b193DD1d819041852eeB65600880Dc8E0cCAaB",
    "transactionIndex": 0,
    "gasUsed": "1598081",
    "logsBloom": "0x
    "blockHash": "0xadc3860ef1b6c952a483cd9beefee24bb31965f6d0e794288db73c6206b11173",
    "transactionHash": "0xa72af2f3184dba290e861cbca7909c52e42ec7d54399768f248222f7b8d3cfcd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5911535,
        "transactionHash": "0xa72af2f3184dba290e861cbca7909c52e42ec7d54399768f248222f7b8d3cfcd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x0000000000000000000000006ab3d36c46ecfb9b9c0bd51cb1c3da5a2c81cea6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000bbed11bdedcd81000000000000000000000000000000000000000000000002a2c320ea216c0cc60000000000000000000000000000000000000000000000d9555be57a500c43f7000000000000000000000000000000000000000000000002a20733d8637e3f450000000000000000000000000000000000000000000000d95617d28c0dfa1178",
        "logIndex": 0,
        "blockHash": "0xadc3860ef1b6c952a483cd9beefee24bb31965f6d0e794288db73c6206b11173"
      }
    ],
    "blockNumber": 5911535,
    "cumulativeGasUsed": "1598081",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0086e6212fc523eeb5e34dac09705bb7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct ILockersManager.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct ILockersManager.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceOfCollateral\",\"type\":\"uint256\"}],\"name\":\"neededTeleBTCToBuyCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct ILockersManager.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct ILockersManager.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"}],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)\":{\"details\":\"Net minted amount is total minted minus total burnt for the locker\",\"returns\":{\"theLockerCapacity\":\"          The net minted of the locker\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)\":{\"notice\":\"Get how much the locker can mint\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LockersManagerLib.sol\":\"LockersManagerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x65d6ce283fb19a20a37abd09247371c2362932c49a6b40dafab022c2f1153710\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITeleBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0x4189ccf1aee711d37f78f0e09b1a6eb80e5c38c3f95a864c4b993ef04dda8244\",\"license\":\"MIT\"},\"contracts/libraries/LockersManagerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\nimport \\\"../routers/interfaces/IBurnRouter.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\n\\nlibrary LockersManagerLib {\\n\\n    function requestToBecomeLocker(\\n        mapping(address => ILockersManager.locker) storage lockersMapping,\\n        ILockersManager.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        bytes calldata _candidateLockingScript,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external {\\n\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isLocker,\\n            \\\"Lockers: is locker\\\"\\n        );\\n\\n        require(\\n            _lockedTDTAmount >= libParams.minRequiredTDTLockedAmount,\\n            \\\"Lockers: low TDT\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= libParams.minRequiredTNTLockedAmount && msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low TNT\\\"\\n        );\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        ILockersManager.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n\\n        lockersMapping[msg.sender] = locker_;\\n\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        ILockersManager.locker storage theLocker,\\n        uint _collateralAmount\\n    ) external returns (uint neededTeleBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedNativeTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        neededTeleBTC = theLocker.slashingTeleBTCAmount * _collateralAmount / theLocker.reservedNativeTokenForSlash;\\n\\n        if (neededTeleBTC < theLocker.slashingTeleBTCAmount) {\\n            // to avoid precision loss (so buyer cannot profit of it)\\n            neededTeleBTC = neededTeleBTC + 1;\\n        }\\n\\n        // Updates locker's slashing info \\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount - neededTeleBTC;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash - _collateralAmount;\\n\\n    }\\n\\n    function liquidateLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external view returns (uint neededTeleBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        // ILockersManager.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libConstants,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.nativeTokenLockedAmount) {\\n            _maxBuyableCollateral = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of TeleBTC to buy collateralAmount\\n        neededTeleBTC = neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededTeleBTC = neededTeleBTC + 1; // to prevent precision loss\\n\\n    }\\n\\n    function slashThiefLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount,\\n        address _rewardRecipient\\n    ) external returns (uint rewardInNativeToken, uint neededNativeTokenForSlash) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentNativeToken = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _amount, // Total amount of TeleBTC that is slashed\\n            ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n            libConstants.NativeTokenDecimal, // Decimal of TNT\\n            libParams.teleBTC, // Input token\\n            libConstants.NativeToken // Output token\\n        );\\n\\n        rewardInNativeToken = equivalentNativeToken*_rewardAmount/_amount;\\n        neededNativeTokenForSlash = equivalentNativeToken*libParams.liquidationRatio/libConstants.OneHundredPercent;\\n\\n        if ((rewardInNativeToken + neededNativeTokenForSlash) > theLocker.nativeTokenLockedAmount) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInNativeToken = rewardInNativeToken*theLocker.nativeTokenLockedAmount/\\n                (rewardInNativeToken + neededNativeTokenForSlash);\\n            neededNativeTokenForSlash = theLocker.nativeTokenLockedAmount - rewardInNativeToken;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n            = theLocker.nativeTokenLockedAmount - (rewardInNativeToken + neededNativeTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n        \\n        theLocker.netMinted\\n            = theLocker.netMinted - _amount;\\n\\n        theLocker.slashingTeleBTCAmount\\n            = theLocker.slashingTeleBTCAmount + _amount; \\n\\n        theLocker.reservedNativeTokenForSlash\\n            = theLocker.reservedNativeTokenForSlash + neededNativeTokenForSlash;\\n\\n        \\n    }\\n\\n    function slashIdleLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint equivalentNativeToken) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentNativeToken = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount, // Total amount of TeleBTC that is slashed\\n            ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n            libConstants.NativeTokenDecimal, // Decimal of TNT\\n            libParams.teleBTC, // Input token\\n            libConstants.NativeToken // Output token\\n        );\\n\\n        if (equivalentNativeToken > theLocker.nativeTokenLockedAmount) {\\n            equivalentNativeToken = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n        = theLocker.nativeTokenLockedAmount - equivalentNativeToken;\\n\\n    }\\n\\n    function maximumBuyableCollateral(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint teleBTCDecimal = ERC20(libParams.teleBTC).decimals();\\n\\n        uint antecedent = (libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** libConstants.NativeTokenDecimal)) -\\n        (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        uint consequent = ((libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent) -\\n        (_priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        return antecedent/consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n        return (_priceOfOneUnitOfCollateral * theLocker.nativeTokenLockedAmount * \\n            (10 ** (1 + ERC20(libParams.teleBTC).decimals())))/\\n                (theLocker.netMinted * libParams.liquidationRatio * (10 ** (1 + libConstants.NativeTokenDecimal)));\\n    }\\n\\n    function neededTeleBTCToBuyCollateral(\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _collateralAmount,\\n        uint _priceOfCollateral\\n    ) public pure returns (uint) {\\n        return (_collateralAmount * _priceOfCollateral * libParams.priceWithDiscountRatio)/\\n            (libConstants.OneHundredPercent*(10 ** libConstants.NativeTokenDecimal));\\n    }\\n\\n    function addToCollateral(\\n        uint value,\\n        ILockersManager.locker storage theLocker,\\n        uint _addingNativeTokenAmount\\n    ) external {\\n        require(\\n            value == _addingNativeTokenAmount,\\n            \\\"Lockers: msg value\\\"\\n        );\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount + _addingNativeTokenAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral,\\n        uint _removingNativeTokenAmount\\n    ) internal {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: account is not a locker\\\"\\n        );\\n\\n        // Capacity of locker = (locker's collateral value in TeleBTC) * (collateral ratio) - (minted TeleBTC) \\n        uint lockerCapacity = (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * \\n            libConstants.OneHundredPercent)/\\n                (libParams.collateralRatio * (10 ** libConstants.NativeTokenDecimal)) - theLocker.netMinted;\\n\\n        uint maxRemovableCollateral = (lockerCapacity * (10 ** libConstants.NativeTokenDecimal))/_priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingNativeTokenAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount >= libParams.minRequiredTNTLockedAmount,\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            (10**libConstants.NativeTokenDecimal), // 1 Ether is 10^18 wei\\n            libConstants.NativeTokenDecimal,\\n            ITeleBTC(libParams.teleBTC).decimals(),\\n            libConstants.NativeToken,\\n            libParams.teleBTC\\n        );\\n\\n    }\\n\\n\\n    function lockerCollateralInTeleBTC(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            theLocker.nativeTokenLockedAmount,\\n            libConstants.NativeTokenDecimal,\\n            ITeleBTC(libParams.teleBTC).decimals(),\\n            libConstants.NativeToken,\\n            libParams.teleBTC\\n        );\\n    }\\n\\n\\n    /// @notice                             Get how much the locker can mint\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @return theLockerCapacity           The net minted of the locker\\n    function getLockerCapacity(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint netMinted,\\n        uint amount\\n    ) public view returns (uint theLockerCapacity) {\\n        uint _lockerCollateralInTeleBTC = lockerCollateralInTeleBTC(\\n            theLocker,\\n            libConstants,\\n            libParams\\n        )*libConstants.OneHundredPercent/libParams.collateralRatio;\\n\\n\\n        if (_lockerCollateralInTeleBTC > netMinted) {\\n            theLockerCapacity =  _lockerCollateralInTeleBTC - netMinted;\\n        } else {\\n            theLockerCapacity = 0;\\n        }\\n\\n\\n\\n        require(\\n            theLockerCapacity >= amount,\\n            \\\"Lockers: insufficient capacity\\\"\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0x395d3a31ca4eb20bff0852adc8e4881d77eae1f717f79d4315fffd3abd95fb7a\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewExchangeConnector(\\n        address oldExchangeConnector,\\n        address newExchangeConnector\\n    );\\n\\n    event NewTST(\\n        address oldTST,\\n        address newTST\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x323ce476b4b93b073818a08bebb203285be129170063a4762b2f10b7f1451b83\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address indexed exchangeRouter, address indexed exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address indexed exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _token               Address of the token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address indexed _token, address indexed _priceProxyAddress);\\n\\n    /// @notice                     Emits when changes made to acceptable delay\\n\\tevent NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    /// @notice                     Emits when changes made to oracle native token\\n\\tevent NewOracleNativeToken(address indexed oldOracleNativeToken, address indexed newOracleNativeToken);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives USD price proxy address for a token\\n    /// @param _token          Address of the token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _token) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmountByAverage(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _token, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0x55bea95b019d709a74c525ccf25d384c8bb3ff12f56db7605b41c1e2a3aff1c5\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param userTargetAddress Address of the user on EVM\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n\\t/// @param thirdPartyId Id of third party\\n\\t/// @param inputToken inputToken address\\n\\t/// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n\\t/// @param fees [network fee, locker fee, protocol fee, third party fee]\\n\\t\\n  \\tevent NewUnwrap(\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline,\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress inputToken,\\n\\t\\tuint[3] amounts,\\n\\t\\tuint[4] fees\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidUnwrap(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when network fee is updated\\n    event NewNetworkFee(\\n        uint oldNetworkFee, \\n        uint newNetworkFee\\n    );\\n\\n\\t/// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle, \\n        address newNetworkFeeOracle\\n    );\\n\\n\\t/// @notice                     Emits when changes made to third party address\\n\\tevent NewThirdPartyAddress(\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress oldThirdPartyAddress, \\n\\t\\taddress newThirdPartyAddress\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to third party fee\\n\\tevent NewThirdPartyFee(\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint oldThirdPartyFee, \\n\\t\\tuint newThirdPartyFee\\n\\t);\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\tfunction bitcoinFeeOracle() external view returns (address);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setNetworkFee(uint _networkFee) external;\\n\\n\\tfunction setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n\\tfunction setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external;\\n\\n\\tfunction setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n\\tfunction unwrap(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\",\"keccak256\":\"0x333bd59833486ecc365fbd0952e5624d90a08f95a0e9ba1280ee2f8d4884b74c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611bf661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100dd5760003560e01c8063a5d322ac1161008b578063b0891de411610065578063b0891de4146101c9578063bfeea7d2146101fe578063c57199281461021e576100dd565b8063a5d322ac14610190578063a8143bbf146101a3578063a9cd8aa8146101b6576100dd565b806343196d1d116100bc57806343196d1d1461013b5780634f02c5a41461015b57806373f8175c1461017d576100dd565b8062014127146100e25780630bc2c2db14610115578063167e7c5714610128575b600080fd5b8180156100ee57600080fd5b506101026100fd366004611876565b610231565b6040519081526020015b60405180910390f35b610102610123366004611779565b610389565b610102610136366004611897565b61047d565b81801561014757600080fd5b506101026101563660046117c0565b6105c5565b81801561016757600080fd5b5061017b61017636600461166e565b61079f565b005b61010261018b3660046117c0565b610bdf565b61010261019e36600461173b565b610c86565b6101026101b1366004611779565b610dc3565b6101026101c43660046118cc565b610f26565b8180156101d557600080fd5b506101e96101e4366004611812565b610f55565b6040805192835260208301919091520161010c565b81801561020a57600080fd5b5061017b61021936600461192a565b6111fb565b61010261022c366004611779565b6112bb565b600882015460009060ff166102a25760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b60648201526084015b60405180910390fd5b826007015482111561031c5760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b6572733a206e6f7420656e6f75676820736c617368656420636f6c6c60448201527f61746572616c20746f20627579000000000000000000000000000000000000006064820152608401610299565b82600701548284600601546103319190611b39565b61033b91906119f2565b90508260060154811015610357576103548160016119b5565b90505b8083600601546103679190611b58565b6006840155600783015461037c908390611b58565b6007909301929092555090565b60008360800151600161039c91906119b5565b6103a790600a611a58565b83610120015186600501546103bc9190611b39565b6103c69190611b39565b83602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611955565b6104469060016119cd565b61045190600a611a67565b60048701546104609085611b39565b61046a9190611b39565b61047491906119f2565b95945050505050565b600081608001516001600160a01b03166316fac92a8460800151600a6104a39190611a58565b856080015185602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e557600080fd5b505afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611955565b60a088015160208801516040516001600160e01b031960e088901b1681526004810195909552602485019390935260ff90911660448401526001600160a01b03908116606484015216608482015260a40160206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190611912565b9392505050565b600885015460009060ff166106315760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b6064820152608401610299565b60808401516001600160a01b03166316fac92a61064e84866119b5565b86602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190611955565b6080890151602089015160a08b01516040516001600160e01b031960e088901b168152600481019590955260ff909316602485015260448401919091526001600160a01b03908116606484015216608482015260a40160206040518083038186803b15801561073157600080fd5b505afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190611912565b9050856004015481111561077e575060048501545b80866004015461078e9190611b58565b866004018190555095945050505050565b33600090815260208b90526040902060080154610100900460ff16156108075760405162461bcd60e51b815260206004820152601560248201527f4c6f636b6572733a2069732063616e64696461746500000000000000000000006044820152606401610299565b33600090815260208b9052604090206008015460ff161561086a5760405162461bcd60e51b815260206004820152601260248201527f4c6f636b6572733a206973206c6f636b657200000000000000000000000000006044820152606401610299565b8860a001518710156108be5760405162461bcd60e51b815260206004820152601060248201527f4c6f636b6572733a206c6f7720544454000000000000000000000000000000006044820152606401610299565b8860c0015186101580156108d157508534145b61091d5760405162461bcd60e51b815260206004820152601060248201527f4c6f636b6572733a206c6f7720544e54000000000000000000000000000000006044820152606401610299565b6001600160a01b038816156109745760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a2075736564206c6f636b696e6720736372697074000000006044820152606401610299565b6109d86040805161016081019091526060815260208101600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581525090565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506060810188905260808101879052600161012082015260208101846005811115610a4b57634e487b7160e01b600052602160045260246000fd5b90816005811115610a6c57634e487b7160e01b600052602160045260246000fd5b8152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160400181905250808b6000336001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000019080519060200190610afe929190611450565b50602082015160018083018054909160ff1990911690836005811115610b3457634e487b7160e01b600052602160045260246000fd5b021790555060408201518051610b54916002840191602090910190611450565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010080830151600890920180546101208501516101409095015160ff199091169315159390931761ff0019169315159091029290921762ff0000191662010000911515919091021790555050505050505050505050565b6000808461010001518660000151610bf8898989610c86565b610c029190611b39565b610c0c91906119f2565b905083811115610c2757610c208482611b58565b9150610c2c565b600091505b82821015610c7c5760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e73756666696369656e7420636170616369747900006044820152606401610299565b5095945050505050565b600081608001516001600160a01b03166316fac92a8560040154856080015185602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190611955565b60a088015160208801516040516001600160e01b031960e088901b1681526004810195909552602485019390935260ff90911660448401526001600160a01b03908116606484015216608482015260a40160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190611912565b949350505050565b60008083602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0357600080fd5b505afa158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3b9190611955565b60ff1690506000610e4d82600a611a58565b848860040154610e5d9190611b39565b610e679190611b39565b6080870151610e7790600a611a58565b86610120015189600501548960400151610e919190611b39565b610e9b9190611b39565b610ea59190611b39565b610eaf9190611b58565b90506000610ebe83600a611a58565b610ec89086611b39565b875161014088015161012089015160408b01518991610ee691611b39565b610ef09190611b39565b610efa9190611b39565b610f0491906119f2565b610f0e9190611b58565b9050610f1a81836119f2565b98975050505050505050565b60008460800151600a610f399190611a58565b8551610f459190611b39565b6101408501516104608486611b39565b6008860154600090819060ff16610fc35760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b6064820152608401610299565b600086608001516001600160a01b03166316fac92a8689602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561101657600080fd5b505afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e9190611955565b60808c015160208c015160a08e01516040516001600160e01b031960e088901b168152600481019590955260ff909316602485015260448401919091526001600160a01b03908116606484015216608482015260a40160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190611912565b9050846111018783611b39565b61110b91906119f2565b8851610120890151919450906111219083611b39565b61112b91906119f2565b60048a015490925061113d83856119b5565b111561117b5761114d82846119b5565b60048a015461115c9085611b39565b61116691906119f2565b92508289600401546111789190611b58565b91505b61118582846119b5565b89600401546111949190611b58565b60048a015560058901548511156111ad57886005015494505b8489600501546111bd9190611b58565b60058a015560068901546111d29086906119b5565b60068a015560078901546111e79083906119b5565b896007018190555050965096945050505050565b80831461124a5760405162461bcd60e51b815260206004820152601260248201527f4c6f636b6572733a206d73672076616c756500000000000000000000000000006044820152606401610299565b600882015460ff1661129e5760405162461bcd60e51b815260206004820152601260248201527f4c6f636b6572733a206e6f206c6f636b657200000000000000000000000000006044820152606401610299565b8082600401546112ae91906119b5565b8260040181905550505050565b600884015460009060ff166113275760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b6064820152608401610299565b6000611333858561047d565b9050846020015161134687878785610389565b106113935760405162461bcd60e51b815260206004820152601360248201527f4c6f636b6572733a206973206865616c746879000000000000000000000000006044820152606401610299565b60006113a187878785610dc3565b905086600401548111156113b6575060048601545b8084111561142c5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206e6f7420656e6f75676820636f6c6c61746572616c207460448201527f6f206275790000000000000000000000000000000000000000000000000000006064820152608401610299565b61143886868685610f26565b92506114458360016119b5565b979650505050505050565b82805461145c90611b6f565b90600052602060002090601f01602090048101928261147e57600085556114c4565b82601f1061149757805160ff19168380011785556114c4565b828001600101855582156114c4579182015b828111156114c45782518255916020019190600101906114a9565b506114d09291506114d4565b5090565b5b808211156114d057600081556001016114d5565b80356001600160a01b038116811461150057600080fd5b919050565b60008083601f840112611516578182fd5b50813567ffffffffffffffff81111561152d578182fd5b60208301915083602082850101111561154557600080fd5b9250929050565b600060c0828403121561155d578081fd5b61156760c0611976565b905081358152602082013560208201526040820135604082015260608201356060820152608082013560808201526115a160a083016114e9565b60a082015292915050565b60006101808083850312156115bf578182fd5b6115c881611976565b9150506115d4826114e9565b81526115e2602083016114e9565b60208201526115f3604083016114e9565b6040820152611604606083016114e9565b6060820152611615608083016114e9565b608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b6000806000806000806000806000806102608b8d03121561168d578586fd5b8a35995061169e8c60208d016115ac565b98506116ad6101a08c016114e9565b97506101c08b013596506101e08b013595506102008b013567ffffffffffffffff808211156116da578687fd5b6116e68e838f01611505565b90975095506102208d01359150600682106116ff578485fd5b9093506102408c01359080821115611715578384fd5b506117228d828e01611505565b915080935050809150509295989b9194979a5092959850565b60008060006102608486031215611750578283fd5b83359250611761856020860161154c565b91506117708560e086016115ac565b90509250925092565b600080600080610280858703121561178f578384fd5b843593506117a0866020870161154c565b92506117af8660e087016115ac565b939692955092936102600135925050565b60008060008060006102a086880312156117d8578081fd5b853594506117e9876020880161154c565b93506117f88760e088016115ac565b949793965093946102608101359450610280013592915050565b6000806000806000806102c0878903121561182b578182fd5b8635955061183c886020890161154c565b945061184b8860e089016115ac565b93506102608701359250610280870135915061186a6102a088016114e9565b90509295509295509295565b60008060408385031215611888578081fd5b50508035926020909101359150565b60008061024083850312156118aa578182fd5b6118b4848461154c565b91506118c38460c085016115ac565b90509250929050565b60008060008061028085870312156118e2578182fd5b6118ec868661154c565b93506118fb8660c087016115ac565b939693955050505061024082013591610260013590565b600060208284031215611923578081fd5b5051919050565b60008060006060848603121561193e578081fd5b505081359360208301359350604090920135919050565b600060208284031215611966578081fd5b815160ff811681146105be578182fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119ad57634e487b7160e01b600052604160045260246000fd5b604052919050565b600082198211156119c8576119c8611baa565b500190565b600060ff821660ff84168060ff038211156119ea576119ea611baa565b019392505050565b600082611a0d57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611611a245750611a4f565b818704821115611a3657611a36611baa565b80861615611a4357918102915b9490941c938002611a15565b94509492505050565b60006105be6000198484611a75565b60006105be60001960ff8516845b600082611a84575060016105be565b81611a91575060006105be565b8160018114611aa75760028114611ab157611ade565b60019150506105be565b60ff841115611ac257611ac2611baa565b6001841b915084821115611ad857611ad8611baa565b506105be565b5060208310610133831016604e8410600b8410161715611b11575081810a83811115611b0c57611b0c611baa565b6105be565b611b1e8484846001611a12565b808604821115611b3057611b30611baa565b02949350505050565b6000816000190483118215151615611b5357611b53611baa565b500290565b600082821015611b6a57611b6a611baa565b500390565b600281046001821680611b8357607f821691505b60208210811415611ba457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220066bf6c34d27aeae00ff5aa1c985759267a3829bf05e63d395a16c352ecb6e4a64736f6c63430008020033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100dd5760003560e01c8063a5d322ac1161008b578063b0891de411610065578063b0891de4146101c9578063bfeea7d2146101fe578063c57199281461021e576100dd565b8063a5d322ac14610190578063a8143bbf146101a3578063a9cd8aa8146101b6576100dd565b806343196d1d116100bc57806343196d1d1461013b5780634f02c5a41461015b57806373f8175c1461017d576100dd565b8062014127146100e25780630bc2c2db14610115578063167e7c5714610128575b600080fd5b8180156100ee57600080fd5b506101026100fd366004611876565b610231565b6040519081526020015b60405180910390f35b610102610123366004611779565b610389565b610102610136366004611897565b61047d565b81801561014757600080fd5b506101026101563660046117c0565b6105c5565b81801561016757600080fd5b5061017b61017636600461166e565b61079f565b005b61010261018b3660046117c0565b610bdf565b61010261019e36600461173b565b610c86565b6101026101b1366004611779565b610dc3565b6101026101c43660046118cc565b610f26565b8180156101d557600080fd5b506101e96101e4366004611812565b610f55565b6040805192835260208301919091520161010c565b81801561020a57600080fd5b5061017b61021936600461192a565b6111fb565b61010261022c366004611779565b6112bb565b600882015460009060ff166102a25760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b60648201526084015b60405180910390fd5b826007015482111561031c5760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b6572733a206e6f7420656e6f75676820736c617368656420636f6c6c60448201527f61746572616c20746f20627579000000000000000000000000000000000000006064820152608401610299565b82600701548284600601546103319190611b39565b61033b91906119f2565b90508260060154811015610357576103548160016119b5565b90505b8083600601546103679190611b58565b6006840155600783015461037c908390611b58565b6007909301929092555090565b60008360800151600161039c91906119b5565b6103a790600a611a58565b83610120015186600501546103bc9190611b39565b6103c69190611b39565b83602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561040357600080fd5b505afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190611955565b6104469060016119cd565b61045190600a611a67565b60048701546104609085611b39565b61046a9190611b39565b61047491906119f2565b95945050505050565b600081608001516001600160a01b03166316fac92a8460800151600a6104a39190611a58565b856080015185602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e557600080fd5b505afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190611955565b60a088015160208801516040516001600160e01b031960e088901b1681526004810195909552602485019390935260ff90911660448401526001600160a01b03908116606484015216608482015260a40160206040518083038186803b15801561058657600080fd5b505afa15801561059a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105be9190611912565b9392505050565b600885015460009060ff166106315760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b6064820152608401610299565b60808401516001600160a01b03166316fac92a61064e84866119b5565b86602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190611955565b6080890151602089015160a08b01516040516001600160e01b031960e088901b168152600481019590955260ff909316602485015260448401919091526001600160a01b03908116606484015216608482015260a40160206040518083038186803b15801561073157600080fd5b505afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190611912565b9050856004015481111561077e575060048501545b80866004015461078e9190611b58565b866004018190555095945050505050565b33600090815260208b90526040902060080154610100900460ff16156108075760405162461bcd60e51b815260206004820152601560248201527f4c6f636b6572733a2069732063616e64696461746500000000000000000000006044820152606401610299565b33600090815260208b9052604090206008015460ff161561086a5760405162461bcd60e51b815260206004820152601260248201527f4c6f636b6572733a206973206c6f636b657200000000000000000000000000006044820152606401610299565b8860a001518710156108be5760405162461bcd60e51b815260206004820152601060248201527f4c6f636b6572733a206c6f7720544454000000000000000000000000000000006044820152606401610299565b8860c0015186101580156108d157508534145b61091d5760405162461bcd60e51b815260206004820152601060248201527f4c6f636b6572733a206c6f7720544e54000000000000000000000000000000006044820152606401610299565b6001600160a01b038816156109745760405162461bcd60e51b815260206004820152601c60248201527f4c6f636b6572733a2075736564206c6f636b696e6720736372697074000000006044820152606401610299565b6109d86040805161016081019091526060815260208101600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581525090565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506060810188905260808101879052600161012082015260208101846005811115610a4b57634e487b7160e01b600052602160045260246000fd5b90816005811115610a6c57634e487b7160e01b600052602160045260246000fd5b8152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160400181905250808b6000336001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000019080519060200190610afe929190611450565b50602082015160018083018054909160ff1990911690836005811115610b3457634e487b7160e01b600052602160045260246000fd5b021790555060408201518051610b54916002840191602090910190611450565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010080830151600890920180546101208501516101409095015160ff199091169315159390931761ff0019169315159091029290921762ff0000191662010000911515919091021790555050505050505050505050565b6000808461010001518660000151610bf8898989610c86565b610c029190611b39565b610c0c91906119f2565b905083811115610c2757610c208482611b58565b9150610c2c565b600091505b82821015610c7c5760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e73756666696369656e7420636170616369747900006044820152606401610299565b5095945050505050565b600081608001516001600160a01b03166316fac92a8560040154856080015185602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a9190611955565b60a088015160208801516040516001600160e01b031960e088901b1681526004810195909552602485019390935260ff90911660448401526001600160a01b03908116606484015216608482015260a40160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190611912565b949350505050565b60008083602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0357600080fd5b505afa158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3b9190611955565b60ff1690506000610e4d82600a611a58565b848860040154610e5d9190611b39565b610e679190611b39565b6080870151610e7790600a611a58565b86610120015189600501548960400151610e919190611b39565b610e9b9190611b39565b610ea59190611b39565b610eaf9190611b58565b90506000610ebe83600a611a58565b610ec89086611b39565b875161014088015161012089015160408b01518991610ee691611b39565b610ef09190611b39565b610efa9190611b39565b610f0491906119f2565b610f0e9190611b58565b9050610f1a81836119f2565b98975050505050505050565b60008460800151600a610f399190611a58565b8551610f459190611b39565b6101408501516104608486611b39565b6008860154600090819060ff16610fc35760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b6064820152608401610299565b600086608001516001600160a01b03166316fac92a8689602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561101657600080fd5b505afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e9190611955565b60808c015160208c015160a08e01516040516001600160e01b031960e088901b168152600481019590955260ff909316602485015260448401919091526001600160a01b03908116606484015216608482015260a40160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190611912565b9050846111018783611b39565b61110b91906119f2565b8851610120890151919450906111219083611b39565b61112b91906119f2565b60048a015490925061113d83856119b5565b111561117b5761114d82846119b5565b60048a015461115c9085611b39565b61116691906119f2565b92508289600401546111789190611b58565b91505b61118582846119b5565b89600401546111949190611b58565b60048a015560058901548511156111ad57886005015494505b8489600501546111bd9190611b58565b60058a015560068901546111d29086906119b5565b60068a015560078901546111e79083906119b5565b896007018190555050965096945050505050565b80831461124a5760405162461bcd60e51b815260206004820152601260248201527f4c6f636b6572733a206d73672076616c756500000000000000000000000000006044820152606401610299565b600882015460ff1661129e5760405162461bcd60e51b815260206004820152601260248201527f4c6f636b6572733a206e6f206c6f636b657200000000000000000000000000006044820152606401610299565b8082600401546112ae91906119b5565b8260040181905550505050565b600884015460009060ff166113275760405162461bcd60e51b815260206004820152602c60248201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060448201526b3b30b634b2103637b1b5b2b960a11b6064820152608401610299565b6000611333858561047d565b9050846020015161134687878785610389565b106113935760405162461bcd60e51b815260206004820152601360248201527f4c6f636b6572733a206973206865616c746879000000000000000000000000006044820152606401610299565b60006113a187878785610dc3565b905086600401548111156113b6575060048601545b8084111561142c5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206e6f7420656e6f75676820636f6c6c61746572616c207460448201527f6f206275790000000000000000000000000000000000000000000000000000006064820152608401610299565b61143886868685610f26565b92506114458360016119b5565b979650505050505050565b82805461145c90611b6f565b90600052602060002090601f01602090048101928261147e57600085556114c4565b82601f1061149757805160ff19168380011785556114c4565b828001600101855582156114c4579182015b828111156114c45782518255916020019190600101906114a9565b506114d09291506114d4565b5090565b5b808211156114d057600081556001016114d5565b80356001600160a01b038116811461150057600080fd5b919050565b60008083601f840112611516578182fd5b50813567ffffffffffffffff81111561152d578182fd5b60208301915083602082850101111561154557600080fd5b9250929050565b600060c0828403121561155d578081fd5b61156760c0611976565b905081358152602082013560208201526040820135604082015260608201356060820152608082013560808201526115a160a083016114e9565b60a082015292915050565b60006101808083850312156115bf578182fd5b6115c881611976565b9150506115d4826114e9565b81526115e2602083016114e9565b60208201526115f3604083016114e9565b6040820152611604606083016114e9565b6060820152611615608083016114e9565b608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b6000806000806000806000806000806102608b8d03121561168d578586fd5b8a35995061169e8c60208d016115ac565b98506116ad6101a08c016114e9565b97506101c08b013596506101e08b013595506102008b013567ffffffffffffffff808211156116da578687fd5b6116e68e838f01611505565b90975095506102208d01359150600682106116ff578485fd5b9093506102408c01359080821115611715578384fd5b506117228d828e01611505565b915080935050809150509295989b9194979a5092959850565b60008060006102608486031215611750578283fd5b83359250611761856020860161154c565b91506117708560e086016115ac565b90509250925092565b600080600080610280858703121561178f578384fd5b843593506117a0866020870161154c565b92506117af8660e087016115ac565b939692955092936102600135925050565b60008060008060006102a086880312156117d8578081fd5b853594506117e9876020880161154c565b93506117f88760e088016115ac565b949793965093946102608101359450610280013592915050565b6000806000806000806102c0878903121561182b578182fd5b8635955061183c886020890161154c565b945061184b8860e089016115ac565b93506102608701359250610280870135915061186a6102a088016114e9565b90509295509295509295565b60008060408385031215611888578081fd5b50508035926020909101359150565b60008061024083850312156118aa578182fd5b6118b4848461154c565b91506118c38460c085016115ac565b90509250929050565b60008060008061028085870312156118e2578182fd5b6118ec868661154c565b93506118fb8660c087016115ac565b939693955050505061024082013591610260013590565b600060208284031215611923578081fd5b5051919050565b60008060006060848603121561193e578081fd5b505081359360208301359350604090920135919050565b600060208284031215611966578081fd5b815160ff811681146105be578182fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119ad57634e487b7160e01b600052604160045260246000fd5b604052919050565b600082198211156119c8576119c8611baa565b500190565b600060ff821660ff84168060ff038211156119ea576119ea611baa565b019392505050565b600082611a0d57634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611611a245750611a4f565b818704821115611a3657611a36611baa565b80861615611a4357918102915b9490941c938002611a15565b94509492505050565b60006105be6000198484611a75565b60006105be60001960ff8516845b600082611a84575060016105be565b81611a91575060006105be565b8160018114611aa75760028114611ab157611ade565b60019150506105be565b60ff841115611ac257611ac2611baa565b6001841b915084821115611ad857611ad8611baa565b506105be565b5060208310610133831016604e8410600b8410161715611b11575081810a83811115611b0c57611b0c611baa565b6105be565b611b1e8484846001611a12565b808604821115611b3057611b30611baa565b02949350505050565b6000816000190483118215151615611b5357611b53611baa565b500290565b600082821015611b6a57611b6a611baa565b500390565b600281046001821680611b8357607f821691505b60208210811415611ba457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220066bf6c34d27aeae00ff5aa1c985759267a3829bf05e63d395a16c352ecb6e4a64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)": {
        "details": "Net minted amount is total minted minus total burnt for the locker",
        "returns": {
          "theLockerCapacity": "          The net minted of the locker"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)": {
        "notice": "Get how much the locker can mint"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}