{
  "address": "0x1C49B4130670EF5f1a80664ce46b0803896a4e4b",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "teleportDAOToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teleBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTDTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTNTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inactivationDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceOfCollateral",
          "type": "uint256"
        }
      ],
      "name": "neededTeleBTCToBuyCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "teleportDAOToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teleBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTDTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTNTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inactivationDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILockersManager.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        }
      ],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90267105af14da5f83b5012777dd895ed494fe117c00e160a51f61c551bbf868",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0x1C49B4130670EF5f1a80664ce46b0803896a4e4b",
    "transactionIndex": 2,
    "gasUsed": "1486684",
    "logsBloom": "0x
    "blockHash": "0xb33b02a718734c04a8161e16f864aa00a1e7382470d5b0b0657515e8a2ba09c0",
    "transactionHash": "0x90267105af14da5f83b5012777dd895ed494fe117c00e160a51f61c551bbf868",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5983150,
        "transactionHash": "0x90267105af14da5f83b5012777dd895ed494fe117c00e160a51f61c551bbf868",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x00000000000000000000000009207a6efee346cb3e4a54ac18523e3715d38b3f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009e73efc611899c0000000000000000000000000000000000000000000000022f687dcc4d06737a000000000000000000000000000000000000000000000097d22b7a8879a0c1220000000000000000000000000000000000000000000000022eca09dc86f4e9de000000000000000000000000000000000000000000000097d2c9ee783fb24abe",
        "logIndex": 8,
        "blockHash": "0xb33b02a718734c04a8161e16f864aa00a1e7382470d5b0b0657515e8a2ba09c0"
      }
    ],
    "blockNumber": 5983150,
    "cumulativeGasUsed": "1724896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3849a4863b3f479a54c4c9d266f63097",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct ILockersManager.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct ILockersManager.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceOfCollateral\",\"type\":\"uint256\"}],\"name\":\"neededTeleBTCToBuyCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct ILockersManager.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct ILockersManager.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"}],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)\":{\"details\":\"Net minted amount is total minted minus total burnt for the locker\",\"returns\":{\"theLockerCapacity\":\"          The net minted of the locker\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)\":{\"notice\":\"Get how much the locker can mint\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LockersManagerLib.sol\":\"LockersManagerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITeleBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0x9686246b83f81aeb2b71cc3b9178ce2a81fd63039dbc26da5e3b08190bce6427\",\"license\":\"MIT\"},\"contracts/libraries/LockersManagerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\n\\nlibrary LockersManagerLib {\\n    function requestToBecomeLocker(\\n        mapping(address => ILockersManager.locker) storage lockersMapping,\\n        ILockersManager.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint256 _lockedTDTAmount,\\n        uint256 _lockedNativeTokenAmount,\\n        bytes calldata _candidateLockingScript,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external {\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(!lockersMapping[msg.sender].isLocker, \\\"Lockers: is locker\\\");\\n\\n        require(\\n            _lockedTDTAmount >= libParams.minRequiredTDTLockedAmount,\\n            \\\"Lockers: low TDT\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= libParams.minRequiredTNTLockedAmount &&\\n                msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low TNT\\\"\\n        );\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n        ILockersManager.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n\\n        lockersMapping[msg.sender] = locker_;\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        ILockersManager.locker storage theLocker,\\n        uint256 _collateralAmount\\n    ) external returns (uint256 neededTeleBTC) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedNativeTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        neededTeleBTC =\\n            (theLocker.slashingTeleBTCAmount * _collateralAmount) /\\n            theLocker.reservedNativeTokenForSlash;\\n\\n        if (neededTeleBTC < theLocker.slashingTeleBTCAmount) {\\n            // to avoid precision loss (so buyer cannot profit of it)\\n            neededTeleBTC = neededTeleBTC + 1;\\n        }\\n\\n        // Updates locker's slashing info\\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount -\\n            neededTeleBTC;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash -\\n            _collateralAmount;\\n    }\\n\\n    function liquidateLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _collateralAmount\\n    ) external view returns (uint256 neededTeleBTC) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        // ILockersManager.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint256 priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libConstants,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint256 _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.nativeTokenLockedAmount) {\\n            _maxBuyableCollateral = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of TeleBTC to buy collateralAmount\\n        neededTeleBTC = neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededTeleBTC = neededTeleBTC + 1; // to prevent precision loss\\n    }\\n\\n    function slashThiefLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _rewardAmount,\\n        uint256 _amount\\n    )\\n        external\\n        returns (uint256 rewardInNativeToken, uint256 neededNativeTokenForSlash)\\n    {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint256 equivalentNativeToken = IPriceOracle(libParams.priceOracle)\\n            .equivalentOutputAmount(\\n                _amount, // Total amount of TeleBTC that is slashed\\n                ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n                libConstants.NativeTokenDecimal, // Decimal of TNT\\n                libParams.teleBTC, // Input token\\n                libConstants.NativeToken // Output token\\n            );\\n\\n        rewardInNativeToken = (equivalentNativeToken * _rewardAmount) / _amount;\\n        neededNativeTokenForSlash =\\n            (equivalentNativeToken * libParams.liquidationRatio) /\\n            libConstants.OneHundredPercent;\\n\\n        if (\\n            (rewardInNativeToken + neededNativeTokenForSlash) >\\n            theLocker.nativeTokenLockedAmount\\n        ) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInNativeToken =\\n                (rewardInNativeToken * theLocker.nativeTokenLockedAmount) /\\n                (rewardInNativeToken + neededNativeTokenForSlash);\\n            neededNativeTokenForSlash =\\n                theLocker.nativeTokenLockedAmount -\\n                rewardInNativeToken;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount -\\n            (rewardInNativeToken + neededNativeTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n\\n        theLocker.netMinted = theLocker.netMinted - _amount;\\n\\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount +\\n            _amount;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash +\\n            neededNativeTokenForSlash;\\n    }\\n\\n    function slashIdleLocker(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _rewardAmount,\\n        uint256 _amount\\n    ) external returns (uint256 equivalentNativeToken) {\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentNativeToken = IPriceOracle(libParams.priceOracle)\\n            .equivalentOutputAmount(\\n                _rewardAmount + _amount, // Total amount of TeleBTC that is slashed\\n                ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n                libConstants.NativeTokenDecimal, // Decimal of TNT\\n                libParams.teleBTC, // Input token\\n                libConstants.NativeToken // Output token\\n            );\\n\\n        if (equivalentNativeToken > theLocker.nativeTokenLockedAmount) {\\n            equivalentNativeToken = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount -\\n            equivalentNativeToken;\\n    }\\n\\n    function maximumBuyableCollateral(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _priceOfOneUnitOfCollateral\\n    ) public view returns (uint256) {\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint256 teleBTCDecimal = ERC20(libParams.teleBTC).decimals();\\n\\n        uint256 antecedent = (libConstants.UpperHealthFactor *\\n            theLocker.netMinted *\\n            libParams.liquidationRatio *\\n            (10**libConstants.NativeTokenDecimal)) -\\n            (theLocker.nativeTokenLockedAmount *\\n                _priceOfOneUnitOfCollateral *\\n                (10**teleBTCDecimal));\\n\\n        uint256 consequent = ((libConstants.UpperHealthFactor *\\n            libParams.liquidationRatio *\\n            _priceOfOneUnitOfCollateral *\\n            libParams.priceWithDiscountRatio) /\\n            libConstants.OneHundredPercent) -\\n            (_priceOfOneUnitOfCollateral * (10**teleBTCDecimal));\\n\\n        return antecedent / consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _priceOfOneUnitOfCollateral\\n    ) public view returns (uint256) {\\n        return\\n            (_priceOfOneUnitOfCollateral *\\n                theLocker.nativeTokenLockedAmount *\\n                (10**(1 + ERC20(libParams.teleBTC).decimals()))) /\\n            (theLocker.netMinted *\\n                libParams.liquidationRatio *\\n                (10**(1 + libConstants.NativeTokenDecimal)));\\n    }\\n\\n    function neededTeleBTCToBuyCollateral(\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _collateralAmount,\\n        uint256 _priceOfCollateral\\n    ) public pure returns (uint256) {\\n        return\\n            (_collateralAmount *\\n                _priceOfCollateral *\\n                libParams.priceWithDiscountRatio) /\\n            (libConstants.OneHundredPercent *\\n                (10**libConstants.NativeTokenDecimal));\\n    }\\n\\n    function addToCollateral(\\n        uint256 value,\\n        ILockersManager.locker storage theLocker,\\n        uint256 _addingNativeTokenAmount\\n    ) external {\\n        require(value == _addingNativeTokenAmount, \\\"Lockers: msg value\\\");\\n\\n        require(theLocker.isLocker, \\\"Lockers: no locker\\\");\\n\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount +\\n            _addingNativeTokenAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 _priceOfOneUnitOfCollateral,\\n        uint256 _removingNativeTokenAmount\\n    ) internal {\\n        require(theLocker.isLocker, \\\"Lockers: account is not a locker\\\");\\n\\n        // Capacity of locker = (locker's collateral value in TeleBTC) * (collateral ratio) - (minted TeleBTC)\\n        uint256 lockerCapacity = (theLocker.nativeTokenLockedAmount *\\n            _priceOfOneUnitOfCollateral *\\n            libConstants.OneHundredPercent) /\\n            (libParams.collateralRatio *\\n                (10**libConstants.NativeTokenDecimal)) -\\n            theLocker.netMinted;\\n\\n        uint256 maxRemovableCollateral = (lockerCapacity *\\n            (10**libConstants.NativeTokenDecimal)) /\\n            _priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingNativeTokenAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount >=\\n                libParams.minRequiredTNTLockedAmount,\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n            theLocker.nativeTokenLockedAmount -\\n            _removingNativeTokenAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams\\n    ) public view returns (uint256) {\\n        return\\n            IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n                (10**libConstants.NativeTokenDecimal), // 1 Ether is 10^18 wei\\n                libConstants.NativeTokenDecimal,\\n                ITeleBTC(libParams.teleBTC).decimals(),\\n                libConstants.NativeToken,\\n                libParams.teleBTC\\n            );\\n    }\\n\\n    function lockerCollateralInTeleBTC(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams\\n    ) public view returns (uint256) {\\n        return\\n            IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n                theLocker.nativeTokenLockedAmount,\\n                libConstants.NativeTokenDecimal,\\n                ITeleBTC(libParams.teleBTC).decimals(),\\n                libConstants.NativeToken,\\n                libParams.teleBTC\\n            );\\n    }\\n\\n    /// @notice                             Get how much the locker can mint\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @return theLockerCapacity           The net minted of the locker\\n    function getLockerCapacity(\\n        ILockersManager.locker storage theLocker,\\n        ILockersManager.lockersLibConstants memory libConstants,\\n        ILockersManager.lockersLibParam memory libParams,\\n        uint256 netMinted,\\n        uint256 amount\\n    ) public view returns (uint256 theLockerCapacity) {\\n        uint256 _lockerCollateralInTeleBTC = (lockerCollateralInTeleBTC(\\n            theLocker,\\n            libConstants,\\n            libParams\\n        ) * libConstants.OneHundredPercent) / libParams.collateralRatio;\\n\\n        if (_lockerCollateralInTeleBTC > netMinted) {\\n            theLockerCapacity = _lockerCollateralInTeleBTC - netMinted;\\n        } else {\\n            theLockerCapacity = 0;\\n        }\\n\\n        require(theLockerCapacity >= amount, \\\"Lockers: insufficient capacity\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0127ba37defad7790f75bfb081a15e3355ce2c6252eae833a1b250c0372b467f\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewTST(\\n        address oldTST,\\n        address newTST\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTSTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _slasher,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x2dfb0206a8c767ccfb583dc3951bdf5596cec3295597dd40b3bd3280f002b94b\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address indexed exchangeRouter, address indexed exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address indexed exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _token               Address of the token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address indexed _token, address indexed _priceProxyAddress);\\n\\n    /// @notice                     Emits when changes made to acceptable delay\\n\\tevent NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    /// @notice                     Emits when changes made to oracle native token\\n\\tevent NewOracleNativeToken(address indexed oldOracleNativeToken, address indexed newOracleNativeToken);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives USD price proxy address for a token\\n    /// @param _token          Address of the token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _token) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmountByAverage(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _token, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0x123ae247106ef583652a87639f83cf3cecd5fba068ea06be3710e43bcd429d13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6119eb61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c8062014127146100b25780630bc2c2db146100e5578063167e7c57146100f857806343196d1d1461010b5780634f02c5a41461012b5780635b7c95881461014d57806373f8175c14610182578063a5d322ac14610195578063a8143bbf146101a8578063a9cd8aa8146101bb578063bfeea7d2146101ce578063c5719928146101ee575b600080fd5b8180156100be57600080fd5b506100d26100cd3660046115e8565b610201565b6040519081526020015b60405180910390f35b6100d26100f336600461154f565b610308565b6100d2610106366004611609565b6103fc565b81801561011757600080fd5b506100d2610126366004611596565b61051f565b81801561013757600080fd5b5061014b610146366004611445565b61068d565b005b81801561015957600080fd5b5061016d610168366004611596565b610aa0565b604080519283526020830191909152016100dc565b6100d2610190366004611596565b610cd9565b6100d26101a3366004611511565b610d80565b6100d26101b636600461154f565b610e96565b6100d26101c936600461163e565b610ff9565b8180156101da57600080fd5b5061014b6101e936600461169c565b611028565b6100d26101fc36600461154f565b6110d2565b600882015460009060ff166102315760405162461bcd60e51b8152600401610228906116ef565b60405180910390fd5b826007015482111561029b5760405162461bcd60e51b815260206004820152602d60248201527f4c6f636b6572733a206e6f7420656e6f75676820736c617368656420636f6c6c60448201526c61746572616c20746f2062757960981b6064820152608401610228565b82600701548284600601546102b0919061192e565b6102ba9190611813565b905082600601548110156102d6576102d38160016117d6565b90505b8083600601546102e6919061194d565b600684015560078301546102fb90839061194d565b6007909301929092555090565b60008360800151600161031b91906117d6565b61032690600a611876565b836101200151866005015461033b919061192e565b610345919061192e565b83602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561038257600080fd5b505afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba91906116c7565b6103c59060016117ee565b6103d090600a611882565b60048701546103df908561192e565b6103e9919061192e565b6103f39190611813565b95945050505050565b600081608001516001600160a01b03166316fac92a8460800151600a6104229190611876565b856080015185602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561046457600080fd5b505afa158015610478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049c91906116c7565b8760a0015187602001516040518663ffffffff1660e01b81526004016104c695949392919061173b565b60206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190611684565b90505b92915050565b600885015460009060ff166105465760405162461bcd60e51b8152600401610228906116ef565b60808401516001600160a01b03166316fac92a61056384866117d6565b86602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d891906116c7565b886080015188602001518a60a001516040518663ffffffff1660e01b815260040161060795949392919061176d565b60206040518083038186803b15801561061f57600080fd5b505afa158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106579190611684565b9050856004015481111561066c575060048501545b80866004015461067c919061194d565b866004018190555095945050505050565b33600090815260208b90526040902060080154610100900460ff16156106ed5760405162461bcd60e51b81526020600482015260156024820152744c6f636b6572733a2069732063616e64696461746560581b6044820152606401610228565b33600090815260208b9052604090206008015460ff16156107455760405162461bcd60e51b81526020600482015260126024820152712637b1b5b2b9399d1034b9903637b1b5b2b960711b6044820152606401610228565b8860a0015187101561078c5760405162461bcd60e51b815260206004820152601060248201526f131bd8dad95c9cce881b1bddc815111560821b6044820152606401610228565b8860c00151861015801561079f57508534145b6107de5760405162461bcd60e51b815260206004820152601060248201526f131bd8dad95c9cce881b1bddc815139560821b6044820152606401610228565b6001600160a01b038816156108345760405162461bcd60e51b815260206004820152601c60248201527b131bd8dad95c9cce881d5cd959081b1bd8dada5b99c81cd8dc9a5c1d60221b6044820152606401610228565b6108986040805161016081019091526060815260208101600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581525090565b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250606081018890526080810187905260016101208201526020810184600581111561090b57634e487b7160e01b600052602160045260246000fd5b9081600581111561092c57634e487b7160e01b600052602160045260246000fd5b8152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160400181905250808b6000336001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000190805190602001906109be929190611200565b50602082015160018083018054909160ff19909116908360058111156109f457634e487b7160e01b600052602160045260246000fd5b021790555060408201518051610a14916002840191602090910190611200565b50606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010080830151600890920180546101208501516101409095015161ffff1990911693151561ff001916939093179315159091029290921762ff0000191662010000911515919091021790555050505050505050505050565b6008850154600090819060ff16610ac95760405162461bcd60e51b8152600401610228906116ef565b600085608001516001600160a01b03166316fac92a8588602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5491906116c7565b8a608001518a602001518c60a001516040518663ffffffff1660e01b8152600401610b8395949392919061176d565b60206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd39190611684565b905083610be0868361192e565b610bea9190611813565b875161012088015191945090610c00908361192e565b610c0a9190611813565b6004890154909250610c1c83856117d6565b1115610c5a57610c2c82846117d6565b6004890154610c3b908561192e565b610c459190611813565b9250828860040154610c57919061194d565b91505b610c6482846117d6565b8860040154610c73919061194d565b60048901556005880154841115610c8c57876005015493505b838860050154610c9c919061194d565b60058901556006880154610cb19085906117d6565b60068901556007880154610cc69083906117d6565b8860070181905550509550959350505050565b6000808461010001518660000151610cf2898989610d80565b610cfc919061192e565b610d069190611813565b905083811115610d2157610d1a848261194d565b9150610d26565b600091505b82821015610d765760405162461bcd60e51b815260206004820152601e60248201527f4c6f636b6572733a20696e73756666696369656e7420636170616369747900006044820152606401610228565b5095945050505050565b600081608001516001600160a01b03166316fac92a8560040154856080015185602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1491906116c7565b8760a0015187602001516040518663ffffffff1660e01b8152600401610e3e95949392919061173b565b60206040518083038186803b158015610e5657600080fd5b505afa158015610e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8e9190611684565b949350505050565b60008083602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e91906116c7565b60ff1690506000610f2082600a611876565b848860040154610f30919061192e565b610f3a919061192e565b6080870151610f4a90600a611876565b86610120015189600501548960400151610f64919061192e565b610f6e919061192e565b610f78919061192e565b610f82919061194d565b90506000610f9183600a611876565b610f9b908661192e565b875161014088015161012089015160408b01518991610fb99161192e565b610fc3919061192e565b610fcd919061192e565b610fd79190611813565b610fe1919061194d565b9050610fed8183611813565b98975050505050505050565b60008460800151600a61100c9190611876565b8551611018919061192e565b6101408501516103df848661192e565b80831461106c5760405162461bcd60e51b81526020600482015260126024820152714c6f636b6572733a206d73672076616c756560701b6044820152606401610228565b600882015460ff166110b55760405162461bcd60e51b81526020600482015260126024820152712637b1b5b2b9399d103737903637b1b5b2b960711b6044820152606401610228565b8082600401546110c591906117d6565b8260040181905550505050565b600884015460009060ff166110f95760405162461bcd60e51b8152600401610228906116ef565b600061110585856103fc565b9050846020015161111887878785610308565b1061115b5760405162461bcd60e51b81526020600482015260136024820152724c6f636b6572733a206973206865616c74687960681b6044820152606401610228565b600061116987878785610e96565b9050866004015481111561117e575060048601545b808411156111dc5760405162461bcd60e51b815260206004820152602560248201527f4c6f636b6572733a206e6f7420656e6f75676820636f6c6c61746572616c20746044820152646f2062757960d81b6064820152608401610228565b6111e886868685610ff9565b92506111f58360016117d6565b979650505050505050565b82805461120c90611964565b90600052602060002090601f01602090048101928261122e5760008555611274565b82601f1061124757805160ff1916838001178555611274565b82800160010185558215611274579182015b82811115611274578251825591602001919060010190611259565b50611280929150611284565b5090565b5b808211156112805760008155600101611285565b80356001600160a01b03811681146112b057600080fd5b919050565b60008083601f8401126112c6578182fd5b5081356001600160401b038111156112dc578182fd5b6020830191508360208285010111156112f457600080fd5b9250929050565b600060c0828403121561130c578081fd5b60405160c081018181106001600160401b038211171561133a57634e487b7160e01b83526041600452602483fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015261137a60a08401611299565b60a08201525092915050565b60006101808284031215611398578081fd5b6113a061179f565b90506113ab82611299565b81526113b960208301611299565b60208201526113ca60408301611299565b60408201526113db60608301611299565b60608201526113ec60808301611299565b608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b6000806000806000806000806000806102608b8d031215611464578586fd5b8a3599506114758c60208d01611386565b98506114846101a08c01611299565b97506101c08b013596506101e08b013595506102008b01356001600160401b03808211156114b0578687fd5b6114bc8e838f016112b5565b90975095506102208d01359150600682106114d5578485fd5b9093506102408c013590808211156114eb578384fd5b506114f88d828e016112b5565b915080935050809150509295989b9194979a5092959850565b60008060006102608486031215611526578283fd5b8335925061153785602086016112fb565b91506115468560e08601611386565b90509250925092565b6000806000806102808587031215611565578384fd5b8435935061157686602087016112fb565b92506115858660e08701611386565b939692955092936102600135925050565b60008060008060006102a086880312156115ae578081fd5b853594506115bf87602088016112fb565b93506115ce8760e08801611386565b949793965093946102608101359450610280013592915050565b600080604083850312156115fa578182fd5b50508035926020909101359150565b600080610240838503121561161c578182fd5b61162684846112fb565b91506116358460c08501611386565b90509250929050565b6000806000806102808587031215611654578081fd5b61165e86866112fb565b935061166d8660c08701611386565b939693955050505061024082013591610260013590565b600060208284031215611695578081fd5b5051919050565b6000806000606084860312156116b0578081fd5b505081359360208301359350604090920135919050565b6000602082840312156116d8578081fd5b815160ff811681146116e8578182fd5b9392505050565b6020808252602c908201527f4c6f636b6572733a20696e7075742061646472657373206973206e6f7420612060408201526b3b30b634b2103637b1b5b2b960a11b606082015260800190565b948552602085019390935260ff9190911660408401526001600160a01b03908116606084015216608082015260a00190565b94855260ff93909316602085015260408401919091526001600160a01b03908116606084015216608082015260a00190565b60405161018081016001600160401b03811182821017156117d057634e487b7160e01b600052604160045260246000fd5b60405290565b600082198211156117e9576117e961199f565b500190565b600060ff821660ff84168060ff0382111561180b5761180b61199f565b019392505050565b60008261182e57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561186e5781600019048211156118545761185461199f565b8085161561186157918102915b93841c9390800290611838565b509250929050565b6000610516838361188d565b600061051660ff8416835b60008261189c57506001610519565b816118a957506000610519565b81600181146118bf57600281146118c9576118e5565b6001915050610519565b60ff8411156118da576118da61199f565b50506001821b610519565b5060208310610133831016604e8410600b8410161715611908575081810a610519565b6119128383611833565b80600019048211156119265761192661199f565b029392505050565b60008160001904831182151516156119485761194861199f565b500290565b60008282101561195f5761195f61199f565b500390565b600181811c9082168061197857607f821691505b6020821081141561199957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d86306d65c035c83c03fc1b33c649b2d7c1aaf5bf529e1394f7ae14bf025514864736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)": {
        "details": "Net minted amount is total minted minus total burnt for the locker",
        "returns": {
          "theLockerCapacity": "          The net minted of the locker"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLockerCapacity(ILockersManager.locker storage,ILockersManager.lockersLibConstants,ILockersManager.lockersLibParam,uint256,uint256)": {
        "notice": "Get how much the locker can mint"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}