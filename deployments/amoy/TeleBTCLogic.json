{
  "address": "0xDCbb3DC87aa39Fe8D4e722A4E625eBE03bF74418",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBlackLister",
          "type": "address"
        }
      ],
      "name": "BlackListerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "blackLister",
          "type": "address"
        }
      ],
      "name": "BlackListerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBurner",
          "type": "address"
        }
      ],
      "name": "BurnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        }
      ],
      "name": "BurnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEpochLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochLength",
          "type": "uint256"
        }
      ],
      "name": "NewEpochLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintLimit",
          "type": "uint256"
        }
      ],
      "name": "NewMintLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addBlackLister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklisters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "burners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlackListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ownerBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeBlackLister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintLimit",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "unBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5909e917c5c685e0a89e401c2539c04b08e580788dc6ad7f7895325bad5b6450",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0xDCbb3DC87aa39Fe8D4e722A4E625eBE03bF74418",
    "transactionIndex": 1,
    "gasUsed": "1987343",
    "logsBloom": "0x00000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000020008000000000000000000000000000000000080000000000000000000000800000000000200000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000100000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000010000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x07107f8ea13823dc9aac23cdff9f91d96e3390ea02e9e82eb33724a160e7bc94",
    "transactionHash": "0x5909e917c5c685e0a89e401c2539c04b08e580788dc6ad7f7895325bad5b6450",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5910564,
        "transactionHash": "0x5909e917c5c685e0a89e401c2539c04b08e580788dc6ad7f7895325bad5b6450",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x0000000000000000000000006ab3d36c46ecfb9b9c0bd51cb1c3da5a2c81cea6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004fb7df40c5d295000000000000000000000000000000000000000000000002b868700e0065f82d0000000000000000000000000000000000000000000000d8f56553288908da7c000000000000000000000000000000000000000000000002b818b82ebfa025980000000000000000000000000000000000000000000000d8f5b50b07c9cead11",
        "logIndex": 7,
        "blockHash": "0x07107f8ea13823dc9aac23cdff9f91d96e3390ea02e9e82eb33724a160e7bc94"
      }
    ],
    "blockNumber": 5910564,
    "cumulativeGasUsed": "2314705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d58b1882bfd20cf9913ec7421b51f280",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlackLister\",\"type\":\"address\"}],\"name\":\"BlackListerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blackLister\",\"type\":\"address\"}],\"name\":\"BlackListerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEpochLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochLength\",\"type\":\"uint256\"}],\"name\":\"NewEpochLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintLimit\",\"type\":\"uint256\"}],\"name\":\"NewMintLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlackLister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlackLister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBlackLister(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be added to blacklisters\"}},\"addBurner(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be added to burners\"}},\"addMinter(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be added to minters\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"blacklist(address)\":{\"details\":\"Only Blacklisters can call this\",\"params\":{\"_account\":\"Account blacklisted\"}},\"burn(uint256)\":{\"details\":\"Only burners can call this\",\"params\":{\"_amount\":\"Amount of burnt tokens\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isBlackListed(address)\":{\"details\":\"Check if an account is blacklisted.\",\"returns\":{\"_0\":\"bool\"}},\"mint(address,uint256)\":{\"details\":\"Only minters can call this\",\"params\":{\"_amount\":\"Amount of minted tokens\",\"_receiver\":\"Address of token's receiver\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerBurn(address,uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_amount\":\"Amount of burnt tokens\",\"_user\":\"Address of user whose teleBTC is burnt\"}},\"removeBlackLister(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be removed from blacklisters\"}},\"removeBurner(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be removed from burners\"}},\"removeMinter(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be removed from minters\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setEpochLength(uint256)\":{\"details\":\"change blocks number per epoch.\"},\"setMaxMintLimit(uint256)\":{\"details\":\"change maximum mint limit per epoch.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unBlacklist(address)\":{\"details\":\"Only Blacklisters can call this\",\"params\":{\"_account\":\"Account unblacklisted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBlackLister(address)\":{\"notice\":\"Adds a blacklister\"},\"addBurner(address)\":{\"notice\":\"Adds a burner\"},\"addMinter(address)\":{\"notice\":\"Adds a minter\"},\"blacklist(address)\":{\"notice\":\"Blacklist an account\"},\"burn(uint256)\":{\"notice\":\"Burns TeleBTC tokens of msg.sender\"},\"mint(address,uint256)\":{\"notice\":\"Mints TeleBTC tokens for _receiver\"},\"ownerBurn(address,uint256)\":{\"notice\":\"Burns TeleBTC tokens of user\"},\"removeBlackLister(address)\":{\"notice\":\"Removes a blacklister\"},\"removeBurner(address)\":{\"notice\":\"Removes a burner\"},\"removeMinter(address)\":{\"notice\":\"Removes a minter\"},\"unBlacklist(address)\":{\"notice\":\"UnBlacklist an account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc20/TeleBTCLogic.sol\":\"TeleBTCLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/erc20/TeleBTCLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ITeleBTC.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract TeleBTCLogic is ITeleBTC, ERC20Upgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    modifier onlyBlackLister() {\\n        require(isBlackLister(_msgSender()), \\\"TeleBTC: only blacklisters\\\");\\n        _;\\n    }\\n\\n    modifier notBlackListed(address _account) {\\n        require(!isBlackListed(_account), \\\"TeleBTC: blacklisted\\\");\\n        _;\\n    }\\n \\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"TeleBTC: only minters can mint\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"TeleBTC: only burners can burn\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"TeleBTC: value is zero\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n    mapping(address => bool) public blacklisters;\\n\\n    mapping(address => bool) internal blacklisted;\\n\\n    uint public maxMintLimit; // Maximum mint limit per epoch\\n    uint public lastMintLimit; // Current mint limit in last epoch, decrease by minting in an epoch\\n    uint public epochLength; // Number of blocks in every epoch\\n    uint public lastEpoch; // Epoch number of last mint transaction\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        ERC20Upgradeable.__ERC20_init(\\n            _name,\\n            _symbol\\n        );\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        maxMintLimit = 10 ** 8;\\n        lastMintLimit = 10 ** 8;\\n        epochLength = 2000;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    function decimals() public view virtual override(ERC20Upgradeable, ITeleBTC) returns (uint8) {\\n        return 8;\\n    }\\n\\n    /**\\n     * @dev change maximum mint limit per epoch.\\n     */\\n    function setMaxMintLimit(uint _mintLimit) public override onlyOwner {\\n        emit NewMintLimit(maxMintLimit, _mintLimit);\\n        maxMintLimit = _mintLimit;\\n    }\\n\\n    /**\\n     * @dev change blocks number per epoch.\\n     */\\n    function setEpochLength(uint _length) public override onlyOwner nonZeroValue(_length) {\\n        emit NewEpochLength(epochLength, _length);\\n        epochLength = _length;\\n    }\\n\\n    /**\\n     * @dev Check if an account is blacklister.\\n     * @return bool\\n     */\\n    function isBlackLister(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return blacklisters[account];\\n    }\\n\\n    /**\\n     * @dev Check if an account is blacklisted.\\n     * @return bool\\n     */\\n    function isBlackListed(address account) public view returns (bool) {\\n        // require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return blacklisted[account];\\n    }\\n\\n    /**\\n     * @dev Check if an account is minter.\\n     * @return bool\\n     */\\n    function isMinter(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return minters[account];\\n    }\\n\\n    /// @notice                Check if an account is burner    \\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isBurner(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return burners[account];\\n    }\\n\\n    /// @notice                Adds a blacklister\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to blacklisters\\n    function addBlackLister(address account) external override onlyOwner {\\n        require(!isBlackLister(account), \\\"TeleBTC: already has role\\\");\\n        blacklisters[account] = true;\\n        emit BlackListerAdded(account);\\n    }\\n\\n    /// @notice                Removes a blacklister\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from blacklisters\\n    function removeBlackLister(address account) external override onlyOwner {\\n        require(isBlackLister(account), \\\"TeleBTC: does not have role\\\");\\n        blacklisters[account] = false;\\n        emit BlackListerRemoved(account);\\n    }\\n\\n    /// @notice                Adds a minter\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to minters\\n    function addMinter(address account) external override onlyOwner {\\n        require(!isMinter(account), \\\"TeleBTC: already has role\\\");\\n        minters[account] = true;\\n        emit MinterAdded(account);\\n    }\\n\\n    /// @notice                Removes a minter\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from minters\\n    function removeMinter(address account) external override onlyOwner {\\n        require(isMinter(account), \\\"TeleBTC: does not have role\\\");\\n        minters[account] = false;\\n        emit MinterRemoved(account);\\n    }\\n\\n    /// @notice                Adds a burner\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to burners\\n    function addBurner(address account) external override onlyOwner {\\n        require(!isBurner(account), \\\"TeleBTC: already has role\\\");\\n        burners[account] = true;\\n        emit BurnerAdded(account);\\n    }\\n\\n    /// @notice                Removes a burner\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from burners\\n    function removeBurner(address account) external override onlyOwner {\\n        require(isBurner(account), \\\"TeleBTC: does not have role\\\");\\n        burners[account] = false;\\n        emit BurnerRemoved(account);\\n    }\\n\\n    /// @notice                Burns TeleBTC tokens of msg.sender\\n    /// @dev                   Only burners can call this\\n    /// @param _amount         Amount of burnt tokens\\n    function burn(uint _amount) external nonReentrant onlyBurner override returns (bool) {\\n        _burn(_msgSender(), _amount);\\n        emit Burn(_msgSender(), _msgSender(), _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Burns TeleBTC tokens of user\\n    /// @dev                   Only owner can call this\\n    /// @param _user           Address of user whose teleBTC is burnt\\n    /// @param _amount         Amount of burnt tokens\\n    function ownerBurn(address _user, uint _amount) external nonReentrant onlyOwner override returns (bool) {\\n\\n        if (isBlackListed(_user)) {\\n            blacklisted[_user] = false;\\n            _burn(_user, _amount);\\n            blacklisted[_user] = true;\\n        } else {\\n            _burn(_user, _amount);\\n        }\\n        \\n        emit Burn(owner(), _user, _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Mints TeleBTC tokens for _receiver\\n    /// @dev                   Only minters can call this\\n    /// @param _receiver       Address of token's receiver\\n    /// @param _amount         Amount of minted tokens\\n    function mint(address _receiver, uint _amount) external nonReentrant onlyMinter override returns (bool) {\\n        require(_amount <= maxMintLimit, \\\"TeleBTC: mint amount is more than maximum mint limit\\\");\\n        require(checkAndReduceMintLimit(_amount), \\\"TeleBTC: reached maximum mint limit\\\");\\n\\n        _mint(_receiver, _amount);\\n        emit Mint(_msgSender(), _receiver, _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Check if can mint new tokens and update mint limit\\n    /// @param _amount         Desired mint amount\\n    function checkAndReduceMintLimit(uint _amount) private returns (bool) {\\n        uint currentEpoch = block.number / epochLength;\\n        \\n        if (currentEpoch == lastEpoch) {\\n            if (_amount > lastMintLimit)\\n                return false;\\n            lastMintLimit -= _amount;\\n        } else {\\n            lastEpoch = currentEpoch;\\n            lastMintLimit = maxMintLimit - _amount;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                Blacklist an account\\n    /// @dev                   Only Blacklisters can call this\\n    /// @param _account        Account blacklisted\\n    function blacklist(address _account) external override nonReentrant onlyBlackLister {\\n        blacklisted[_account] = true;\\n        emit Blacklisted(_account);\\n    }\\n\\n    /// @notice                UnBlacklist an account\\n    /// @dev                   Only Blacklisters can call this\\n    /// @param _account        Account unblacklisted\\n    function unBlacklist(address _account) external override nonReentrant onlyBlackLister {\\n        blacklisted[_account] = false;\\n        emit UnBlacklisted(_account);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal view override {\\n        require(!isBlackListed(from), \\\"TeleBTC: from is blacklisted\\\");\\n        require(!isBlackListed(to), \\\"TeleBTC: to is blacklisted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x18e30c35ce1f5747af136d2389c250bf876735f6a871b6c561893d392d088793\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITeleBTC is IERC20Upgradeable {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0x4189ccf1aee711d37f78f0e09b1a6eb80e5c38c3f95a864c4b993ef04dda8244\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061230d806100206000396000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c806370a0823111610145578063a9a99c0d116100bd578063f2fde38b1161008c578063f46eccc411610071578063f46eccc41461052b578063f926b50c1461054e578063f9f92be4146105615761025c565b8063f2fde38b14610505578063f44637ba146105185761025c565b8063a9a99c0d1461047a578063c00017861461048d578063dd62ed3e146104a0578063e47d6060146104d95761025c565b80638da5cb5b11610114578063983b2d56116100f9578063983b2d5614610441578063a457c2d714610454578063a9059cbb146104675761025c565b80638da5cb5b1461041e57806395d89b41146104395761025c565b806370a08231146103d157806370e2f827146103fa578063715018a61461040357806379de8d351461040b5761025c565b80632f99582a116101d857806340c10f19116101a75780634cd88b761161018c5780634cd88b76146103a257806354eea796146103b557806357d775f8146103c85761025c565b806340c10f191461037c57806342966c681461038f5761025c565b80632f99582a1461033e5780633092afd514610347578063313ce5671461035a57806339509351146103695761025c565b8063095ea7b31161022f57806318160ddd1161021457806318160ddd146103105780631a8952661461031857806323b872dd1461032b5761025c565b8063095ea7b3146102da5780630cb13b2e146102ed5761025c565b8063028468581461026157806303d41e0e1461027657806306a4c983146102ae57806306fdde03146102c5575b600080fd5b61027461026f36600461209e565b610574565b005b61029961028436600461209e565b60ca6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6102b760d05481565b6040519081526020016102a5565b6102cd61061f565b6040516102a591906121ce565b6102996102e836600461212c565b6106b1565b6102996102fb36600461209e565b60cb6020526000908152604090205460ff1681565b6035546102b7565b61027461032636600461209e565b6106cb565b6102996103393660046120f1565b61077c565b6102b760ce5481565b61027461035536600461209e565b6107a0565b604051600881526020016102a5565b61029961037736600461212c565b610846565b61029961038a36600461212c565b610885565b61029961039d3660046121b6565b610a2f565b6102746103b0366004612155565b610ae1565b6102746103c33660046121b6565b610c28565b6102b760cf5481565b6102b76103df36600461209e565b6001600160a01b031660009081526033602052604090205490565b6102b760cd5481565b610274610cc3565b61027461041936600461209e565b610ccd565b6065546040516001600160a01b0390911681526020016102a5565b6102cd610d73565b61027461044f36600461209e565b610d82565b61029961046236600461212c565b610e2c565b61029961047536600461212c565b610ed6565b61027461048836600461209e565b610ee4565b61029961049b36600461212c565b610f8e565b6102b76104ae3660046120bf565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6102996104e736600461209e565b6001600160a01b0316600090815260cc602052604090205460ff1690565b61027461051336600461209e565b611073565b61027461052636600461209e565b611100565b61029961053936600461209e565b60c96020526000908152604090205460ff1681565b61027461055c3660046121b6565b6111aa565b61027461056f36600461209e565b6111f3565b61057c6112a3565b610585816112fd565b6105d65760405162461bcd60e51b815260206004820152601b60248201527f54656c654254433a20646f6573206e6f74206861766520726f6c65000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260ca6020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b60606036805461062e90612270565b80601f016020809104026020016040519081016040528092919081815260200182805461065a90612270565b80156106a75780601f1061067c576101008083540402835291602001916106a7565b820191906000526020600020905b81548152906001019060200180831161068a57829003601f168201915b5050505050905090565b6000336106bf818585611374565b60019150505b92915050565b6106d36114cc565b6106dd335b611526565b6107295760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c69737465727300000000000060448201526064016105cd565b6001600160a01b038116600081815260cc6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a26107796001609755565b50565b60003361078a8582856115a4565b610795858585611636565b506001949350505050565b6107a86112a3565b6107b181611835565b6107fd5760405162461bcd60e51b815260206004820152601b60248201527f54656c654254433a20646f6573206e6f74206861766520726f6c65000000000060448201526064016105cd565b6001600160a01b038116600081815260c96020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906106bf9082908690610880908790612221565b611374565b600061088f6114cc565b61089833611835565b6108e45760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206d696e746572732063616e206d696e74000060448201526064016105cd565b60cd5482111561095c5760405162461bcd60e51b815260206004820152603460248201527f54656c654254433a206d696e7420616d6f756e74206973206d6f72652074686160448201527f6e206d6178696d756d206d696e74206c696d697400000000000000000000000060648201526084016105cd565b610965826118ac565b6109d75760405162461bcd60e51b815260206004820152602360248201527f54656c654254433a2072656163686564206d6178696d756d206d696e74206c6960448201527f6d6974000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6109e1838361191a565b6040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8906020015b60405180910390a35060016106c56001609755565b6000610a396114cc565b610a42336112fd565b610a8e5760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206275726e6572732063616e206275726e000060448201526064016105cd565b610a9833836119e8565b604051828152339081907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200160405180910390a3506001610adc6001609755565b919050565b600054610100900460ff1615808015610b015750600054600160ff909116105b80610b1b5750303b158015610b1b575060005460ff166001145b610b8d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105cd565b6000805460ff191660011790558015610bb0576000805461ff0019166101001790555b610bba8383611b5f565b610bc2611bd4565b610bca611c47565b6305f5e10060cd81905560ce556107d060cf558015610c23576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b610c306112a3565b8060008111610c815760405162461bcd60e51b815260206004820152601660248201527f54656c654254433a2076616c7565206973207a65726f0000000000000000000060448201526064016105cd565b60cf5460408051918252602082018490527fd077b1717c042dc03e7eb68030220b62f703db305be2ffb5b9e1d91b639a63f9910160405180910390a15060cf55565b610ccb6112a3565b565b610cd56112a3565b610cde81611526565b610d2a5760405162461bcd60e51b815260206004820152601b60248201527f54656c654254433a20646f6573206e6f74206861766520726f6c65000000000060448201526064016105cd565b6001600160a01b038116600081815260cb6020526040808220805460ff19169055517f607ec77f7f06689ae7a01995caa85bbfcf586a9139e10f97347c90aa8cadd5099190a250565b60606037805461062e90612270565b610d8a6112a3565b610d9381611835565b15610de05760405162461bcd60e51b815260206004820152601960248201527f54656c654254433a20616c72656164792068617320726f6c650000000000000060448201526064016105cd565b6001600160a01b038116600081815260c96020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015610ec95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105cd565b6107958286868403611374565b6000336106bf818585611636565b610eec6112a3565b610ef581611526565b15610f425760405162461bcd60e51b815260206004820152601960248201527f54656c654254433a20616c72656164792068617320726f6c650000000000000060448201526064016105cd565b6001600160a01b038116600081815260cb6020526040808220805460ff19166001179055517fb41bc3cdd4276b81dcdeb2f03c2457457661be122c22ade780eacc9398e975829190a250565b6000610f986114cc565b610fa06112a3565b6001600160a01b038316600090815260cc602052604090205460ff1615611013576001600160a01b038316600090815260cc60205260409020805460ff19169055610feb83836119e8565b6001600160a01b038316600090815260cc60205260409020805460ff1916600117905561101d565b61101d83836119e8565b826001600160a01b03166110396065546001600160a01b031690565b6001600160a01b03167fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b945384604051610a1a91815260200190565b61107b6112a3565b6001600160a01b0381166110f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105cd565b61077981611cba565b6111086112a3565b611111816112fd565b1561115e5760405162461bcd60e51b815260206004820152601960248201527f54656c654254433a20616c72656164792068617320726f6c650000000000000060448201526064016105cd565b6001600160a01b038116600081815260ca6020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b6111b26112a3565b60cd5460408051918252602082018390527f36ab29917278ebced3c63670f7872f78555ed7cdb4aa5184a159eb978be79508910160405180910390a160cd55565b6111fb6114cc565b611204336106d8565b6112505760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c69737465727300000000000060448201526064016105cd565b6001600160a01b038116600081815260cc6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a26107796001609755565b6065546001600160a01b03163314610ccb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105cd565b60006001600160a01b0382166113555760405162461bcd60e51b815260206004820152601560248201527f54656c654254433a207a65726f2061646472657373000000000000000000000060448201526064016105cd565b506001600160a01b0316600090815260ca602052604090205460ff1690565b6001600160a01b0383166113ef5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b03821661146b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6002609754141561151f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105cd565b6002609755565b60006001600160a01b03821661157e5760405162461bcd60e51b815260206004820152601560248201527f54656c654254433a207a65726f2061646472657373000000000000000000000060448201526064016105cd565b506001600160a01b0316600090815260cb602052604090205460ff1690565b6001609755565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461163057818110156116235760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105cd565b6116308484848403611374565b50505050565b6001600160a01b0383166116b25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b03821661172e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b611739838383611d24565b6001600160a01b038316600090815260336020526040902054818110156117c85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118289086815260200190565b60405180910390a3611630565b60006001600160a01b03821661188d5760405162461bcd60e51b815260206004820152601560248201527f54656c654254433a207a65726f2061646472657373000000000000000000000060448201526064016105cd565b506001600160a01b0316600090815260c9602052604090205460ff1690565b60008060cf54436118bd9190612239565b905060d0548114156118fa5760ce548311156118dd576000915050610adc565b8260ce60008282546118ef9190612259565b909155506119119050565b60d081905560cd5461190d908490612259565b60ce555b50600192915050565b6001600160a01b0382166119705760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105cd565b61197c60008383611d24565b806035600082825461198e9190612221565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b6001600160a01b038216611a645760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b611a7082600083611d24565b6001600160a01b03821660009081526033602052604090205481811015611aff5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610c23565b600054610100900460ff16611bca5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b6119e48282611df6565b600054610100900460ff16611c3f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b610ccb611e88565b600054610100900460ff16611cb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b610ccb611efc565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038316600090815260cc602052604090205460ff1615611d8d5760405162461bcd60e51b815260206004820152601c60248201527f54656c654254433a2066726f6d20697320626c61636b6c69737465640000000060448201526064016105cd565b6001600160a01b038216600090815260cc602052604090205460ff1615610c235760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a20746f20697320626c61636b6c697374656400000000000060448201526064016105cd565b600054610100900460ff16611e615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b8151611e74906036906020850190611f67565b508051610c23906037906020840190611f67565b600054610100900460ff16611ef35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b610ccb33611cba565b600054610100900460ff1661159d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b828054611f7390612270565b90600052602060002090601f016020900481019282611f955760008555611fdb565b82601f10611fae57805160ff1916838001178555611fdb565b82800160010185558215611fdb579182015b82811115611fdb578251825591602001919060010190611fc0565b50611fe7929150611feb565b5090565b5b80821115611fe75760008155600101611fec565b80356001600160a01b0381168114610adc57600080fd5b600082601f830112612027578081fd5b813567ffffffffffffffff80821115612042576120426122c1565b604051601f8301601f19908116603f0116810190828211818310171561206a5761206a6122c1565b81604052838152866020858801011115612082578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156120af578081fd5b6120b882612000565b9392505050565b600080604083850312156120d1578081fd5b6120da83612000565b91506120e860208401612000565b90509250929050565b600080600060608486031215612105578081fd5b61210e84612000565b925061211c60208501612000565b9150604084013590509250925092565b6000806040838503121561213e578182fd5b61214783612000565b946020939093013593505050565b60008060408385031215612167578182fd5b823567ffffffffffffffff8082111561217e578384fd5b61218a86838701612017565b9350602085013591508082111561219f578283fd5b506121ac85828601612017565b9150509250929050565b6000602082840312156121c7578081fd5b5035919050565b6000602080835283518082850152825b818110156121fa578581018301518582016040015282016121de565b8181111561220b5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115612234576122346122ab565b500190565b60008261225457634e487b7160e01b81526012600452602481fd5b500490565b60008282101561226b5761226b6122ab565b500390565b60028104600182168061228457607f821691505b602082108114156122a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dbc5ea66d7d8ba5a406494b5fa3c895d09908faa42622d02735f321972703ff864736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c806370a0823111610145578063a9a99c0d116100bd578063f2fde38b1161008c578063f46eccc411610071578063f46eccc41461052b578063f926b50c1461054e578063f9f92be4146105615761025c565b8063f2fde38b14610505578063f44637ba146105185761025c565b8063a9a99c0d1461047a578063c00017861461048d578063dd62ed3e146104a0578063e47d6060146104d95761025c565b80638da5cb5b11610114578063983b2d56116100f9578063983b2d5614610441578063a457c2d714610454578063a9059cbb146104675761025c565b80638da5cb5b1461041e57806395d89b41146104395761025c565b806370a08231146103d157806370e2f827146103fa578063715018a61461040357806379de8d351461040b5761025c565b80632f99582a116101d857806340c10f19116101a75780634cd88b761161018c5780634cd88b76146103a257806354eea796146103b557806357d775f8146103c85761025c565b806340c10f191461037c57806342966c681461038f5761025c565b80632f99582a1461033e5780633092afd514610347578063313ce5671461035a57806339509351146103695761025c565b8063095ea7b31161022f57806318160ddd1161021457806318160ddd146103105780631a8952661461031857806323b872dd1461032b5761025c565b8063095ea7b3146102da5780630cb13b2e146102ed5761025c565b8063028468581461026157806303d41e0e1461027657806306a4c983146102ae57806306fdde03146102c5575b600080fd5b61027461026f36600461209e565b610574565b005b61029961028436600461209e565b60ca6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6102b760d05481565b6040519081526020016102a5565b6102cd61061f565b6040516102a591906121ce565b6102996102e836600461212c565b6106b1565b6102996102fb36600461209e565b60cb6020526000908152604090205460ff1681565b6035546102b7565b61027461032636600461209e565b6106cb565b6102996103393660046120f1565b61077c565b6102b760ce5481565b61027461035536600461209e565b6107a0565b604051600881526020016102a5565b61029961037736600461212c565b610846565b61029961038a36600461212c565b610885565b61029961039d3660046121b6565b610a2f565b6102746103b0366004612155565b610ae1565b6102746103c33660046121b6565b610c28565b6102b760cf5481565b6102b76103df36600461209e565b6001600160a01b031660009081526033602052604090205490565b6102b760cd5481565b610274610cc3565b61027461041936600461209e565b610ccd565b6065546040516001600160a01b0390911681526020016102a5565b6102cd610d73565b61027461044f36600461209e565b610d82565b61029961046236600461212c565b610e2c565b61029961047536600461212c565b610ed6565b61027461048836600461209e565b610ee4565b61029961049b36600461212c565b610f8e565b6102b76104ae3660046120bf565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6102996104e736600461209e565b6001600160a01b0316600090815260cc602052604090205460ff1690565b61027461051336600461209e565b611073565b61027461052636600461209e565b611100565b61029961053936600461209e565b60c96020526000908152604090205460ff1681565b61027461055c3660046121b6565b6111aa565b61027461056f36600461209e565b6111f3565b61057c6112a3565b610585816112fd565b6105d65760405162461bcd60e51b815260206004820152601b60248201527f54656c654254433a20646f6573206e6f74206861766520726f6c65000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260ca6020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b60606036805461062e90612270565b80601f016020809104026020016040519081016040528092919081815260200182805461065a90612270565b80156106a75780601f1061067c576101008083540402835291602001916106a7565b820191906000526020600020905b81548152906001019060200180831161068a57829003601f168201915b5050505050905090565b6000336106bf818585611374565b60019150505b92915050565b6106d36114cc565b6106dd335b611526565b6107295760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c69737465727300000000000060448201526064016105cd565b6001600160a01b038116600081815260cc6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a26107796001609755565b50565b60003361078a8582856115a4565b610795858585611636565b506001949350505050565b6107a86112a3565b6107b181611835565b6107fd5760405162461bcd60e51b815260206004820152601b60248201527f54656c654254433a20646f6573206e6f74206861766520726f6c65000000000060448201526064016105cd565b6001600160a01b038116600081815260c96020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906106bf9082908690610880908790612221565b611374565b600061088f6114cc565b61089833611835565b6108e45760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206d696e746572732063616e206d696e74000060448201526064016105cd565b60cd5482111561095c5760405162461bcd60e51b815260206004820152603460248201527f54656c654254433a206d696e7420616d6f756e74206973206d6f72652074686160448201527f6e206d6178696d756d206d696e74206c696d697400000000000000000000000060648201526084016105cd565b610965826118ac565b6109d75760405162461bcd60e51b815260206004820152602360248201527f54656c654254433a2072656163686564206d6178696d756d206d696e74206c6960448201527f6d6974000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6109e1838361191a565b6040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8906020015b60405180910390a35060016106c56001609755565b6000610a396114cc565b610a42336112fd565b610a8e5760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206275726e6572732063616e206275726e000060448201526064016105cd565b610a9833836119e8565b604051828152339081907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200160405180910390a3506001610adc6001609755565b919050565b600054610100900460ff1615808015610b015750600054600160ff909116105b80610b1b5750303b158015610b1b575060005460ff166001145b610b8d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105cd565b6000805460ff191660011790558015610bb0576000805461ff0019166101001790555b610bba8383611b5f565b610bc2611bd4565b610bca611c47565b6305f5e10060cd81905560ce556107d060cf558015610c23576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b610c306112a3565b8060008111610c815760405162461bcd60e51b815260206004820152601660248201527f54656c654254433a2076616c7565206973207a65726f0000000000000000000060448201526064016105cd565b60cf5460408051918252602082018490527fd077b1717c042dc03e7eb68030220b62f703db305be2ffb5b9e1d91b639a63f9910160405180910390a15060cf55565b610ccb6112a3565b565b610cd56112a3565b610cde81611526565b610d2a5760405162461bcd60e51b815260206004820152601b60248201527f54656c654254433a20646f6573206e6f74206861766520726f6c65000000000060448201526064016105cd565b6001600160a01b038116600081815260cb6020526040808220805460ff19169055517f607ec77f7f06689ae7a01995caa85bbfcf586a9139e10f97347c90aa8cadd5099190a250565b60606037805461062e90612270565b610d8a6112a3565b610d9381611835565b15610de05760405162461bcd60e51b815260206004820152601960248201527f54656c654254433a20616c72656164792068617320726f6c650000000000000060448201526064016105cd565b6001600160a01b038116600081815260c96020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919083811015610ec95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016105cd565b6107958286868403611374565b6000336106bf818585611636565b610eec6112a3565b610ef581611526565b15610f425760405162461bcd60e51b815260206004820152601960248201527f54656c654254433a20616c72656164792068617320726f6c650000000000000060448201526064016105cd565b6001600160a01b038116600081815260cb6020526040808220805460ff19166001179055517fb41bc3cdd4276b81dcdeb2f03c2457457661be122c22ade780eacc9398e975829190a250565b6000610f986114cc565b610fa06112a3565b6001600160a01b038316600090815260cc602052604090205460ff1615611013576001600160a01b038316600090815260cc60205260409020805460ff19169055610feb83836119e8565b6001600160a01b038316600090815260cc60205260409020805460ff1916600117905561101d565b61101d83836119e8565b826001600160a01b03166110396065546001600160a01b031690565b6001600160a01b03167fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b945384604051610a1a91815260200190565b61107b6112a3565b6001600160a01b0381166110f75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105cd565b61077981611cba565b6111086112a3565b611111816112fd565b1561115e5760405162461bcd60e51b815260206004820152601960248201527f54656c654254433a20616c72656164792068617320726f6c650000000000000060448201526064016105cd565b6001600160a01b038116600081815260ca6020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b6111b26112a3565b60cd5460408051918252602082018390527f36ab29917278ebced3c63670f7872f78555ed7cdb4aa5184a159eb978be79508910160405180910390a160cd55565b6111fb6114cc565b611204336106d8565b6112505760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c69737465727300000000000060448201526064016105cd565b6001600160a01b038116600081815260cc6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a26107796001609755565b6065546001600160a01b03163314610ccb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105cd565b60006001600160a01b0382166113555760405162461bcd60e51b815260206004820152601560248201527f54656c654254433a207a65726f2061646472657373000000000000000000000060448201526064016105cd565b506001600160a01b0316600090815260ca602052604090205460ff1690565b6001600160a01b0383166113ef5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b03821661146b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6002609754141561151f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105cd565b6002609755565b60006001600160a01b03821661157e5760405162461bcd60e51b815260206004820152601560248201527f54656c654254433a207a65726f2061646472657373000000000000000000000060448201526064016105cd565b506001600160a01b0316600090815260cb602052604090205460ff1690565b6001609755565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461163057818110156116235760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105cd565b6116308484848403611374565b50505050565b6001600160a01b0383166116b25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b03821661172e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b611739838383611d24565b6001600160a01b038316600090815260336020526040902054818110156117c85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906118289086815260200190565b60405180910390a3611630565b60006001600160a01b03821661188d5760405162461bcd60e51b815260206004820152601560248201527f54656c654254433a207a65726f2061646472657373000000000000000000000060448201526064016105cd565b506001600160a01b0316600090815260c9602052604090205460ff1690565b60008060cf54436118bd9190612239565b905060d0548114156118fa5760ce548311156118dd576000915050610adc565b8260ce60008282546118ef9190612259565b909155506119119050565b60d081905560cd5461190d908490612259565b60ce555b50600192915050565b6001600160a01b0382166119705760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105cd565b61197c60008383611d24565b806035600082825461198e9190612221565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b6001600160a01b038216611a645760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b611a7082600083611d24565b6001600160a01b03821660009081526033602052604090205481811015611aff5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016105cd565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610c23565b600054610100900460ff16611bca5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b6119e48282611df6565b600054610100900460ff16611c3f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b610ccb611e88565b600054610100900460ff16611cb25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b610ccb611efc565b606580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038316600090815260cc602052604090205460ff1615611d8d5760405162461bcd60e51b815260206004820152601c60248201527f54656c654254433a2066726f6d20697320626c61636b6c69737465640000000060448201526064016105cd565b6001600160a01b038216600090815260cc602052604090205460ff1615610c235760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a20746f20697320626c61636b6c697374656400000000000060448201526064016105cd565b600054610100900460ff16611e615760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b8151611e74906036906020850190611f67565b508051610c23906037906020840190611f67565b600054610100900460ff16611ef35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b610ccb33611cba565b600054610100900460ff1661159d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105cd565b828054611f7390612270565b90600052602060002090601f016020900481019282611f955760008555611fdb565b82601f10611fae57805160ff1916838001178555611fdb565b82800160010185558215611fdb579182015b82811115611fdb578251825591602001919060010190611fc0565b50611fe7929150611feb565b5090565b5b80821115611fe75760008155600101611fec565b80356001600160a01b0381168114610adc57600080fd5b600082601f830112612027578081fd5b813567ffffffffffffffff80821115612042576120426122c1565b604051601f8301601f19908116603f0116810190828211818310171561206a5761206a6122c1565b81604052838152866020858801011115612082578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156120af578081fd5b6120b882612000565b9392505050565b600080604083850312156120d1578081fd5b6120da83612000565b91506120e860208401612000565b90509250929050565b600080600060608486031215612105578081fd5b61210e84612000565b925061211c60208501612000565b9150604084013590509250925092565b6000806040838503121561213e578182fd5b61214783612000565b946020939093013593505050565b60008060408385031215612167578182fd5b823567ffffffffffffffff8082111561217e578384fd5b61218a86838701612017565b9350602085013591508082111561219f578283fd5b506121ac85828601612017565b9150509250929050565b6000602082840312156121c7578081fd5b5035919050565b6000602080835283518082850152825b818110156121fa578581018301518582016040015282016121de565b8181111561220b5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115612234576122346122ab565b500190565b60008261225457634e487b7160e01b81526012600452602481fd5b500490565b60008282101561226b5761226b6122ab565b500390565b60028104600182168061228457607f821691505b602082108114156122a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dbc5ea66d7d8ba5a406494b5fa3c895d09908faa42622d02735f321972703ff864736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBlackLister(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be added to blacklisters"
        }
      },
      "addBurner(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be added to burners"
        }
      },
      "addMinter(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be added to minters"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "blacklist(address)": {
        "details": "Only Blacklisters can call this",
        "params": {
          "_account": "Account blacklisted"
        }
      },
      "burn(uint256)": {
        "details": "Only burners can call this",
        "params": {
          "_amount": "Amount of burnt tokens"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isBlackListed(address)": {
        "details": "Check if an account is blacklisted.",
        "returns": {
          "_0": "bool"
        }
      },
      "mint(address,uint256)": {
        "details": "Only minters can call this",
        "params": {
          "_amount": "Amount of minted tokens",
          "_receiver": "Address of token's receiver"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerBurn(address,uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_amount": "Amount of burnt tokens",
          "_user": "Address of user whose teleBTC is burnt"
        }
      },
      "removeBlackLister(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be removed from blacklisters"
        }
      },
      "removeBurner(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be removed from burners"
        }
      },
      "removeMinter(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be removed from minters"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setEpochLength(uint256)": {
        "details": "change blocks number per epoch."
      },
      "setMaxMintLimit(uint256)": {
        "details": "change maximum mint limit per epoch."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unBlacklist(address)": {
        "details": "Only Blacklisters can call this",
        "params": {
          "_account": "Account unblacklisted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBlackLister(address)": {
        "notice": "Adds a blacklister"
      },
      "addBurner(address)": {
        "notice": "Adds a burner"
      },
      "addMinter(address)": {
        "notice": "Adds a minter"
      },
      "blacklist(address)": {
        "notice": "Blacklist an account"
      },
      "burn(uint256)": {
        "notice": "Burns TeleBTC tokens of msg.sender"
      },
      "mint(address,uint256)": {
        "notice": "Mints TeleBTC tokens for _receiver"
      },
      "ownerBurn(address,uint256)": {
        "notice": "Burns TeleBTC tokens of user"
      },
      "removeBlackLister(address)": {
        "notice": "Removes a blacklister"
      },
      "removeBurner(address)": {
        "notice": "Removes a burner"
      },
      "removeMinter(address)": {
        "notice": "Removes a minter"
      },
      "unBlacklist(address)": {
        "notice": "UnBlacklist an account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 442,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 445,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1844,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 823,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 829,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 831,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 833,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 835,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1415,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 434,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 745,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 803,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11810,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "minters",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11814,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "burners",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11818,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "blacklisters",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11822,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "blacklisted",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11824,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "maxMintLimit",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 11826,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "lastMintLimit",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 11828,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "epochLength",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 11830,
        "contract": "contracts/erc20/TeleBTCLogic.sol:TeleBTCLogic",
        "label": "lastEpoch",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}