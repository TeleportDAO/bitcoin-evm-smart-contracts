{
  "address": "0xBff35072f0271008571CB555e3953B07EB52de02",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "ScriptTypes"
        }
      ],
      "name": "checkScriptType",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "finalizationParameter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getFinalizedBlockHeaderFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "lastSubmittedHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0195148d92294307283a25f68474d03985182a19236bf01cafd7052b8c91511",
  "receipt": {
    "to": null,
    "from": "0xF560bf3CC92903C4CB2534fc447ac4Adffd49822",
    "contractAddress": "0xBff35072f0271008571CB555e3953B07EB52de02",
    "transactionIndex": 4,
    "gasUsed": "2947209",
    "logsBloom": "0x
    "blockHash": "0x2a9886b7f7c3cc6f1256f9e77f1ba35b7e7eb477b717df84e9109b7357e626c9",
    "transactionHash": "0xb0195148d92294307283a25f68474d03985182a19236bf01cafd7052b8c91511",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 47831517,
        "transactionHash": "0xb0195148d92294307283a25f68474d03985182a19236bf01cafd7052b8c91511",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f560bf3cc92903c4cb2534fc447ac4adffd49822",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009240d18b54b7360000000000000000000000000000000000000000000000003d0017b70395dc9700000000000000000000000000000000000000000000023d3193b9c73ae81ca30000000000000000000000000000000000000000000000003c6dd6e57841256100000000000000000000000000000000000000000000023d3225fa98c63cd3d9",
        "logIndex": 15,
        "blockHash": "0x2a9886b7f7c3cc6f1256f9e77f1ba35b7e7eb477b717df84e9109b7357e626c9"
      }
    ],
    "blockNumber": 47831517,
    "cumulativeGasUsed": "4168908",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b721f783c7cfe9df8d196e56c18fd3f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"ScriptTypes\"}],\"name\":\"checkScriptType\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"finalizationParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getFinalizedBlockHeaderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"lastSubmittedHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isConfirmed(address,bytes32,uint256,bytes,uint256)\":{\"details\":\"Calls the relay contract to check Merkle inclusion proof\",\"params\":{\"_blockNumber\":\"Height of the block containing the transaction\",\"_index\":\"Index of transaction in the block\",\"_intermediateNodes\":\"Merkle inclusion proof for the transaction\",\"_relay\":\"Address of Relay contract\",\"_txId\":\"of the transaction\"},\"returns\":{\"_0\":\"True if the transaction was included in the block\"}},\"updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)\":{\"details\":\"One output might return the remaining value to the locker\",\"params\":{\"_lockerLockingScript\":\"Locking script of locker\",\"_paidOutputCounter\":\"Number of the tx outputs that pay a cc burn request\",\"_txId\":\"Transaction id\",\"_vout\":\"Outputs of a transaction\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkScriptType(bytes,ScriptTypes)\":{\"notice\":\"Checks the user hash script to be valid (based on its type)\"},\"isConfirmed(address,bytes32,uint256,bytes,uint256)\":{\"notice\":\"Checks inclusion of the transaction in the specified block\"},\"updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)\":{\"notice\":\"Checks if all outputs of the transaction used to pay a cc burn request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/BurnRouterLib.sol\":\"BurnRouterLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        // Validates Vin length\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64 _value) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n        output = indexVout(voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n        \\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n        \\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength. \\n            // note: script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 77 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0x1f25b83df29185010e565471c841e0456d7c76e0c02fd0d7fe6fe4e427b37d44\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x51c24c7c86620e39b732ba1b0de62c314842541748905323df7600a2797a2bd4\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x8f4b9c9ad505ba1184d4e2c6694d725eacaf19c42942075bae2b1608bdbd9ef5\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x65d6ce283fb19a20a37abd09247371c2362932c49a6b40dafab022c2f1153710\",\"license\":\"MIT\"},\"contracts/libraries/BurnRouterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\\\";\\nimport \\\"../lockers/interfaces/ILockersManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../routers/BurnRouterStorage.sol\\\";\\n\\nlibrary BurnRouterLib {\\n\\n   /// @notice Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev  One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter  Number of the tx outputs that pay a cc burn request\\n    /// @param _vout Outputs of a transaction\\n    /// @param _lockerLockingScript Locking script of locker\\n    /// @param _txId Transaction id\\n    function updateIsUsedAsBurnProof(\\n        mapping(bytes32 => bool) storage _isUsedAsBurnProof,\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) external {\\n        uint parsedAmount = BitcoinHelper.parseValueHavingLockingScript(_vout, _lockerLockingScript);\\n        uint numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs) {\\n            // One output sends the remaining value to locker\\n            _isUsedAsBurnProof[_txId] = true;\\n        } else if (_paidOutputCounter == numberOfOutputs) {\\n            // All output pays cc burn requests\\n            _isUsedAsBurnProof[_txId] = true;\\n        }\\n    }\\n\\n    function disputeBurnHelper(\\n        mapping(address => BurnRouterStorage.burnRequest[]) storage burnRequests,\\n        address _lockerTargetAddress,\\n        uint _index, \\n        uint _transferDeadline,\\n        uint _lastSubmittedHeight,\\n        uint _startingBlockNumber\\n    ) external {\\n        // Checks that locker has not provided burn proof\\n        require(\\n            !burnRequests[_lockerTargetAddress][_index].isTransferred,\\n            \\\"BurnRouterLogic: already paid\\\"\\n        );\\n\\n        // Checks that payback deadline has passed\\n        require(\\n            burnRequests[_lockerTargetAddress][_index].deadline < _lastSubmittedHeight,\\n            \\\"BurnRouterLogic: deadline not passed\\\"\\n        );\\n\\n        require(\\n            burnRequests[_lockerTargetAddress][_index].deadline > _startingBlockNumber + _transferDeadline,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n\\n        // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n        burnRequests[_lockerTargetAddress][_index].isTransferred = true;\\n    }\\n\\n    function disputeAndSlashLockerHelper(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes[3] memory _inputOutputVinVout, // [_inputVin, _outputVin, _outputVout]\\n        mapping(bytes32 => bool) storage _isUsedAsBurnProof,\\n        uint _transferDeadline,\\n        address _relay,\\n        uint _startingBlockNumber,\\n        bytes32 _inputTxId,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external {\\n        \\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n            _locktimes.length == 2 &&\\n            _indexesAndBlockNumbers.length == 3,\\n            \\\"BurnRouterLogic: wrong inputs\\\"\\n        );\\n\\n        require(_indexesAndBlockNumbers[2] >= _startingBlockNumber, \\\"BurnRouterLogic: old request\\\");\\n\\n        require(\\n            isConfirmed(\\n                _relay,\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"BurnRouterLogic: not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !_isUsedAsBurnProof[_inputTxId],\\n            \\\"BurnRouterLogic: already used\\\"\\n        );\\n\\n        // prevents multiple slashing of locker\\n        _isUsedAsBurnProof[_inputTxId] = true;  \\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            lastSubmittedHeight(_relay) > _transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"BurnRouterLogic: deadline not passed\\\"\\n        ); \\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint _outpointIndex) = BitcoinHelper.extractOutpoint(\\n            _inputOutputVinVout[0],\\n            _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n        );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId == BitcoinHelper.calculateTxId(_versions[1], _inputOutputVinVout[1], _inputOutputVinVout[2], _locktimes[1]),\\n            \\\"BurnRouterLogic: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(BitcoinHelper.getLockingScript(_inputOutputVinVout[2], _outpointIndex)) ==\\n            keccak256(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not for locker\\\"\\n        );\\n    }\\n\\n    function slashLockerHelper(\\n        bytes memory _lockerLockingScript,\\n        bytes4 _version,\\n        bytes memory _inputVin,\\n        uint _index,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4 _locktime\\n    ) external {\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint _outpointIndex) = BitcoinHelper.extractOutpoint(\\n            _inputVin,\\n            _index // Index of malicious input in input tx\\n        );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId == BitcoinHelper.calculateTxId(_version, _outputVin, _outputVout, _locktime),\\n            \\\"BurnRouterLogic: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(BitcoinHelper.getLockingScript(_outputVout, _outpointIndex)) ==\\n            keccak256(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not for locker\\\"\\n        );\\n\\n    }\\n\\n    function burnProofHelper(\\n        uint256 _blockNumber,\\n        uint256 startingBlockNumber,\\n        bytes4 _locktime,\\n        address lockers,\\n        bytes memory _lockerLockingScript,\\n        uint _burnReqIndexesLength,\\n        uint _voutIndexesLength\\n    ) external {\\n        require(_blockNumber >= startingBlockNumber, \\\"BurnRouterLogic: old request\\\");\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"BurnRouterLogic: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        require(\\n            _burnReqIndexesLength == _voutIndexesLength,\\n            \\\"BurnRouterLogic: wrong indexes\\\"\\n        );\\n    }\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _relay Address of Relay contract\\n    /// @param _txId of the transaction\\n    /// @param _blockNumber Height of the block containing the transaction\\n    /// @param _intermediateNodes Merkle inclusion proof for the transaction\\n    /// @param _index Index of transaction in the block\\n    /// @return True if the transaction was included in the block\\n    function isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) public returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = getFinalizedBlockHeaderFee(_relay, _blockNumber);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: low fee\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        //TODO?\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice Checks the user hash script to be valid (based on its type)\\n    function checkScriptType(bytes memory _userScript, ScriptTypes _scriptType) external pure {\\n        if (_scriptType == ScriptTypes.P2PK || _scriptType == ScriptTypes.P2WSH || _scriptType == ScriptTypes.P2TR) {\\n            require(_userScript.length == 32, \\\"BurnRouterLogic: invalid script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"BurnRouterLogic: invalid script\\\");\\n        }\\n    }\\n\\n    function lastSubmittedHeight(address _relay) public view returns (uint) {\\n        return IBitcoinRelay(_relay).lastSubmittedHeight();\\n    }\\n\\n    function finalizationParameter(address _relay) external view returns (uint) {\\n        return IBitcoinRelay(_relay).finalizationParameter();\\n    }\\n\\n    function getFinalizedBlockHeaderFee(address _relay, uint _blockNumber) public view returns (uint) {\\n        return IBitcoinRelay(_relay).getBlockHeaderFee(_blockNumber, 0);\\n    }\\n}\",\"keccak256\":\"0xb8879e7c69386e672c27dae0d76aee27be76f6a634a81a03d2ee75c02e7666da\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ILockersManagerStorage.sol\\\";\\n\\ninterface ILockersManager is ILockersManagerStorage {\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewExchangeConnector(\\n        address oldExchangeConnector,\\n        address newExchangeConnector\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTDTToken,\\n        address newTDTToken\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTeleportDAOToken(address _tdtTokenAddress) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0xf12133c535eeb0a7dedbca5b701825164f4159c78fb88ce59aa4bb44293b5795\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockersManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ILockersManagerStorage {\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n  \\n}\\n\\n\\n\\n \",\"keccak256\":\"0xfbe29ee307724219396c389feb47b2a20199bdbd7fc3f99c9a225db15945d252\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\n\\nabstract contract BurnRouterStorage is IBurnRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    address public override bitcoinFeeOracle;\\n    uint public override startingBlockNumber;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    \\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n}\",\"keccak256\":\"0x3144c1fa2916ef830cfd513f5494c8f2a3d9157b7329b068d4d70feab3e61e34\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param userTargetAddress Address of the user on EVM\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n\\t/// @param thirdPartyId Id of third party\\n\\t/// @param inputToken inputToken address\\n\\t/// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n\\t/// @param fees [network fee, locker fee, protocol fee, third party fee]\\n\\t\\n  \\tevent NewUnwrap(\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline,\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress inputToken,\\n\\t\\tuint[3] amounts,\\n\\t\\tuint[4] fees\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidUnwrap(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when network fee is updated\\n    event NewNetworkFee(\\n        uint oldNetworkFee, \\n        uint newNetworkFee\\n    );\\n\\n\\t/// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle, \\n        address newNetworkFeeOracle\\n    );\\n\\n\\t/// @notice                     Emits when changes made to third party address\\n\\tevent NewThirdPartyAddress(\\n\\t\\tuint thirdPartyId,\\n\\t\\taddress oldThirdPartyAddress, \\n\\t\\taddress newThirdPartyAddress\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to third party fee\\n\\tevent NewThirdPartyFee(\\n\\t\\tuint thirdPartyId,\\n\\t\\tuint oldThirdPartyFee, \\n\\t\\tuint newThirdPartyFee\\n\\t);\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\tfunction bitcoinFeeOracle() external view returns (address);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setNetworkFee(uint _networkFee) external;\\n\\n\\tfunction setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n\\tfunction setThirdPartyAddress(uint _thirdPartyId, address _thirdPartyAddress) external;\\n\\n\\tfunction setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n\\tfunction unwrap(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n\\t\\tuint thirdParty\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\",\"keccak256\":\"0x333bd59833486ecc365fbd0952e5624d90a08f95a0e9ba1280ee2f8d4884b74c\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n}\",\"keccak256\":\"0x1ec4ade2e24c702a150df51981d176b1d7ddd7faf21e971fefdef09674cfdf3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61347d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c806369ab4a8f116100805780638d9da599116100655780638d9da599146101b8578063a3441038146101cb578063a779a392146101eb576100c8565b806369ab4a8f146101685780637ebc232714610188576100c8565b8063191e28dc116100b1578063191e28dc1461011557806344922b64146101355780635a581a1814610155576100c8565b806310889dc3146100cd57806315755789146100f3575b600080fd5b6100e06100db366004612d1d565b6101fe565b6040519081526020015b60405180910390f35b8180156100ff57600080fd5b5061011361010e366004613056565b610279565b005b81801561012157600080fd5b506101136101303660046130a3565b6104c7565b81801561014157600080fd5b5061011361015036600461310d565b610552565b610113610163366004613003565b610768565b81801561017457600080fd5b50610113610183366004612f30565b61088f565b81801561019457600080fd5b506101a86101a3366004612d37565b61096a565b60405190151581526020016100ea565b6100e06101c6366004612d9e565b610a79565b8180156101d757600080fd5b506101136101e6366004612dff565b610b1d565b6100e06101f9366004612d1d565b610f47565b6000816001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190612de7565b90505b919050565b6001600160a01b03851660009081526020879052604090208054859081106102b157634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff161561031a5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c7265616479207061696400000060448201526064015b60405180910390fd5b6001600160a01b038516600090815260208790526040902080548391908690811061035557634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154106103c05760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a20646561646c696e65206e6f742070616044820152631cdcd95960e21b6064820152608401610311565b6103ca83826132dc565b6001600160a01b038616600090815260208890526040902080548690811061040257634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154116104615760405162461bcd60e51b815260206004820152601c60248201527f4275726e526f757465724c6f6769633a206f6c642072657175657374000000006044820152606401610311565b6001600160a01b03851660009081526020879052604090208054600191908690811061049d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055505050505050565b60006104d38484610f82565b67ffffffffffffffff16905060006104ea856110be565b905081158015906105045750806105028760016132dc565b145b15610527576000838152602088905260409020805460ff19166001179055610549565b80861415610549576000838152602088905260409020805460ff191660011790555b50505050505050565b858710156105a25760405162461bcd60e51b815260206004820152601c60248201527f4275726e526f757465724c6f6769633a206f6c642072657175657374000000006044820152606401610311565b7fffffffff000000000000000000000000000000000000000000000000000000008516156106385760405162461bcd60e51b815260206004820152602360248201527f4275726e526f757465724c6f6769633a206e6f6e2d7a65726f206c6f636b207460448201527f696d6500000000000000000000000000000000000000000000000000000000006064820152608401610311565b6040517faff2faa30000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063aff2faa39061067d908690600401613274565b60206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190612dc7565b6107195760405162461bcd60e51b815260206004820152601b60248201527f4275726e526f757465724c6f6769633a206e6f74206c6f636b657200000000006044820152606401610311565b8082146105495760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e646578657300006044820152606401610311565b600081600581111561078a57634e487b7160e01b600052602160045260246000fd5b14806107b5575060048160058111156107b357634e487b7160e01b600052602160045260246000fd5b145b806107df575060058160058111156107dd57634e487b7160e01b600052602160045260246000fd5b145b1561083a5781516020146108355760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420736372697074006044820152606401610311565b61088b565b815160141461088b5760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420736372697074006044820152606401610311565b5050565b60008061089c87876110ec565b915091506108ac8886868661119d565b82146108fa5760405162461bcd60e51b815260206004820181905260248201527f4275726e526f757465724c6f6769633a2077726f6e67206f75747075742074786044820152606401610311565b885160208a012061090b85836112fa565b805190602001201461095f5760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a206e6f7420666f72206c6f636b6572006044820152606401610311565b505050505050505050565b6000806109778786610a79565b9050803410156109c95760405162461bcd60e51b815260206004820152601560248201527f426974636f696e52656c61793a206c6f772066656500000000000000000000006044820152606401610311565b6000610a4488888888886040516024016109e69493929190613244565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4354da250000000000000000000000000000000000000000000000000000000017905284611396565b9050610a5933610a54843461336d565b6113c6565b80806020019051810190610a6d9190612dc7565b98975050505050505050565b6040517fd0a8973900000000000000000000000000000000000000000000000000000000815260048101829052600060248201819052906001600160a01b0384169063d0a897399060440160206040518083038186803b158015610adc57600080fd5b505afa158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190612de7565b90505b92915050565b89516002148015610b2f575082516002145b8015610b3c575080516003145b610b885760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e707574730000006044820152606401610311565b8481600281518110610baa57634e487b7160e01b600052603260045260246000fd5b60200260200101511015610c005760405162461bcd60e51b815260206004820152601c60248201527f4275726e526f757465724c6f6769633a206f6c642072657175657374000000006044820152606401610311565b610c5d868583600281518110610c2657634e487b7160e01b600052603260045260246000fd5b60200260200101518585600181518110610c5057634e487b7160e01b600052603260045260246000fd5b602002602001015161096a565b610ca95760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a206e6f742066696e616c697a656400006044820152606401610311565b60008481526020899052604090205460ff1615610d085760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c726561647920757365640000006044820152606401610311565b6000848152602089905260409020805460ff19166001179055805181906002908110610d4457634e487b7160e01b600052603260045260246000fd5b602002602001015187610d5791906132dc565b610d60876101fe565b11610db95760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a20646561646c696e65206e6f742070616044820152631cdcd95960e21b6064820152608401610311565b600080610df48b82602002015184600081518110610de757634e487b7160e01b600052603260045260246000fd5b60200260200101516110ec565b91509150610e808c600181518110610e1c57634e487b7160e01b600052603260045260246000fd5b60200260200101518c600160038110610e4557634e487b7160e01b600052603260045260246000fd5b60200201518d6002602002015188600181518110610e7357634e487b7160e01b600052603260045260246000fd5b602002602001015161119d565b8214610ece5760405162461bcd60e51b815260206004820181905260248201527f4275726e526f757465724c6f6769633a2077726f6e67206f75747075742074786044820152606401610311565b8c5160208e012060408c0151610ee490836112fa565b8051906020012014610f385760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a206e6f7420666f72206c6f636b6572006044820152606401610311565b50505050505050505050505050565b6000816001600160a01b031663a072bc506040518163ffffffff1660e01b815260040160206040518083038186803b15801561023957600080fd5b600080610f99610f94825b86906114e4565b611508565b905062ffffff198082161415610ff15760405162461bcd60e51b815260206004820152601b60248201527f426974636f696e48656c7065723a20766f7574206973206e756c6c00000000006044820152606401610311565b6000806000611001846000611651565b67ffffffffffffffff16905060005b818110156110b357611022858261179a565b935061102d846118c4565b9250866040516020016110409190613228565b604051602081830303815290604052805190602001206110658462ffffff1916611916565b6040516020016110759190613228565b6040516020818303038152906040528051906020012014156110a15761109a84611966565b95506110b3565b806110ab816133d7565b915050611010565b505050505092915050565b6000806110ce610f9484836114e4565b90506110db816000611651565b67ffffffffffffffff169392505050565b600080806111046110ff825b87906114e4565b61198b565b905062ffffff19808216141561115c5760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610311565b60006111688286611a7e565b9050600061117582611b85565b905061118081611ba9565b945061118b81611bcb565b63ffffffff1693505050509250929050565b6000806111ac6110ff826110f8565b905062ffffff1980821614156112045760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610311565b600060028787878760405160200161121f94939291906131bc565b60408051601f198184030181529082905261123991613228565b602060405180830381855afa158015611256573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112799190612de7565b9050600060028260405160200161129291815260200190565b60408051601f19818403018152908290526112ac91613228565b602060405180830381855afa1580156112c9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112ec9190612de7565b93505050505b949350505050565b6060600061130a610f9482610f8d565b905062ffffff1980821614156113625760405162461bcd60e51b815260206004820152601b60248201527f426974636f696e48656c7065723a20766f7574206973206e756c6c00000000006044820152606401610311565b600061136e828561179a565b9050600061137b826118c4565b905061138c62ffffff198216611916565b9695505050505050565b60606113bc84848460405180606001604052806029815260200161341f60299139611bf5565b90505b9392505050565b804710156114165760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610311565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611463576040519150601f19603f3d011682016040523d82523d6000602084013e611468565b606091505b50509050806114df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610311565b505050565b8151600090602084016114ff64ffffffffff85168284611d34565b95945050505050565b6000818161151e815b62ffffff19841690611d78565b50601884901c6001600160601b031661153e5762ffffff195b925061164a565b600061154b856000611651565b9050601885901c6001600160601b031667ffffffffffffffff82166115795762ffffff195b9450505061164a565b600061158483611e7a565b60ff16905060005b8367ffffffffffffffff16811015611601578282106115b65762ffffff195b96505050505061164a565b60006115d66115c5848661336d565b600e5b62ffffff198c169190611ed6565b90506115e181611f0a565b6115eb90846132dc565b92505080806115f9906133d7565b91505061158c565b508181146116195762ffffff195b955050505061164a565b611644600f5b60d81b7affffffffffffffffffffffffffffffffffffffffffffffff00000089161790565b95505050505b5050919050565b60008061166662ffffff198516846001611f54565b905060fc81116116815761167981611f84565b915050610b17565b8060fd14156116e7576116af6116aa61169b8560016132dc565b62ffffff198716906002612008565b611f84565b91506116ba82611e7a565b60ff166003146116e2576116e06116db62ffffff1986168560036000612159565b6121c9565b505b611793565b8060fe141561173c576117106116aa6117018560016132dc565b62ffffff198716906004612008565b915061171b82611e7a565b60ff166005146116e2576116e06116db62ffffff1986168560056000612159565b8060ff1415611793576117656116aa6117568560016132dc565b62ffffff198716906008612008565b915061177082611e7a565b60ff16600914611793576117916116db62ffffff1986168560096000612159565b505b5092915050565b600082600f6117a881611511565b5060006117b6866000611651565b67ffffffffffffffff169050601886901c6001600160601b031681861061181f5760405162461bcd60e51b815260206004820152601160248201527f566f75742072656164206f76657272756e0000000000000000000000000000006044820152606401610311565b600061182a83611e7a565b60ff1690506000805b8881101561188257611859611848848661336d565b600e5b62ffffff198d169190611ed6565b915061186482611f0a565b61186e90846132dc565b925061187b6001826132dc565b9050611833565b506118906115c5838561336d565b9050600061189d82611f0a565b90506118b68382600d5b62ffffff198e16929190612159565b9a9950505050505050505050565b600081600d6118d281611511565b5060006118e0856008611651565b90506114ff6118ee82611e7a565b6118f99060086132f4565b62ffffff1987169060ff1667ffffffffffffffff84166007612159565b606060008061192e8460181c6001600160601b031690565b60405193508392506001600160601b03169050611955846119508460206132dc565b612250565b508181016020016040529052919050565b600081600d61197481611511565b506112f26116aa62ffffff19861660006008612008565b6000818161199881611511565b50601884901c6001600160601b03166119b55762ffffff19611537565b60006119c2856000611651565b9050601885901c6001600160601b031667ffffffffffffffff82166119eb5762ffffff19611570565b60006119f683611e7a565b60ff16905060005b8367ffffffffffffffff16811015611a6257828210611a215762ffffff196115ab565b6000611a37611a30848661336d565b60056115c8565b9050611a42816123d8565b611a4c90846132dc565b9250508080611a5a906133d7565b9150506119fe565b50818114611a745762ffffff1961160f565b611644600661161f565b6000826006611a8c81611511565b506000611a9a866000611651565b67ffffffffffffffff169050601886901c6001600160601b0316818610611b035760405162461bcd60e51b815260206004820152601060248201527f56696e2072656164206f76657272756e000000000000000000000000000000006044820152606401610311565b6000611b0e83611e7a565b60ff1690506000805b88811015611b5c57611b33611b2c848661336d565b600561184b565b9150611b3e826123d8565b611b4890846132dc565b9250611b556001826132dc565b9050611b17565b50611b6a611a30838561336d565b90506000611b77826123d8565b90506118b6838260046118a7565b6000816004611b9381611511565b506112f262ffffff198516600060246003612159565b6000816003611bb781611511565b506112f262ffffff1985166000602061242d565b6000816003611bd981611511565b506112f2611bf062ffffff19861660206004612008565b6125a2565b606082471015611c6d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610311565b843b611cbb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610311565b600080866001600160a01b03168587604051611cd79190613228565b60006040518083038185875af1925050503d8060008114611d14576040519150601f19603f3d011682016040523d82523d6000602084013e611d19565b606091505b5091509150611d2982828661261e565b979650505050505050565b600080611d4183856132dc565b9050604051811115611d51575060005b80611d635762ffffff199150506113bf565b5050606092831b9190911790911b1760181b90565b6000611d848383612657565b611e73576000611da3611d978560d81c90565b64ffffffffff1661267a565b9150506000611db88464ffffffffff1661267a565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b086811b8216603d8401527f2e20457870656374656420307800000000000000000000000000000000000000604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016103119190613274565b5090919050565b600060fc8267ffffffffffffffff1611611e9657506001610274565b61ffff8267ffffffffffffffff1611611eb157506003610274565b63ffffffff8267ffffffffffffffff1611611ece57506005610274565b506009610274565b60006113bc8484611ef08760181c6001600160601b031690565b6001600160601b0316611f03919061336d565b8585612159565b600081600e611f1881611511565b506000611f26856008611651565b90508067ffffffffffffffff16611f3c82611e7a565b60ff16611f4991906132dc565b6114ff9060086132dc565b6000611f61826020613384565b611f6c906008613344565b60ff16611f7a85858561242d565b901c949350505050565b600067ffffffffffffffff8211156120045760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610311565b5090565b60006113bc61201885858561242d565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff167fffffffffffffffff0000000000000000ffffffffffffffff00000000000000009290911b9190911617608081811c91901b1790565b60008061216f8660781c6001600160601b031690565b6001600160601b0316905061218386612726565b8461218e87846132dc565b61219891906132dc565b11156121ab5762ffffff199150506112f2565b6121b585826132dc565b905061138c8364ffffffffff168286611d34565b606060006121fd6121f8826121ea601887901c6001600160601b0316612767565b62ffffff1987169190611f54565b61267a565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01611e48565b600062ffffff1980841614156122ce5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201527f65722064657265660000000000000000000000000000000000000000000000006064820152608401610311565b6122d7836127e0565b6123495760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201527f696e7465722064657265660000000000000000000000000000000000000000006064820152608401610311565b600061235e8460181c6001600160601b031690565b6001600160601b03169050600061237e8560781c6001600160601b031690565b6001600160601b03169050600060405190508481111561239e5760206060fd5b8285848460045afa5061138c6123b48760d81c90565b70ffffffffff000000000000000000000000606091821b168717901b841760181b90565b60008160056123e681611511565b5060006123f4856024611651565b90508067ffffffffffffffff1661240a82611e7a565b60ff1661241791906132dc565b6124229060246132dc565b6114ff9060046132dc565b600060ff821661243f575060006113bf565b6124528460181c6001600160601b031690565b6001600160601b031661246860ff8416856132dc565b11156124cc576124b36124848560781c6001600160601b031690565b6001600160601b03166124a08660181c6001600160601b031690565b6001600160601b0316858560ff1661281e565b60405162461bcd60e51b81526004016103119190613274565b60208260ff1611156125465760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610311565b60088202600061255f8660781c6001600160601b031690565b6001600160601b0316905060007f800000000000000000000000000000000000000000000000000000000000000060001984011d91909501511695945050505050565b600063ffffffff8211156120045760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610311565b6060831561262d5750816113bf565b82511561263d5782518084602001fd5b8160405162461bcd60e51b81526004016103119190613274565b60008164ffffffffff1661266b8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156126d8576000612699826008613344565b60ff1685901c90506126aa816129ae565b61ffff16841793508160ff166010146126c557601084901b93505b506126d1600182613384565b9050612680565b50600f5b60ff8160ff1610156127205760ff600882021684901c6126fb816129ae565b61ffff16831792508160ff1660001461271657601083901b92505b50600019016126dc565b50915091565b600061273b8260181c6001600160601b031690565b61274e8360781c6001600160601b031690565b6127589190613319565b6001600160601b031692915050565b600060ff8211156120045760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203860448201527f20626974730000000000000000000000000000000000000000000000000000006064820152608401610311565b60006127ec8260d81c90565b64ffffffffff1664ffffffffff141561280757506000610274565b600061281283612726565b60405110199392505050565b6060600061282b8661267a565b91505060006128398661267a565b91505060006128478661267a565b91505060006128558661267a565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e2074686560208201527f20766965772e20536c6963652069732061742030780000000000000000000000818301527fffffffffffff000000000000000000000000000000000000000000000000000060d098891b811660558301527f2077697468206c656e6774682030780000000000000000000000000000000000605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060708301527f7800000000000000000000000000000000000000000000000000000000000000609083015295881b861660918201526097810196909652951b90921660a684015250507f2e0000000000000000000000000000000000000000000000000000000000000060ac8201528151808203608d01815260ad90910190915295945050505050565b60006129c060048360ff16901c6129de565b60ff161760081b62ffff00166129d5826129de565b60ff1617919050565b600060f08083179060ff821614156129fa576030915050610274565b8060ff1660f11415612a10576031915050610274565b8060ff1660f21415612a26576032915050610274565b8060ff1660f31415612a3c576033915050610274565b8060ff1660f41415612a52576034915050610274565b8060ff1660f51415612a68576035915050610274565b8060ff1660f61415612a7e576036915050610274565b8060ff1660f71415612a94576037915050610274565b8060ff1660f81415612aaa576038915050610274565b8060ff1660f91415612ac0576039915050610274565b8060ff1660fa1415612ad6576061915050610274565b8060ff1660fb1415612aec576062915050610274565b8060ff1660fc1415612b02576063915050610274565b8060ff1660fd1415612b18576064915050610274565b8060ff1660fe1415612b2e576065915050610274565b8060ff1660ff1415612b44576066915050610274565b50919050565b80356001600160a01b038116811461027457600080fd5b600082601f830112612b71578081fd5b81356020612b86612b81836132b8565b613287565b8281528181019085830183850287018401881015612ba2578586fd5b855b85811015612bc757612bb582612c82565b84529284019290840190600101612ba4565b5090979650505050505050565b600082601f830112612be4578081fd5b612bee6060613287565b8083835b6003811015612c1d57612c088783358801612cb2565b84526020938401939190910190600101612bf2565b509095945050505050565b600082601f830112612c38578081fd5b81356020612c48612b81836132b8565b8281528181019085830183850287018401881015612c64578586fd5b855b85811015612bc757813584529284019290840190600101612c66565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461027457600080fd5b600082601f830112612cc2578081fd5b813567ffffffffffffffff811115612cdc57612cdc613408565b612cef601f8201601f1916602001613287565b818152846020838601011115612d03578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612d2e578081fd5b610b1482612b4a565b600080600080600060a08688031215612d4e578081fd5b612d5786612b4a565b94506020860135935060408601359250606086013567ffffffffffffffff811115612d80578182fd5b612d8c88828901612cb2565b95989497509295608001359392505050565b60008060408385031215612db0578182fd5b612db983612b4a565b946020939093013593505050565b600060208284031215612dd8578081fd5b815180151581146113bf578182fd5b600060208284031215612df8578081fd5b5051919050565b60008060008060008060008060008060006101608c8e031215612e20578586fd5b67ffffffffffffffff808d351115612e36578687fd5b612e438e8e358f01612cb2565b9b508060208e01351115612e55578687fd5b612e658e60208f01358f01612b61565b9a508060408e01351115612e77578687fd5b612e878e60408f01358f01612bd4565b995060608d0135985060808d01359750612ea360a08e01612b4a565b965060c08d0135955060e08d01359450806101008e01351115612ec4578384fd5b612ed58e6101008f01358f01612b61565b9350806101208e01351115612ee8578283fd5b612ef98e6101208f01358f01612cb2565b9250806101408e01351115612f0c578182fd5b50612f1e8d6101408e01358e01612c28565b90509295989b509295989b9093969950565b600080600080600080600060e0888a031215612f4a578081fd5b873567ffffffffffffffff80821115612f61578283fd5b612f6d8b838c01612cb2565b9850612f7b60208b01612c82565b975060408a0135915080821115612f90578283fd5b612f9c8b838c01612cb2565b965060608a0135955060808a0135915080821115612fb8578283fd5b612fc48b838c01612cb2565b945060a08a0135915080821115612fd9578283fd5b50612fe68a828b01612cb2565b925050612ff560c08901612c82565b905092959891949750929550565b60008060408385031215613015578182fd5b823567ffffffffffffffff81111561302b578283fd5b61303785828601612cb2565b92505060208301356006811061304b578182fd5b809150509250929050565b60008060008060008060c0878903121561306e578384fd5b8635955061307e60208801612b4a565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a086880312156130ba578283fd5b8535945060208601359350604086013567ffffffffffffffff808211156130df578485fd5b6130eb89838a01612cb2565b94506060880135915080821115613100578283fd5b50612d8c88828901612cb2565b600080600080600080600060e0888a031215613127578081fd5b873596506020880135955061313e60408901612c82565b945061314c60608901612b4a565b9350608088013567ffffffffffffffff811115613167578182fd5b6131738a828b01612cb2565b93505060a0880135915060c0880135905092959891949750929550565b600081518084526131a88160208601602086016133a7565b601f01601f19169290920160200192915050565b60007fffffffff00000000000000000000000000000000000000000000000000000000808716835285516131f7816004860160208a016133a7565b85519084019061320e816004840160208a016133a7565b919094169301600481019390935250506008019392505050565b6000825161323a8184602087016133a7565b9190910192915050565b6000858252846020830152608060408301526132636080830185613190565b905082606083015295945050505050565b600060208252610b146020830184613190565b604051601f8201601f1916810167ffffffffffffffff811182821017156132b0576132b0613408565b604052919050565b600067ffffffffffffffff8211156132d2576132d2613408565b5060209081020190565b600082198211156132ef576132ef6133f2565b500190565b600060ff821660ff84168060ff03821115613311576133116133f2565b019392505050565b60006001600160601b0380831681851680830382111561333b5761333b6133f2565b01949350505050565b600060ff821660ff84168160ff0481118215151615613365576133656133f2565b029392505050565b60008282101561337f5761337f6133f2565b500390565b600060ff821660ff84168082101561339e5761339e6133f2565b90039392505050565b60005b838110156133c25781810151838201526020016133aa565b838111156133d1576000848401525b50505050565b60006000198214156133eb576133eb6133f2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122043411da6052fafff40a7c904dd93dcfbfba4e78579b8c1489d957cf8689441a964736f6c63430008020033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c806369ab4a8f116100805780638d9da599116100655780638d9da599146101b8578063a3441038146101cb578063a779a392146101eb576100c8565b806369ab4a8f146101685780637ebc232714610188576100c8565b8063191e28dc116100b1578063191e28dc1461011557806344922b64146101355780635a581a1814610155576100c8565b806310889dc3146100cd57806315755789146100f3575b600080fd5b6100e06100db366004612d1d565b6101fe565b6040519081526020015b60405180910390f35b8180156100ff57600080fd5b5061011361010e366004613056565b610279565b005b81801561012157600080fd5b506101136101303660046130a3565b6104c7565b81801561014157600080fd5b5061011361015036600461310d565b610552565b610113610163366004613003565b610768565b81801561017457600080fd5b50610113610183366004612f30565b61088f565b81801561019457600080fd5b506101a86101a3366004612d37565b61096a565b60405190151581526020016100ea565b6100e06101c6366004612d9e565b610a79565b8180156101d757600080fd5b506101136101e6366004612dff565b610b1d565b6100e06101f9366004612d1d565b610f47565b6000816001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190612de7565b90505b919050565b6001600160a01b03851660009081526020879052604090208054859081106102b157634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff161561031a5760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c7265616479207061696400000060448201526064015b60405180910390fd5b6001600160a01b038516600090815260208790526040902080548391908690811061035557634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154106103c05760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a20646561646c696e65206e6f742070616044820152631cdcd95960e21b6064820152608401610311565b6103ca83826132dc565b6001600160a01b038616600090815260208890526040902080548690811061040257634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154116104615760405162461bcd60e51b815260206004820152601c60248201527f4275726e526f757465724c6f6769633a206f6c642072657175657374000000006044820152606401610311565b6001600160a01b03851660009081526020879052604090208054600191908690811061049d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055505050505050565b60006104d38484610f82565b67ffffffffffffffff16905060006104ea856110be565b905081158015906105045750806105028760016132dc565b145b15610527576000838152602088905260409020805460ff19166001179055610549565b80861415610549576000838152602088905260409020805460ff191660011790555b50505050505050565b858710156105a25760405162461bcd60e51b815260206004820152601c60248201527f4275726e526f757465724c6f6769633a206f6c642072657175657374000000006044820152606401610311565b7fffffffff000000000000000000000000000000000000000000000000000000008516156106385760405162461bcd60e51b815260206004820152602360248201527f4275726e526f757465724c6f6769633a206e6f6e2d7a65726f206c6f636b207460448201527f696d6500000000000000000000000000000000000000000000000000000000006064820152608401610311565b6040517faff2faa30000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063aff2faa39061067d908690600401613274565b60206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190612dc7565b6107195760405162461bcd60e51b815260206004820152601b60248201527f4275726e526f757465724c6f6769633a206e6f74206c6f636b657200000000006044820152606401610311565b8082146105495760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e646578657300006044820152606401610311565b600081600581111561078a57634e487b7160e01b600052602160045260246000fd5b14806107b5575060048160058111156107b357634e487b7160e01b600052602160045260246000fd5b145b806107df575060058160058111156107dd57634e487b7160e01b600052602160045260246000fd5b145b1561083a5781516020146108355760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420736372697074006044820152606401610311565b61088b565b815160141461088b5760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420736372697074006044820152606401610311565b5050565b60008061089c87876110ec565b915091506108ac8886868661119d565b82146108fa5760405162461bcd60e51b815260206004820181905260248201527f4275726e526f757465724c6f6769633a2077726f6e67206f75747075742074786044820152606401610311565b885160208a012061090b85836112fa565b805190602001201461095f5760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a206e6f7420666f72206c6f636b6572006044820152606401610311565b505050505050505050565b6000806109778786610a79565b9050803410156109c95760405162461bcd60e51b815260206004820152601560248201527f426974636f696e52656c61793a206c6f772066656500000000000000000000006044820152606401610311565b6000610a4488888888886040516024016109e69493929190613244565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4354da250000000000000000000000000000000000000000000000000000000017905284611396565b9050610a5933610a54843461336d565b6113c6565b80806020019051810190610a6d9190612dc7565b98975050505050505050565b6040517fd0a8973900000000000000000000000000000000000000000000000000000000815260048101829052600060248201819052906001600160a01b0384169063d0a897399060440160206040518083038186803b158015610adc57600080fd5b505afa158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190612de7565b90505b92915050565b89516002148015610b2f575082516002145b8015610b3c575080516003145b610b885760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a2077726f6e6720696e707574730000006044820152606401610311565b8481600281518110610baa57634e487b7160e01b600052603260045260246000fd5b60200260200101511015610c005760405162461bcd60e51b815260206004820152601c60248201527f4275726e526f757465724c6f6769633a206f6c642072657175657374000000006044820152606401610311565b610c5d868583600281518110610c2657634e487b7160e01b600052603260045260246000fd5b60200260200101518585600181518110610c5057634e487b7160e01b600052603260045260246000fd5b602002602001015161096a565b610ca95760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a206e6f742066696e616c697a656400006044820152606401610311565b60008481526020899052604090205460ff1615610d085760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a20616c726561647920757365640000006044820152606401610311565b6000848152602089905260409020805460ff19166001179055805181906002908110610d4457634e487b7160e01b600052603260045260246000fd5b602002602001015187610d5791906132dc565b610d60876101fe565b11610db95760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a20646561646c696e65206e6f742070616044820152631cdcd95960e21b6064820152608401610311565b600080610df48b82602002015184600081518110610de757634e487b7160e01b600052603260045260246000fd5b60200260200101516110ec565b91509150610e808c600181518110610e1c57634e487b7160e01b600052603260045260246000fd5b60200260200101518c600160038110610e4557634e487b7160e01b600052603260045260246000fd5b60200201518d6002602002015188600181518110610e7357634e487b7160e01b600052603260045260246000fd5b602002602001015161119d565b8214610ece5760405162461bcd60e51b815260206004820181905260248201527f4275726e526f757465724c6f6769633a2077726f6e67206f75747075742074786044820152606401610311565b8c5160208e012060408c0151610ee490836112fa565b8051906020012014610f385760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a206e6f7420666f72206c6f636b6572006044820152606401610311565b50505050505050505050505050565b6000816001600160a01b031663a072bc506040518163ffffffff1660e01b815260040160206040518083038186803b15801561023957600080fd5b600080610f99610f94825b86906114e4565b611508565b905062ffffff198082161415610ff15760405162461bcd60e51b815260206004820152601b60248201527f426974636f696e48656c7065723a20766f7574206973206e756c6c00000000006044820152606401610311565b6000806000611001846000611651565b67ffffffffffffffff16905060005b818110156110b357611022858261179a565b935061102d846118c4565b9250866040516020016110409190613228565b604051602081830303815290604052805190602001206110658462ffffff1916611916565b6040516020016110759190613228565b6040516020818303038152906040528051906020012014156110a15761109a84611966565b95506110b3565b806110ab816133d7565b915050611010565b505050505092915050565b6000806110ce610f9484836114e4565b90506110db816000611651565b67ffffffffffffffff169392505050565b600080806111046110ff825b87906114e4565b61198b565b905062ffffff19808216141561115c5760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610311565b60006111688286611a7e565b9050600061117582611b85565b905061118081611ba9565b945061118b81611bcb565b63ffffffff1693505050509250929050565b6000806111ac6110ff826110f8565b905062ffffff1980821614156112045760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610311565b600060028787878760405160200161121f94939291906131bc565b60408051601f198184030181529082905261123991613228565b602060405180830381855afa158015611256573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112799190612de7565b9050600060028260405160200161129291815260200190565b60408051601f19818403018152908290526112ac91613228565b602060405180830381855afa1580156112c9573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906112ec9190612de7565b93505050505b949350505050565b6060600061130a610f9482610f8d565b905062ffffff1980821614156113625760405162461bcd60e51b815260206004820152601b60248201527f426974636f696e48656c7065723a20766f7574206973206e756c6c00000000006044820152606401610311565b600061136e828561179a565b9050600061137b826118c4565b905061138c62ffffff198216611916565b9695505050505050565b60606113bc84848460405180606001604052806029815260200161341f60299139611bf5565b90505b9392505050565b804710156114165760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610311565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611463576040519150601f19603f3d011682016040523d82523d6000602084013e611468565b606091505b50509050806114df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610311565b505050565b8151600090602084016114ff64ffffffffff85168284611d34565b95945050505050565b6000818161151e815b62ffffff19841690611d78565b50601884901c6001600160601b031661153e5762ffffff195b925061164a565b600061154b856000611651565b9050601885901c6001600160601b031667ffffffffffffffff82166115795762ffffff195b9450505061164a565b600061158483611e7a565b60ff16905060005b8367ffffffffffffffff16811015611601578282106115b65762ffffff195b96505050505061164a565b60006115d66115c5848661336d565b600e5b62ffffff198c169190611ed6565b90506115e181611f0a565b6115eb90846132dc565b92505080806115f9906133d7565b91505061158c565b508181146116195762ffffff195b955050505061164a565b611644600f5b60d81b7affffffffffffffffffffffffffffffffffffffffffffffff00000089161790565b95505050505b5050919050565b60008061166662ffffff198516846001611f54565b905060fc81116116815761167981611f84565b915050610b17565b8060fd14156116e7576116af6116aa61169b8560016132dc565b62ffffff198716906002612008565b611f84565b91506116ba82611e7a565b60ff166003146116e2576116e06116db62ffffff1986168560036000612159565b6121c9565b505b611793565b8060fe141561173c576117106116aa6117018560016132dc565b62ffffff198716906004612008565b915061171b82611e7a565b60ff166005146116e2576116e06116db62ffffff1986168560056000612159565b8060ff1415611793576117656116aa6117568560016132dc565b62ffffff198716906008612008565b915061177082611e7a565b60ff16600914611793576117916116db62ffffff1986168560096000612159565b505b5092915050565b600082600f6117a881611511565b5060006117b6866000611651565b67ffffffffffffffff169050601886901c6001600160601b031681861061181f5760405162461bcd60e51b815260206004820152601160248201527f566f75742072656164206f76657272756e0000000000000000000000000000006044820152606401610311565b600061182a83611e7a565b60ff1690506000805b8881101561188257611859611848848661336d565b600e5b62ffffff198d169190611ed6565b915061186482611f0a565b61186e90846132dc565b925061187b6001826132dc565b9050611833565b506118906115c5838561336d565b9050600061189d82611f0a565b90506118b68382600d5b62ffffff198e16929190612159565b9a9950505050505050505050565b600081600d6118d281611511565b5060006118e0856008611651565b90506114ff6118ee82611e7a565b6118f99060086132f4565b62ffffff1987169060ff1667ffffffffffffffff84166007612159565b606060008061192e8460181c6001600160601b031690565b60405193508392506001600160601b03169050611955846119508460206132dc565b612250565b508181016020016040529052919050565b600081600d61197481611511565b506112f26116aa62ffffff19861660006008612008565b6000818161199881611511565b50601884901c6001600160601b03166119b55762ffffff19611537565b60006119c2856000611651565b9050601885901c6001600160601b031667ffffffffffffffff82166119eb5762ffffff19611570565b60006119f683611e7a565b60ff16905060005b8367ffffffffffffffff16811015611a6257828210611a215762ffffff196115ab565b6000611a37611a30848661336d565b60056115c8565b9050611a42816123d8565b611a4c90846132dc565b9250508080611a5a906133d7565b9150506119fe565b50818114611a745762ffffff1961160f565b611644600661161f565b6000826006611a8c81611511565b506000611a9a866000611651565b67ffffffffffffffff169050601886901c6001600160601b0316818610611b035760405162461bcd60e51b815260206004820152601060248201527f56696e2072656164206f76657272756e000000000000000000000000000000006044820152606401610311565b6000611b0e83611e7a565b60ff1690506000805b88811015611b5c57611b33611b2c848661336d565b600561184b565b9150611b3e826123d8565b611b4890846132dc565b9250611b556001826132dc565b9050611b17565b50611b6a611a30838561336d565b90506000611b77826123d8565b90506118b6838260046118a7565b6000816004611b9381611511565b506112f262ffffff198516600060246003612159565b6000816003611bb781611511565b506112f262ffffff1985166000602061242d565b6000816003611bd981611511565b506112f2611bf062ffffff19861660206004612008565b6125a2565b606082471015611c6d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610311565b843b611cbb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610311565b600080866001600160a01b03168587604051611cd79190613228565b60006040518083038185875af1925050503d8060008114611d14576040519150601f19603f3d011682016040523d82523d6000602084013e611d19565b606091505b5091509150611d2982828661261e565b979650505050505050565b600080611d4183856132dc565b9050604051811115611d51575060005b80611d635762ffffff199150506113bf565b5050606092831b9190911790911b1760181b90565b6000611d848383612657565b611e73576000611da3611d978560d81c90565b64ffffffffff1661267a565b9150506000611db88464ffffffffff1661267a565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b086811b8216603d8401527f2e20457870656374656420307800000000000000000000000000000000000000604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016103119190613274565b5090919050565b600060fc8267ffffffffffffffff1611611e9657506001610274565b61ffff8267ffffffffffffffff1611611eb157506003610274565b63ffffffff8267ffffffffffffffff1611611ece57506005610274565b506009610274565b60006113bc8484611ef08760181c6001600160601b031690565b6001600160601b0316611f03919061336d565b8585612159565b600081600e611f1881611511565b506000611f26856008611651565b90508067ffffffffffffffff16611f3c82611e7a565b60ff16611f4991906132dc565b6114ff9060086132dc565b6000611f61826020613384565b611f6c906008613344565b60ff16611f7a85858561242d565b901c949350505050565b600067ffffffffffffffff8211156120045760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610311565b5090565b60006113bc61201885858561242d565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff167fffffffffffffffff0000000000000000ffffffffffffffff00000000000000009290911b9190911617608081811c91901b1790565b60008061216f8660781c6001600160601b031690565b6001600160601b0316905061218386612726565b8461218e87846132dc565b61219891906132dc565b11156121ab5762ffffff199150506112f2565b6121b585826132dc565b905061138c8364ffffffffff168286611d34565b606060006121fd6121f8826121ea601887901c6001600160601b0316612767565b62ffffff1987169190611f54565b61267a565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01611e48565b600062ffffff1980841614156122ce5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201527f65722064657265660000000000000000000000000000000000000000000000006064820152608401610311565b6122d7836127e0565b6123495760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201527f696e7465722064657265660000000000000000000000000000000000000000006064820152608401610311565b600061235e8460181c6001600160601b031690565b6001600160601b03169050600061237e8560781c6001600160601b031690565b6001600160601b03169050600060405190508481111561239e5760206060fd5b8285848460045afa5061138c6123b48760d81c90565b70ffffffffff000000000000000000000000606091821b168717901b841760181b90565b60008160056123e681611511565b5060006123f4856024611651565b90508067ffffffffffffffff1661240a82611e7a565b60ff1661241791906132dc565b6124229060246132dc565b6114ff9060046132dc565b600060ff821661243f575060006113bf565b6124528460181c6001600160601b031690565b6001600160601b031661246860ff8416856132dc565b11156124cc576124b36124848560781c6001600160601b031690565b6001600160601b03166124a08660181c6001600160601b031690565b6001600160601b0316858560ff1661281e565b60405162461bcd60e51b81526004016103119190613274565b60208260ff1611156125465760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610311565b60088202600061255f8660781c6001600160601b031690565b6001600160601b0316905060007f800000000000000000000000000000000000000000000000000000000000000060001984011d91909501511695945050505050565b600063ffffffff8211156120045760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610311565b6060831561262d5750816113bf565b82511561263d5782518084602001fd5b8160405162461bcd60e51b81526004016103119190613274565b60008164ffffffffff1661266b8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156126d8576000612699826008613344565b60ff1685901c90506126aa816129ae565b61ffff16841793508160ff166010146126c557601084901b93505b506126d1600182613384565b9050612680565b50600f5b60ff8160ff1610156127205760ff600882021684901c6126fb816129ae565b61ffff16831792508160ff1660001461271657601083901b92505b50600019016126dc565b50915091565b600061273b8260181c6001600160601b031690565b61274e8360781c6001600160601b031690565b6127589190613319565b6001600160601b031692915050565b600060ff8211156120045760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203860448201527f20626974730000000000000000000000000000000000000000000000000000006064820152608401610311565b60006127ec8260d81c90565b64ffffffffff1664ffffffffff141561280757506000610274565b600061281283612726565b60405110199392505050565b6060600061282b8661267a565b91505060006128398661267a565b91505060006128478661267a565b91505060006128558661267a565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e2074686560208201527f20766965772e20536c6963652069732061742030780000000000000000000000818301527fffffffffffff000000000000000000000000000000000000000000000000000060d098891b811660558301527f2077697468206c656e6774682030780000000000000000000000000000000000605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060708301527f7800000000000000000000000000000000000000000000000000000000000000609083015295881b861660918201526097810196909652951b90921660a684015250507f2e0000000000000000000000000000000000000000000000000000000000000060ac8201528151808203608d01815260ad90910190915295945050505050565b60006129c060048360ff16901c6129de565b60ff161760081b62ffff00166129d5826129de565b60ff1617919050565b600060f08083179060ff821614156129fa576030915050610274565b8060ff1660f11415612a10576031915050610274565b8060ff1660f21415612a26576032915050610274565b8060ff1660f31415612a3c576033915050610274565b8060ff1660f41415612a52576034915050610274565b8060ff1660f51415612a68576035915050610274565b8060ff1660f61415612a7e576036915050610274565b8060ff1660f71415612a94576037915050610274565b8060ff1660f81415612aaa576038915050610274565b8060ff1660f91415612ac0576039915050610274565b8060ff1660fa1415612ad6576061915050610274565b8060ff1660fb1415612aec576062915050610274565b8060ff1660fc1415612b02576063915050610274565b8060ff1660fd1415612b18576064915050610274565b8060ff1660fe1415612b2e576065915050610274565b8060ff1660ff1415612b44576066915050610274565b50919050565b80356001600160a01b038116811461027457600080fd5b600082601f830112612b71578081fd5b81356020612b86612b81836132b8565b613287565b8281528181019085830183850287018401881015612ba2578586fd5b855b85811015612bc757612bb582612c82565b84529284019290840190600101612ba4565b5090979650505050505050565b600082601f830112612be4578081fd5b612bee6060613287565b8083835b6003811015612c1d57612c088783358801612cb2565b84526020938401939190910190600101612bf2565b509095945050505050565b600082601f830112612c38578081fd5b81356020612c48612b81836132b8565b8281528181019085830183850287018401881015612c64578586fd5b855b85811015612bc757813584529284019290840190600101612c66565b80357fffffffff000000000000000000000000000000000000000000000000000000008116811461027457600080fd5b600082601f830112612cc2578081fd5b813567ffffffffffffffff811115612cdc57612cdc613408565b612cef601f8201601f1916602001613287565b818152846020838601011115612d03578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612d2e578081fd5b610b1482612b4a565b600080600080600060a08688031215612d4e578081fd5b612d5786612b4a565b94506020860135935060408601359250606086013567ffffffffffffffff811115612d80578182fd5b612d8c88828901612cb2565b95989497509295608001359392505050565b60008060408385031215612db0578182fd5b612db983612b4a565b946020939093013593505050565b600060208284031215612dd8578081fd5b815180151581146113bf578182fd5b600060208284031215612df8578081fd5b5051919050565b60008060008060008060008060008060006101608c8e031215612e20578586fd5b67ffffffffffffffff808d351115612e36578687fd5b612e438e8e358f01612cb2565b9b508060208e01351115612e55578687fd5b612e658e60208f01358f01612b61565b9a508060408e01351115612e77578687fd5b612e878e60408f01358f01612bd4565b995060608d0135985060808d01359750612ea360a08e01612b4a565b965060c08d0135955060e08d01359450806101008e01351115612ec4578384fd5b612ed58e6101008f01358f01612b61565b9350806101208e01351115612ee8578283fd5b612ef98e6101208f01358f01612cb2565b9250806101408e01351115612f0c578182fd5b50612f1e8d6101408e01358e01612c28565b90509295989b509295989b9093969950565b600080600080600080600060e0888a031215612f4a578081fd5b873567ffffffffffffffff80821115612f61578283fd5b612f6d8b838c01612cb2565b9850612f7b60208b01612c82565b975060408a0135915080821115612f90578283fd5b612f9c8b838c01612cb2565b965060608a0135955060808a0135915080821115612fb8578283fd5b612fc48b838c01612cb2565b945060a08a0135915080821115612fd9578283fd5b50612fe68a828b01612cb2565b925050612ff560c08901612c82565b905092959891949750929550565b60008060408385031215613015578182fd5b823567ffffffffffffffff81111561302b578283fd5b61303785828601612cb2565b92505060208301356006811061304b578182fd5b809150509250929050565b60008060008060008060c0878903121561306e578384fd5b8635955061307e60208801612b4a565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a086880312156130ba578283fd5b8535945060208601359350604086013567ffffffffffffffff808211156130df578485fd5b6130eb89838a01612cb2565b94506060880135915080821115613100578283fd5b50612d8c88828901612cb2565b600080600080600080600060e0888a031215613127578081fd5b873596506020880135955061313e60408901612c82565b945061314c60608901612b4a565b9350608088013567ffffffffffffffff811115613167578182fd5b6131738a828b01612cb2565b93505060a0880135915060c0880135905092959891949750929550565b600081518084526131a88160208601602086016133a7565b601f01601f19169290920160200192915050565b60007fffffffff00000000000000000000000000000000000000000000000000000000808716835285516131f7816004860160208a016133a7565b85519084019061320e816004840160208a016133a7565b919094169301600481019390935250506008019392505050565b6000825161323a8184602087016133a7565b9190910192915050565b6000858252846020830152608060408301526132636080830185613190565b905082606083015295945050505050565b600060208252610b146020830184613190565b604051601f8201601f1916810167ffffffffffffffff811182821017156132b0576132b0613408565b604052919050565b600067ffffffffffffffff8211156132d2576132d2613408565b5060209081020190565b600082198211156132ef576132ef6133f2565b500190565b600060ff821660ff84168060ff03821115613311576133116133f2565b019392505050565b60006001600160601b0380831681851680830382111561333b5761333b6133f2565b01949350505050565b600060ff821660ff84168160ff0481118215151615613365576133656133f2565b029392505050565b60008282101561337f5761337f6133f2565b500390565b600060ff821660ff84168082101561339e5761339e6133f2565b90039392505050565b60005b838110156133c25781810151838201526020016133aa565b838111156133d1576000848401525b50505050565b60006000198214156133eb576133eb6133f2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122043411da6052fafff40a7c904dd93dcfbfba4e78579b8c1489d957cf8689441a964736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isConfirmed(address,bytes32,uint256,bytes,uint256)": {
        "details": "Calls the relay contract to check Merkle inclusion proof",
        "params": {
          "_blockNumber": "Height of the block containing the transaction",
          "_index": "Index of transaction in the block",
          "_intermediateNodes": "Merkle inclusion proof for the transaction",
          "_relay": "Address of Relay contract",
          "_txId": "of the transaction"
        },
        "returns": {
          "_0": "True if the transaction was included in the block"
        }
      },
      "updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)": {
        "details": "One output might return the remaining value to the locker",
        "params": {
          "_lockerLockingScript": "Locking script of locker",
          "_paidOutputCounter": "Number of the tx outputs that pay a cc burn request",
          "_txId": "Transaction id",
          "_vout": "Outputs of a transaction"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkScriptType(bytes,ScriptTypes)": {
        "notice": "Checks the user hash script to be valid (based on its type)"
      },
      "isConfirmed(address,bytes32,uint256,bytes,uint256)": {
        "notice": "Checks inclusion of the transaction in the specified block"
      },
      "updateIsUsedAsBurnProof(mapping(bytes32 => bool) storage,uint256,bytes,bytes,bytes32)": {
        "notice": "Checks if all outputs of the transaction used to pay a cc burn request"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}