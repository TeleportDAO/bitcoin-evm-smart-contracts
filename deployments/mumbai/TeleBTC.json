{
  "address": "0x7a74bB73FBF4388237DbD4e3c750Cd46306D9473",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBlackLister",
          "type": "address"
        }
      ],
      "name": "BlackListerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "blackLister",
          "type": "address"
        }
      ],
      "name": "BlackListerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBurner",
          "type": "address"
        }
      ],
      "name": "BurnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        }
      ],
      "name": "BurnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "doer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEpochLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochLength",
          "type": "uint256"
        }
      ],
      "name": "NewEpochLength",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintLimit",
          "type": "uint256"
        }
      ],
      "name": "NewMintLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addBlackLister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklisters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnUserBalance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "burners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlackListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ownerBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeBlackLister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeBurner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintLimit",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "unBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd86ee7055918522656d0cdb9958e827990d596cda319629c537f3003532d7dfb",
  "receipt": {
    "to": null,
    "from": "0x84dA3E9DBe1e53491c5DAAB2FA93C52980a4974d",
    "contractAddress": "0x7a74bB73FBF4388237DbD4e3c750Cd46306D9473",
    "transactionIndex": 0,
    "gasUsed": "1828206",
    "logsBloom": "0x00000000010000000000000000000000000000002000000000800000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000800000020100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000010000000000000101000000020000000000020000000000000000000000000000000000000000000044000100000",
    "blockHash": "0x1bd17d292242ad443503346222285254589b8940977ee7545b114988ba262080",
    "transactionHash": "0xd86ee7055918522656d0cdb9958e827990d596cda319629c537f3003532d7dfb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 42855678,
        "transactionHash": "0xd86ee7055918522656d0cdb9958e827990d596cda319629c537f3003532d7dfb",
        "address": "0x7a74bB73FBF4388237DbD4e3c750Cd46306D9473",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084da3e9dbe1e53491c5daab2fa93c52980a4974d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1bd17d292242ad443503346222285254589b8940977ee7545b114988ba262080"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 42855678,
        "transactionHash": "0xd86ee7055918522656d0cdb9958e827990d596cda319629c537f3003532d7dfb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000084da3e9dbe1e53491c5daab2fa93c52980a4974d",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000081e6df967d7e8e0000000000000000000000000000000000000000000000017e38eea2516e1e9b0000000000000000000000000000000000000000000000c0acb2d970753b171e0000000000000000000000000000000000000000000000017db707c2baf0a00d0000000000000000000000000000000000000000000000c0ad34c0500bb895ac",
        "logIndex": 1,
        "blockHash": "0x1bd17d292242ad443503346222285254589b8940977ee7545b114988ba262080"
      }
    ],
    "blockNumber": 42855678,
    "cumulativeGasUsed": "1828206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "teleBTC",
    "TELEBTC"
  ],
  "numDeployments": 1,
  "solcInputHash": "eae268f8f5acbf306ee027f0fd1646a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlackLister\",\"type\":\"address\"}],\"name\":\"BlackListerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blackLister\",\"type\":\"address\"}],\"name\":\"BlackListerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEpochLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochLength\",\"type\":\"uint256\"}],\"name\":\"NewEpochLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintLimit\",\"type\":\"uint256\"}],\"name\":\"NewMintLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlackLister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnUserBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlackLister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBlackLister(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be added to blacklisters\"}},\"addBurner(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be added to burners\"}},\"addMinter(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be added to minters\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"blacklist(address)\":{\"details\":\"Only Blacklisters can call this\",\"params\":{\"_account\":\"Account blacklisted\"}},\"burn(uint256)\":{\"details\":\"Only burners can call this\",\"params\":{\"_amount\":\"Amount of burnt tokens\"}},\"burnUserBalance(address,uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"amount\":\"Amount of burnt tokens\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isBlackListed(address)\":{\"details\":\"Check if an account is blacklisted.\",\"returns\":{\"_0\":\"bool\"}},\"mint(address,uint256)\":{\"details\":\"Only minters can call this\",\"params\":{\"_amount\":\"Amount of minted tokens\",\"_receiver\":\"Address of token's receiver\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerBurn(address,uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_amount\":\"Amount of burnt tokens\",\"_user\":\"Address of user whose teleBTC is burnt\"}},\"removeBlackLister(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be removed from blacklisters\"}},\"removeBurner(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be removed from burners\"}},\"removeMinter(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"account\":\"The account which intended to be removed from minters\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setEpochLength(uint256)\":{\"details\":\"change blocks number per epoch.\"},\"setMaxMintLimit(uint256)\":{\"details\":\"change maximum mint limit per epoch.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unBlacklist(address)\":{\"details\":\"Only Blacklisters can call this\",\"params\":{\"_account\":\"Account unblacklisted\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBlackLister(address)\":{\"notice\":\"Adds a blacklister\"},\"addBurner(address)\":{\"notice\":\"Adds a burner\"},\"addMinter(address)\":{\"notice\":\"Adds a minter\"},\"blacklist(address)\":{\"notice\":\"Blacklist an account\"},\"burn(uint256)\":{\"notice\":\"Burns TeleBTC tokens of msg.sender\"},\"burnUserBalance(address,uint256)\":{\"notice\":\"Burns TeleBTC tokens of account\"},\"mint(address,uint256)\":{\"notice\":\"Mints TeleBTC tokens for _receiver\"},\"ownerBurn(address,uint256)\":{\"notice\":\"Burns TeleBTC tokens of user\"},\"removeBlackLister(address)\":{\"notice\":\"Removes a blacklister\"},\"removeBurner(address)\":{\"notice\":\"Removes a burner\"},\"removeMinter(address)\":{\"notice\":\"Removes a minter\"},\"unBlacklist(address)\":{\"notice\":\"UnBlacklist an account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc20/TeleBTC.sol\":\"TeleBTC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/erc20/TeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ITeleBTC.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract TeleBTC is ITeleBTC, ERC20, Ownable, ReentrancyGuard {\\n\\n    modifier onlyBlackLister() {\\n        require(isBlackLister(_msgSender()), \\\"TeleBTC: only blacklisters\\\");\\n        _;\\n    }\\n\\n    modifier notBlackListed(address _account) {\\n        require(!isBlackListed(_account), \\\"TeleBTC: blacklisted\\\");\\n        _;\\n    }\\n \\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"TeleBTC: only minters can mint\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"TeleBTC: only burners can burn\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"TeleBTC: value is zero\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n    mapping(address => bool) public blacklisters;\\n\\n    mapping(address => bool) internal blacklisted;\\n\\n    uint public maxMintLimit; // Maximum mint limit per epoch\\n    uint public lastMintLimit; // Current mint limit in last epoch, decrease by minting in an epoch\\n    uint public epochLength; // Number of blocks in every epoch\\n    uint public lastEpoch; // Epoch number of last mint transaction\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        maxMintLimit = 10 ** 8;\\n        lastMintLimit = 10 ** 8;\\n        epochLength = 2000;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    function decimals() public view virtual override(ERC20, ITeleBTC) returns (uint8) {\\n        return 8;\\n    }\\n\\n    /**\\n     * @dev change maximum mint limit per epoch.\\n     */\\n    function setMaxMintLimit(uint _mintLimit) public override onlyOwner {\\n        emit NewMintLimit(maxMintLimit, _mintLimit);\\n        maxMintLimit = _mintLimit;\\n    }\\n\\n    /**\\n     * @dev change blocks number per epoch.\\n     */\\n    function setEpochLength(uint _length) public override onlyOwner nonZeroValue(_length) {\\n        emit NewEpochLength(epochLength, _length);\\n        epochLength = _length;\\n    }\\n\\n    /**\\n     * @dev Check if an account is blacklister.\\n     * @return bool\\n     */\\n    function isBlackLister(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return blacklisters[account];\\n    }\\n\\n    /**\\n     * @dev Check if an account is blacklisted.\\n     * @return bool\\n     */\\n    function isBlackListed(address account) public view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return blacklisted[account];\\n    }\\n\\n    /**\\n     * @dev Check if an account is minter.\\n     * @return bool\\n     */\\n    function isMinter(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return minters[account];\\n    }\\n\\n    /// @notice                Check if an account is burner    \\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isBurner(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: zero address\\\");\\n        return burners[account];\\n    }\\n\\n    /// @notice                Adds a blacklister\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to blacklisters\\n    function addBlackLister(address account) external override onlyOwner {\\n        require(!isBlackLister(account), \\\"TeleBTC: already has role\\\");\\n        blacklisters[account] = true;\\n        emit BlackListerAdded(account);\\n    }\\n\\n    /// @notice                Removes a blacklister\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from blacklisters\\n    function removeBlackLister(address account) external override onlyOwner {\\n        require(isBlackLister(account), \\\"TeleBTC: does not have role\\\");\\n        blacklisters[account] = false;\\n        emit BlackListerRemoved(account);\\n    }\\n\\n    /// @notice                Adds a minter\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to minters\\n    function addMinter(address account) external override onlyOwner {\\n        require(!isMinter(account), \\\"TeleBTC: already has role\\\");\\n        minters[account] = true;\\n        emit MinterAdded(account);\\n    }\\n\\n    /// @notice                Removes a minter\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from minters\\n    function removeMinter(address account) external override onlyOwner {\\n        require(isMinter(account), \\\"TeleBTC: does not have role\\\");\\n        minters[account] = false;\\n        emit MinterRemoved(account);\\n    }\\n\\n    /// @notice                Adds a burner\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to burners\\n    function addBurner(address account) external override onlyOwner {\\n        require(!isBurner(account), \\\"TeleBTC: already has role\\\");\\n        burners[account] = true;\\n        emit BurnerAdded(account);\\n    }\\n\\n    /// @notice                Removes a burner\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from burners\\n    function removeBurner(address account) external override onlyOwner {\\n        require(isBurner(account), \\\"TeleBTC: does not have role\\\");\\n        burners[account] = false;\\n        emit BurnerRemoved(account);\\n    }\\n\\n    /// @notice                Burns TeleBTC tokens of msg.sender\\n    /// @dev                   Only burners can call this\\n    /// @param _amount         Amount of burnt tokens\\n    function burn(uint _amount) external nonReentrant onlyBurner override returns (bool) {\\n        _burn(_msgSender(), _amount);\\n        emit Burn(_msgSender(), _msgSender(), _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Burns TeleBTC tokens of user\\n    /// @dev                   Only owner can call this\\n    /// @param _user           Address of user whose teleBTC is burnt\\n    /// @param _amount         Amount of burnt tokens\\n    function ownerBurn(address _user, uint _amount) external nonReentrant onlyOwner override returns (bool) {\\n        _burn(_user, _amount);\\n        emit Burn(_msgSender(), _user, _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Mints TeleBTC tokens for _receiver\\n    /// @dev                   Only minters can call this\\n    /// @param _receiver       Address of token's receiver\\n    /// @param _amount         Amount of minted tokens\\n    function mint(address _receiver, uint _amount) external nonReentrant onlyMinter override returns (bool) {\\n        require(_amount <= maxMintLimit, \\\"TeleBTC: mint amount is more than maximum mint limit\\\");\\n        require(checkAndReduceMintLimit(_amount), \\\"TeleBTC: reached maximum mint limit\\\");\\n\\n        _mint(_receiver, _amount);\\n        emit Mint(_msgSender(), _receiver, _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Check if can mint new tokens and update mint limit\\n    /// @param _amount         Desired mint amount\\n    function checkAndReduceMintLimit(uint _amount) private returns (bool) {\\n        uint currentEpoch = block.number / epochLength;\\n        \\n        if (currentEpoch == lastEpoch) {\\n            if (_amount > lastMintLimit)\\n                return false;\\n            lastMintLimit -= _amount;\\n        } else {\\n            lastEpoch = currentEpoch;\\n            lastMintLimit = maxMintLimit - _amount;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                Burns TeleBTC tokens of account\\n    /// @dev                   Only owner can call this\\n    /// @param amount         Amount of burnt tokens\\n    function burnUserBalance(address account, uint256 amount) external nonReentrant onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        emit Burn(owner(), account, amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice                Blacklist an account\\n    /// @dev                   Only Blacklisters can call this\\n    /// @param _account        Account blacklisted\\n    function blacklist(address _account) external override nonReentrant onlyBlackLister {\\n        blacklisted[_account] = true;\\n        emit Blacklisted(_account);\\n    }\\n\\n    /// @notice                UnBlacklist an account\\n    /// @dev                   Only Blacklisters can call this\\n    /// @param _account        Account unblacklisted\\n    function unBlacklist(address _account) external override nonReentrant onlyBlackLister {\\n        blacklisted[_account] = false;\\n        emit UnBlacklisted(_account);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(!isBlackListed(from), \\\"TeleBTC: from is blacklisted\\\");\\n        require(!isBlackListed(to), \\\"TeleBTC: to is blacklisted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf119e534c4b9736b2633242ed00ffea29dec3c2c84925b073a2983e55c11463f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    event Blacklisted(address indexed account);\\n\\n    event UnBlacklisted(address indexed account);\\n\\n    event BlackListerAdded(address indexed newBlackLister);\\n\\n    event BlackListerRemoved(address indexed blackLister);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function ownerBurn(address _user, uint _amount) external returns (bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n\\n    function addBlackLister(address account) external;\\n\\n    function removeBlackLister(address account) external;\\n\\n    function blacklist(address _account) external;\\n\\n    function unBlacklist(address _account) external;\\n}\",\"keccak256\":\"0x8c0a7740f7abcd137ffc5e15a2f68e257cc6fa7a3f30d6296ecdb0d047958571\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620020183803806200201883398101604081905262000034916200024f565b8151829082906200004d906003906020850190620000f6565b50805162000063906004906020840190620000f6565b505050620000806200007a620000a060201b60201c565b620000a4565b505060016006556305f5e100600b819055600c556107d0600d5562000309565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010490620002b6565b90600052602060002090601f01602090048101928262000128576000855562000173565b82601f106200014357805160ff191683800117855562000173565b8280016001018555821562000173579182015b828111156200017357825182559160200191906001019062000156565b506200018192915062000185565b5090565b5b8082111562000181576000815560010162000186565b600082601f830112620001ad578081fd5b81516001600160401b0380821115620001ca57620001ca620002f3565b604051601f8301601f19908116603f01168101908282118183101715620001f557620001f5620002f3565b8160405283815260209250868385880101111562000211578485fd5b8491505b8382101562000234578582018301518183018401529082019062000215565b838211156200024557848385830101525b9695505050505050565b6000806040838503121562000262578182fd5b82516001600160401b038082111562000279578384fd5b62000287868387016200019c565b935060208501519150808211156200029d578283fd5b50620002ac858286016200019c565b9150509250929050565b600281046001821680620002cb57607f821691505b60208210811415620002ed57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611cff80620003196000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806370e2f82711610125578063c0001786116100ad578063f2fde38b1161007c578063f2fde38b14610496578063f44637ba146104a9578063f46eccc4146104bc578063f926b50c146104df578063f9f92be4146104f25761021c565b8063c000178614610424578063c4cec2d214610437578063dd62ed3e1461044a578063e47d6060146104835761021c565b806395d89b41116100f457806395d89b41146103d0578063983b2d56146103d8578063a457c2d7146103eb578063a9059cbb146103fe578063a9a99c0d146104115761021c565b806370e2f82714610391578063715018a61461039a57806379de8d35146103a25780638da5cb5b146103b55761021c565b80632f99582a116101a857806340c10f191161017757806340c10f191461033c57806342966c681461034f57806354eea7961461036257806357d775f81461037557806370a082311461037e5761021c565b80632f99582a146102fe5780633092afd514610307578063313ce5671461031a57806339509351146103295761021c565b8063095ea7b3116101ef578063095ea7b31461029a5780630cb13b2e146102ad57806318160ddd146102d05780631a895266146102d857806323b872dd146102eb5761021c565b8063028468581461022157806303d41e0e1461023657806306a4c9831461026e57806306fdde0314610285575b600080fd5b61023461022f3660046119fe565b610505565b005b6102596102443660046119fe565b60086020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610277600e5481565b604051908152602001610265565b61028d6105a6565b6040516102659190611acd565b6102596102a8366004611a8c565b610638565b6102596102bb3660046119fe565b60096020526000908152604090205460ff1681565b600254610277565b6102346102e63660046119fe565b61064e565b6102596102f9366004611a51565b61071a565b610277600c5481565b6102346103153660046119fe565b6107c4565b60405160088152602001610265565b610259610337366004611a8c565b61085c565b61025961034a366004611a8c565b610898565b61025961035d366004611ab5565b610a3f565b610234610370366004611ab5565b610b0b565b610277600d5481565b61027761038c3660046119fe565b610bc1565b610277600b5481565b610234610be0565b6102346103b03660046119fe565b610c0c565b6005546040516001600160a01b039091168152602001610265565b61028d610ca4565b6102346103e63660046119fe565b610cb3565b6102596103f9366004611a8c565b610d4f565b61025961040c366004611a8c565b610de8565b61023461041f3660046119fe565b610df5565b610259610432366004611a8c565b610e91565b610259610445366004611a8c565b610f35565b610277610458366004611a1f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102596104913660046119fe565b610faf565b6102346104a43660046119fe565b610ff6565b6102346104b73660046119fe565b611091565b6102596104ca3660046119fe565b60076020526000908152604090205460ff1681565b6102346104ed366004611ab5565b61112d565b6102346105003660046119fe565b611198565b6005546001600160a01b031633146105385760405162461bcd60e51b815260040161052f90611b86565b60405180910390fd5b61054181611266565b61055d5760405162461bcd60e51b815260040161052f90611b4f565b6001600160a01b038116600081815260086020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b6060600380546105b590611c78565b80601f01602080910402602001604051908101604052809291908181526020018280546105e190611c78565b801561062e5780601f106106035761010080835404028352916020019161062e565b820191906000526020600020905b81548152906001019060200180831161061157829003601f168201915b5050505050905090565b60006106453384846112ad565b50600192915050565b600260065414156106715760405162461bcd60e51b815260040161052f90611bbb565b6002600655610680335b6113d2565b6106cc5760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c697374657273000000000000604482015260640161052f565b6001600160a01b0381166000818152600a6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a2506001600655565b6000610727848484611419565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107ac5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161052f565b6107b985338584036112ad565b506001949350505050565b6005546001600160a01b031633146107ee5760405162461bcd60e51b815260040161052f90611b86565b6107f7816115f3565b6108135760405162461bcd60e51b815260040161052f90611b4f565b6001600160a01b038116600081815260076020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610645918590610893908690611c29565b6112ad565b6000600260065414156108bd5760405162461bcd60e51b815260040161052f90611bbb565b60026006556108cb336115f3565b6109175760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206d696e746572732063616e206d696e740000604482015260640161052f565b600b548211156109865760405162461bcd60e51b815260206004820152603460248201527f54656c654254433a206d696e7420616d6f756e74206973206d6f7265207468616044820152731b881b585e1a5b5d5b481b5a5b9d081b1a5b5a5d60621b606482015260840161052f565b61098f8261163a565b6109e75760405162461bcd60e51b815260206004820152602360248201527f54656c654254433a2072656163686564206d6178696d756d206d696e74206c696044820152621b5a5d60ea1b606482015260840161052f565b6109f183836116a7565b6040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8906020015b60405180910390a35060018060065592915050565b600060026006541415610a645760405162461bcd60e51b815260040161052f90611bbb565b6002600655610a7233611266565b610abe5760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206275726e6572732063616e206275726e0000604482015260640161052f565b610ac83383611792565b604051828152339081907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200160405180910390a350600180600655919050565b6005546001600160a01b03163314610b355760405162461bcd60e51b815260040161052f90611b86565b8060008111610b7f5760405162461bcd60e51b815260206004820152601660248201527554656c654254433a2076616c7565206973207a65726f60501b604482015260640161052f565b600d5460408051918252602082018490527fd077b1717c042dc03e7eb68030220b62f703db305be2ffb5b9e1d91b639a63f9910160405180910390a150600d55565b6001600160a01b0381166000908152602081905260409020545b919050565b6005546001600160a01b03163314610c0a5760405162461bcd60e51b815260040161052f90611b86565b565b6005546001600160a01b03163314610c365760405162461bcd60e51b815260040161052f90611b86565b610c3f816113d2565b610c5b5760405162461bcd60e51b815260040161052f90611b4f565b6001600160a01b038116600081815260096020526040808220805460ff19169055517f607ec77f7f06689ae7a01995caa85bbfcf586a9139e10f97347c90aa8cadd5099190a250565b6060600480546105b590611c78565b6005546001600160a01b03163314610cdd5760405162461bcd60e51b815260040161052f90611b86565b610ce6816115f3565b15610d035760405162461bcd60e51b815260040161052f90611bf2565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610dd15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161052f565b610dde33858584036112ad565b5060019392505050565b6000610645338484611419565b6005546001600160a01b03163314610e1f5760405162461bcd60e51b815260040161052f90611b86565b610e28816113d2565b15610e455760405162461bcd60e51b815260040161052f90611bf2565b6001600160a01b038116600081815260096020526040808220805460ff19166001179055517fb41bc3cdd4276b81dcdeb2f03c2457457661be122c22ade780eacc9398e975829190a250565b600060026006541415610eb65760405162461bcd60e51b815260040161052f90611bbb565b60026006556005546001600160a01b03163314610ee55760405162461bcd60e51b815260040161052f90611b86565b610eef8383611792565b6001600160a01b038316335b6001600160a01b03167fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b945384604051610a2a91815260200190565b600060026006541415610f5a5760405162461bcd60e51b815260040161052f90611bbb565b60026006556005546001600160a01b03163314610f895760405162461bcd60e51b815260040161052f90611b86565b610f938383611792565b826001600160a01b0316610efb6005546001600160a01b031690565b60006001600160a01b038216610fd75760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b03166000908152600a602052604090205460ff1690565b6005546001600160a01b031633146110205760405162461bcd60e51b815260040161052f90611b86565b6001600160a01b0381166110855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b61108e816118e9565b50565b6005546001600160a01b031633146110bb5760405162461bcd60e51b815260040161052f90611b86565b6110c481611266565b156110e15760405162461bcd60e51b815260040161052f90611bf2565b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b6005546001600160a01b031633146111575760405162461bcd60e51b815260040161052f90611b86565b600b5460408051918252602082018390527f36ab29917278ebced3c63670f7872f78555ed7cdb4aa5184a159eb978be79508910160405180910390a1600b55565b600260065414156111bb5760405162461bcd60e51b815260040161052f90611bbb565b60026006556111c93361067b565b6112155760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c697374657273000000000000604482015260640161052f565b6001600160a01b0381166000818152600a6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a2506001600655565b60006001600160a01b03821661128e5760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b031660009081526008602052604090205460ff1690565b6001600160a01b03831661130f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052f565b6001600160a01b0382166113705760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006001600160a01b0382166113fa5760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b031660009081526009602052604090205460ff1690565b6001600160a01b03831661147d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161052f565b6001600160a01b0382166114df5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052f565b6114ea83838361193b565b6001600160a01b038316600090815260208190526040902054818110156115625760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161052f565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611599908490611c29565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115e591815260200190565b60405180910390a350505050565b60006001600160a01b03821661161b5760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b031660009081526007602052604090205460ff1690565b600080600d544361164b9190611c41565b9050600e5481141561168857600c5483111561166b576000915050610bdb565b82600c600082825461167d9190611c61565b909155506106459050565b600e819055600b5461169b908490611c61565b600c5550600192915050565b6001600160a01b0382166116fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161052f565b6117096000838361193b565b806002600082825461171b9190611c29565b90915550506001600160a01b03821660009081526020819052604081208054839290611748908490611c29565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117f25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161052f565b6117fe8260008361193b565b6001600160a01b038216600090815260208190526040902054818110156118725760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161052f565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118a1908490611c61565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016113c5565b505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61194483610faf565b156119915760405162461bcd60e51b815260206004820152601c60248201527f54656c654254433a2066726f6d20697320626c61636b6c697374656400000000604482015260640161052f565b61199a82610faf565b156118e45760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a20746f20697320626c61636b6c6973746564000000000000604482015260640161052f565b80356001600160a01b0381168114610bdb57600080fd5b600060208284031215611a0f578081fd5b611a18826119e7565b9392505050565b60008060408385031215611a31578081fd5b611a3a836119e7565b9150611a48602084016119e7565b90509250929050565b600080600060608486031215611a65578081fd5b611a6e846119e7565b9250611a7c602085016119e7565b9150604084013590509250925092565b60008060408385031215611a9e578182fd5b611aa7836119e7565b946020939093013593505050565b600060208284031215611ac6578081fd5b5035919050565b6000602080835283518082850152825b81811015611af957858101830151858201604001528201611add565b81811115611b0a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526015908201527454656c654254433a207a65726f206164647265737360581b604082015260600190565b6020808252601b908201527f54656c654254433a20646f6573206e6f74206861766520726f6c650000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526019908201527f54656c654254433a20616c72656164792068617320726f6c6500000000000000604082015260600190565b60008219821115611c3c57611c3c611cb3565b500190565b600082611c5c57634e487b7160e01b81526012600452602481fd5b500490565b600082821015611c7357611c73611cb3565b500390565b600281046001821680611c8c57607f821691505b60208210811415611cad57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a2a5678b164b15cee4a3f01a647ec147460fdc76817f9dc12b0117ab784b440b64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806370e2f82711610125578063c0001786116100ad578063f2fde38b1161007c578063f2fde38b14610496578063f44637ba146104a9578063f46eccc4146104bc578063f926b50c146104df578063f9f92be4146104f25761021c565b8063c000178614610424578063c4cec2d214610437578063dd62ed3e1461044a578063e47d6060146104835761021c565b806395d89b41116100f457806395d89b41146103d0578063983b2d56146103d8578063a457c2d7146103eb578063a9059cbb146103fe578063a9a99c0d146104115761021c565b806370e2f82714610391578063715018a61461039a57806379de8d35146103a25780638da5cb5b146103b55761021c565b80632f99582a116101a857806340c10f191161017757806340c10f191461033c57806342966c681461034f57806354eea7961461036257806357d775f81461037557806370a082311461037e5761021c565b80632f99582a146102fe5780633092afd514610307578063313ce5671461031a57806339509351146103295761021c565b8063095ea7b3116101ef578063095ea7b31461029a5780630cb13b2e146102ad57806318160ddd146102d05780631a895266146102d857806323b872dd146102eb5761021c565b8063028468581461022157806303d41e0e1461023657806306a4c9831461026e57806306fdde0314610285575b600080fd5b61023461022f3660046119fe565b610505565b005b6102596102443660046119fe565b60086020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610277600e5481565b604051908152602001610265565b61028d6105a6565b6040516102659190611acd565b6102596102a8366004611a8c565b610638565b6102596102bb3660046119fe565b60096020526000908152604090205460ff1681565b600254610277565b6102346102e63660046119fe565b61064e565b6102596102f9366004611a51565b61071a565b610277600c5481565b6102346103153660046119fe565b6107c4565b60405160088152602001610265565b610259610337366004611a8c565b61085c565b61025961034a366004611a8c565b610898565b61025961035d366004611ab5565b610a3f565b610234610370366004611ab5565b610b0b565b610277600d5481565b61027761038c3660046119fe565b610bc1565b610277600b5481565b610234610be0565b6102346103b03660046119fe565b610c0c565b6005546040516001600160a01b039091168152602001610265565b61028d610ca4565b6102346103e63660046119fe565b610cb3565b6102596103f9366004611a8c565b610d4f565b61025961040c366004611a8c565b610de8565b61023461041f3660046119fe565b610df5565b610259610432366004611a8c565b610e91565b610259610445366004611a8c565b610f35565b610277610458366004611a1f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102596104913660046119fe565b610faf565b6102346104a43660046119fe565b610ff6565b6102346104b73660046119fe565b611091565b6102596104ca3660046119fe565b60076020526000908152604090205460ff1681565b6102346104ed366004611ab5565b61112d565b6102346105003660046119fe565b611198565b6005546001600160a01b031633146105385760405162461bcd60e51b815260040161052f90611b86565b60405180910390fd5b61054181611266565b61055d5760405162461bcd60e51b815260040161052f90611b4f565b6001600160a01b038116600081815260086020526040808220805460ff19169055517f90eabbc0c667db2a5029ed6bc0f5fe9f356d11684a4ca9fcfaec0e53f12b9c8e9190a250565b6060600380546105b590611c78565b80601f01602080910402602001604051908101604052809291908181526020018280546105e190611c78565b801561062e5780601f106106035761010080835404028352916020019161062e565b820191906000526020600020905b81548152906001019060200180831161061157829003601f168201915b5050505050905090565b60006106453384846112ad565b50600192915050565b600260065414156106715760405162461bcd60e51b815260040161052f90611bbb565b6002600655610680335b6113d2565b6106cc5760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c697374657273000000000000604482015260640161052f565b6001600160a01b0381166000818152600a6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a2506001600655565b6000610727848484611419565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156107ac5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161052f565b6107b985338584036112ad565b506001949350505050565b6005546001600160a01b031633146107ee5760405162461bcd60e51b815260040161052f90611b86565b6107f7816115f3565b6108135760405162461bcd60e51b815260040161052f90611b4f565b6001600160a01b038116600081815260076020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610645918590610893908690611c29565b6112ad565b6000600260065414156108bd5760405162461bcd60e51b815260040161052f90611bbb565b60026006556108cb336115f3565b6109175760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206d696e746572732063616e206d696e740000604482015260640161052f565b600b548211156109865760405162461bcd60e51b815260206004820152603460248201527f54656c654254433a206d696e7420616d6f756e74206973206d6f7265207468616044820152731b881b585e1a5b5d5b481b5a5b9d081b1a5b5a5d60621b606482015260840161052f565b61098f8261163a565b6109e75760405162461bcd60e51b815260206004820152602360248201527f54656c654254433a2072656163686564206d6178696d756d206d696e74206c696044820152621b5a5d60ea1b606482015260840161052f565b6109f183836116a7565b6040518281526001600160a01b0384169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8906020015b60405180910390a35060018060065592915050565b600060026006541415610a645760405162461bcd60e51b815260040161052f90611bbb565b6002600655610a7233611266565b610abe5760405162461bcd60e51b815260206004820152601e60248201527f54656c654254433a206f6e6c79206275726e6572732063616e206275726e0000604482015260640161052f565b610ac83383611792565b604051828152339081907fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b94539060200160405180910390a350600180600655919050565b6005546001600160a01b03163314610b355760405162461bcd60e51b815260040161052f90611b86565b8060008111610b7f5760405162461bcd60e51b815260206004820152601660248201527554656c654254433a2076616c7565206973207a65726f60501b604482015260640161052f565b600d5460408051918252602082018490527fd077b1717c042dc03e7eb68030220b62f703db305be2ffb5b9e1d91b639a63f9910160405180910390a150600d55565b6001600160a01b0381166000908152602081905260409020545b919050565b6005546001600160a01b03163314610c0a5760405162461bcd60e51b815260040161052f90611b86565b565b6005546001600160a01b03163314610c365760405162461bcd60e51b815260040161052f90611b86565b610c3f816113d2565b610c5b5760405162461bcd60e51b815260040161052f90611b4f565b6001600160a01b038116600081815260096020526040808220805460ff19169055517f607ec77f7f06689ae7a01995caa85bbfcf586a9139e10f97347c90aa8cadd5099190a250565b6060600480546105b590611c78565b6005546001600160a01b03163314610cdd5760405162461bcd60e51b815260040161052f90611b86565b610ce6816115f3565b15610d035760405162461bcd60e51b815260040161052f90611bf2565b6001600160a01b038116600081815260076020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610dd15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161052f565b610dde33858584036112ad565b5060019392505050565b6000610645338484611419565b6005546001600160a01b03163314610e1f5760405162461bcd60e51b815260040161052f90611b86565b610e28816113d2565b15610e455760405162461bcd60e51b815260040161052f90611bf2565b6001600160a01b038116600081815260096020526040808220805460ff19166001179055517fb41bc3cdd4276b81dcdeb2f03c2457457661be122c22ade780eacc9398e975829190a250565b600060026006541415610eb65760405162461bcd60e51b815260040161052f90611bbb565b60026006556005546001600160a01b03163314610ee55760405162461bcd60e51b815260040161052f90611b86565b610eef8383611792565b6001600160a01b038316335b6001600160a01b03167fbac40739b0d4ca32fa2d82fc91630465ba3eddd1598da6fca393b26fb63b945384604051610a2a91815260200190565b600060026006541415610f5a5760405162461bcd60e51b815260040161052f90611bbb565b60026006556005546001600160a01b03163314610f895760405162461bcd60e51b815260040161052f90611b86565b610f938383611792565b826001600160a01b0316610efb6005546001600160a01b031690565b60006001600160a01b038216610fd75760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b03166000908152600a602052604090205460ff1690565b6005546001600160a01b031633146110205760405162461bcd60e51b815260040161052f90611b86565b6001600160a01b0381166110855760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b61108e816118e9565b50565b6005546001600160a01b031633146110bb5760405162461bcd60e51b815260040161052f90611b86565b6110c481611266565b156110e15760405162461bcd60e51b815260040161052f90611bf2565b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517f86e57fd2b90329052917118de7c3f521f400d439b9650deaa906a25b08b945609190a250565b6005546001600160a01b031633146111575760405162461bcd60e51b815260040161052f90611b86565b600b5460408051918252602082018390527f36ab29917278ebced3c63670f7872f78555ed7cdb4aa5184a159eb978be79508910160405180910390a1600b55565b600260065414156111bb5760405162461bcd60e51b815260040161052f90611bbb565b60026006556111c93361067b565b6112155760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a206f6e6c7920626c61636b6c697374657273000000000000604482015260640161052f565b6001600160a01b0381166000818152600a6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a2506001600655565b60006001600160a01b03821661128e5760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b031660009081526008602052604090205460ff1690565b6001600160a01b03831661130f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052f565b6001600160a01b0382166113705760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006001600160a01b0382166113fa5760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b031660009081526009602052604090205460ff1690565b6001600160a01b03831661147d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161052f565b6001600160a01b0382166114df5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052f565b6114ea83838361193b565b6001600160a01b038316600090815260208190526040902054818110156115625760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161052f565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611599908490611c29565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115e591815260200190565b60405180910390a350505050565b60006001600160a01b03821661161b5760405162461bcd60e51b815260040161052f90611b20565b506001600160a01b031660009081526007602052604090205460ff1690565b600080600d544361164b9190611c41565b9050600e5481141561168857600c5483111561166b576000915050610bdb565b82600c600082825461167d9190611c61565b909155506106459050565b600e819055600b5461169b908490611c61565b600c5550600192915050565b6001600160a01b0382166116fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161052f565b6117096000838361193b565b806002600082825461171b9190611c29565b90915550506001600160a01b03821660009081526020819052604081208054839290611748908490611c29565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166117f25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161052f565b6117fe8260008361193b565b6001600160a01b038216600090815260208190526040902054818110156118725760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161052f565b6001600160a01b03831660009081526020819052604081208383039055600280548492906118a1908490611c61565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016113c5565b505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61194483610faf565b156119915760405162461bcd60e51b815260206004820152601c60248201527f54656c654254433a2066726f6d20697320626c61636b6c697374656400000000604482015260640161052f565b61199a82610faf565b156118e45760405162461bcd60e51b815260206004820152601a60248201527f54656c654254433a20746f20697320626c61636b6c6973746564000000000000604482015260640161052f565b80356001600160a01b0381168114610bdb57600080fd5b600060208284031215611a0f578081fd5b611a18826119e7565b9392505050565b60008060408385031215611a31578081fd5b611a3a836119e7565b9150611a48602084016119e7565b90509250929050565b600080600060608486031215611a65578081fd5b611a6e846119e7565b9250611a7c602085016119e7565b9150604084013590509250925092565b60008060408385031215611a9e578182fd5b611aa7836119e7565b946020939093013593505050565b600060208284031215611ac6578081fd5b5035919050565b6000602080835283518082850152825b81811015611af957858101830151858201604001528201611add565b81811115611b0a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526015908201527454656c654254433a207a65726f206164647265737360581b604082015260600190565b6020808252601b908201527f54656c654254433a20646f6573206e6f74206861766520726f6c650000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526019908201527f54656c654254433a20616c72656164792068617320726f6c6500000000000000604082015260600190565b60008219821115611c3c57611c3c611cb3565b500190565b600082611c5c57634e487b7160e01b81526012600452602481fd5b500490565b600082821015611c7357611c73611cb3565b500390565b600281046001821680611c8c57607f821691505b60208210811415611cad57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a2a5678b164b15cee4a3f01a647ec147460fdc76817f9dc12b0117ab784b440b64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBlackLister(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be added to blacklisters"
        }
      },
      "addBurner(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be added to burners"
        }
      },
      "addMinter(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be added to minters"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "blacklist(address)": {
        "details": "Only Blacklisters can call this",
        "params": {
          "_account": "Account blacklisted"
        }
      },
      "burn(uint256)": {
        "details": "Only burners can call this",
        "params": {
          "_amount": "Amount of burnt tokens"
        }
      },
      "burnUserBalance(address,uint256)": {
        "details": "Only owner can call this",
        "params": {
          "amount": "Amount of burnt tokens"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isBlackListed(address)": {
        "details": "Check if an account is blacklisted.",
        "returns": {
          "_0": "bool"
        }
      },
      "mint(address,uint256)": {
        "details": "Only minters can call this",
        "params": {
          "_amount": "Amount of minted tokens",
          "_receiver": "Address of token's receiver"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerBurn(address,uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_amount": "Amount of burnt tokens",
          "_user": "Address of user whose teleBTC is burnt"
        }
      },
      "removeBlackLister(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be removed from blacklisters"
        }
      },
      "removeBurner(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be removed from burners"
        }
      },
      "removeMinter(address)": {
        "details": "Only owner can call this function",
        "params": {
          "account": "The account which intended to be removed from minters"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setEpochLength(uint256)": {
        "details": "change blocks number per epoch."
      },
      "setMaxMintLimit(uint256)": {
        "details": "change maximum mint limit per epoch."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unBlacklist(address)": {
        "details": "Only Blacklisters can call this",
        "params": {
          "_account": "Account unblacklisted"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBlackLister(address)": {
        "notice": "Adds a blacklister"
      },
      "addBurner(address)": {
        "notice": "Adds a burner"
      },
      "addMinter(address)": {
        "notice": "Adds a minter"
      },
      "blacklist(address)": {
        "notice": "Blacklist an account"
      },
      "burn(uint256)": {
        "notice": "Burns TeleBTC tokens of msg.sender"
      },
      "burnUserBalance(address,uint256)": {
        "notice": "Burns TeleBTC tokens of account"
      },
      "mint(address,uint256)": {
        "notice": "Mints TeleBTC tokens for _receiver"
      },
      "ownerBurn(address,uint256)": {
        "notice": "Burns TeleBTC tokens of user"
      },
      "removeBlackLister(address)": {
        "notice": "Removes a blacklister"
      },
      "removeBurner(address)": {
        "notice": "Removes a burner"
      },
      "removeMinter(address)": {
        "notice": "Removes a minter"
      },
      "unBlacklist(address)": {
        "notice": "UnBlacklist an account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1660,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1666,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1668,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1670,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1672,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 880,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1615,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9899,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "minters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9903,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "burners",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9907,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "blacklisters",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9911,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "blacklisted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9913,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "maxMintLimit",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9915,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "lastMintLimit",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9917,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "epochLength",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9919,
        "contract": "contracts/erc20/TeleBTC.sol:TeleBTC",
        "label": "lastEpoch",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}