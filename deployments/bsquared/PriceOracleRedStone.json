{
  "address": "0x413e34727EB030dD8016033e375FE4497dA11e8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracleNativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ChainlinkPriceProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptableDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "equivalentOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableDelay",
          "type": "uint256"
        }
      ],
      "name": "setAcceptableDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleNativeToken",
          "type": "address"
        }
      ],
      "name": "setOracleNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceProxyAddress",
          "type": "address"
        }
      ],
      "name": "setPriceProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12cede5f4a9606dc4099377d3dd47db1f4dcc0c8f09a71c888800b20b18295eb",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0x413e34727EB030dD8016033e375FE4497dA11e8F",
    "transactionIndex": 5,
    "gasUsed": "852343",
    "logsBloom": "0x
    "blockHash": "0x8f9a97efa7c410bc752617fc487bfea2cf46f76038563fd89cd6f018ea09e9c5",
    "transactionHash": "0x12cede5f4a9606dc4099377d3dd47db1f4dcc0c8f09a71c888800b20b18295eb",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 3440556,
        "transactionHash": "0x12cede5f4a9606dc4099377d3dd47db1f4dcc0c8f09a71c888800b20b18295eb",
        "address": "0x413e34727EB030dD8016033e375FE4497dA11e8F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d3e4aeb9347c224dae7f1dc1213be082f6fddec"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x8f9a97efa7c410bc752617fc487bfea2cf46f76038563fd89cd6f018ea09e9c5"
      }
    ],
    "blockNumber": 3440556,
    "cumulativeGasUsed": "1031074",
    "status": 1,
    "byzantium": true
  },
  "args": [
    177,
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "4545a71c520b7d875a5828824397be62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracleNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ChainlinkPriceProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"equivalentOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableDelay\",\"type\":\"uint256\"}],\"name\":\"setAcceptableDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleNativeToken\",\"type\":\"address\"}],\"name\":\"setOracleNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceProxyAddress\",\"type\":\"address\"}],\"name\":\"setPriceProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_acceptableDelay\":\"Maximum acceptable delay for data given from RedStone\",\"_oracleNativeToken\":\"Native token address\"}},\"equivalentOutputAmount(uint256,uint256,uint256,address,address)\":{\"details\":\"The oracle is RedStone\",\"params\":{\"_inputAmount\":\"Amount of the input token\",\"_inputDecimals\":\"Input token decimal\",\"_inputToken\":\"Address of the input token\",\"_outputDecimals\":\"Output token decimal\",\"_outputToken\":\"Address of output token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAcceptableDelay(uint256)\":{\"params\":{\"_acceptableDelay\":\"Maximum acceptable delay (in seconds)\"}},\"setPriceProxy(address,address)\":{\"details\":\"Only owner can call this      This price proxy gives exchange rate of _token/USD      Setting price proxy address to zero means that we remove it\",\"params\":{\"_priceProxyAddress\":\"The address of the price proxy\",\"_token\":\"Address of the token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This contract is used to get relative price of two assets from RedStone\"},\"equivalentOutputAmount(uint256,uint256,uint256,address,address)\":{\"notice\":\"Find amount of output token that is equal to the input amount of the input token\"},\"setAcceptableDelay(uint256)\":{\"notice\":\"Set acceptable delay for oracle responses\"},\"setOracleNativeToken(address)\":{\"notice\":\"Set wrapped native token address\"},\"setPriceProxy(address,address)\":{\"notice\":\"Sets a USD price proxy for a token\"},\"setTeleBTC(address)\":{\"notice\":\"Set TeleBTC address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PriceOracleRedStone.sol\":\"PriceOracleRedStone\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/oracle/PriceOracleRedStone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ninterface IRedStone {\\n    function priceOf(address _token) external view returns (uint256);\\n}\\n\\ncontract PriceOracleRedStone is Ownable {\\n    using SafeCast for uint;\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"PriceOracle: zero address\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping(address => address) public ChainlinkPriceProxy;\\n    // ^^ [tokenAddress] => [priceProxyAddress]\\n    uint public acceptableDelay;\\n    address public constant NATIVE_TOKEN = address(1);\\n    // ^^ ONE_ADDRESS is used for getting price of blockchain native token\\n    address public oracleNativeToken;\\n    address public teleBTC;\\n\\n    /// @notice This contract is used to get relative price of two assets from RedStone\\n    /// @param _acceptableDelay Maximum acceptable delay for data given from RedStone\\n    /// @param _oracleNativeToken Native token address\\n    constructor(uint _acceptableDelay, address _oracleNativeToken) {\\n        _setAcceptableDelay(_acceptableDelay);\\n        _setOracleNativeToken(_oracleNativeToken);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Sets a USD price proxy for a token\\n    /// @dev Only owner can call this\\n    ///      This price proxy gives exchange rate of _token/USD\\n    ///      Setting price proxy address to zero means that we remove it\\n    /// @param _token Address of the token\\n    /// @param _priceProxyAddress The address of the price proxy\\n    function setPriceProxy(\\n        address _token,\\n        address _priceProxyAddress\\n    ) external nonZeroAddress(_token) onlyOwner {\\n        ChainlinkPriceProxy[_token] = _priceProxyAddress;\\n        // emit SetPriceProxy(_token, _priceProxyAddress);\\n    }\\n\\n    /// @notice Set acceptable delay for oracle responses\\n    /// @param _acceptableDelay Maximum acceptable delay (in seconds)\\n    function setAcceptableDelay(uint _acceptableDelay) external onlyOwner {\\n        _setAcceptableDelay(_acceptableDelay);\\n    }\\n\\n    /// @notice Set wrapped native token address\\n    function setOracleNativeToken(\\n        address _oracleNativeToken\\n    ) external onlyOwner {\\n        _setOracleNativeToken(_oracleNativeToken);\\n    }\\n\\n    /// @notice Set TeleBTC address\\n    function setTeleBTC(address _teleBTC) external onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice Find amount of output token that is equal to the input amount of the input token\\n    /// @dev The oracle is RedStone\\n    /// @param _inputAmount Amount of the input token\\n    /// @param _inputDecimals Input token decimal\\n    /// @param _outputDecimals Output token decimal\\n    /// @param _inputToken Address of the input token\\n    /// @param _outputToken Address of output token\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint _outputAmount) {\\n        bool result;\\n        (\\n            result,\\n            _outputAmount,\\n            /*timestamp*/\\n\\n        ) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: oracle not exist or up to date\\\");\\n    }\\n\\n    // Private functions\\n\\n    /// @notice Internal setter for acceptable delay for oracle responses\\n    function _setAcceptableDelay(uint _acceptableDelay) private {\\n        // emit NewAcceptableDelay(acceptableDelay, _acceptableDelay);\\n        require(_acceptableDelay > 0, \\\"PriceOracle: zero amount\\\");\\n        acceptableDelay = _acceptableDelay;\\n    }\\n\\n    /// @notice Internal setter for oracle native token address\\n    function _setOracleNativeToken(\\n        address _oracleNativeToken\\n    ) private nonZeroAddress(_oracleNativeToken) {\\n        // emit NewOracleNativeToken(oracleNativeToken, _oracleNativeToken);\\n        oracleNativeToken = _oracleNativeToken;\\n    }\\n\\n    /// @notice Internal setter for TeleBTC address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @return _result True if getting amount was successful\\n    /// @return _outputAmount Amount of the output token\\n    /// @return _timestamp Timestamp of the result\\n    function _equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) private view returns (bool, uint _outputAmount, uint _timestamp) {\\n        uint decimals0;\\n        uint decimals1;\\n        uint price0;\\n        uint price1;\\n\\n        if (\\n            ChainlinkPriceProxy[_inputToken] != address(0) &&\\n            ChainlinkPriceProxy[_outputToken] != address(0)\\n        ) {\\n            if (\\n                _inputToken == NATIVE_TOKEN ||\\n                _inputToken == oracleNativeToken ||\\n                _inputToken == teleBTC\\n            ) {\\n                // Address 0 is the price of Bitcoin\\n                price0 = IRedStone(ChainlinkPriceProxy[_inputToken]).priceOf(\\n                    address(0)\\n                );\\n            } else {\\n                price0 = IRedStone(ChainlinkPriceProxy[_inputToken]).priceOf(\\n                    _inputToken\\n                );\\n            }\\n            require(price0 != 0, \\\"PriceOracle: zero price for input token\\\");\\n            decimals0 = 18;\\n\\n            if (\\n                _outputToken == NATIVE_TOKEN ||\\n                _outputToken == oracleNativeToken ||\\n                _outputToken == teleBTC\\n            ) {\\n                price1 = IRedStone(ChainlinkPriceProxy[_outputToken]).priceOf(\\n                    address(0)\\n                );\\n            } else {\\n                price1 = IRedStone(ChainlinkPriceProxy[_outputToken]).priceOf(\\n                    _outputToken\\n                );\\n            }\\n            require(price1 != 0, \\\"PriceOracle: zero price for output token\\\");\\n            decimals1 = 18;\\n\\n            // convert the above calculation to the below one to eliminate precision loss\\n            _outputAmount =\\n                (uint(price0) * 10 ** (decimals1)) *\\n                _inputAmount *\\n                (10 ** (_outputDecimals + 1));\\n            _outputAmount =\\n                _outputAmount /\\n                ((10 ** (_inputDecimals + 1)) *\\n                    (uint(price1) * 10 ** (decimals0)));\\n\\n            // TODO: check staleness of prices\\n            // uint[2] memory _timestamps;\\n\\n            // if (_abs(block.timestamp.toInt256() - _timestamps[0].toInt256()) > acceptableDelay) {\\n            //     return (false, _outputAmount, _timestamps[0]);\\n            // }\\n\\n            // if (_abs(block.timestamp.toInt256() - _timestamps[1].toInt256()) > acceptableDelay) {\\n            //     return (false, _outputAmount, _timestamps[1]);\\n            // }\\n\\n            // _timestamp = _timestamps[0] > _timestamps[1] ? _timestamps[1] : _timestamps[0];\\n\\n            return (true, _outputAmount, 0);\\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n\\n    /// @notice Return absolute value\\n    function _abs(int _value) private pure returns (uint) {\\n        return _value >= 0 ? uint(_value) : uint(-_value);\\n    }\\n}\\n\",\"keccak256\":\"0x84149f2786180808f44f84a73cee9d70ee3df96052fdbc17aace165aefdffab0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ed6380380610ed683398101604081905261002f91610175565b61003833610051565b610041826100a1565b61004a816100fb565b50506101b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081116100f65760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064015b60405180910390fd5b600255565b806001600160a01b0381166101525760405162461bcd60e51b815260206004820152601960248201527f50726963654f7261636c653a207a65726f20616464726573730000000000000060448201526064016100ed565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008060408385031215610187578182fd5b825160208401519092506001600160a01b03811681146101a5578182fd5b809150509250929050565b610d17806101bf6000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806304c95544146100b457806316fac92a146100c95780631d4a7b21146100ef57806331f7d964146101025780634205d68f146101175780636fbd065714610140578063715018a6146101535780637f0f18171461015b57806385c443761461016e578063862efd4b146101815780638d3d78cd1461018a5780638da5cb5b1461019d578063f2fde38b146101a5575b600080fd5b6100c76100c2366004610a39565b6101b8565b005b6100dc6100d7366004610abc565b6101fc565b6040519081526020015b60405180910390f35b6100c76100fd366004610a8c565b610281565b61010a600181565b6040516100e69190610b0b565b61010a610125366004610a39565b6001602052600090815260409020546001600160a01b031681565b60035461010a906001600160a01b031681565b6100c76102b9565b6100c7610169366004610a39565b6102ea565b6100c761017c366004610a5a565b610322565b6100dc60025481565b60045461010a906001600160a01b031681565b61010a6103a7565b6100c76101b3366004610a39565b6103b6565b336101c16103a7565b6001600160a01b0316146101f05760405162461bcd60e51b81526004016101e790610b52565b60405180910390fd5b6101f981610453565b50565b60008061020c878787878761049d565b50925090506001811515146102775760405162461bcd60e51b815260206004820152602b60248201527f50726963654f7261636c653a206f7261636c65206e6f74206578697374206f7260448201526a20757020746f206461746560a81b60648201526084016101e7565b5095945050505050565b3361028a6103a7565b6001600160a01b0316146102b05760405162461bcd60e51b81526004016101e790610b52565b6101f981610933565b336102c26103a7565b6001600160a01b0316146102e85760405162461bcd60e51b81526004016101e790610b52565b565b336102f36103a7565b6001600160a01b0316146103195760405162461bcd60e51b81526004016101e790610b52565b6101f981610983565b816001600160a01b0381166103495760405162461bcd60e51b81526004016101e790610b1f565b336103526103a7565b6001600160a01b0316146103785760405162461bcd60e51b81526004016101e790610b52565b506001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031690565b336103bf6103a7565b6001600160a01b0316146103e55760405162461bcd60e51b81526004016101e790610b52565b6001600160a01b03811661044a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e7565b6101f9816109cd565b806001600160a01b03811661047a5760405162461bcd60e51b81526004016101e790610b1f565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815260016020526040812054909182918291829182918291829116158015906104ed57506001600160a01b038881166000908152600160205260409020541615155b15610918576001600160a01b0389166001148061051757506003546001600160a01b038a81169116145b8061052f57506004546001600160a01b038a81169116145b156105c7576001600160a01b03808a1660009081526001602052604080822054905163b95ed06f60e01b815292169163b95ed06f9161057091600401610b0b565b60206040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610aa4565b9150610659565b6001600160a01b03808a166000908152600160205260409081902054905163b95ed06f60e01b815291169063b95ed06f90610606908c90600401610b0b565b60206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610aa4565b91505b816106b65760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a207a65726f20707269636520666f7220696e70756044820152663a103a37b5b2b760c91b60648201526084016101e7565b601293506001600160a01b038816600114806106df57506003546001600160a01b038981169116145b806106f757506004546001600160a01b038981169116145b1561078f576001600160a01b0380891660009081526001602052604080822054905163b95ed06f60e01b815292169163b95ed06f9161073891600401610b0b565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190610aa4565b9050610821565b6001600160a01b038089166000908152600160205260409081902054905163b95ed06f60e01b815291169063b95ed06f906107ce908b90600401610b0b565b60206040518083038186803b1580156107e657600080fd5b505afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610aa4565b90505b8061087f5760405162461bcd60e51b815260206004820152602860248201527f50726963654f7261636c653a207a65726f20707269636520666f72206f7574706044820152673aba103a37b5b2b760c11b60648201526084016101e7565b6012925061088e8a6001610b87565b61089990600a610c02565b8c6108a585600a610c02565b6108af9085610cac565b6108b99190610cac565b6108c39190610cac565b95506108d084600a610c02565b6108da9082610cac565b6108e58c6001610b87565b6108f090600a610c02565b6108fa9190610cac565b6109049087610b9f565b600197509550600094506109289350505050565b6000806000965096509650505050505b955095509592505050565b6000811161097e5760405162461bcd60e51b8152602060048201526018602482015277141c9a58d953dc9858db194e881e995c9bc8185b5bdd5b9d60421b60448201526064016101e7565b600255565b806001600160a01b0381166109aa5760405162461bcd60e51b81526004016101e790610b1f565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a3457600080fd5b919050565b600060208284031215610a4a578081fd5b610a5382610a1d565b9392505050565b60008060408385031215610a6c578081fd5b610a7583610a1d565b9150610a8360208401610a1d565b90509250929050565b600060208284031215610a9d578081fd5b5035919050565b600060208284031215610ab5578081fd5b5051919050565b600080600080600060a08688031215610ad3578081fd5b853594506020860135935060408601359250610af160608701610a1d565b9150610aff60808701610a1d565b90509295509295909350565b6001600160a01b0391909116815260200190565b60208082526019908201527850726963654f7261636c653a207a65726f206164647265737360381b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b9a57610b9a610ccb565b500190565b600082610bba57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610bfa578160001904821115610be057610be0610ccb565b80851615610bed57918102915b93841c9390800290610bc4565b509250929050565b6000610a538383600082610c1857506001610ca6565b81610c2557506000610ca6565b8160018114610c3b5760028114610c4557610c61565b6001915050610ca6565b60ff841115610c5657610c56610ccb565b50506001821b610ca6565b5060208310610133831016604e8410600b8410161715610c84575081810a610ca6565b610c8e8383610bbf565b8060001904821115610ca257610ca2610ccb565b0290505b92915050565b6000816000190483118215151615610cc657610cc6610ccb565b500290565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f21a94bf9725264e193b0934a5c2bea550481376e5e20888e34635cb0cd3166864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100af5760003560e01c806304c95544146100b457806316fac92a146100c95780631d4a7b21146100ef57806331f7d964146101025780634205d68f146101175780636fbd065714610140578063715018a6146101535780637f0f18171461015b57806385c443761461016e578063862efd4b146101815780638d3d78cd1461018a5780638da5cb5b1461019d578063f2fde38b146101a5575b600080fd5b6100c76100c2366004610a39565b6101b8565b005b6100dc6100d7366004610abc565b6101fc565b6040519081526020015b60405180910390f35b6100c76100fd366004610a8c565b610281565b61010a600181565b6040516100e69190610b0b565b61010a610125366004610a39565b6001602052600090815260409020546001600160a01b031681565b60035461010a906001600160a01b031681565b6100c76102b9565b6100c7610169366004610a39565b6102ea565b6100c761017c366004610a5a565b610322565b6100dc60025481565b60045461010a906001600160a01b031681565b61010a6103a7565b6100c76101b3366004610a39565b6103b6565b336101c16103a7565b6001600160a01b0316146101f05760405162461bcd60e51b81526004016101e790610b52565b60405180910390fd5b6101f981610453565b50565b60008061020c878787878761049d565b50925090506001811515146102775760405162461bcd60e51b815260206004820152602b60248201527f50726963654f7261636c653a206f7261636c65206e6f74206578697374206f7260448201526a20757020746f206461746560a81b60648201526084016101e7565b5095945050505050565b3361028a6103a7565b6001600160a01b0316146102b05760405162461bcd60e51b81526004016101e790610b52565b6101f981610933565b336102c26103a7565b6001600160a01b0316146102e85760405162461bcd60e51b81526004016101e790610b52565b565b336102f36103a7565b6001600160a01b0316146103195760405162461bcd60e51b81526004016101e790610b52565b6101f981610983565b816001600160a01b0381166103495760405162461bcd60e51b81526004016101e790610b1f565b336103526103a7565b6001600160a01b0316146103785760405162461bcd60e51b81526004016101e790610b52565b506001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b031690565b336103bf6103a7565b6001600160a01b0316146103e55760405162461bcd60e51b81526004016101e790610b52565b6001600160a01b03811661044a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e7565b6101f9816109cd565b806001600160a01b03811661047a5760405162461bcd60e51b81526004016101e790610b1f565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03828116600090815260016020526040812054909182918291829182918291829116158015906104ed57506001600160a01b038881166000908152600160205260409020541615155b15610918576001600160a01b0389166001148061051757506003546001600160a01b038a81169116145b8061052f57506004546001600160a01b038a81169116145b156105c7576001600160a01b03808a1660009081526001602052604080822054905163b95ed06f60e01b815292169163b95ed06f9161057091600401610b0b565b60206040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610aa4565b9150610659565b6001600160a01b03808a166000908152600160205260409081902054905163b95ed06f60e01b815291169063b95ed06f90610606908c90600401610b0b565b60206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610aa4565b91505b816106b65760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a207a65726f20707269636520666f7220696e70756044820152663a103a37b5b2b760c91b60648201526084016101e7565b601293506001600160a01b038816600114806106df57506003546001600160a01b038981169116145b806106f757506004546001600160a01b038981169116145b1561078f576001600160a01b0380891660009081526001602052604080822054905163b95ed06f60e01b815292169163b95ed06f9161073891600401610b0b565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190610aa4565b9050610821565b6001600160a01b038089166000908152600160205260409081902054905163b95ed06f60e01b815291169063b95ed06f906107ce908b90600401610b0b565b60206040518083038186803b1580156107e657600080fd5b505afa1580156107fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081e9190610aa4565b90505b8061087f5760405162461bcd60e51b815260206004820152602860248201527f50726963654f7261636c653a207a65726f20707269636520666f72206f7574706044820152673aba103a37b5b2b760c11b60648201526084016101e7565b6012925061088e8a6001610b87565b61089990600a610c02565b8c6108a585600a610c02565b6108af9085610cac565b6108b99190610cac565b6108c39190610cac565b95506108d084600a610c02565b6108da9082610cac565b6108e58c6001610b87565b6108f090600a610c02565b6108fa9190610cac565b6109049087610b9f565b600197509550600094506109289350505050565b6000806000965096509650505050505b955095509592505050565b6000811161097e5760405162461bcd60e51b8152602060048201526018602482015277141c9a58d953dc9858db194e881e995c9bc8185b5bdd5b9d60421b60448201526064016101e7565b600255565b806001600160a01b0381166109aa5760405162461bcd60e51b81526004016101e790610b1f565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a3457600080fd5b919050565b600060208284031215610a4a578081fd5b610a5382610a1d565b9392505050565b60008060408385031215610a6c578081fd5b610a7583610a1d565b9150610a8360208401610a1d565b90509250929050565b600060208284031215610a9d578081fd5b5035919050565b600060208284031215610ab5578081fd5b5051919050565b600080600080600060a08688031215610ad3578081fd5b853594506020860135935060408601359250610af160608701610a1d565b9150610aff60808701610a1d565b90509295509295909350565b6001600160a01b0391909116815260200190565b60208082526019908201527850726963654f7261636c653a207a65726f206164647265737360381b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b9a57610b9a610ccb565b500190565b600082610bba57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115610bfa578160001904821115610be057610be0610ccb565b80851615610bed57918102915b93841c9390800290610bc4565b509250929050565b6000610a538383600082610c1857506001610ca6565b81610c2557506000610ca6565b8160018114610c3b5760028114610c4557610c61565b6001915050610ca6565b60ff841115610c5657610c56610ccb565b50506001821b610ca6565b5060208310610133831016604e8410600b8410161715610c84575081810a610ca6565b610c8e8383610bbf565b8060001904821115610ca257610ca2610ccb565b0290505b92915050565b6000816000190483118215151615610cc657610cc6610ccb565b500290565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f21a94bf9725264e193b0934a5c2bea550481376e5e20888e34635cb0cd3166864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_acceptableDelay": "Maximum acceptable delay for data given from RedStone",
          "_oracleNativeToken": "Native token address"
        }
      },
      "equivalentOutputAmount(uint256,uint256,uint256,address,address)": {
        "details": "The oracle is RedStone",
        "params": {
          "_inputAmount": "Amount of the input token",
          "_inputDecimals": "Input token decimal",
          "_inputToken": "Address of the input token",
          "_outputDecimals": "Output token decimal",
          "_outputToken": "Address of output token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAcceptableDelay(uint256)": {
        "params": {
          "_acceptableDelay": "Maximum acceptable delay (in seconds)"
        }
      },
      "setPriceProxy(address,address)": {
        "details": "Only owner can call this      This price proxy gives exchange rate of _token/USD      Setting price proxy address to zero means that we remove it",
        "params": {
          "_priceProxyAddress": "The address of the price proxy",
          "_token": "Address of the token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "This contract is used to get relative price of two assets from RedStone"
      },
      "equivalentOutputAmount(uint256,uint256,uint256,address,address)": {
        "notice": "Find amount of output token that is equal to the input amount of the input token"
      },
      "setAcceptableDelay(uint256)": {
        "notice": "Set acceptable delay for oracle responses"
      },
      "setOracleNativeToken(address)": {
        "notice": "Set wrapped native token address"
      },
      "setPriceProxy(address,address)": {
        "notice": "Sets a USD price proxy for a token"
      },
      "setTeleBTC(address)": {
        "notice": "Set TeleBTC address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/oracle/PriceOracleRedStone.sol:PriceOracleRedStone",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 555,
        "contract": "contracts/oracle/PriceOracleRedStone.sol:PriceOracleRedStone",
        "label": "ChainlinkPriceProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 557,
        "contract": "contracts/oracle/PriceOracleRedStone.sol:PriceOracleRedStone",
        "label": "acceptableDelay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 565,
        "contract": "contracts/oracle/PriceOracleRedStone.sol:PriceOracleRedStone",
        "label": "oracleNativeToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 567,
        "contract": "contracts/oracle/PriceOracleRedStone.sol:PriceOracleRedStone",
        "label": "teleBTC",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}