{
  "address": "0x0d868a6747ddcd3a5Faa5fBc53a9c1d17dBDAEE3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wbrc20Proxy",
          "type": "address"
        }
      ],
      "name": "Brc20Removed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thirdPartyFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBrc20Router.fees",
          "name": "fee",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        }
      ],
      "name": "FailedWrapAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wbrc20Proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wbrc20Logic",
          "type": "address"
        }
      ],
      "name": "NewBrc20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLocker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLocker",
          "type": "address"
        }
      ],
      "name": "NewLocker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewProtocolPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "NewRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleporter",
          "type": "address"
        }
      ],
      "name": "NewTeleporter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thirdPartyFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBrc20Router.fees",
          "name": "fee",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unwrapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reqIdx",
          "type": "uint256"
        }
      ],
      "name": "NewUnwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thirdPartyFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBrc20Router.fees",
          "name": "fee",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unwrapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reqIdx",
          "type": "uint256"
        }
      ],
      "name": "NewUnwrapAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thirdPartyFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBrc20Router.fees",
          "name": "fee",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        }
      ],
      "name": "NewWrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thirdPartyFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IBrc20Router.fees",
          "name": "fee",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "thirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        }
      ],
      "name": "NewWrapAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        }
      ],
      "name": "SetExchangeConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "ThirdPartyInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "UnwrapFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reqIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        }
      ],
      "name": "UnwrapProcessed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimal",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "addBrc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "brc20UnwrapRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isProcessed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "appId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "brc20WrapRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "appId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchangeConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_lockerScriptType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_teleporter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reqIdx",
          "type": "uint256"
        }
      ],
      "name": "isUnwrapRequestProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_txId",
          "type": "bytes32"
        }
      ],
      "name": "isWrapRequestProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerLockingScript",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerScriptType",
      "outputs": [
        {
          "internalType": "enum ScriptTypes",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeBrc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "setChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_appId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        }
      ],
      "name": "setExchangeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        }
      ],
      "name": "setLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_lockerScriptType",
          "type": "uint8"
        }
      ],
      "name": "setLockerLockingScript",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "setStartingBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleporter",
          "type": "address"
        }
      ],
      "name": "setTeleporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_thirdPartyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_thirdPartyFee",
          "type": "uint256"
        }
      ],
      "name": "setThirdParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setUnwrapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedBrc20s",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleporter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thirdParties",
      "outputs": [
        {
          "internalType": "address",
          "name": "thirdPartyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "thirdPartyFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_appId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "unwrapBrc20",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unwrapCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unwrapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unwrapFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_reqIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "unwrapProof",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "wrapBrc20",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xad8c11758b43f23fdbd3ed7c36dcc84a5ec90b070f2d7bb7a54a46315a9af9c9",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0x0d868a6747ddcd3a5Faa5fBc53a9c1d17dBDAEE3",
    "transactionIndex": 70,
    "gasUsed": "4783578",
    "logsBloom": "0x
    "blockHash": "0xde7306ca7c53f96e0ca8611660672eecc6f4a3c8f0f386b774fad0d9241e6930",
    "transactionHash": "0xad8c11758b43f23fdbd3ed7c36dcc84a5ec90b070f2d7bb7a54a46315a9af9c9",
    "logs": [],
    "blockNumber": 42510936,
    "cumulativeGasUsed": "12131510",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "894d7423135f7bebca14ef01d5bfaa9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wbrc20Proxy\",\"type\":\"address\"}],\"name\":\"Brc20Removed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBrc20Router.fees\",\"name\":\"fee\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"FailedWrapAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wbrc20Proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wbrc20Logic\",\"type\":\"address\"}],\"name\":\"NewBrc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLocker\",\"type\":\"address\"}],\"name\":\"NewLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"NewRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleporter\",\"type\":\"address\"}],\"name\":\"NewTeleporter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBrc20Router.fees\",\"name\":\"fee\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unwrapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqIdx\",\"type\":\"uint256\"}],\"name\":\"NewUnwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBrc20Router.fees\",\"name\":\"fee\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unwrapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqIdx\",\"type\":\"uint256\"}],\"name\":\"NewUnwrapAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBrc20Router.fees\",\"name\":\"fee\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"NewWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IBrc20Router.fees\",\"name\":\"fee\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"NewWrapAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"}],\"name\":\"SetExchangeConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ThirdPartyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UnwrapFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reqIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"UnwrapProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"addBrc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"brc20UnwrapRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isProcessed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"brc20WrapRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_lockerScriptType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_teleporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqIdx\",\"type\":\"uint256\"}],\"name\":\"isUnwrapRequestProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"name\":\"isWrapRequestProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerLockingScript\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerScriptType\",\"outputs\":[{\"internalType\":\"enum ScriptTypes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeBrc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_appId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"}],\"name\":\"setExchangeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_lockerScriptType\",\"type\":\"uint8\"}],\"name\":\"setLockerLockingScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setStartingBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleporter\",\"type\":\"address\"}],\"name\":\"setTeleporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_thirdPartyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_thirdPartyFee\",\"type\":\"uint256\"}],\"name\":\"setThirdParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setUnwrapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedBrc20s\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdParties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"thirdPartyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"thirdPartyFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_appId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"unwrapBrc20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unwrapFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_reqIndexes\",\"type\":\"uint256[]\"}],\"name\":\"unwrapProof\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"wrapBrc20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBrc20(string,uint8,uint256)\":{\"details\":\"We assign tokenId to a supported BRC20\"},\"initialize(uint256,uint256,uint256,address,address,bytes,uint8,address,address,address)\":{\"params\":{\"_chainId\":\"Id of the underlying chain\",\"_locker\":\"TODO\",\"_protocolPercentageFee\":\"Percentage amount of protocol fee (min: %0.01)\",\"_relay\":\"Bitcoin bridge address which validates Bitcoin tx\",\"_startingBlockNumber\":\"Requests included in a block older than _startingBlockNumber cannot be processed\",\"_treasury\":\"Address of treasury that collects protocol fees\"}},\"isWrapRequestProcessed(bytes32)\":{\"params\":{\"_txId\":\"of the request on Bitcoin\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExchangeConnector(uint256,address)\":{\"details\":\"If address(0) is set for an appId, that appId is inactive\"},\"setUnwrapFee(uint256)\":{\"details\":\"This fee is taken for unwrap requests to cover the Bitcoin network fee\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unwrapBrc20(uint256,uint256,uint256,bytes,uint8,uint256,uint256,address[])\":{\"details\":\"For unwrap requests (not swap & unwrap), pass _appId,       _inputAmount and _path ZERO\",\"params\":{\"_amount\":\"of WBRC20 that user wants to burn\",\"_scriptType\":\"User script type\",\"_userScript\":\"User script hash\"}},\"wrapBrc20(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address[])\":{\"details\":\"Locker submits wrap requests to this function for:      1) Checking tx inclusion      2) Extracting wrap request info from the OP_RETURN output      3) Exchanging wrapped BRC20 (if request is wrap & exchange) using the path          provided by the locker\",\"params\":{\"_blockNumber\":\"that includes the tx\",\"_index\":\"of tx in the block\",\"_intermediateNodes\":\"Merkle proof for tx\",\"_locktime\":\"Tx locktime\",\"_version\":\"of Bitcoin tx\",\"_vin\":\"Tx inputs\",\"_vout\":\"Tx outputs\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Brc20Removed(uint256,address)\":{\"notice\":\"Emit when BRC20 removed\"},\"FailedWrapAndSwap(address,uint256,address,uint256,address,(uint256,uint256,uint256),address,bytes32)\":{\"notice\":\"Emit when a wrap&swap request is processed but swap failed\"},\"NewBrc20(string,uint256,uint256,address,address)\":{\"notice\":\"Emit when new BRC20 added\"},\"NewLocker(address,address)\":{\"notice\":\"Emit when locker address updated\"},\"NewProtocolPercentageFee(uint256,uint256)\":{\"notice\":\"Emit when protocol fee updated\"},\"NewRelay(address,address)\":{\"notice\":\"Emit when relay address updated\"},\"NewTeleporter(address,address)\":{\"notice\":\"Emit when teleporter address updated\"},\"NewTreasury(address,address)\":{\"notice\":\"Emit when treasury address updated\"},\"NewUnwrap(address,bytes,uint8,address,uint256,uint256,(uint256,uint256,uint256),uint256,address,uint256)\":{\"notice\":\"Emit when a new unwrap request is created\"},\"NewUnwrapAndSwap(address,bytes,uint8,uint256,address,uint256,uint256,address,(uint256,uint256,uint256),uint256,address,uint256)\":{\"notice\":\"Emit when a new unwrap&swap request is created\"},\"NewWrap(address,uint256,address,(uint256,uint256,uint256),address,bytes32)\":{\"notice\":\"Emit when a wrap request is processed\"},\"NewWrapAndSwap(address,uint256,address,uint256,address,(uint256,uint256,uint256),address,bytes32)\":{\"notice\":\"Emit when a wrap&swap request is processed\"},\"SetExchangeConnector(uint256,address)\":{\"notice\":\"Emits when appId for an exchange connector is set\"},\"ThirdPartyInfoUpdated(uint256,address,uint256,address,uint256)\":{\"notice\":\"Emit when third party fee updated\"},\"UnwrapFeeUpdated(uint256,uint256)\":{\"notice\":\"Emit when unwrap fee updated\"},\"UnwrapProcessed(address,uint256,bytes,uint8,uint256,bytes32)\":{\"notice\":\"Emit when a unwrap request is processed\"}},\"kind\":\"user\",\"methods\":{\"addBrc20(string,uint8,uint256)\":{\"notice\":\"Deploy wrapped BRC20 token contract\"},\"initialize(uint256,uint256,uint256,address,address,bytes,uint8,address,address,address)\":{\"notice\":\"Initialize the contract\"},\"isUnwrapRequestProcessed(uint256)\":{\"notice\":\"Check if the unwrap request has been processed before\"},\"isWrapRequestProcessed(bytes32)\":{\"notice\":\"Check if the wrap request has been processed before\"},\"removeBrc20(uint256)\":{\"notice\":\"Remove support of a wrapped BRC20 token\"},\"setChainId(uint256)\":{\"notice\":\"Setter for chainId\"},\"setExchangeConnector(uint256,address)\":{\"notice\":\"Set exchange connector for appId\"},\"setLocker(address)\":{\"notice\":\"Setter for locker\"},\"setLockerLockingScript(bytes,uint8)\":{\"notice\":\"Setter for locker locking script\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Setter for protocol percentage fee\"},\"setRelay(address)\":{\"notice\":\"Setter for Bitcoin relay\"},\"setStartingBlockNumber(uint256)\":{\"notice\":\"Setter for starting block number\"},\"setTeleporter(address)\":{\"notice\":\"Setter for teleporter\"},\"setThirdParty(uint256,address,uint256)\":{\"notice\":\"Setter for third party address and fee\"},\"setTreasury(address)\":{\"notice\":\"Setter for treasury\"},\"setUnwrapFee(uint256)\":{\"notice\":\"Setter for unwrap fee\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Setter for wrapped native token\"},\"unwrapBrc20(uint256,uint256,uint256,bytes,uint8,uint256,uint256,address[])\":{\"notice\":\"Process user unwrap request\"},\"unwrapProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,uint256[])\":{\"notice\":\"Check proof of unwraping\"},\"wrapBrc20(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address[])\":{\"notice\":\"Process wrap BRC20 request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/brc20_router/Brc20RouterLogic.sol\":\"Brc20RouterLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        // Validates Vin length\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64 _value) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n        output = indexVout(voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n        \\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n        \\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength. \\n            // note: script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 77 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0x2aff58cb87c1223fcf40f95e1f723485c5bcc63b1e0bd0498a705aa236b30564\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbca90a02eb6c7d68e75548ce6621bddddf3f78629b8b7a4a01c510c99f17c0e\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xf8b47bdc9c94c8da51772aea70e5b5c14c9115e5cbc79df6f552985a2d8f867f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/brc20_router/Brc20RouterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./Brc20RouterStorage.sol\\\";\\nimport \\\"../erc20/WBRC20Proxy.sol\\\";\\nimport \\\"../erc20/WBRC20Logic.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @notice Helper library for Brc20Router\\nlibrary Brc20RouterLib {\\n\\n    function addBrc20Helper() external returns (address) {\\n        // Deploy upgradable contract\\n        WBRC20Logic _wbrc20Logic = new WBRC20Logic();\\n        return address(_wbrc20Logic);\\n    }\\n\\n    /// @notice Check tx inclusion proof\\n    function checkTx(\\n        uint _startingBlockNumber,\\n        address _relay,\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index\\n    ) external returns (bytes32 _txId) {\\n        // Basic checks\\n        require(_blockNumber >= _startingBlockNumber, \\\"Brc20RouterLib: old proof\\\");\\n        require(_locktime == bytes4(0), \\\"Brc20RouterLib: non-zero locktime\\\");\\n\\n        // Find txId on Bitcoin\\n        _txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n\\n        // Check tx inclusion on Bitcoin\\n        require(\\n            _isConfirmed(\\n                _relay,\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"Brc20RouterLib: not finalized\\\"\\n        );\\n    }\\n\\n    /// @notice Extract request info and store it\\n    function wrapHelper(\\n        uint _chainId,\\n        bytes memory _vout,\\n        bytes32 _txId,\\n        mapping(bytes32 => Brc20RouterStorage.brc20WrapRequest) storage _brc20WrapRequests,\\n        mapping(uint => address) storage _supportedBrc20s,\\n        mapping(uint => Brc20RouterStorage.thirdParty) storage _thirdParties,\\n        uint _protocolPercentageFee,\\n        uint _lockerPercentageFee\\n    ) external returns (\\n        uint _remainingAmount,\\n        Brc20RouterStorage.fees memory _fee,\\n        address _thirdPartyAddress,\\n        address _wrappedBrc20\\n    ) {\\n        require(\\n            !_brc20WrapRequests[_txId].isUsed,\\n            \\\"Brc20RouterLib: already used\\\"\\n        );\\n\\n        // Extract OP_RETURN output\\n        Brc20RouterStorage.brc20WrapRequest memory request;       \\n        (\\n            , // Value\\n            bytes memory requestData\\n        ) = BitcoinHelper.parseValueAndDataHavingLockingScriptSmallPayload(\\n            _vout,\\n            \\\"0x\\\"\\n        );\\n\\n        // 39 for wrap, 72 for wrap & exchange\\n        require(\\n            requestData.length == 39 || requestData.length == 72, \\n            \\\"Brc20RouterLib: invalid len\\\"\\n        );\\n\\n        /* \\n            OP_RETURN data is as follow:\\n            1) chainId, 2 byte: max 65535 chains\\n            2) appId, 1 byte: max 256 apps\\n            3) tokenId, 2 byte: max 65535 tokens\\n            4) inputAmount, 13 byte: max 10^30 (= 1T * 10^18)\\n            5) recipientAddress, 20 byte: EVM account\\n            6) thirdPartyId, 1 byte: max 256 third party\\n            TOTAL = 39 BYTE (WRAP)\\n            7) outputToken, 20 byte: token address\\n            8) outputAmount, 13 byte: max 10^30 (= 1T * 10^18)\\n            TOTAL = 72 BYTE (WRAP & EXCHANGE)\\n        */\\n        request.isUsed = true;\\n        request.chainId = _parseChainId(requestData);\\n        request.appId = _parseAppId(requestData);\\n        request.tokenId = _parseTokenId(requestData);\\n        request.inputAmount = _parseInputAmount(requestData);\\n        request.recipientAddress = _parseRecipientAddress(requestData);\\n        request.thirdPartyId = _parseThirdPartyId(requestData);\\n\\n        _thirdPartyAddress = _thirdParties[request.thirdPartyId].thirdPartyAddress;\\n\\n        if (requestData.length == 39) {\\n            require(request.appId == 0, \\\"Brc20RouterLib: wrong app id\\\");\\n        } else {\\n            require(request.appId != 0, \\\"Brc20RouterLib: wrong app id\\\");\\n            request.outputToken = _parseOutputToken(requestData);\\n            request.outputAmount = _parseOutputAmount(requestData);\\n        }\\n\\n        // Some checks:\\n        require(request.inputAmount > 0, \\\"Brc20RouterLib: zero input\\\");\\n        require(request.chainId == _chainId, \\\"Brc20RouterLib: wrong chain\\\");\\n\\n        _wrappedBrc20 = _supportedBrc20s[request.tokenId];\\n        require(\\n            _wrappedBrc20 != address(0),\\n            \\\"Brc20RouterLib: not supported\\\"\\n        );\\n        request.inputToken = _wrappedBrc20;\\n\\n        uint inputAmount = request.inputAmount;\\n        _fee.protocolFee = inputAmount * _protocolPercentageFee / 10000;\\n        _fee. lockerFee = inputAmount * _lockerPercentageFee / 10000;\\n        _fee.thirdPartyFee = inputAmount * _thirdParties[request.thirdPartyId].thirdPartyFee / 10000;\\n        _remainingAmount = inputAmount - _fee.protocolFee - _fee.lockerFee - _fee.thirdPartyFee;\\n\\n        request.fee = _fee.protocolFee + _fee.lockerFee + _fee.thirdPartyFee;\\n\\n        // Save the request\\n        _brc20WrapRequests[_txId] = request;\\n    }\\n\\n    /// @notice Save unwrap request after checking user script validity and \\n    ///         return fees and bunrt amount\\n    function unwrapHelper(\\n        address _user,\\n        uint _protocolPercentageFee,\\n        uint _lockerPercentageFee,\\n        Brc20RouterStorage.brc20UnwrapRequest[] storage _brc20UnwrapRequests,\\n        mapping(uint => Brc20RouterStorage.thirdParty) storage _thirdParties,\\n        uint _thirdPartyId,\\n        uint _amount,\\n        bytes memory _userScript, \\n        ScriptTypes _scriptType\\n    ) external returns (\\n        Brc20RouterStorage.fees memory _fee,\\n        address _thirdPartyAddress,\\n        uint _remainingAmount\\n    ) {\\n        _thirdPartyAddress = _thirdParties[_thirdPartyId].thirdPartyAddress;\\n\\n        // Find locker and protocol fee\\n        _fee.protocolFee = _amount * _protocolPercentageFee / 10000;\\n        _fee.lockerFee = _amount * _lockerPercentageFee / 10000;\\n        _fee.thirdPartyFee = _amount * _thirdParties[_thirdPartyId].thirdPartyFee / 10000;\\n\\n        _remainingAmount = _amount - _fee.protocolFee - _fee.lockerFee - _fee.thirdPartyFee;\\n        require(\\n            _remainingAmount > 0, \\n            \\\"Brc20RouterLib: low amount\\\"\\n        );\\n\\n        // Check validity of user script\\n        if (_scriptType == ScriptTypes.P2PK || _scriptType == ScriptTypes.P2WSH || _scriptType == ScriptTypes.P2TR) {\\n            require(_userScript.length == 32, \\\"Brc20RouterLib: invalid script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"Brc20RouterLib: invalid script\\\");\\n        }\\n\\n        // Save unwrap request\\n        Brc20RouterStorage.brc20UnwrapRequest memory request;\\n        request.isProcessed = false;\\n        request.amount = _amount;\\n        request.burntAmount = _remainingAmount;\\n        request.sender = _user;\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        _brc20UnwrapRequests.push(request);\\n    }\\n\\n    /// @notice Return chain id of the request\\n    /// @param _requestData Data written in Bitcoin tx\\n    function _parseChainId(bytes memory _requestData) internal pure returns (uint16 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 0, 1);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice Return app id of the request\\n    /// @dev Determines the app that request belongs to (e.g. wrap app id is 0)\\n    function _parseAppId(bytes memory _requestData) internal pure returns (uint8 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 2, 2);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Return token id of the request\\n    function _parseTokenId(bytes memory _requestData) internal pure returns (uint16 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 3, 4);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice Return input amount\\n    function _parseInputAmount(bytes memory _requestData) internal pure returns (uint104 _parsedValue){\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 5, 17);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 13))\\n        }\\n    }\\n\\n    /// @notice Return recipient address\\n    function _parseRecipientAddress(bytes memory _requestData) internal pure returns (address _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 18, 37);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice Return recipient address\\n    function _parseThirdPartyId(bytes memory _requestData) internal pure returns (uint8 _parsedValue) {\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 38, 38);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice Return address of exchange token\\n    function _parseOutputToken(bytes memory _requestData) internal pure returns (address _parsedValue){\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 39, 58);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice Return min expected output amount\\n    function _parseOutputAmount(bytes memory _requestData) internal pure returns (uint104 _parsedValue){\\n        bytes memory slicedBytes = _sliceBytes(_requestData, 59, 71);\\n        assembly {\\n            _parsedValue := mload(add(slicedBytes, 13))\\n        }\\n    }\\n\\n    /// @notice Returns the sliced bytes\\n    /// @param _data Slicing data\\n    /// @param _start index of slicing\\n    /// @param _end index of slicing\\n    function _sliceBytes(\\n        bytes memory _data,\\n        uint _start,\\n        uint _end\\n    ) internal pure returns (bytes memory _result) {\\n        bytes1 temp;\\n        for (uint i = _start; i < _end + 1; i++) {\\n            temp = _data[i];\\n            _result = abi.encodePacked(_result, temp);\\n        }\\n    }\\n\\n    /// @notice Check if tx has been finalized on Bitcoin\\n    /// @dev Locker needs to pay for the relay fee\\n    function _isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Get fee amount\\n        uint feeAmount = IBitcoinRelay(_relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"Brc20RouterLib: low fee\\\");\\n\\n        // Query relay (send all msg.value to it)\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n        \\n        // Send extra ETH back to user\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n\\n}\",\"keccak256\":\"0xca91f48a6b0b212d3981eb8e1db69d45d56ae0118ae0aa745f6724f27dd08443\",\"license\":\"MIT\"},\"contracts/brc20_router/Brc20RouterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./Brc20RouterStorage.sol\\\";\\nimport \\\"./Brc20RouterLib.sol\\\";\\nimport \\\"../erc20/interfaces/IWBRC20.sol\\\";\\nimport \\\"../erc20/interfaces/IWETH.sol\\\";\\nimport \\\"../swap_connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract Brc20RouterLogic is OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable, Brc20RouterStorage {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Brc20RouterLogic: zero address\\\");\\n        _;\\n    }\\n\\n    /// @notice Initialize the contract\\n    /// @param _startingBlockNumber Requests included in a block older than _startingBlockNumber cannot be processed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _relay Bitcoin bridge address which validates Bitcoin tx\\n    /// @param _locker TODO\\n    /// @param _treasury Address of treasury that collects protocol fees\\n    function initialize(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _chainId,\\n        address _relay,\\n        address _locker,\\n        bytes memory _lockerLockingScript,\\n        ScriptTypes _lockerScriptType,\\n        address _teleporter,\\n        address _treasury,\\n        address _wrappedNativeToken\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        chainId = _chainId;\\n        setStartingBlockNumber(_startingBlockNumber);\\n        setProtocolPercentageFee(_protocolPercentageFee);\\n        setRelay(_relay);\\n        setLocker(_locker);\\n        setLockerLockingScript(_lockerLockingScript, _lockerScriptType);\\n        setTeleporter(_teleporter);\\n        setTreasury(_treasury);\\n        setWrappedNativeToken(_wrappedNativeToken);\\n    }\\n\\n    receive() external payable {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Check if the wrap request has been processed before\\n    /// @param _txId of the request on Bitcoin\\n    function isWrapRequestProcessed(\\n        bytes32 _txId\\n    ) external view override returns (bool) {\\n        return brc20WrapRequests[_txId].isUsed ? true : false;\\n    }\\n\\n    // TODO: add functions for rune as well\\n\\n    /// @notice Check if the unwrap request has been processed before\\n    function isUnwrapRequestProcessed(\\n        uint _reqIdx\\n    ) external view override returns (bool) {\\n        return brc20UnwrapRequests[_reqIdx].isProcessed ? true : false;\\n    }\\n\\n    /// @notice Setter for locker locking script\\n    function setLockerLockingScript(\\n        bytes memory _lockerLockingScript,\\n        ScriptTypes _lockerScriptType\\n    ) public override onlyOwner {\\n        lockerLockingScript = _lockerLockingScript;\\n        lockerScriptType = _lockerScriptType;\\n    }\\n\\n    /// @notice Setter for starting block number\\n    function setStartingBlockNumber(uint _startingBlockNumber) public override onlyOwner {\\n        require(\\n            _startingBlockNumber > startingBlockNumber,\\n            \\\"Brc20RouterLogic: low number\\\"\\n        );\\n        startingBlockNumber = _startingBlockNumber;    \\n    }\\n\\n    /// @notice Setter for protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) public override onlyOwner {\\n        require(\\n            MAX_PROTOCOL_FEE >= _protocolPercentageFee,\\n            \\\"Brc20RouterLogic: out of range\\\"\\n        );\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice Setter for Bitcoin relay\\n    function setRelay(address _relay) public override nonZeroAddress(_relay) onlyOwner {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;    \\n    }\\n\\n    /// @notice Setter for locker\\n    function setLocker(address _locker) public override nonZeroAddress(_locker) onlyOwner {\\n        emit NewLocker(locker, _locker);\\n        locker = _locker;   \\n    }\\n\\n    /// @notice Setter for teleporter\\n    function setTeleporter(address _teleporter) public override nonZeroAddress(_teleporter) onlyOwner {\\n        emit NewTeleporter(teleporter, _teleporter);\\n        teleporter = _teleporter;   \\n    }\\n\\n    /// @notice Setter for treasury\\n    function setTreasury(address _treasury) public override nonZeroAddress(_treasury) onlyOwner {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;    \\n    }\\n\\n    /// @notice Set exchange connector for appId\\n    /// @dev If address(0) is set for an appId, that appId is inactive\\n    function setExchangeConnector(\\n        uint _appId, \\n        address _exchangeConnector\\n    ) external override onlyOwner {\\n        emit SetExchangeConnector(_appId, _exchangeConnector);\\n        exchangeConnector[_appId] = _exchangeConnector;\\n    }\\n\\n    /// @notice Setter for third party address and fee\\n    function setThirdParty(\\n        uint _thirdPartyId,\\n        address _thirdPartyAddress,\\n        uint _thirdPartyFee\\n    ) external override onlyOwner {\\n        emit ThirdPartyInfoUpdated(\\n            _thirdPartyId,\\n            thirdParties[_thirdPartyId].thirdPartyAddress,\\n            thirdParties[_thirdPartyId].thirdPartyFee,\\n            _thirdPartyAddress,\\n            _thirdPartyFee\\n        );\\n\\n        thirdParty memory _thirdParty;\\n        _thirdParty.thirdPartyAddress = _thirdPartyAddress;\\n        _thirdParty.thirdPartyFee = _thirdPartyFee;\\n        thirdParties[_thirdPartyId] = _thirdParty;\\n    }\\n\\n    /// @notice Setter for chainId\\n    function setChainId(uint _chainId) public override onlyOwner {\\n        chainId = _chainId;    \\n    }\\n\\n    /// @notice Setter for wrapped native token\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) public override nonZeroAddress(_wrappedNativeToken) onlyOwner {\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice Deploy wrapped BRC20 token contract\\n    /// @dev We assign tokenId to a supported BRC20\\n    function addBrc20(\\n        string memory _name,\\n        uint8 _decimal,\\n        uint _tokenId\\n    ) external onlyOwner override {\\n\\n        // Cannot assign BRC20 to a used tokenId\\n        require(\\n            supportedBrc20s[_tokenId] == address(0), \\n            \\\"Brc20RouterLogic: used id\\\"\\n        );\\n\\n        // Deploy logic contract\\n        address wbrc20Logic = Brc20RouterLib.addBrc20Helper();\\n\\n        bytes memory nullData;\\n        WBRC20Proxy _wbrc20Proxy = new WBRC20Proxy(\\n            wbrc20Logic, owner(), nullData\\n        ); // We set current owner as the proxy admin\\n\\n        address wbrc20Proxy = address(_wbrc20Proxy);\\n\\n        // Initialize proxy (logic owner is this contract)\\n        WBRC20Logic(wbrc20Proxy).initialize(\\n            _name, \\n            _name, \\n            _decimal\\n        ); // We use the same name & symbol\\n\\n        // Add this contract as minter and burner\\n        WBRC20Logic(wbrc20Proxy).addMinter(address(this));\\n        WBRC20Logic(wbrc20Proxy).addBurner(address(this));\\n\\n        supportedBrc20s[_tokenId] = wbrc20Proxy;\\n        tokenIds[_name] = _tokenId;\\n\\n        emit NewBrc20(\\n            _name, \\n            _decimal,\\n            _tokenId, \\n            wbrc20Proxy, \\n            wbrc20Logic\\n        );\\n    }\\n\\n    /// @notice Remove support of a wrapped BRC20 token\\n    function removeBrc20(\\n        uint _tokenId\\n    ) external onlyOwner override {\\n        require(\\n            supportedBrc20s[_tokenId] != address(0), \\n            \\\"Brc20RouterLogic: no token\\\"\\n        );\\n        emit Brc20Removed(\\n            _tokenId, \\n            supportedBrc20s[_tokenId]\\n        );\\n        tokenIds[WBRC20Logic(supportedBrc20s[_tokenId]).name()] = 0;\\n        supportedBrc20s[_tokenId] = address(0);\\n    }\\n\\n    /// @notice Setter for unwrap fee\\n    /// @dev This fee is taken for unwrap requests to cover the Bitcoin network fee\\n    function setUnwrapFee(\\n        uint _newFee\\n    ) external onlyOwner override {\\n        emit UnwrapFeeUpdated(\\n            unwrapFee,\\n            _newFee\\n        );\\n        unwrapFee = _newFee;\\n    }\\n\\n    /// @notice Process wrap BRC20 request\\n    /// @dev Locker submits wrap requests to this function for:\\n    ///      1) Checking tx inclusion\\n    ///      2) Extracting wrap request info from the OP_RETURN output\\n    ///      3) Exchanging wrapped BRC20 (if request is wrap & exchange) using the path \\n    ///         provided by the locker\\n    /// @param _version of Bitcoin tx\\n    /// @param _vin Tx inputs\\n    /// @param _vout Tx outputs\\n    /// @param _locktime Tx locktime\\n    /// @param _blockNumber that includes the tx\\n    /// @param _intermediateNodes Merkle proof for tx\\n    /// @param _index of tx in the block\\n    function wrapBrc20(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address[] memory _path\\n    ) external payable nonReentrant override {\\n        require(_msgSender() == teleporter, \\\"Brc20RouterLogic: not teleporter\\\");\\n        \\n        // Find txId and check its inclusion\\n        bytes32 txId = Brc20RouterLib.checkTx(\\n            startingBlockNumber,\\n            relay,\\n            _version,\\n            _vin,\\n            _vout,\\n            _locktime,\\n            _blockNumber,\\n            _intermediateNodes,\\n            _index\\n        );\\n\\n        // Extract information from the request & find fees and remaining amount\\n        (\\n            uint remainingAmount,\\n            fees memory fee,\\n            address _thirdPartyAddress,\\n            address wrappedBrc20\\n        ) = Brc20RouterLib.wrapHelper(\\n            chainId,\\n            _vout, \\n            txId,\\n            brc20WrapRequests,\\n            supportedBrc20s,\\n            thirdParties,\\n            protocolPercentageFee, \\n            lockerPercentageFee\\n        );\\n\\n        // Mint wrapped tokens\\n        IWBRC20(wrappedBrc20).mint(\\n            address(this),\\n            fee.protocolFee + fee.lockerFee + fee.thirdPartyFee + remainingAmount\\n        );\\n\\n        // Send protocol, locker and third party fee\\n        IWBRC20(wrappedBrc20).transfer(\\n            treasury,\\n            fee.protocolFee\\n        );\\n        IWBRC20(wrappedBrc20).transfer(\\n            locker,\\n            fee.lockerFee\\n        );\\n\\n        if (_thirdPartyAddress != address(0)) {\\n            IWBRC20(wrappedBrc20).transfer(\\n                _thirdPartyAddress,\\n                fee.thirdPartyFee\\n            );\\n        }\\n\\n        brc20WrapRequest memory request = brc20WrapRequests[txId];\\n\\n        if (request.appId == 0) { // This is a wrap request\\n            // Transfer wrapped tokens to user\\n            IWBRC20(wrappedBrc20).transfer(\\n                request.recipientAddress, \\n                remainingAmount\\n            );\\n\\n            emit NewWrap(\\n                request.recipientAddress,\\n                remainingAmount,\\n                wrappedBrc20,\\n                fee,\\n                _thirdPartyAddress,\\n                txId\\n            );\\n        } else { // This is wrap & exchange request\\n            // Check exchange path provided by locker\\n            require(\\n                _path[0] == request.inputToken &&\\n                _path[_path.length - 1] == request.outputToken,\\n                \\\"BurnRouterLogic: wrong path\\\" \\n            );   \\n\\n            (bool result, uint[] memory amounts) = _swap(\\n                request.appId,\\n                request.recipientAddress,\\n                remainingAmount,\\n                request.outputAmount,\\n                _path\\n            );\\n\\n            if (result) {\\n                emit NewWrapAndSwap(\\n                    request.recipientAddress,\\n                    remainingAmount,\\n                    wrappedBrc20,\\n                    amounts[amounts.length - 1],\\n                    request.outputToken,\\n                    fee,\\n                    _thirdPartyAddress,\\n                    txId\\n                );\\n            } else {\\n                emit FailedWrapAndSwap(\\n                    request.recipientAddress,\\n                    remainingAmount,\\n                    wrappedBrc20,\\n                    request.outputAmount,\\n                    request.outputToken,\\n                    fee,\\n                    _thirdPartyAddress,\\n                    txId\\n                );\\n\\n                // Transfer wrapped tokens to user\\n                IWBRC20(wrappedBrc20).transfer(\\n                    request.recipientAddress, \\n                    remainingAmount\\n                ); \\n            }\\n        }\\n    }\\n\\n    /// @notice Process user unwrap request\\n    /// @dev For unwrap requests (not swap & unwrap), pass _appId, \\n    ///      _inputAmount and _path ZERO\\n    /// @param _amount of WBRC20 that user wants to burn\\n    /// @param _userScript User script hash\\n    /// @param _scriptType User script type\\n    function unwrapBrc20(\\n        uint _thirdPartyId,\\n        uint _tokenId,\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _appId,\\n        uint _inputAmount,\\n        address[] memory _path\\n    ) external nonReentrant payable override {\\n        address token = supportedBrc20s[_tokenId];\\n        require(token != address(0), \\\"Brc20RouterLogic: not supported\\\");\\n\\n        if (msg.value > unwrapFee) {\\n            // Input token is native token\\n            require(\\n                msg.value == _inputAmount + unwrapFee,\\n                \\\"Brc20RouterLogic: wrong value\\\"\\n            );\\n\\n            require(\\n                wrappedNativeToken == _path[0],\\n                \\\"Brc20RouterLogic: invalid path\\\"\\n            );\\n\\n            // Mint wrapped native token\\n            IWETH(wrappedNativeToken).deposit{value: _inputAmount}();\\n        } else {\\n            // Input token != native token\\n            require(msg.value == unwrapFee, \\\"Brc20RouterLogic: wrong fee\\\");\\n        }\\n\\n        if (_path.length != 0) { // This is a swap and unwrap request\\n            // Transfer user's tokens to contract\\n            IWBRC20(_path[0]).transferFrom(msg.sender, address(this), _inputAmount);\\n            \\n            (bool result, uint[] memory amounts) = _swap(\\n                _appId,\\n                address(this),\\n                _inputAmount,\\n                _amount,\\n                _path\\n            );\\n            require(result, \\\"Brc20RouterLogic: swap failed\\\");\\n            _amount = amounts[amounts.length - 1]; // WBRC20 amount that would be burnt\\n        } else { // This is a unwrap request\\n            // Transfer user's tokens to contract\\n            require(\\n                IWBRC20(token).transferFrom(_msgSender(), address(this), _amount),\\n                \\\"Brc20RouterLogic: transfer failed\\\"\\n            );\\n        }\\n\\n        (\\n            fees memory fee,\\n            address thirdPartyAddress,\\n            uint remainingAmount\\n        ) = _unwrapBrc20(\\n            _thirdPartyId,\\n            token,\\n            _amount, \\n            _userScript, \\n            _scriptType\\n        );\\n\\n        if (_path.length == 0) {\\n            emit NewUnwrap(\\n                _msgSender(),\\n                _userScript,\\n                _scriptType,\\n                token,\\n                _amount,\\n                remainingAmount,\\n                fee,\\n                unwrapFee,\\n                thirdPartyAddress,\\n                brc20UnwrapRequests.length - 1\\n            );\\n        } else {\\n            emit NewUnwrapAndSwap(\\n                _msgSender(),\\n                _userScript,\\n                _scriptType,\\n                _inputAmount,\\n                _path[0],\\n                _amount,\\n                remainingAmount,\\n                token,\\n                fee,\\n                unwrapFee,\\n                thirdPartyAddress,\\n                brc20UnwrapRequests.length - 1\\n            );\\n        }\\n\\n    }\\n\\n    /// @notice Check proof of unwraping\\n    function unwrapProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        uint[] memory _reqIndexes\\n    ) external payable nonReentrant override {\\n        require(_msgSender() == locker, \\\"Brc20RouterLogic: not locker\\\");\\n\\n        bytes32 txId = Brc20RouterLib.checkTx(\\n            startingBlockNumber,\\n            relay,\\n            _version,\\n            _vin,\\n            _vout,\\n            _locktime,\\n            _blockNumber,\\n            _intermediateNodes,\\n            _index\\n        );\\n\\n        for (uint i = 0; i < _reqIndexes.length; i++) {\\n            require(\\n                !brc20UnwrapRequests[_reqIndexes[i]].isProcessed, \\n                \\\"Brc20RouterLogic: already processed\\\"\\n            );\\n            brc20UnwrapRequests[_reqIndexes[i]].isProcessed = true;\\n            emit UnwrapProcessed(\\n                brc20UnwrapRequests[_reqIndexes[i]].sender,\\n                brc20UnwrapRequests[_reqIndexes[i]].burntAmount,\\n                brc20UnwrapRequests[_reqIndexes[i]].userScript,\\n                brc20UnwrapRequests[_reqIndexes[i]].scriptType,\\n                _reqIndexes[i],\\n                txId\\n            );\\n        }\\n    }\\n\\n    // Swap tokens using an exchange connector\\n    function _swap(\\n        uint _appId,\\n        address _recipientAddress,\\n        uint _inputAmount,\\n        uint _outputAmount,\\n        address[] memory _path\\n    ) private returns (bool _result, uint[] memory _amounts) {\\n        address _exchangeConnector = exchangeConnector[_appId];\\n        require(\\n            _exchangeConnector != address(0), \\n            \\\"BurnRouterLogic: invalid appId\\\"\\n        );\\n\\n        IWBRC20(_path[0]).approve(\\n            _exchangeConnector,\\n            _inputAmount\\n        );\\n\\n        if (IExchangeConnector(_exchangeConnector).isPathValid(_path)) {\\n            (_result, _amounts) = IExchangeConnector(_exchangeConnector).swap(\\n                _inputAmount,\\n                _outputAmount,\\n                _path,\\n                _recipientAddress,\\n                block.timestamp,\\n                true // Input amount is fixed\\n            );\\n        } else {\\n            _result = false;\\n        }\\n    }\\n\\n    /// @notice Burns wrapped BRC20 and record the request\\n    function _unwrapBrc20(\\n        uint _thirdPartyId,\\n        address _token,\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType\\n    ) private returns (\\n        fees memory _fee,\\n        address _thirdPartyAddress,\\n        uint _remainingAmount\\n    ) {\\n        // Save unwrap request and get fee and burnt amounts\\n        (_fee, _thirdPartyAddress, _remainingAmount) = Brc20RouterLib.unwrapHelper(\\n            _msgSender(),\\n            protocolPercentageFee, \\n            lockerPercentageFee,\\n            brc20UnwrapRequests,\\n            thirdParties,\\n            _thirdPartyId,\\n            _amount,\\n            _userScript, \\n            _scriptType\\n        );\\n\\n        unwrapCounter++;\\n\\n        // Send protocol, locker and third party fee\\n        // TODO: comment token fees and get only native token as fee\\n        IWBRC20(_token).transfer(treasury, _fee.protocolFee);\\n\\n        IWBRC20(_token).transfer(locker, _fee.lockerFee);\\n        Address.sendValue(payable(locker), unwrapFee);\\n        \\n        if (_thirdPartyAddress != address(0)) {\\n            IWBRC20(_token).transfer(_thirdPartyAddress, _fee.thirdPartyFee);\\n        }\\n\\n        // Burn remained amount\\n        IWBRC20(_token).burn(_remainingAmount);\\n    }\\n}\",\"keccak256\":\"0x45606afe4f6568eb385193143354e9ae9a5bb21cd1590c1b3b4120c643b38501\",\"license\":\"MIT\"},\"contracts/brc20_router/Brc20RouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IBrc20Router.sol\\\";\\n\\nabstract contract Brc20RouterStorage is IBrc20Router {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override protocolPercentageFee; // In range of [0, 10000]\\n    uint public lockerPercentageFee; // In range of [0, 10000]\\n    uint public unwrapCounter;\\n    address public override relay;\\n    address public override treasury;\\n    address public override locker;\\n    mapping(uint => address) public supportedBrc20s; // Mapping from tokenId to tokenAddress\\n    mapping(string => uint) public tokenIds; // Mapping from tick to tokenId\\n    mapping(uint => uint) public unwrapFees; // Mapping from tokenId to unwrapFee\\n    mapping(bytes32 => brc20WrapRequest) public brc20WrapRequests;\\n    mapping(uint => address) public override exchangeConnector; \\n    // ^ Mapping from app id to exchange connector address\\n    brc20UnwrapRequest[] public brc20UnwrapRequests;\\n    bytes public override lockerLockingScript;\\n    ScriptTypes public override lockerScriptType;\\n    address public override teleporter;\\n\\n    // New variables\\n    mapping(uint => thirdParty) public thirdParties; // Mapping from thirdPartyId to thirdParty (address, fee)\\n    uint public unwrapFee; // This fee (which is in native token) covers cost of sending BRC-20 tokens to the user\\n    address public wrappedNativeToken;\\n}\\n\",\"keccak256\":\"0x9b1786c5fd86aa4727cd7d4eefbe791a926ededd75ac79f8f9d5b7da74d3be79\",\"license\":\"MIT\"},\"contracts/brc20_router/interfaces/IBrc20Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBrc20Router {\\n    // Structures\\n\\n    /// @notice Structure for recording wrap and wrap&swap requests\\n    struct brc20WrapRequest {\\n        bool isUsed;\\n        uint chainId;\\n        uint appId;\\n        uint tokenId;\\n        uint inputAmount;\\n        address inputToken;\\n        address recipientAddress;\\n        uint thirdPartyId;\\n        uint fee;\\n        uint outputAmount;\\n        address outputToken;\\n    }\\n\\n    /// @notice Structure for recording unwrap and swap&unwrap requests\\n    struct brc20UnwrapRequest {\\n        bool isProcessed;\\n        uint amount;\\n        uint burntAmount;\\n        uint appId;\\n        address sender;\\n        bytes userScript;\\n\\t\\tScriptTypes scriptType;\\n    }\\n\\n    struct thirdParty {\\n        address thirdPartyAddress;\\n        uint thirdPartyFee;\\n    }\\n\\n    struct fees {\\n        uint protocolFee;\\n        uint lockerFee;\\n        uint thirdPartyFee;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emit when a wrap request is processed\\n    event NewWrap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a wrap&swap request is processed\\n    event NewWrapAndSwap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        address outputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a wrap&swap request is processed but swap failed\\n    event FailedWrapAndSwap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        address outputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a new unwrap request is created\\n    event NewUnwrap(\\n        address user,\\n        bytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        address inputToken,\\n        uint inputAmount,\\n        uint remainingAmount,\\n        fees fee,\\n        uint unwrapFee,\\n        address thirdPartyAddress,\\n        uint reqIdx\\n    );\\n\\n    /// @notice Emit when a new unwrap&swap request is created\\n    event NewUnwrapAndSwap(\\n        address user,\\n        bytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        uint inputAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        uint remainingAmount,\\n        address outputToken,\\n        fees fee,\\n        uint unwrapFee,\\n        address thirdPartyAddress,\\n        uint reqIdx\\n    );\\n\\n    /// @notice Emit when a unwrap request is processed\\n    event UnwrapProcessed(\\n        address user,\\n        uint remainingAmount,\\n        bytes userScript,\\n\\t\\tScriptTypes scriptType,\\n        uint reqIdx,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emits when appId for an exchange connector is set\\n    /// @param appId Assigned application id to exchange\\n    /// @param exchangeConnector Address of exchange connector contract\\n    event SetExchangeConnector(\\n        uint appId,\\n        address exchangeConnector\\n    );\\n\\n    /// @notice Emit when relay address updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n    /// @notice Emit when locker address updated\\n    event NewLocker(\\n        address oldLocker, \\n        address newLocker\\n    );\\n\\n    /// @notice Emit when teleporter address updated\\n    event NewTeleporter(\\n        address oldTeleporter, \\n        address newTeleporter\\n    );\\n\\n    /// @notice Emit when protocol fee updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice Emit when treasury address updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n    /// @notice Emit when new BRC20 added\\n    event NewBrc20(\\n        string name, \\n        uint decimal,\\n        uint tokenId, \\n        address wbrc20Proxy, \\n        address wbrc20Logic\\n    );\\n\\n    /// @notice Emit when BRC20 removed\\n    event Brc20Removed(\\n        uint tokenId, \\n        address wbrc20Proxy\\n    );\\n\\n    /// @notice Emit when unwrap fee updated\\n    event UnwrapFeeUpdated(\\n        uint oldFee, \\n        uint newFee\\n    );\\n\\n    /// @notice Emit when third party fee updated\\n    event ThirdPartyInfoUpdated(\\n        uint thirdPartyId,\\n        address oldAddress,\\n        uint oldFee,\\n        address newAddress,\\n        uint newFee\\n    );\\n\\n    // Read-only functions\\n    \\n    function isWrapRequestProcessed(bytes32 _txId) external view returns (bool);\\n\\n    function isUnwrapRequestProcessed(uint _reqIdx) external view returns (bool);\\n    \\n    function startingBlockNumber() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n    \\n    function chainId() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function locker() external view returns (address);\\n\\n    function teleporter() external view returns (address);\\n\\n    function exchangeConnector(uint appId) external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function lockerLockingScript() external view returns (bytes memory);\\n\\n    function lockerScriptType() external view returns (ScriptTypes);\\n\\n    // State-changing functions\\n\\n    function setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setLocker(address _locker) external;\\n\\n    function setTeleporter(address _teleporter) external;\\n\\n    function setExchangeConnector(uint _appId, address _exchangeConnector) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function setChainId(uint _chainId) external;\\n\\n    function setLockerLockingScript(\\n        bytes memory _lockerLockingScript,\\n        ScriptTypes _lockerScriptType\\n    ) external;\\n\\n    function setUnwrapFee(\\n        uint _newFee\\n    ) external;\\n\\n    function setThirdParty(\\n        uint _thirdPartyId,\\n        address _thirdPartyAddress,\\n        uint _thirdPartyFee\\n    ) external;\\n\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) external;\\n\\n    function addBrc20(\\n        string memory _name,\\n        uint8 _decimal,\\n        uint _tokenId\\n    ) external;\\n\\n    function removeBrc20(\\n        uint _tokenId\\n    ) external;\\n   \\n    function wrapBrc20(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address[] memory _path\\n    ) external payable;\\n\\n    function unwrapBrc20(\\n        uint _thirdPartyId,\\n        uint _tokenId,\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _appId,\\n        uint _exchangeAmount,\\n        address[] memory _path\\n    ) external payable;\\n\\n    function unwrapProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        uint[] memory _reqIndexes\\n    ) external payable;\\n}\",\"keccak256\":\"0xe8309896de293f292e228dcf3e0e2909adeba45559086681b9fcefe81ea739dd\",\"license\":\"MIT\"},\"contracts/erc20/WBRC20Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IWBRC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract WBRC20Logic is IWBRC20, ERC20Upgradeable, \\n    OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n \\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"WBRC20Logic: not minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"WBRC20Logic: not burner\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"WBRC20Logic: zero value\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    uint8 public decimal;\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimal\\n    ) public initializer {\\n        ERC20Upgradeable.__ERC20_init(\\n            _name,\\n            _symbol\\n        );\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        decimal = _decimal;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    function decimals() public view virtual override(ERC20Upgradeable, IWBRC20) returns (uint8) {\\n        return decimal;\\n    }\\n\\n    /// @notice Return true if account is minter \\n    function isMinter(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"WBRC20Logic: zero address\\\");\\n        return minters[account];\\n    }\\n\\n    /// @notice Return true if account is burner \\n    function isBurner(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"WBRC20Logic: zero address\\\");\\n        return burners[account];\\n    }\\n\\n    /// @notice Add a minter\\n    function addMinter(address account) external override onlyOwner {\\n        require(!isMinter(account), \\\"WBRC20Logic: already minter\\\");\\n        minters[account] = true;\\n        emit MinterAdded(account);\\n    }\\n\\n    /// @notice Remover a minter\\n    function removeMinter(address account) external override onlyOwner {\\n        require(isMinter(account), \\\"WBRC20Logic: not minter\\\");\\n        minters[account] = false;\\n        emit MinterRemoved(account);\\n    }\\n\\n    /// @notice Add a burner\\n    function addBurner(address account) external override onlyOwner {\\n        require(!isBurner(account), \\\"WBRC20Logic: already burner\\\");\\n        burners[account] = true;\\n        emit BurnerAdded(account);\\n    }\\n\\n    /// @notice Remover a burner\\n    function removeBurner(address account) external override onlyOwner {\\n        require(isBurner(account), \\\"WBRC20Logic: not burner\\\");\\n        burners[account] = false;\\n        emit BurnerRemoved(account);\\n    }\\n\\n    /// @notice Burn tokens of msg.sender\\n    /// @dev Only burners can call this\\n    /// @param _amount of burnt tokens\\n    function burn(uint _amount) external nonReentrant onlyBurner override returns (bool) {\\n        _burn(_msgSender(), _amount);\\n        emit Burn(_msgSender(), _msgSender(), _amount);\\n        return true;\\n    }\\n\\n    /// @notice Mint tokens for _receiver\\n    /// @dev Only minters can call this\\n    /// @param _receiver Address of token receiver\\n    /// @param _amount of minted tokens\\n    function mint(address _receiver, uint _amount) external nonReentrant onlyMinter override returns (bool) {\\n        _mint(_receiver, _amount);\\n        emit Mint(_msgSender(), _receiver, _amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xad59e9ae7c36b7c6f0e69545b68544190b0e6d3053af18eb20b21d3d0e053998\",\"license\":\"MIT\"},\"contracts/erc20/WBRC20Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract WBRC20Proxy is TransparentUpgradeableProxy {\\n\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n}\",\"keccak256\":\"0x1d550c774df088386905f28753b3f0e9f70619e835dc1304da101bf43aa51497\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IWBRC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IWBRC20 is IERC20Upgradeable {\\n\\n    // Events\\n    \\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    // Read-only functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // State-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n}\",\"keccak256\":\"0x0666ad3c45996ceff5e5afb20b9923957cb6e38df4801a8d7ade98b7ba6d3345\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xe920734db9187500e5a4b9f231c6c7afa342b8f95bc8a06d925ab061a1b4b04b\",\"license\":\"MIT\"},\"contracts/swap_connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0xb47f56253fab205caf0f6668ea680100efce9ab4988328f184967e2b84506802\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106200021c5760003560e01c8063088302a6146200022957806309b53fd614620002595780630e72e41e1462000293578063171060ec14620002c957806317fcb39b14620002f05780631812adb614620003215780631e7107c714620003485780632104cb6b146200036d5780635b6a0b3b146200039257806361d027b314620003a95780636390802014620003cb5780636b2857ef14620003e35780636e8adf61146200040857806370872aa51462000442578063715018a6146200045a57806375122f62146200047257806376017e71146200049757806379224183146200058b5780637e43bd3d14620005b05780637ed5574814620005d5578063816c2e6a14620005fa5780638da5cb5b14620006115780639637e4a814620006295780639a7b78d2146200064e5780639a8a0592146200067f5780639aed427914620006975780639eca445314620006af578063a3696a091462000703578063a44c2b9a1462000728578063b3ff9f49146200074d578063b4e183f41462000774578063b4fd9a6c1462000799578063b59589d114620007b1578063c5a2b47a14620007d3578063c805f68b146200080f578063d4b639f51462000834578063d7b96d4e146200084b578063d8484ef5146200086d578063da058ae31462000898578063e901fe5714620008bd578063ef0e2ff414620008f7578063f0f44260146200091c578063f2fde38b146200094157600080fd5b366200022457005b600080fd5b3480156200023657600080fd5b506200024162000966565b604051620002509190620041d6565b60405180910390f35b3480156200026657600080fd5b506200027e62000278366004620036e3565b620009fc565b6040516200025097969594939291906200417c565b348015620002a057600080fd5b50620002b8620002b2366004620036e3565b62000af0565b604051901515815260200162000250565b348015620002d657600080fd5b50620002ee620002e8366004620035cf565b62000b3e565b005b348015620002fd57600080fd5b5060a95462000312906001600160a01b031681565b60405162000250919062003dca565b3480156200032e57600080fd5b506200033960995481565b60405190815260200162000250565b3480156200035557600080fd5b50620002ee62000367366004620036e3565b62000be7565b3480156200037a57600080fd5b50620002ee6200038c36600462003b61565b62000c48565b620002ee620003a336600462003c3a565b62000dd4565b348015620003b657600080fd5b50609d5462000312906001600160a01b031681565b348015620003d857600080fd5b5062000339609a5481565b348015620003f057600080fd5b50620002ee6200040236600462003aad565b62001370565b3480156200041557600080fd5b506200031262000427366004620036e3565b60a3602052600090815260409020546001600160a01b031681565b3480156200044f57600080fd5b506200033960975481565b3480156200046757600080fd5b50620002ee620013e3565b3480156200047f57600080fd5b50620002ee6200049136600462003adf565b620013ef565b348015620004a457600080fd5b5062000521620004b6366004620036e3565b60a260205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a015460ff9099169997989697959694956001600160a01b039485169593851694929391929091168b565b604080519b15158c5260208c019a909a52988a0197909752606089019590955260808801939093526001600160a01b0391821660a0880152811660c087015260e0860191909152610100850191909152610120840191909152166101408201526101600162000250565b3480156200059857600080fd5b50620002ee620005aa36600462003a07565b620014b0565b348015620005bd57600080fd5b50620002ee620005cf366004620036e3565b620017b2565b348015620005e257600080fd5b50620002ee620005f4366004620036e3565b62001943565b620002ee6200060b36600462003810565b620019e2565b3480156200061e57600080fd5b506200031262001e51565b3480156200063657600080fd5b50620002ee62000648366004620036e3565b62001e60565b3480156200065b57600080fd5b50620003396200066d366004620036e3565b60a16020526000908152604090205481565b3480156200068c57600080fd5b506200033960985481565b348015620006a457600080fd5b506200033960a85481565b348015620006bc57600080fd5b50620006f3620006ce366004620036e3565b60a760205260009081526040902080546001909101546001600160a01b039091169082565b6040516200025092919062003f60565b3480156200071057600080fd5b50620002ee62000722366004620035cf565b62001eab565b3480156200073557600080fd5b50620002b862000747366004620036e3565b62001f58565b3480156200075a57600080fd5b5060a654620003129061010090046001600160a01b031681565b3480156200078157600080fd5b50620002ee62000793366004620038fd565b62001f77565b348015620007a657600080fd5b5062000339609b5481565b348015620007be57600080fd5b50609c5462000312906001600160a01b031681565b348015620007e057600080fd5b5062000339620007f23660046200394e565b805160208183018101805160a08252928201919093012091525481565b3480156200081c57600080fd5b50620002ee6200082e366004620035cf565b62001fce565b620002ee6200084536600462003715565b6200206e565b3480156200085857600080fd5b50609e5462000312906001600160a01b031681565b3480156200087a57600080fd5b5060a654620008899060ff1681565b604051620002509190620041eb565b348015620008a557600080fd5b50620002ee620008b7366004620035cf565b620028e1565b348015620008ca57600080fd5b5062000312620008dc366004620036e3565b609f602052600090815260409020546001600160a01b031681565b3480156200090457600080fd5b50620002ee62000916366004620036e3565b62002938565b3480156200092957600080fd5b50620002ee6200093b366004620035cf565b62002947565b3480156200094e57600080fd5b50620002ee62000960366004620035cf565b620029e7565b60a580546200097590620045c2565b80601f0160208091040260200160405190810160405280929190818152602001828054620009a390620045c2565b8015620009f45780601f10620009c857610100808354040283529160200191620009f4565b820191906000526020600020905b815481529060010190602001808311620009d657829003601f168201915b505050505081565b60a4818154811062000a0d57600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601805460ff90961697509395929491936001600160a01b03909116929162000a5e90620045c2565b80601f016020809104026020016040519081016040528092919081815260200182805462000a8c90620045c2565b801562000add5780601f1062000ab15761010080835404028352916020019162000add565b820191906000526020600020905b81548152906001019060200180831162000abf57829003601f168201915b5050506006909301549192505060ff1687565b600060a4828154811062000b1457634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102015460ff1662000b3557600062000b38565b60015b92915050565b806001600160a01b03811662000b715760405162461bcd60e51b815260040162000b68906200427d565b60405180910390fd5b62000b7b62002a66565b609e546040517f69253c7023f628e3a302b63087a3bfc1dfdb256780182f81b9f0df9eff9542b09162000bbc916001600160a01b0390911690859062003dde565b60405180910390a150609e80546001600160a01b0319166001600160a01b0392909216919091179055565b62000bf162002a66565b609754811162000c435760405162461bcd60e51b815260206004820152601c60248201527b21393199182937baba32b92637b3b4b19d103637bb90373ab6b132b960211b604482015260640162000b68565b609755565b600054610100900460ff161580801562000c695750600054600160ff909116105b8062000c855750303b15801562000c85575060005460ff166001145b62000cea5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000b68565b6000805460ff19166001179055801562000d0e576000805461ff0019166101001790555b62000d1862002ac9565b62000d2262002afd565b609889905562000d328b62000be7565b62000d3d8a62001943565b62000d488862001fce565b62000d538762000b3e565b62000d5f868662001f77565b62000d6a8462001eab565b62000d758362002947565b62000d8082620028e1565b801562000dc7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b62000dde62002b31565b6000878152609f60205260409020546001600160a01b03168062000e455760405162461bcd60e51b815260206004820152601f60248201527f4272633230526f757465724c6f6769633a206e6f7420737570706f7274656400604482015260640162000b68565b60a85434111562000fac5760a85462000e5f90846200455a565b341462000eaf5760405162461bcd60e51b815260206004820152601d60248201527f4272633230526f757465724c6f6769633a2077726f6e672076616c7565000000604482015260640162000b68565b8160008151811062000ed157634e487b7160e01b600052603260045260246000fd5b602090810291909101015160a9546001600160a01b0390811691161462000f3b5760405162461bcd60e51b815260206004820152601e60248201527f4272633230526f757465724c6f6769633a20696e76616c696420706174680000604482015260640162000b68565b60a960009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801562000f8c57600080fd5b505af115801562000fa1573d6000803e3d6000fd5b505050505062000ffd565b60a854341462000ffd5760405162461bcd60e51b815260206004820152601b60248201527a4272633230526f757465724c6f6769633a2077726f6e672066656560281b604482015260640162000b68565b8151156200115e57816000815181106200102757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd3330866040518463ffffffff1660e01b8152600401620010609392919062003e26565b602060405180830381600087803b1580156200107b57600080fd5b505af115801562001090573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010b6919062003614565b50600080620010c98630878c8862002b8d565b91509150816200111c5760405162461bcd60e51b815260206004820152601d60248201527f4272633230526f757465724c6f6769633a2073776170206661696c6564000000604482015260640162000b68565b80600182516200112d919062004575565b815181106200114c57634e487b7160e01b600052603260045260246000fd5b6020026020010151985050506200123e565b6040516323b872dd60e01b81526001600160a01b038216906323b872dd906200119090339030908c9060040162003e26565b602060405180830381600087803b158015620011ab57600080fd5b505af1158015620011c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e6919062003614565b6200123e5760405162461bcd60e51b815260206004820152602160248201527f4272633230526f757465724c6f6769633a207472616e73666572206661696c656044820152601960fa1b606482015260840162000b68565b6000806000620012528c858c8c8c62002ddd565b925092509250845160001415620012c9577f9245034e6419d899e7a844e3ab8408df930d46c6588e4d7011bfa4a208175a9f338a8a878e868960a8548a600160a480549050620012a3919062004575565b604051620012bb9a9998979695949392919062003e4a565b60405180910390a162001357565b7ffef70b533aedc3db21a2f18be6e6e7d74414dc77b8a44dd9093afb569fbf12a0338a8a89896000815181106200131057634e487b7160e01b600052603260045260246000fd5b60200260200101518f878b8b60a8548c600160a48054905062001334919062004575565b6040516200134e9c9b9a9998979695949392919062003ece565b60405180910390a15b50505050620013666001606555565b5050505050505050565b6200137a62002a66565b7f31a8c4e62daac2a3ed5d713004d9ae867d6dcddfa35603db2a4b65d9236b1bc18282604051620013ad929190620042ff565b60405180910390a1600091825260a3602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b620013ed62002a66565b565b620013f962002a66565b600083815260a76020908152604091829020805460019091015483518781526001600160a01b039283169381019390935282840152841660608201526080810183905290517f23385740814648db624aa52a0c990fc42def14e1b04e7fe5b2bf87b85e1294529181900360a00190a16040805180820182526001600160a01b0393841681526020808201938452600095865260a790529320925183546001600160a01b031916921691909117825551600190910155565b620014ba62002a66565b6000818152609f60205260409020546001600160a01b0316156200151d5760405162461bcd60e51b8152602060048201526019602482015278109c98cc8c149bdd5d195c931bd9da58ce881d5cd959081a59603a1b604482015260640162000b68565b600073__$3051d2319114b404c645910e906e49ea84$__63dbf34f026040518163ffffffff1660e01b815260040160206040518083038186803b1580156200156457600080fd5b505af415801562001579573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200159f9190620035f5565b90506060600082620015b062001e51565b83604051620015bf90620032fe565b620015cd9392919062003df8565b604051809103906000f080158015620015ea573d6000803e3d6000fd5b50604051630b127b6360e11b815290915081906001600160a01b03821690631624f6c69062001622908a9081908b90600401620041fb565b600060405180830381600087803b1580156200163d57600080fd5b505af115801562001652573d6000803e3d6000fd5b5050604051634c1d96ab60e11b81526001600160a01b038416925063983b2d5691506200168490309060040162003dca565b600060405180830381600087803b1580156200169f57600080fd5b505af1158015620016b4573d6000803e3d6000fd5b5050604051637a231bdd60e11b81526001600160a01b038416925063f44637ba9150620016e690309060040162003dca565b600060405180830381600087803b1580156200170157600080fd5b505af115801562001716573d6000803e3d6000fd5b5050506000868152609f60205260409081902080546001600160a01b0319166001600160a01b0385161790555186915060a09062001756908a9062003dac565b9081526020016040518091039020819055507f20359fc049b8e035e3e74b3b4c6ba473d295e6a5b64ed7d1ba68a422d2ebe58e8787878488604051620017a195949392919062004238565b60405180910390a150505050505050565b620017bc62002a66565b6000818152609f60205260409020546001600160a01b03166200181f5760405162461bcd60e51b815260206004820152601a60248201527921393199182937baba32b92637b3b4b19d103737903a37b5b2b760311b604482015260640162000b68565b6000818152609f6020526040908190205490517fac0bcdf003615c60a0c51d67379bde3d2fb4aaeade0aa8ecd7a4f176389bf37f916200186b9184916001600160a01b031690620042ff565b60405180910390a16000818152609f60205260408082205481516306fdde0360e01b8152915160a0926001600160a01b03909216916306fdde039160048083019287929190829003018186803b158015620018c557600080fd5b505afa158015620018da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200190491908101906200398c565b60405162001913919062003dac565b9081526040805160209281900383019020929092556000928352609f9052902080546001600160a01b0319169055565b6200194d62002a66565b806127101015620019a15760405162461bcd60e51b815260206004820152601e60248201527f4272633230526f757465724c6f6769633a206f7574206f662072616e67650000604482015260640162000b68565b60995460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1609955565b620019ec62002b31565b609e546001600160a01b0316336001600160a01b03161462001a505760405162461bcd60e51b815260206004820152601c60248201527b21393199182937baba32b92637b3b4b19d103737ba103637b1b5b2b960211b604482015260640162000b68565b609754609c5460405163e291283d60e01b815260009273__$3051d2319114b404c645910e906e49ea84$__9263e291283d9262001aa992916001600160a01b0316908e908e908e908e908e908e908e90600401620043ab565b60206040518083038186803b15801562001ac257600080fd5b505af415801562001ad7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001afd9190620036fc565b905060005b825181101562001e445760a483828151811062001b2f57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811062001b5657634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102015460ff161562001bc55760405162461bcd60e51b815260206004820152602360248201527f4272633230526f757465724c6f6769633a20616c72656164792070726f6365736044820152621cd95960ea1b606482015260840162000b68565b600160a484838151811062001bea57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811062001c1157634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000160006101000a81548160ff0219169083151502179055507f08119c760cc375c1dd147b186911ded607af85895d04b3c92c86e1be0cc0e53360a484838151811062001c7d57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811062001ca457634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040160009054906101000a90046001600160a01b031660a485848151811062001cec57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811062001d1357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016002015460a486858151811062001d4857634e487b7160e01b600052603260045260246000fd5b60200260200101518154811062001d6f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160a487868151811062001da357634e487b7160e01b600052603260045260246000fd5b60200260200101518154811062001dca57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160060160009054906101000a900460ff1687868151811062001e0a57634e487b7160e01b600052603260045260246000fd5b60200260200101518760405162001e279695949392919062004018565b60405180910390a18062001e3b81620045ff565b91505062001b02565b5050620013666001606555565b6033546001600160a01b031690565b62001e6a62002a66565b60a85460408051918252602082018390527f24a1cf21e7b4eac23dffa41704078ed28bbe2a42187f6aa014899c5413cd01b7910160405180910390a160a855565b806001600160a01b03811662001ed55760405162461bcd60e51b815260040162000b68906200427d565b62001edf62002a66565b7f150b77d21bd499fd0dccea9fe32513c7b65aa34ccde41e7dafac74ace8e19c9460a660019054906101000a90046001600160a01b03168360405162001f2792919062003dde565b60405180910390a15060a680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600081815260a2602052604081205460ff1662000b3557600062000b38565b62001f8162002a66565b815162001f969060a59060208501906200330c565b5060a6805482919060ff1916600183600581111562001fc557634e487b7160e01b600052602160045260246000fd5b02179055505050565b806001600160a01b03811662001ff85760405162461bcd60e51b815260040162000b68906200427d565b6200200262002a66565b609c546040517f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f49162002043916001600160a01b0390911690859062003dde565b60405180910390a150609c80546001600160a01b0319166001600160a01b0392909216919091179055565b6200207862002b31565b60a65461010090046001600160a01b0316336001600160a01b031614620020e25760405162461bcd60e51b815260206004820181905260248201527f4272633230526f757465724c6f6769633a206e6f742074656c65706f72746572604482015260640162000b68565b600073__$3051d2319114b404c645910e906e49ea84$__63e291283d609754609c60009054906101000a90046001600160a01b03168e8e8e8e8e8e8e8e8e6040518c63ffffffff1660e01b8152600401620021489b9a9998979695949392919062004316565b60206040518083038186803b1580156200216157600080fd5b505af415801562002176573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200219c9190620036fc565b905060008060008073__$3051d2319114b404c645910e906e49ea84$__6314e3f5ba6098548f8f8960a2609f60a7609954609a546040518a63ffffffff1660e01b8152600401620021f6999897969594939291906200443c565b60c06040518083038186803b1580156200220f57600080fd5b505af415801562002224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200224a919062003b08565b9350935093509350806001600160a01b03166340c10f1930868660400151876020015188600001516200227e91906200455a565b6200228a91906200455a565b6200229691906200455a565b6040518363ffffffff1660e01b8152600401620022b592919062003f60565b602060405180830381600087803b158015620022d057600080fd5b505af1158015620022e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200230b919062003614565b50609d54835160405163a9059cbb60e01b81526001600160a01b038481169363a9059cbb936200234393929091169160040162003f60565b602060405180830381600087803b1580156200235e57600080fd5b505af115801562002373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002399919062003614565b50609e54602084015160405163a9059cbb60e01b81526001600160a01b038481169363a9059cbb93620023d493929091169160040162003f60565b602060405180830381600087803b158015620023ef57600080fd5b505af115801562002404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200242a919062003614565b506001600160a01b03821615620024c657604080840151905163a9059cbb60e01b81526001600160a01b0383169163a9059cbb916200246e91869160040162003f60565b602060405180830381600087803b1580156200248957600080fd5b505af11580156200249e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024c4919062003614565b505b600085815260a26020908152604091829020825161016081018452815460ff16151581526001820154928101929092526002810154928201839052600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006820154811660c0840152600782015460e084015260088201546101008401526009820154610120840152600a909101541661014082015290620026415760c081015160405163a9059cbb60e01b81526001600160a01b0384169163a9059cbb916200259d9190899060040162003f60565b602060405180830381600087803b158015620025b857600080fd5b505af1158015620025cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025f3919062003614565b507ff5174e3d205e90d004603fff7abb7ca825930316da524c695d7fc44743d46b3f8160c00151868487878b604051620026339695949392919062003f79565b60405180910390a1620028c4565b8060a001516001600160a01b0316876000815181106200267157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316148015620026dd57508061014001516001600160a01b03168760018951620026ab919062004575565b81518110620026ca57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b620027295760405162461bcd60e51b815260206004820152601b60248201527a084eae4dca4deeae8cae498deced2c67440eee4dedcce40e0c2e8d602b1b604482015260640162000b68565b6000806200274883604001518460c00151898661012001518d62002b8d565b915091508115620027e0577fca04ecaf3fb275dc79a794a25203551513f694ae5cfb19961592fb03b5871bfa8360c00151888684600186516200278c919062004575565b81518110620027ab57634e487b7160e01b600052603260045260246000fd5b60200260200101518761014001518b8b8f604051620027d298979695949392919062003fbf565b60405180910390a1620028c1565b7fe73bd25650ca980817885f0860ecd707a8d13f5cb6290e06e8e764e50418e5cc8360c0015188868661012001518761014001518b8b8f6040516200282d98979695949392919062003fbf565b60405180910390a160c083015160405163a9059cbb60e01b81526001600160a01b0386169163a9059cbb916200286991908b9060040162003f60565b602060405180830381600087803b1580156200288457600080fd5b505af115801562002899573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028bf919062003614565b505b50505b505050505050620028d56001606555565b50505050505050505050565b806001600160a01b0381166200290b5760405162461bcd60e51b815260040162000b68906200427d565b6200291562002a66565b5060a980546001600160a01b0319166001600160a01b0392909216919091179055565b6200294262002a66565b609855565b806001600160a01b038116620029715760405162461bcd60e51b815260040162000b68906200427d565b6200297b62002a66565b609d546040517f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591620029bc916001600160a01b0390911690859062003dde565b60405180910390a150609d80546001600160a01b0319166001600160a01b0392909216919091179055565b620029f162002a66565b6001600160a01b03811662002a585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000b68565b62002a63816200312c565b50565b3362002a7162001e51565b6001600160a01b031614620013ed5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000b68565b600054610100900460ff1662002af35760405162461bcd60e51b815260040162000b6890620042b4565b620013ed6200317e565b600054610100900460ff1662002b275760405162461bcd60e51b815260040162000b6890620042b4565b620013ed620031b3565b6002606554141562002b865760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000b68565b6002606555565b600085815260a360205260408120546060906001600160a01b03168062002bf75760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a20696e76616c69642061707049640000604482015260640162000b68565b8360008151811062002c1957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663095ea7b382886040518363ffffffff1660e01b815260040162002c5092919062003f60565b602060405180830381600087803b15801562002c6b57600080fd5b505af115801562002c80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ca6919062003614565b506040516326d2f28960e21b81526001600160a01b03821690639b4bca249062002cd590879060040162004167565b60206040518083038186803b15801562002cee57600080fd5b505afa15801562002d03573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d29919062003614565b1562002dcd5760405163161779b160e31b81526001600160a01b0382169063b0bbcd889062002d68908990899089908d9042906001906004016200448d565b600060405180830381600087803b15801562002d8357600080fd5b505af115801562002d98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002dc2919081019062003631565b909350915062002dd2565b600092505b509550959350505050565b62002e0260405180606001604052806000815260200160008152602001600081525090565b60008073__$3051d2319114b404c645910e906e49ea84$__63020c8d9733609954609a5460a460a78e8d8d8d6040518a63ffffffff1660e01b815260040162002e5499989796959493929190620040fe565b60a06040518083038186803b15801562002e6d57600080fd5b505af415801562002e82573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ea8919062003a68565b609b80549396509194509250600062002ec183620045ff565b9091555050609d54835160405163a9059cbb60e01b81526001600160a01b038a81169363a9059cbb9362002efd93929091169160040162003f60565b602060405180830381600087803b15801562002f1857600080fd5b505af115801562002f2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f53919062003614565b50609e54602084015160405163a9059cbb60e01b81526001600160a01b038a81169363a9059cbb9362002f8e93929091169160040162003f60565b602060405180830381600087803b15801562002fa957600080fd5b505af115801562002fbe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fe4919062003614565b50609e5460a85462003000916001600160a01b031690620031dd565b6001600160a01b038216156200309b57604080840151905163a9059cbb60e01b81526001600160a01b0389169163a9059cbb916200304391869160040162003f60565b602060405180830381600087803b1580156200305e57600080fd5b505af115801562003073573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003099919062003614565b505b604051630852cd8d60e31b8152600481018290526001600160a01b038816906342966c6890602401602060405180830381600087803b158015620030de57600080fd5b505af1158015620030f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003119919062003614565b50955095509592505050565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620031a85760405162461bcd60e51b815260040162000b6890620042b4565b620013ed336200312c565b600054610100900460ff16620031255760405162461bcd60e51b815260040162000b6890620042b4565b804710156200322f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640162000b68565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146200327e576040519150601f19603f3d011682016040523d82523d6000602084013e62003283565b606091505b5050905080620032f95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606482015260840162000b68565b505050565b610f2c806200466083390190565b8280546200331a90620045c2565b90600052602060002090601f0160209004810192826200333e576000855562003389565b82601f106200335957805160ff191683800117855562003389565b8280016001018555821562003389579182015b82811115620033895782518255916020019190600101906200336c565b50620033979291506200339b565b5090565b5b808211156200339757600081556001016200339c565b600082601f830112620033c3578081fd5b81356020620033dc620033d6836200450a565b620044d7565b80838252828201915082860187848660051b8901011115620033fc578586fd5b855b8581101562003427578135620034148162004649565b84529284019290840190600101620033fe565b5090979650505050505050565b600082601f83011262003445578081fd5b8135602062003458620033d6836200450a565b80838252828201915082860187848660051b890101111562003478578586fd5b855b8581101562003427578135845292840192908401906001016200347a565b80518015158114620034a957600080fd5b919050565b80356001600160e01b031981168114620034a957600080fd5b60008083601f840112620034d9578182fd5b5081356001600160401b03811115620034f0578182fd5b6020830191508360208285010111156200350957600080fd5b9250929050565b600082601f83011262003521578081fd5b813562003532620033d68262004530565b81815284602083860101111562003547578283fd5b816020850160208301379081016020019190915292915050565b803560068110620034a957600080fd5b60006060828403121562003583578081fd5b604051606081016001600160401b0381118282101715620035a857620035a862004633565b80604052508091508251815260208301516020820152604083015160408201525092915050565b600060208284031215620035e1578081fd5b8135620035ee8162004649565b9392505050565b60006020828403121562003607578081fd5b8151620035ee8162004649565b60006020828403121562003626578081fd5b620035ee8262003498565b6000806040838503121562003644578081fd5b6200364f8362003498565b602084810151919350906001600160401b038111156200366d578283fd5b8401601f810186136200367e578283fd5b80516200368f620033d6826200450a565b80828252848201915084840189868560051b8701011115620036af578687fd5b8694505b83851015620036d3578051835260019490940193918501918501620036b3565b5080955050505050509250929050565b600060208284031215620036f5578081fd5b5035919050565b6000602082840312156200370e578081fd5b5051919050565b6000806000806000806000806000806101008b8d03121562003735578586fd5b620037408b620034ae565b995060208b01356001600160401b03808211156200375c578788fd5b6200376a8e838f0162003510565b9a5060408d013591508082111562003780578788fd5b6200378e8e838f01620034c7565b909a509850889150620037a460608e01620034ae565b975060808d0135965060a08d0135915080821115620037c1578586fd5b620037cf8e838f01620034c7565b909650945060c08d0135935060e08d0135915080821115620037ef578283fd5b50620037fe8d828e01620033b2565b9150509295989b9194979a5092959850565b600080600080600080600080610100898b0312156200382d578182fd5b6200383889620034ae565b975060208901356001600160401b038082111562003854578384fd5b620038628c838d0162003510565b985060408b013591508082111562003878578384fd5b620038868c838d0162003510565b97506200389660608c01620034ae565b965060808b0135955060a08b0135915080821115620038b3578384fd5b620038c18c838d0162003510565b945060c08b0135935060e08b0135915080821115620038de578283fd5b50620038ed8b828c0162003434565b9150509295985092959890939650565b6000806040838503121562003910578182fd5b82356001600160401b0381111562003926578283fd5b620039348582860162003510565b925050620039456020840162003561565b90509250929050565b60006020828403121562003960578081fd5b81356001600160401b0381111562003976578182fd5b620039848482850162003510565b949350505050565b6000602082840312156200399e578081fd5b81516001600160401b03811115620039b4578182fd5b8201601f81018413620039c5578182fd5b8051620039d6620033d68262004530565b818152856020838501011115620039eb578384fd5b620039fe8260208301602086016200458f565b95945050505050565b60008060006060848603121562003a1c578081fd5b83356001600160401b0381111562003a32578182fd5b62003a408682870162003510565b935050602084013560ff8116811462003a57578182fd5b929592945050506040919091013590565b600080600060a0848603121562003a7d578081fd5b62003a89858562003571565b9250606084015162003a9b8162004649565b80925050608084015190509250925092565b6000806040838503121562003ac0578182fd5b82359150602083013562003ad48162004649565b809150509250929050565b60008060006060848603121562003af4578081fd5b83359250602084013562003a578162004649565b60008060008060c0858703121562003b1e578182fd5b8451935062003b31866020870162003571565b9250608085015162003b438162004649565b60a086015190925062003b568162004649565b939692955090935050565b6000806000806000806000806000806101408b8d03121562003b81578384fd5b8a35995060208b0135985060408b0135975060608b013562003ba38162004649565b965060808b013562003bb58162004649565b955060a08b01356001600160401b0381111562003bd0578485fd5b62003bde8d828e0162003510565b95505062003bef60c08c0162003561565b935060e08b013562003c018162004649565b92506101008b013562003c148162004649565b91506101208b013562003c278162004649565b809150509295989b9194979a5092959850565b600080600080600080600080610100898b03121562003c57578182fd5b88359750602089013596506040890135955060608901356001600160401b038082111562003c83578384fd5b62003c918c838d0162003510565b965062003ca160808c0162003561565b955060a08b0135945060c08b0135935060e08b013591508082111562003cc5578283fd5b50620038ed8b828c01620033b2565b6000815180845260208085019450808401835b8381101562003d0e5781516001600160a01b03168752958201959082019060010162003ce7565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845262003d5c8160208601602086016200458f565b601f01601f19169290920160200192915050565b6006811062003d8f57634e487b7160e01b600052602160045260246000fd5b9052565b8051825260208082015190830152604090810151910152565b6000825162003dc08184602087016200458f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03848116825283166020820152606060408201819052600090620039fe9083018462003d42565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038b811682526101806020830181905260009162003e728483018e62003d42565b925062003e83604085018d62003d70565b808b1660608501528960808501528860a085015262003ea660c085018962003d93565b866101208501528086166101408501525050826101608301529b9a5050505050505050505050565b600060018060a01b03808f1683526101c0602084015262003ef46101c084018f62003d42565b915062003f05604084018e62003d70565b8b6060840152808b1660808401528960a08401528860c084015280881660e084015262003f3761010084018862003d93565b8561016084015280851661018084015250826101a08301529d9c50505050505050505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03878116825260208201879052858116604083015261010082019062003faa606084018762003d93565b9390931660c082015260e00152949350505050565b6001600160a01b03898116825260208201899052878116604083015260608201879052858116608083015261014082019062003fff60a084018762003d93565b9390931661010082015261012001529695505050505050565b6001600160a01b0387168152602080820187905260c060408301528554600091908290600181811c90828116806200405157607f831692505b8583108114156200407057634e487b7160e01b87526022600452602487fd5b60c0880183905260e08801818015620040925760018114620040a457620040d0565b60ff19861682528782019650620040d0565b60008e815260209020895b86811015620040ca57815484820152908501908901620040af565b83019750505b5050505050508092505050620040ea606083018662003d70565b608082019390935260a00152949350505050565b600061012060018060a01b038c1683528a60208401528960408401528860608401528760808401528660a08401528560c08401528060e0840152620041468184018662003d42565b9150506200415961010083018462003d70565b9a9950505050505050505050565b602081526000620035ee602083018462003cd4565b871515815286602082015285604082015284606082015260018060a01b038416608082015260e060a08201526000620041b960e083018562003d42565b9050620041ca60c083018462003d70565b98975050505050505050565b602081526000620035ee602083018462003d42565b6020810162000b38828462003d70565b60608152600062004210606083018662003d42565b828103602084015262004224818662003d42565b91505060ff83166040830152949350505050565b60a0815260006200424d60a083018862003d42565b60ff9690961660208301525060408101939093526001600160a01b03918216606084015216608090910152919050565b6020808252601e908201527f4272633230526f757465724c6f6769633a207a65726f20616464726573730000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b9182526001600160a01b0316602082015260400190565b8b81526001600160a01b038b1660208201526001600160e01b03198a8116604083015261012060608301819052600091620043548483018d62003d42565b915083820360808501526200436b828b8d62003d19565b915080891660a0850152508660c084015282810360e08401526200439181868862003d19565b915050826101008301529c9b505050505050505050505050565b8981526001600160a01b03891660208201526001600160e01b0319888116604083015261012060608301819052600091620043e98483018b62003d42565b91508382036080850152620043ff828a62003d42565b915080881660a0850152508560c084015282810360e084015262004424818662003d42565b915050826101008301529a9950505050505050505050565b60006101008b8352806020840152620044598184018b8d62003d19565b604084019990995250506060810195909552608085019390935260a084019190915260c083015260e0909101529392505050565b86815285602082015260c060408201526000620044ae60c083018762003cd4565b6001600160a01b03959095166060830152506080810192909252151560a0909101529392505050565b604051601f8201601f191681016001600160401b038111828210171562004502576200450262004633565b604052919050565b60006001600160401b0382111562004526576200452662004633565b5060051b60200190565b60006001600160401b038211156200454c576200454c62004633565b50601f01601f191660200190565b600082198211156200457057620045706200461d565b500190565b6000828210156200458a576200458a6200461d565b500390565b60005b83811015620045ac57818101518382015260200162004592565b83811115620045bc576000848401525b50505050565b600181811c90821680620045d757607f821691505b60208210811415620045f957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200461657620046166200461d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462002a6357600080fdfe608060405260405162000f2c38038062000f2c8339810160408190526200002691620004e0565b82828282816200005860017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6200060f565b60008051602062000ee5833981519152146200008457634e487b7160e01b600052600160045260246000fd5b620000928282600062000105565b50620000c2905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046200060f565b60008051602062000ec583398151915214620000ee57634e487b7160e01b600052600160045260246000fd5b620000f98262000142565b50505050505062000678565b62000110836200019d565b6000825111806200011e5750805b156200013d576200013b8383620001df60201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200016d6200020e565b604080516001600160a01b03928316815291841660208301520160405180910390a16200019a8162000247565b50565b620001a881620002fc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606062000207838360405180606001604052806027815260200162000f05602791396200039f565b9392505050565b60006200023860008051602062000ec583398151915260001b6200047c60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002b25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002db60008051602062000ec583398151915260001b6200047c60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b62000312816200047f60201b6200028c1760201c565b620003765760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620002a9565b80620002db60008051602062000ee583398151915260001b6200047c60201b620002081760201c565b6060833b620004005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620002a9565b600080856001600160a01b0316856040516200041d9190620005bc565b600060405180830381855af49150503d80600081146200045a576040519150601f19603f3d011682016040523d82523d6000602084013e6200045f565b606091505b5090925090506200047282828662000485565b9695505050505050565b90565b3b151590565b606083156200049657508162000207565b825115620004a75782518084602001fd5b8160405162461bcd60e51b8152600401620002a99190620005da565b80516001600160a01b0381168114620004db57600080fd5b919050565b600080600060608486031215620004f5578283fd5b6200050084620004c3565b92506200051060208501620004c3565b60408501519092506001600160401b03808211156200052d578283fd5b818601915086601f83011262000541578283fd5b81518181111562000556576200055662000662565b604051601f8201601f19908116603f0116810190838211818310171562000581576200058162000662565b816040528281528960208487010111156200059a578586fd5b620005ad83602083016020880162000633565b80955050505050509250925092565b60008251620005d081846020870162000633565b9190910192915050565b6020815260008251806020840152620005fb81604085016020870162000633565b601f01601f19169190910160400192915050565b6000828210156200062e57634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156200065057818101518382015260200162000636565b838111156200013b5750506000910152565b634e487b7160e01b600052604160045260246000fd5b61083d80620006886000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461068e565b610118565b61005b6100933660046106a8565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461068e565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610380565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610380915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103ab565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107e1602791396103ff565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104d3565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60006000805160206107a18339815191525b546001600160a01b0316919050565b610389836104e9565b6000825111806103965750805b156101c3576103a58383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103d461035f565b604080516001600160a01b03928316815291841660208301520160405180910390a161015481610529565b6060833b61045e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b0316856040516104799190610725565b600060405180830381855af49150503d80600081146104b4576040519150601f19603f3d011682016040523d82523d6000602084013e6104b9565b606091505b50915091506104c98282866105c0565b9695505050505050565b60006000805160206107c1833981519152610371565b6104f2816105f9565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b03811661058e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b806000805160206107a18339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105cf575081610285565b8251156105df5782518084602001fd5b8160405162461bcd60e51b81526004016103289190610741565b803b61065d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b806000805160206107c183398151915261059f565b80356001600160a01b038116811461068957600080fd5b919050565b60006020828403121561069f578081fd5b61028582610672565b6000806000604084860312156106bc578182fd5b6106c584610672565b925060208401356001600160401b03808211156106e0578384fd5b818601915086601f8301126106f3578384fd5b813581811115610701578485fd5b876020828501011115610712578485fd5b6020830194508093505050509250925092565b60008251610737818460208701610774565b9190910192915050565b6020815260008251806020840152610760816040850160208701610774565b601f01601f19169190910160400192915050565b60005b8381101561078f578181015183820152602001610777565b838111156103a5575050600091015256feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a08887e878dff12a030e39cd6d4f29ea9a216219710849bebd240087a169424e64736f6c63430008040033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122061dfc0c83fcfeb25fcfacce4d2ed12eb5787108d19146f1028ee5b3d92ac3c7d64736f6c63430008040033",
  "libraries": {
    "Brc20RouterLib": "0x10d3cd258ec981eba81715190660c56387f278D0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBrc20(string,uint8,uint256)": {
        "details": "We assign tokenId to a supported BRC20"
      },
      "initialize(uint256,uint256,uint256,address,address,bytes,uint8,address,address,address)": {
        "params": {
          "_chainId": "Id of the underlying chain",
          "_locker": "TODO",
          "_protocolPercentageFee": "Percentage amount of protocol fee (min: %0.01)",
          "_relay": "Bitcoin bridge address which validates Bitcoin tx",
          "_startingBlockNumber": "Requests included in a block older than _startingBlockNumber cannot be processed",
          "_treasury": "Address of treasury that collects protocol fees"
        }
      },
      "isWrapRequestProcessed(bytes32)": {
        "params": {
          "_txId": "of the request on Bitcoin"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExchangeConnector(uint256,address)": {
        "details": "If address(0) is set for an appId, that appId is inactive"
      },
      "setUnwrapFee(uint256)": {
        "details": "This fee is taken for unwrap requests to cover the Bitcoin network fee"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unwrapBrc20(uint256,uint256,uint256,bytes,uint8,uint256,uint256,address[])": {
        "details": "For unwrap requests (not swap & unwrap), pass _appId,       _inputAmount and _path ZERO",
        "params": {
          "_amount": "of WBRC20 that user wants to burn",
          "_scriptType": "User script type",
          "_userScript": "User script hash"
        }
      },
      "wrapBrc20(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address[])": {
        "details": "Locker submits wrap requests to this function for:      1) Checking tx inclusion      2) Extracting wrap request info from the OP_RETURN output      3) Exchanging wrapped BRC20 (if request is wrap & exchange) using the path          provided by the locker",
        "params": {
          "_blockNumber": "that includes the tx",
          "_index": "of tx in the block",
          "_intermediateNodes": "Merkle proof for tx",
          "_locktime": "Tx locktime",
          "_version": "of Bitcoin tx",
          "_vin": "Tx inputs",
          "_vout": "Tx outputs"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Brc20Removed(uint256,address)": {
        "notice": "Emit when BRC20 removed"
      },
      "FailedWrapAndSwap(address,uint256,address,uint256,address,(uint256,uint256,uint256),address,bytes32)": {
        "notice": "Emit when a wrap&swap request is processed but swap failed"
      },
      "NewBrc20(string,uint256,uint256,address,address)": {
        "notice": "Emit when new BRC20 added"
      },
      "NewLocker(address,address)": {
        "notice": "Emit when locker address updated"
      },
      "NewProtocolPercentageFee(uint256,uint256)": {
        "notice": "Emit when protocol fee updated"
      },
      "NewRelay(address,address)": {
        "notice": "Emit when relay address updated"
      },
      "NewTeleporter(address,address)": {
        "notice": "Emit when teleporter address updated"
      },
      "NewTreasury(address,address)": {
        "notice": "Emit when treasury address updated"
      },
      "NewUnwrap(address,bytes,uint8,address,uint256,uint256,(uint256,uint256,uint256),uint256,address,uint256)": {
        "notice": "Emit when a new unwrap request is created"
      },
      "NewUnwrapAndSwap(address,bytes,uint8,uint256,address,uint256,uint256,address,(uint256,uint256,uint256),uint256,address,uint256)": {
        "notice": "Emit when a new unwrap&swap request is created"
      },
      "NewWrap(address,uint256,address,(uint256,uint256,uint256),address,bytes32)": {
        "notice": "Emit when a wrap request is processed"
      },
      "NewWrapAndSwap(address,uint256,address,uint256,address,(uint256,uint256,uint256),address,bytes32)": {
        "notice": "Emit when a wrap&swap request is processed"
      },
      "SetExchangeConnector(uint256,address)": {
        "notice": "Emits when appId for an exchange connector is set"
      },
      "ThirdPartyInfoUpdated(uint256,address,uint256,address,uint256)": {
        "notice": "Emit when third party fee updated"
      },
      "UnwrapFeeUpdated(uint256,uint256)": {
        "notice": "Emit when unwrap fee updated"
      },
      "UnwrapProcessed(address,uint256,bytes,uint8,uint256,bytes32)": {
        "notice": "Emit when a unwrap request is processed"
      }
    },
    "kind": "user",
    "methods": {
      "addBrc20(string,uint8,uint256)": {
        "notice": "Deploy wrapped BRC20 token contract"
      },
      "initialize(uint256,uint256,uint256,address,address,bytes,uint8,address,address,address)": {
        "notice": "Initialize the contract"
      },
      "isUnwrapRequestProcessed(uint256)": {
        "notice": "Check if the unwrap request has been processed before"
      },
      "isWrapRequestProcessed(bytes32)": {
        "notice": "Check if the wrap request has been processed before"
      },
      "removeBrc20(uint256)": {
        "notice": "Remove support of a wrapped BRC20 token"
      },
      "setChainId(uint256)": {
        "notice": "Setter for chainId"
      },
      "setExchangeConnector(uint256,address)": {
        "notice": "Set exchange connector for appId"
      },
      "setLocker(address)": {
        "notice": "Setter for locker"
      },
      "setLockerLockingScript(bytes,uint8)": {
        "notice": "Setter for locker locking script"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Setter for protocol percentage fee"
      },
      "setRelay(address)": {
        "notice": "Setter for Bitcoin relay"
      },
      "setStartingBlockNumber(uint256)": {
        "notice": "Setter for starting block number"
      },
      "setTeleporter(address)": {
        "notice": "Setter for teleporter"
      },
      "setThirdParty(uint256,address,uint256)": {
        "notice": "Setter for third party address and fee"
      },
      "setTreasury(address)": {
        "notice": "Setter for treasury"
      },
      "setUnwrapFee(uint256)": {
        "notice": "Setter for unwrap fee"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Setter for wrapped native token"
      },
      "unwrapBrc20(uint256,uint256,uint256,bytes,uint8,uint256,uint256,address[])": {
        "notice": "Process user unwrap request"
      },
      "unwrapProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,uint256[])": {
        "notice": "Check proof of unwraping"
      },
      "wrapBrc20(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address[])": {
        "notice": "Process wrap BRC20 request"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1482,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 316,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 385,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9459,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "startingBlockNumber",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 9462,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "chainId",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 9465,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 9467,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "lockerPercentageFee",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 9469,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "unwrapCounter",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 9472,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "relay",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 9475,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "treasury",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 9478,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "locker",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 9482,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "supportedBrc20s",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9486,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "tokenIds",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 9490,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "unwrapFees",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 9495,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "brc20WrapRequests",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_bytes32,t_struct(brc20WrapRequest)9550_storage)"
      },
      {
        "astId": 9500,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "exchangeConnector",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9504,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "brc20UnwrapRequests",
        "offset": 0,
        "slot": "164",
        "type": "t_array(t_struct(brc20UnwrapRequest)9566_storage)dyn_storage"
      },
      {
        "astId": 9507,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "lockerLockingScript",
        "offset": 0,
        "slot": "165",
        "type": "t_bytes_storage"
      },
      {
        "astId": 9511,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "lockerScriptType",
        "offset": 0,
        "slot": "166",
        "type": "t_enum(ScriptTypes)7312"
      },
      {
        "astId": 9514,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "teleporter",
        "offset": 1,
        "slot": "166",
        "type": "t_address"
      },
      {
        "astId": 9519,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "thirdParties",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_uint256,t_struct(thirdParty)9571_storage)"
      },
      {
        "astId": 9521,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "unwrapFee",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 9523,
        "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "169",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(brc20UnwrapRequest)9566_storage)dyn_storage": {
        "base": "t_struct(brc20UnwrapRequest)9566_storage",
        "encoding": "dynamic_array",
        "label": "struct IBrc20Router.brc20UnwrapRequest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)7312": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(brc20WrapRequest)9550_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IBrc20Router.brc20WrapRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(brc20WrapRequest)9550_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(thirdParty)9571_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBrc20Router.thirdParty)",
        "numberOfBytes": "32",
        "value": "t_struct(thirdParty)9571_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(brc20UnwrapRequest)9566_storage": {
        "encoding": "inplace",
        "label": "struct IBrc20Router.brc20UnwrapRequest",
        "members": [
          {
            "astId": 9552,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "isProcessed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9554,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9556,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "burntAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9558,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "appId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9560,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "sender",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9562,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "userScript",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          },
          {
            "astId": 9565,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "scriptType",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ScriptTypes)7312"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(brc20WrapRequest)9550_storage": {
        "encoding": "inplace",
        "label": "struct IBrc20Router.brc20WrapRequest",
        "members": [
          {
            "astId": 9529,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "isUsed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9531,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9533,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "appId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9535,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "tokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9537,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "inputAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9539,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "inputToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 9541,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "recipientAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 9543,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "thirdPartyId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9545,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "fee",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9547,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "outputAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 9549,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "outputToken",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(thirdParty)9571_storage": {
        "encoding": "inplace",
        "label": "struct IBrc20Router.thirdParty",
        "members": [
          {
            "astId": 9568,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "thirdPartyAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9570,
            "contract": "contracts/brc20_router/Brc20RouterLogic.sol:Brc20RouterLogic",
            "label": "thirdPartyFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}