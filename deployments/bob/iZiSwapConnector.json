{
  "address": "0xc17e3b03419F5E2673e5271fB84Cd7f47338f4ab",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "convertedPath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "packedData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeTier",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getExactInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "getExactOutput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "getSwapRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_swapRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoterAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "isPathValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        }
      ],
      "name": "setExchangeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_firstToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondToken",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_feeTier",
          "type": "uint24"
        }
      ],
      "name": "setFeeTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLiquidityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quoterAddress",
          "type": "address"
        }
      ],
      "name": "setQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isFixedToken",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39708ca5dc84d59483e7e7fb900fa39006cd0db62cb9ce66e850173a8e530baa",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0xc17e3b03419F5E2673e5271fB84Cd7f47338f4ab",
    "transactionIndex": 3,
    "gasUsed": "2195196",
    "logsBloom": "0x
    "blockHash": "0x783c83db2e597561302896a992687fae57831ebb952685f49fb893bcdd9ae0b5",
    "transactionHash": "0x39708ca5dc84d59483e7e7fb900fa39006cd0db62cb9ce66e850173a8e530baa",
    "logs": [],
    "blockNumber": 7778274,
    "cumulativeGasUsed": "2521207",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "572d3a9a64d3d3067254d9e4c768a8a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"convertedPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"packedData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTier\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"getExactOutput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoterAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"isPathValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"}],\"name\":\"setExchangeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_feeTier\",\"type\":\"uint24\"}],\"name\":\"setFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLiquidityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoterAddress\",\"type\":\"address\"}],\"name\":\"setQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExactInput(address[],uint256)\":{\"details\":\"Return (false, 0) if DEX cannot swap the input amount\"},\"getExactOutput(address[],uint256)\":{\"details\":\"Return (false, 0) if DEX cannot give the output amount\"},\"getSwapRate(address[],uint256)\":{\"details\":\"Decimal determines the precision of the swap rate\"},\"initialize(string,address,address)\":{\"params\":{\"_exchangeRouter\":\"Address of the DEX router contract\",\"_name\":\"Name of the underlying DEX\"}},\"isPathValid(address[])\":{\"params\":{\"_path\":\"List of tokens that are used for exchanging\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExchangeRouter(address)\":{\"details\":\"Set address of liquidity pool factory from the exchange router\",\"params\":{\"_exchangeRouter\":\"Address of the new exchange router contract\"}},\"setFeeTier(address,address,uint24)\":{\"details\":\"We set the fee tier that is used for exchanging tokens\"},\"setLiquidityPoolFactory()\":{\"details\":\"Set address from exchange router\"},\"setWrappedNativeToken()\":{\"details\":\"Get address from exchange router\"},\"swap(uint256,uint256,address[],address,uint256,bool)\":{\"details\":\"Check exchange conditions before exchanging      We assume that the input token is not WETH (it is teleBTC)\",\"params\":{\"_deadline\":\"Deadline of exchanging tokens\",\"_inputAmount\":\"Amount of input token\",\"_isFixedToken\":\"True if the input token amount is fixed\",\"_outputAmount\":\"Amount of output token\",\"_path\":\"List of tokens that are used for exchanging\",\"_to\":\"Receiver address\"},\"returns\":{\"_amounts\":\"Amounts of tokens that are involved in exchanging\",\"_result\":\"True if the exchange is successful\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExactInput(address[],uint256)\":{\"notice\":\"Return the output amount for the given input amount\"},\"getExactOutput(address[],uint256)\":{\"notice\":\"Return the needed input amount to get the output amount\"},\"getInputAmount(uint256,address,address)\":{\"notice\":\"Deprecated for v3\"},\"getOutputAmount(uint256,address,address)\":{\"notice\":\"Deprecated for v3\"},\"getSwapRate(address[],uint256)\":{\"notice\":\"Return the swap rate between two tokens\"},\"initialize(string,address,address)\":{\"notice\":\"This contract is used for interacting with UniswapV3 contract\"},\"isPathValid(address[])\":{\"notice\":\"Return true if the exchange path is valid\"},\"setExchangeRouter(address)\":{\"notice\":\"Setter for exchange router\"},\"setFeeTier(address,address,uint24)\":{\"notice\":\"Setter for fee tier\"},\"setLiquidityPoolFactory()\":{\"notice\":\"Setter for liquidity pool factory\"},\"setQuoter(address)\":{\"notice\":\"Setter for quoter\"},\"setWrappedNativeToken()\":{\"notice\":\"Setter for wrapped native token\"},\"swap(uint256,uint256,address[],address,uint256,bool)\":{\"notice\":\"Exchange input token for output token through exchange router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dex_connectors/iZiSwapConnector.sol\":\"iZiSwapConnector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@izumifinance/iziswap_core/contracts/iZiSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IiZiSwapPool.sol\\\";\\nimport \\\"./interfaces/IiZiSwapFactory.sol\\\";\\nimport \\\"./interfaces/IiZiSwapFlashCallback.sol\\\";\\nimport \\\"./interfaces/IiZiSwapCallback.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\n\\nimport \\\"./libraries/Liquidity.sol\\\";\\nimport \\\"./libraries/Point.sol\\\";\\nimport \\\"./libraries/PointBitmap.sol\\\";\\nimport \\\"./libraries/LogPowMath.sol\\\";\\nimport \\\"./libraries/MulDivMath.sol\\\";\\nimport \\\"./libraries/TwoPower.sol\\\";\\nimport \\\"./libraries/LimitOrder.sol\\\";\\nimport \\\"./libraries/AmountMath.sol\\\";\\nimport \\\"./libraries/UserEarn.sol\\\";\\nimport \\\"./libraries/TokenTransfer.sol\\\";\\nimport \\\"./libraries/State.sol\\\";\\nimport \\\"./libraries/Oracle.sol\\\";\\nimport \\\"./libraries/OrderOrEndpoint.sol\\\";\\nimport \\\"./libraries/SwapMathY2X.sol\\\";\\nimport \\\"./libraries/SwapMathX2Y.sol\\\";\\n\\ncontract iZiSwapPool is IiZiSwapPool {\\n\\n    using Liquidity for mapping(bytes32 =>Liquidity.Data);\\n    using Liquidity for Liquidity.Data;\\n    using Point for mapping(int24 =>Point.Data);\\n    using Point for Point.Data;\\n    using PointBitmap for mapping(int16 =>uint256);\\n    using LimitOrder for LimitOrder.Data;\\n    using UserEarn for UserEarn.Data;\\n    using UserEarn for mapping(bytes32 =>UserEarn.Data);\\n    using Oracle for Oracle.Observation[65535];\\n    using OrderOrEndpoint for mapping(int24 =>int24);\\n\\n    int24 internal constant LEFT_MOST_PT = -800000;\\n    int24 internal constant RIGHT_MOST_PT = 800000;\\n\\n    /// @notice left most point regularized by pointDelta\\n    int24 public leftMostPt;\\n    /// @notice right most point regularized by pointDelta\\n    int24 public rightMostPt;\\n    /// @notice maximum liquidSum for each point, see points() in IiZiSwapPool or library Point\\n    uint128 public maxLiquidPt;\\n\\n    /// @notice address of iZiSwapFactory\\n    address public factory;\\n\\n    /// @notice address of tokenX\\n    address public tokenX;\\n    /// @notice address of tokenY\\n    address public tokenY;\\n    /// @notice fee amount of this swap pool, 3000 means 0.3%\\n    uint24 public fee;\\n\\n    /// @notice minimum number of distance between initialized or limitorder points \\n    int24 public pointDelta;\\n\\n    /// @notice the fee growth as a 128-bit fixpoing fees of tokenX collected per 1 liquidity of the pool\\n    uint256 public feeScaleX_128;\\n    /// @notice the fee growth as a 128-bit fixpoint fees of tokenY collected per 1 liquidity of the pool\\n    uint256 public feeScaleY_128;\\n\\n    /// @notice sqrt(1.0001), 96 bit fixpoint number\\n    uint160 public override sqrtRate_96;\\n\\n    /// @notice state of pool, see library State or IiZiSwapPool#state for more infomation\\n    State public override state;\\n\\n    /// @notice the information about a liquidity by the liquidity's key\\n    mapping(bytes32 =>Liquidity.Data) public override liquidity;\\n\\n    /// @notice 256 packed point (orderOrEndpoint>0) boolean values. See PointBitmap for more information\\n    mapping(int16 =>uint256) public override pointBitmap;\\n\\n    /// @notice returns infomation of a point in the pool, see Point library of IiZiSwapPool#poitns for more information\\n    mapping(int24 =>Point.Data) public override points;\\n    /// @notice infomation about a point whether has limit order and whether as an liquidity's endpoint\\n    mapping(int24 =>int24) public override orderOrEndpoint;\\n    /// @notice limitOrder info on a given point\\n    mapping(int24 =>LimitOrder.Data) public override limitOrderData;\\n    /// @notice information about a user's limit order (sell tokenY and earn tokenX)\\n    mapping(bytes32 => UserEarn.Data) public override userEarnX;\\n    /// @notice information about a user's limit order (sell tokenX and earn tokenY)\\n    mapping(bytes32 => UserEarn.Data) public override userEarnY;\\n\\n    /// @notice observation data array\\n    Oracle.Observation[65535] public override observations;\\n\\n    uint256 public override totalFeeXCharged;\\n    uint256 public override totalFeeYCharged;\\n\\n    address private original;\\n\\n    address private swapModuleX2Y;\\n    address private swapModuleY2X;\\n    address private liquidityModule;\\n    address private limitOrderModule;\\n    address private flashModule;\\n\\n    /// @notice percent to charge from miner's fee\\n    uint24 public override feeChargePercent;\\n\\n    modifier lock() {\\n        require(!state.locked, 'LKD');\\n        state.locked = true;\\n        _;\\n        state.locked = false;\\n    }\\n\\n    modifier noDelegateCall() {\\n        require(address(this) == original);\\n        _;\\n    }\\n\\n    function _setRange(int24 pd) private {\\n        rightMostPt = RIGHT_MOST_PT / pd * pd;\\n        leftMostPt = - rightMostPt;\\n        uint24 pointNum = uint24((rightMostPt - leftMostPt) / pd) + 1;\\n        maxLiquidPt = type(uint128).max / pointNum;\\n    }\\n\\n    /// @notice Construct a pool\\n    constructor() {\\n        (address _tokenX, address _tokenY, uint24 _fee, int24 currentPoint, int24 _pointDelta, uint24 _feeChargePercent) = IiZiSwapFactory(msg.sender).deployPoolParams();\\n        require(_tokenX < _tokenY, 'x<y');\\n        require(_pointDelta > 0, 'pd0');\\n        original = address(this);\\n        factory = msg.sender;\\n        swapModuleX2Y = IiZiSwapFactory(msg.sender).swapX2YModule();\\n        swapModuleY2X = IiZiSwapFactory(msg.sender).swapY2XModule();\\n        liquidityModule = IiZiSwapFactory(msg.sender).liquidityModule();\\n        limitOrderModule = IiZiSwapFactory(msg.sender).limitOrderModule();\\n        flashModule = IiZiSwapFactory(msg.sender).flashModule();\\n\\n        tokenX = _tokenX;\\n        tokenY = _tokenY;\\n        fee = _fee;\\n        pointDelta = _pointDelta;\\n        _setRange(_pointDelta);\\n\\n        require(currentPoint >= leftMostPt, \\\"LO\\\");\\n        require(currentPoint <= rightMostPt, \\\"HO\\\");\\n\\n        // current state\\n        state.currentPoint = currentPoint;\\n        state.sqrtPrice_96 = LogPowMath.getSqrtPrice(currentPoint);\\n        state.liquidity = 0;\\n        state.liquidityX = 0;\\n\\n        sqrtRate_96 = LogPowMath.getSqrtPrice(1);\\n\\n        (state.observationQueueLen, state.observationNextQueueLen) = observations.init(uint32(block.timestamp));\\n        state.observationCurrentIndex = 0;\\n        feeChargePercent = _feeChargePercent;\\n    }\\n\\n    function balanceX() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            tokenX.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function balanceY() private view returns (uint256) {\\n        (bool success, bytes memory data) =\\n            tokenY.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\\n        require(success && data.length >= 32);\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function revertDCData(bytes memory data) private pure {\\n        if (data.length != 64) {\\n            if (data.length < 68) revert('dc');\\n            assembly {\\n                data := add(data, 0x04)\\n            }\\n            revert(abi.decode(data, (string)));\\n        }\\n        assembly {\\n            data:= add(data, 0x20)\\n            let w := mload(data)\\n            let t := mload(0x40)\\n            mstore(t, w)\\n            let w2 := mload(add(data, 0x20))\\n            mstore(add(t, 0x20), w2)\\n            revert(t, 64)\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function assignLimOrderEarnY(\\n        int24 point,\\n        uint128 assignY,\\n        bool fromLegacy\\n    ) external override noDelegateCall lock returns (uint128 actualAssignY) {\\n        \\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"assignLimOrderEarnY(int24,uint128,bool)\\\", point, assignY, fromLegacy)\\n        );\\n        if (success) {\\n            actualAssignY = abi.decode(d, (uint128));\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function assignLimOrderEarnX(\\n        int24 point,\\n        uint128 assignX,\\n        bool fromLegacy\\n    ) external override noDelegateCall lock returns (uint128 actualAssignX) {\\n        \\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"assignLimOrderEarnX(int24,uint128,bool)\\\", point, assignX, fromLegacy)\\n        );\\n        if (success) {\\n            actualAssignX = abi.decode(d, (uint128));\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function decLimOrderWithX(\\n        int24 point,\\n        uint128 deltaX\\n    ) external override noDelegateCall lock returns (uint128 actualDeltaX, uint256 legacyAccEarn) {\\n        \\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"decLimOrderWithX(int24,uint128)\\\", point, deltaX)\\n        );\\n        if (success) {\\n            uint128 claimSold;\\n            uint128 claimEarn;\\n            (actualDeltaX, legacyAccEarn, claimSold, claimEarn) = abi.decode(d, (uint128, uint256, uint128, uint128));\\n            emit DecLimitOrder(msg.sender, actualDeltaX, point, claimSold, claimEarn, true);\\n        } else {\\n            revertDCData(d);\\n        }\\n\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function decLimOrderWithY(\\n        int24 point,\\n        uint128 deltaY\\n    ) external override noDelegateCall lock returns (uint128 actualDeltaY, uint256 legacyAccEarn) {\\n        \\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"decLimOrderWithY(int24,uint128)\\\", point, deltaY)\\n        );\\n        if (success) {\\n            uint128 claimSold;\\n            uint128 claimEarn;\\n            (actualDeltaY, legacyAccEarn, claimSold, claimEarn) = abi.decode(d, (uint128, uint256, uint128, uint128));\\n            emit DecLimitOrder(msg.sender, actualDeltaY, point, claimSold, claimEarn, false);\\n        } else {\\n            revertDCData(d);\\n        }\\n        \\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function addLimOrderWithX(\\n        address recipient,\\n        int24 point,\\n        uint128 amountX,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint128 orderX, uint128 acquireY) {\\n        \\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"addLimOrderWithX(address,int24,uint128,bytes)\\\", recipient, point, amountX, data)\\n        );\\n        if (success) {\\n            uint128 claimSold;\\n            uint128 claimEarn;\\n            (orderX, acquireY, claimSold, claimEarn) = abi.decode(d, (uint128, uint128, uint128, uint128));\\n            emit AddLimitOrder(recipient, orderX, acquireY, point, claimSold, claimEarn, true);\\n        } else {\\n            revertDCData(d);\\n        }\\n        \\n    }\\n    \\n    /// @inheritdoc IiZiSwapPool\\n    function addLimOrderWithY(\\n        address recipient,\\n        int24 point,\\n        uint128 amountY,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint128 orderY, uint128 acquireX) {\\n        \\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"addLimOrderWithY(address,int24,uint128,bytes)\\\", recipient, point, amountY, data)\\n        );\\n        if (success) {\\n            uint128 claimSold;\\n            uint128 claimEarn;\\n            (orderY, acquireX, claimSold, claimEarn) = abi.decode(d, (uint128, uint128, uint128, uint128));\\n            emit AddLimitOrder(recipient, orderY, acquireX, point, claimSold, claimEarn, false);\\n        } else {\\n            revertDCData(d);\\n        }\\n        \\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function collectLimOrder(\\n        address recipient, int24 point, uint128 collectDec, uint128 collectEarn, bool isEarnY\\n    ) external override noDelegateCall lock returns(uint128 actualCollectDec, uint128 actualCollectEarn) {\\n        (bool success, bytes memory d) = limitOrderModule.delegatecall(\\n            abi.encodeWithSignature(\\\"collectLimOrder(address,int24,uint128,uint128,bool)\\\", recipient, point, collectDec, collectEarn, isEarnY)\\n        );\\n        if (success) {\\n            (actualCollectDec, actualCollectEarn) = abi.decode(d, (uint128, uint128));\\n            emit CollectLimitOrder(msg.sender, recipient, point, actualCollectDec, actualCollectEarn, isEarnY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n    \\n    /// @inheritdoc IiZiSwapPool\\n    function mint(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\\n        (bool success, bytes memory d) = liquidityModule.delegatecall(\\n            abi.encodeWithSignature(\\\"mint(address,int24,int24,uint128,bytes)\\\", recipient, leftPt, rightPt,liquidDelta,data)\\n        );\\n        if (success) {\\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\\n            emit Mint(msg.sender, recipient, leftPt, rightPt, liquidDelta, amountX, amountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function burn(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta\\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\\n        (bool success, bytes memory d) = liquidityModule.delegatecall(\\n            abi.encodeWithSignature(\\\"burn(int24,int24,uint128)\\\", leftPt, rightPt, liquidDelta)\\n        );\\n        if (success) {\\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\\n            emit Burn(msg.sender, leftPt, rightPt, liquidDelta, amountX, amountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function collect(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint256 amountXLim,\\n        uint256 amountYLim\\n    ) external override noDelegateCall lock returns (uint256 actualAmountX, uint256 actualAmountY) {\\n        (bool success, bytes memory d) = liquidityModule.delegatecall(\\n            abi.encodeWithSignature(\\\"collect(address,int24,int24,uint256,uint256)\\\", recipient, leftPt, rightPt, amountXLim, amountYLim)\\n        );\\n        if (success) {\\n            (actualAmountX, actualAmountY) = abi.decode(d, (uint256, uint256));\\n            emit CollectLiquidity(msg.sender, recipient, leftPt, rightPt, actualAmountX, actualAmountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function swapY2X(\\n        address recipient,\\n        uint128 amount,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\\n        (bool success, bytes memory d) = swapModuleY2X.delegatecall(\\n            abi.encodeWithSignature(\\\"swapY2X(address,uint128,int24,bytes)\\\", \\n            recipient, amount, highPt, data)\\n        );\\n        if (success) {\\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\\n            emit Swap(tokenX, tokenY, fee, false, amountX, amountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function swapY2XDesireX(\\n        address recipient,\\n        uint128 desireX,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\\n        (bool success, bytes memory d) = swapModuleY2X.delegatecall(\\n            abi.encodeWithSignature(\\\"swapY2XDesireX(address,uint128,int24,bytes)\\\", \\n            recipient, desireX, highPt, data)\\n        );\\n        if (success) {\\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\\n            emit Swap(tokenX, tokenY, fee, false, amountX, amountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function swapX2Y(\\n        address recipient,\\n        uint128 amount,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\\n        (bool success, bytes memory d) = swapModuleX2Y.delegatecall(\\n            abi.encodeWithSignature(\\\"swapX2Y(address,uint128,int24,bytes)\\\", \\n            recipient, amount, lowPt, data)\\n        );\\n        if (success) {\\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\\n            emit Swap(tokenX, tokenY, fee, true, amountX, amountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function swapX2YDesireY(\\n        address recipient,\\n        uint128 desireY,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\\n        (bool success, bytes memory d) = swapModuleX2Y.delegatecall(\\n            abi.encodeWithSignature(\\\"swapX2YDesireY(address,uint128,int24,bytes)\\\", recipient, desireY, lowPt,data)\\n        );\\n        if (success) {\\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\\n            emit Swap(tokenX, tokenY, fee, true, amountX, amountY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        override\\n        noDelegateCall\\n        returns (int56[] memory accPoints)\\n    {\\n        return\\n            observations.observe(\\n                uint32(block.timestamp),\\n                secondsAgos,\\n                state.currentPoint,\\n                state.observationCurrentIndex,\\n                state.observationQueueLen\\n            );\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function expandObservationQueue(uint16 newNextQueueLen) external override noDelegateCall lock {\\n        uint16 oldNextQueueLen = state.observationNextQueueLen;\\n        if (newNextQueueLen > oldNextQueueLen) {\\n            observations.expand(oldNextQueueLen, newNextQueueLen);\\n            state.observationNextQueueLen = newNextQueueLen;\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function liquiditySnapshot(int24 leftPoint, int24 rightPoint) external override view returns(int128[] memory deltaLiquidities) {\\n        require(leftPoint < rightPoint, \\\"L<R\\\");\\n        require(leftPoint >= leftMostPt, \\\"LO\\\");\\n        require(rightPoint <= rightMostPt, \\\"RO\\\");\\n        require(leftPoint % pointDelta == 0, \\\"LD0\\\");\\n        require(rightPoint % pointDelta == 0, \\\"RD0\\\");\\n        uint256 len = uint256(int256((rightPoint - leftPoint) / pointDelta));\\n        deltaLiquidities = new int128[](len);\\n        uint256 idx = 0;\\n        for (int24 i = leftPoint; i < rightPoint; i += pointDelta) {\\n            deltaLiquidities[idx] = points[i].liquidDelta;\\n            idx ++;\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function limitOrderSnapshot(int24 leftPoint, int24 rightPoint) external override view returns(LimitOrderStruct[] memory limitOrders) {\\n        require(leftPoint < rightPoint, \\\"L<R\\\");\\n        require(leftPoint >= leftMostPt, \\\"LO\\\");\\n        require(rightPoint <= rightMostPt, \\\"RO\\\");\\n        require(leftPoint % pointDelta == 0, \\\"LD0\\\");\\n        require(rightPoint % pointDelta == 0, \\\"RD0\\\");\\n        uint256 len = uint256(int256((rightPoint - leftPoint) / pointDelta));\\n        limitOrders = new LimitOrderStruct[](len);\\n        uint256 idx = 0;\\n        for (int24 i = leftPoint; i < rightPoint; i += pointDelta) {\\n            limitOrders[idx] = LimitOrderStruct({\\n                sellingX: limitOrderData[i].sellingX,\\n                earnY: limitOrderData[i].earnY,\\n                accEarnY: limitOrderData[i].accEarnY,\\n                sellingY: limitOrderData[i].sellingY,\\n                earnX: limitOrderData[i].earnX,\\n                accEarnX: limitOrderData[i].accEarnX\\n            });\\n            idx ++;\\n        }\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function collectFeeCharged() external override noDelegateCall lock {\\n        require(msg.sender == IiZiSwapFactory(factory).chargeReceiver(), \\\"NR\\\");\\n        TokenTransfer.transferToken(tokenX, msg.sender, totalFeeXCharged);\\n        TokenTransfer.transferToken(tokenY, msg.sender, totalFeeYCharged);\\n        totalFeeXCharged = 0;\\n        totalFeeYCharged = 0;\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function modifyFeeChargePercent(uint24 newFeeChargePercent) external override noDelegateCall lock {\\n        require(msg.sender == IOwnable(factory).owner(), \\\"NON\\\");\\n        require(newFeeChargePercent >= 0, \\\"FP0\\\");\\n        require(newFeeChargePercent <= 100, \\\"FP0\\\");\\n        feeChargePercent = newFeeChargePercent;\\n    }\\n\\n    /// @inheritdoc IiZiSwapPool\\n    function flash(\\n        address recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bytes calldata data\\n    ) external override noDelegateCall lock {\\n        (bool success, bytes memory d) = flashModule.delegatecall(\\n            abi.encodeWithSignature(\\\"flash(address,uint256,uint256,bytes)\\\", \\n            recipient, amountX, amountY, data)\\n        );\\n        if (success) {\\n            (uint256 actualAmountX, uint256 actualAmountY, uint256 paidX, uint256 paidY) = abi.decode(d, (uint256, uint256, uint256, uint256));\\n            emit Flash(msg.sender, recipient, actualAmountX, actualAmountY, paidX, paidY);\\n        } else {\\n            revertDCData(d);\\n        }\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x207cbdee5c4cc5955e076085750ba8b865c3bf67ae9ae9fdeb9681bbd1747ec2\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    \\n}\\n\",\"keccak256\":\"0x2478edbcc2d96bb984d7d02a86059bfbe84ca22faf44368ca416b3abd7bb0456\",\"license\":\"GPL-2.0-or-later\"},\"@izumifinance/iziswap_core/contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\",\"keccak256\":\"0x20cc6a989ce19532b45b2d977cde6195a5542cb48b55a8d88f9f56f091d8f99d\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/interfaces/IiZiSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapMintCallback {\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#mint call\\n    /// @param x Amount of tokenX need to pay from miner\\n    /// @param y Amount of tokenY need to pay from miner\\n    /// @param data Any data passed through by the msg.sender via the iZiSwapPool#mint call\\n    function mintDepositCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\\ninterface IiZiSwapCallback {\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#swapY2X(DesireX) call\\n    /// @param x Amount of tokenX trader will acquire\\n    /// @param y Amount of tokenY trader will pay\\n    /// @param data Any dadta passed though by the msg.sender via the iZiSwapPool#swapY2X(DesireX) call\\n    function swapY2XCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#swapX2Y(DesireY) call\\n    /// @param x Amount of tokenX trader will pay\\n    /// @param y Amount of tokenY trader will require\\n    /// @param data Any dadta passed though by the msg.sender via the iZiSwapPool#swapX2Y(DesireY) call\\n    function swapX2YCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\\ninterface IiZiSwapAddLimOrderCallback {\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#addLimOrderWithX(Y) call\\n    /// @param x Amount of tokenX seller will pay\\n    /// @param y Amount of tokenY seller will pay\\n    /// @param data Any dadta passed though by the msg.sender via the iZiSwapPool#addLimOrderWithX(Y) call\\n    function payCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\",\"keccak256\":\"0x9d55a9bc9897a53558013e738ce1c609c320aa44f8fe45ad0193d792e14a9ada\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/interfaces/IiZiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapFactory {\\n\\n    /// @notice emit when successfuly create a new pool (calling iZiSwapFactory#newPool)\\n    /// @param tokenX address of erc-20 tokenX\\n    /// @param tokenY address of erc-20 tokenY\\n    /// @param fee fee amount of swap (3000 means 0.3%)\\n    /// @param pointDelta minimum number of distance between initialized or limitorder points\\n    /// @param pool address of swap pool\\n    event NewPool(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint24 indexed fee,\\n        uint24 pointDelta,\\n        address pool\\n    );\\n\\n    /// @notice module to support swap from tokenX to tokenY\\n    /// @return swapX2YModule address\\n    function swapX2YModule() external returns (address);\\n\\n    /// @notice module to support swap from tokenY to tokenX\\n    /// @return swapY2XModule address\\n    function swapY2XModule() external returns (address);\\n\\n    /// @notice module to support mint/burn/collect function of pool\\n    /// @return liquidityModule address\\n    function liquidityModule() external returns (address);\\n\\n    /// @notice address of module for user to manage limit orders\\n    /// @return limitOrderModule address\\n    function limitOrderModule() external returns (address);\\n\\n    /// @notice address of module for flash loan\\n    /// @return flashModule address\\n    function flashModule() external returns (address);\\n\\n    /// @notice default fee rate from miner's fee gain\\n    /// @return defaultFeeChargePercent default fee rate * 100\\n    function defaultFeeChargePercent() external returns (uint24);\\n\\n    /// @notice Enables a fee amount with the given pointDelta\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee fee amount (3000 means 0.3%)\\n    /// @param pointDelta The spacing between points to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, uint24 pointDelta) external;\\n\\n    /// @notice Create a new pool which not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @param currentPoint initial point (log 1.0001 of price)\\n    /// @return address of newly created pool\\n    function newPool(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        int24 currentPoint\\n    ) external returns (address);\\n\\n    /// @notice Charge receiver of all pools.\\n    /// @return address of charge receiver\\n    function chargeReceiver() external view returns(address);\\n\\n    /// @notice Get pool of (tokenX, tokenY, fee), address(0) for not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @return address of pool\\n    function pool(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee\\n    ) external view returns(address);\\n\\n    /// @notice Get point delta of a given fee amount.\\n    /// @param fee fee amount\\n    /// @return pointDelta the point delta\\n    function fee2pointDelta(uint24 fee) external view returns (int24 pointDelta);\\n\\n    /// @notice Change charge receiver, only owner of factory can call.\\n    /// @param _chargeReceiver address of new receiver\\n    function modifyChargeReceiver(address _chargeReceiver) external;\\n\\n    /// @notice Change defaultFeeChargePercent\\n    /// @param _defaultFeeChargePercent new charge percent\\n    function modifyDefaultFeeChargePercent(uint24 _defaultFeeChargePercent) external;\\n\\n    function deployPoolParams() external view returns(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        int24 currentPoint,\\n        int24 pointDelta,\\n        uint24 feeChargePercent\\n    );\\n    \\n}\",\"keccak256\":\"0xcdd0baf60deddee51f5422ae068e0f53e7748a9678a3de657bdc09c85bb23ceb\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/interfaces/IiZiSwapFlashCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapFlashCallback {\\n\\n    /// @notice Call the msg.sender after sending tokens in IiZiSwapPool#flash.\\n    /// @dev Must repay the tokens to the pool within one call.\\n    /// @param feeX the fee amount in tokenX due to the pool by the end of the flash\\n    /// @param feeY the fee amount in tokenY due to the pool by the end of the flash\\n    /// @param data any data passed through by the caller\\n    function flashCallback(\\n        uint256 feeX,\\n        uint256 feeY,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x40c578054cc8528b98ebf34c79503079c16143b7a1f996a72cec0d73e21a6437\",\"license\":\"MIT\"},\"@izumifinance/iziswap_core/contracts/interfaces/IiZiSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapPool {\\n\\n    /// @notice Emitted when miner successfully add liquidity (mint).\\n    /// @param sender the address that minted the liquidity\\n    /// @param owner the owner who will benefit from this liquidity\\n    /// @param leftPoint left endpoint of the liquidity\\n    /// @param rightPoint right endpoint of the liquidity\\n    /// @param liquidity the amount of liquidity minted to the range [leftPoint, rightPoint)\\n    /// @param amountX amount of tokenX deposit\\n    /// @param amountY amount of tokenY deposit\\n    event Mint(\\n        address sender, \\n        address indexed owner, \\n        int24 indexed leftPoint, \\n        int24 indexed rightPoint, \\n        uint128 liquidity, \\n        uint256 amountX, \\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when miner successfully decrease liquidity (withdraw).\\n    /// @param owner owner address of liquidity\\n    /// @param leftPoint left endpoint of liquidity\\n    /// @param rightPoint right endpoint of liquidity\\n    /// @param liquidity amount of liquidity decreased\\n    /// @param amountX amount of tokenX withdrawed\\n    /// @param amountY amount of tokenY withdrawed\\n    event Burn(\\n        address indexed owner, \\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when fees and withdrawed liquidity are collected \\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param leftPoint The left point of the liquidity\\n    /// @param rightPoint The right point of the liquidity\\n    /// @param amountX The amount of tokenX (fees and withdrawed tokenX from liquidity)\\n    /// @param amountY The amount of tokenY (fees and withdrawed tokenY from liquidity)\\n    event CollectLiquidity(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when a trader successfully exchange.\\n    /// @param tokenX tokenX of pool\\n    /// @param tokenY tokenY of pool\\n    /// @param fee fee amount of pool\\n    /// @param sellXEarnY true for selling tokenX, false for buying tokenX\\n    /// @param amountX amount of tokenX in this exchange\\n    /// @param amountY amount of tokenY in this exchange\\n    event Swap(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint24 indexed fee,\\n        bool sellXEarnY,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of tokenX/tokenY.\\n    /// @param sender the address that initiated the swap call, and that received the callback\\n    /// @param recipient the address that received the tokens from flash\\n    /// @param amountX the amount of tokenX that was flashed\\n    /// @param amountY the amount of tokenY that was flashed\\n    /// @param paidX the amount of tokenX paid for the flash, which can exceed the amountX plus the fee\\n    /// @param paidY the amount of tokenY paid for the flash, which can exceed the amountY plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 paidX,\\n        uint256 paidY\\n    );\\n\\n    /// @notice Emitted when a seller successfully add a limit order.\\n    /// @param owner owner of limit order\\n    /// @param addAmount amount of token to sell the seller added\\n    /// @param acquireAmount amount of earn-token acquired, if there exists some opposite order before \\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token, if this owner has order with same direction on this point before\\n    /// @param claimEarn claimed earned earn-token, if this owner has order with same direction on this point before\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event AddLimitOrder(\\n        address indexed owner,\\n        uint128 addAmount,\\n        uint128 acquireAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when a seller successfully decrease a limit order.\\n    /// @param owner owner of limit order\\n    /// @param decreaseAmount amount of token to sell the seller decreased\\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token\\n    /// @param claimEarn claimed earned earn-token\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event DecLimitOrder(\\n        address indexed owner,\\n        uint128 decreaseAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when collect from a limit order\\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param point The point of the limit order\\n    /// @param collectDec The amount of decreased sell token collected\\n    /// @param collectEarn The amount of earn token collected\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event CollectLimitOrder(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed point,\\n        uint128 collectDec,\\n        uint128 collectEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Returns the information about a liquidity by the liquidity's key.\\n    /// @param key the liquidity's key is a hash of a preimage composed by the miner(owner), pointLeft and pointRight\\n    /// @return liquidity the amount of liquidity,\\n    /// @return lastFeeScaleX_128 fee growth of tokenX inside the range as of the last mint/burn/collect,\\n    /// @return lastFeeScaleY_128 fee growth of tokenY inside the range as of the last mint/burn/collect,\\n    /// @return tokenOwedX the computed amount of tokenX miner can collect as of the last mint/burn/collect,\\n    /// @return tokenOwedY the computed amount of tokenY miner can collect as of the last mint/burn/collect\\n    function liquidity(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 lastFeeScaleX_128,\\n            uint256 lastFeeScaleY_128,\\n            uint256 tokenOwedX,\\n            uint256 tokenOwedY\\n        );\\n    \\n    /// @notice Returns the information about a user's limit order (sell tokenY and earn tokenX).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenX earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenY not selled in this limit order\\n    /// @return sellingDec amount of tokenY decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenX in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenX in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenX earned (both legacy and unlegacy) in this limit order\\n    function userEarnX(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint256 lastAccEarn,\\n            uint128 sellingRemain,\\n            uint128 sellingDec,\\n            uint128 earn,\\n            uint128 legacyEarn,\\n            uint128 earnAssign\\n        );\\n    \\n    /// @notice Returns the information about a user's limit order (sell tokenX and earn tokenY).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenY earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenX not selled in this limit order\\n    /// @return sellingDec amount of tokenX decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenY in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenY in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenY earned (both legacy and unlegacy) in this limit order\\n    function userEarnY(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint256 lastAccEarn,\\n            uint128 sellingRemain,\\n            uint128 sellingDec,\\n            uint128 earn,\\n            uint128 legacyEarn,\\n            uint128 earnAssign\\n        );\\n    \\n    /// @notice Mark a given amount of tokenY in a limitorder(sellx and earn y) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignY max amount of tokenY to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnY\\n    /// @return actualAssignY actual amount of tokenY marked\\n    function assignLimOrderEarnY(\\n        int24 point,\\n        uint128 assignY,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignY);\\n    \\n    /// @notice Mark a given amount of tokenX in a limitorder(selly and earn x) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignX max amount of tokenX to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnX\\n    /// @return actualAssignX actual amount of tokenX marked\\n    function assignLimOrderEarnX(\\n        int24 point,\\n        uint128 assignX,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignX);\\n\\n    /// @notice Decrease limitorder of selling X.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaX max amount of tokenX seller wants to decrease\\n    /// @return actualDeltaX actual amount of tokenX decreased\\n    /// @return legacyAccEarn legacyAccEarnY of pointOrder at point when calling this interface\\n    function decLimOrderWithX(\\n        int24 point,\\n        uint128 deltaX\\n    ) external returns (uint128 actualDeltaX, uint256 legacyAccEarn);\\n    \\n    /// @notice Decrease limitorder of selling Y.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaY max amount of tokenY seller wants to decrease\\n    /// @return actualDeltaY actual amount of tokenY decreased\\n    /// @return legacyAccEarn legacyAccEarnX of pointOrder at point when calling this interface\\n    function decLimOrderWithY(\\n        int24 point,\\n        uint128 deltaY\\n    ) external returns (uint128 actualDeltaY, uint256 legacyAccEarn);\\n    \\n    /// @notice Add a limit order (selling x) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountX amount of tokenX to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderX actual added amount of tokenX\\n    /// @return acquireY amount of tokenY acquired if there is a limit order to sell y before adding\\n    function addLimOrderWithX(\\n        address recipient,\\n        int24 point,\\n        uint128 amountX,\\n        bytes calldata data\\n    ) external returns (uint128 orderX, uint128 acquireY);\\n\\n    /// @notice Add a limit order (selling y) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountY amount of tokenY to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderY actual added amount of tokenY\\n    /// @return acquireX amount of tokenX acquired if there exists a limit order to sell x before adding\\n    function addLimOrderWithY(\\n        address recipient,\\n        int24 point,\\n        uint128 amountY,\\n        bytes calldata data\\n    ) external returns (uint128 orderY, uint128 acquireX);\\n\\n    /// @notice Collect earned or decreased token from limit order.\\n    /// @param recipient address to benefit\\n    /// @param point point of limit order, be sure to be times of pointDelta\\n    /// @param collectDec max amount of decreased selling token to collect\\n    /// @param collectEarn max amount of earned token to collect\\n    /// @param isEarnY direction of this limit order, true for sell y, false for sell x\\n    /// @return actualCollectDec actual amount of decresed selling token collected\\n    /// @return actualCollectEarn actual amount of earned token collected\\n    function collectLimOrder(\\n        address recipient, int24 point, uint128 collectDec, uint128 collectEarn, bool isEarnY\\n    ) external returns(uint128 actualCollectDec, uint128 actualCollectEarn);\\n\\n    /// @notice Add liquidity to the pool.\\n    /// @param recipient newly created liquidity will belong to this address\\n    /// @param leftPt left endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param rightPt right endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param liquidDelta amount of liquidity to add\\n    /// @param data any data that should be passed through to the callback\\n    /// @return amountX The amount of tokenX that was paid for the liquidity. Matches the value in the callback\\n    /// @return amountY The amount of tokenY that was paid for the liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Decrease a given amount of liquidity from msg.sender's liquidities.\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param liquidDelta amount of liquidity to burn\\n    /// @return amountX The amount of tokenX should be refund after burn\\n    /// @return amountY The amount of tokenY should be refund after burn\\n    function burn(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Collect tokens (fee or refunded after burn) from a liquidity.\\n    /// @param recipient the address which should receive the collected tokens\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param amountXLim max amount of tokenX the owner wants to collect\\n    /// @param amountYLim max amount of tokenY the owner wants to collect\\n    /// @return actualAmountX the amount tokenX collected\\n    /// @return actualAmountY the amount tokenY collected\\n    function collect(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint256 amountXLim,\\n        uint256 amountYLim\\n    ) external returns (uint256 actualAmountX, uint256 actualAmountY);\\n\\n    /// @notice Swap tokenY for tokenX, given max amount of tokenY user willing to pay.\\n    /// @param recipient the address to receive tokenX\\n    /// @param amount the max amount of tokenY user willing to pay\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    function swapY2X(\\n        address recipient,\\n        uint128 amount,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenY for tokenX, given amount of tokenX user desires.\\n    /// @param recipient the address to receive tokenX\\n    /// @param desireX the amount of tokenX user desires\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    function swapY2XDesireX(\\n        address recipient,\\n        uint128 desireX,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenX for tokenY, given max amount of tokenX user willing to pay.\\n    /// @param recipient the address to receive tokenY\\n    /// @param amount the max amount of tokenX user willing to pay\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    function swapX2Y(\\n        address recipient,\\n        uint128 amount,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenX for tokenY, given amount of tokenY user desires.\\n    /// @param recipient the address to receive tokenY\\n    /// @param desireY the amount of tokenY user desires\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    function swapX2YDesireY(\\n        address recipient,\\n        uint128 desireY,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Returns sqrt(1.0001), in 96 bit fixpoint number.\\n    function sqrtRate_96() external view returns(uint160);\\n    \\n    /// @notice State values of pool.\\n    /// @return sqrtPrice_96 a 96 fixpoing number describe the sqrt value of current price(tokenX/tokenY)\\n    /// @return currentPoint the current point of the pool, 1.0001 ^ currentPoint = price\\n    /// @return observationCurrentIndex the index of the last oracle observation that was written,\\n    /// @return observationQueueLen the current maximum number of observations stored in the pool,\\n    /// @return observationNextQueueLen the next maximum number of observations, to be updated when the observation.\\n    /// @return locked whether the pool is locked (only used for checking reentrance)\\n    /// @return liquidity liquidity on the currentPoint (currX * sqrtPrice + currY / sqrtPrice)\\n    /// @return liquidityX liquidity of tokenX\\n    function state()\\n        external view\\n        returns(\\n            uint160 sqrtPrice_96,\\n            int24 currentPoint,\\n            uint16 observationCurrentIndex,\\n            uint16 observationQueueLen,\\n            uint16 observationNextQueueLen,\\n            bool locked,\\n            uint128 liquidity,\\n            uint128 liquidityX\\n        );\\n    \\n    /// @notice LimitOrder info on a given point.\\n    /// @param point the given point \\n    /// @return sellingX total amount of tokenX selling on the point\\n    /// @return earnY total amount of unclaimed earned tokenY for unlegacy sellingX\\n    /// @return accEarnY total amount of earned tokenY(via selling tokenX) by all users at this point as of the last swap\\n    /// @return legacyAccEarnY latest recorded 'accEarnY' value when sellingX is clear (legacy)\\n    /// @return legacyEarnY total amount of unclaimed earned tokenY for legacy (cleared during swap) sellingX\\n    /// @return sellingY total amount of tokenYselling on the point\\n    /// @return earnX total amount of unclaimed earned tokenX for unlegacy sellingY\\n    /// @return legacyEarnX total amount of unclaimed earned tokenX for legacy (cleared during swap) sellingY\\n    /// @return accEarnX total amount of earned tokenX(via selling tokenY) by all users at this point as of the last swap\\n    /// @return legacyAccEarnX latest recorded 'accEarnX' value when sellingY is clear (legacy)\\n    function limitOrderData(int24 point)\\n        external view\\n        returns(\\n            uint128 sellingX,\\n            uint128 earnY,\\n            uint256 accEarnY,\\n            uint256 legacyAccEarnY,\\n            uint128 legacyEarnY,\\n            uint128 sellingY,\\n            uint128 earnX,\\n            uint128 legacyEarnX,\\n            uint256 accEarnX,\\n            uint256 legacyAccEarnX\\n        );\\n    \\n    /// @notice Query infomation about a point whether has limit order or is an liquidity's endpoint.\\n    /// @param point point to query\\n    /// @return val endpoint for val&1>0 and has limit order for val&2 > 0\\n    function orderOrEndpoint(int24 point) external returns(int24 val);\\n\\n    /// @notice Returns observation data about a specific index.\\n    /// @param index the index of observation array\\n    /// @return timestamp the timestamp of the observation,\\n    /// @return accPoint the point multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return init whether the observation has been initialized and the above values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 timestamp,\\n            int56 accPoint,\\n            bool init\\n        );\\n\\n    /// @notice Point status in the pool.\\n    /// @param point the point\\n    /// @return liquidSum the total amount of liquidity that uses the point either as left endpoint or right endpoint\\n    /// @return liquidDelta how much liquidity changes when the pool price crosses the point from left to right\\n    /// @return accFeeXOut_128 the fee growth on the other side of the point from the current point in tokenX\\n    /// @return accFeeYOut_128 the fee growth on the other side of the point from the current point in tokenY\\n    /// @return isEndpt whether the point is an endpoint of a some miner's liquidity, true if liquidSum > 0\\n    function points(int24 point)\\n        external\\n        view\\n        returns (\\n            uint128 liquidSum,\\n            int128 liquidDelta,\\n            uint256 accFeeXOut_128,\\n            uint256 accFeeYOut_128,\\n            bool isEndpt\\n        );\\n\\n    /// @notice Returns 256 packed point (statusVal>0) boolean values. See PointBitmap for more information.\\n    function pointBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the integral value of point(time) and integral value of 1/liquidity(time)\\n    ///     at some target timestamps (block.timestamp - secondsAgo[i])\\n    /// @dev Reverts if target timestamp is early than oldest observation in the queue\\n    /// @dev If you call this method with secondsAgos = [3600, 0]. the average point of this pool during recent hour is \\n    /// (accPoints[1] - accPoints[0]) / 3600\\n    /// @param secondsAgos describe the target timestamp , targetTimestimp[i] = block.timestamp - secondsAgo[i]\\n    /// @return accPoints integral value of point(time) from 0 to each target timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory accPoints);\\n    \\n    /// @notice Expand max-length of observation queue.\\n    /// @param newNextQueueLen new value of observationNextQueueLen, which should be greater than current observationNextQueueLen\\n    function expandObservationQueue(uint16 newNextQueueLen) external;\\n\\n    /// @notice Borrow tokenX and/or tokenY and pay it back within a block.\\n    /// @dev The caller needs to implement a IiZiSwapPool#flashCallback callback function\\n    /// @param recipient the address which will receive the tokenY and/or tokenX\\n    /// @param amountX the amount of tokenX to borrow\\n    /// @param amountY the amount of tokenY to borrow\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Returns a snapshot infomation of Liquidity in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return deltaLiquidities an array of delta liquidity for points in the range\\n    ///    note 1. delta liquidity here is amount of liquidity changed when cross a point from left to right\\n    ///    note 2. deltaLiquidities only contains points which are times of pointDelta\\n    ///    note 3. this function may cost a ENORMOUS amount of gas, be careful to call\\n    function liquiditySnapshot(int24 leftPoint, int24 rightPoint) external view returns(int128[] memory deltaLiquidities);\\n\\n    struct LimitOrderStruct {\\n        uint128 sellingX;\\n        uint128 earnY;\\n        uint256 accEarnY;\\n        uint128 sellingY;\\n        uint128 earnX;\\n        uint256 accEarnX;\\n    }\\n\\n    /// @notice Returns a snapshot infomation of Limit Order in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return limitOrders an array of Limit Orders for points in the range\\n    ///    note 1. this function may cost a HUGE amount of gas, be careful to call\\n    function limitOrderSnapshot(int24 leftPoint, int24 rightPoint) external view returns(LimitOrderStruct[] memory limitOrders); \\n\\n    /// @notice Amount of charged fee on tokenX.\\n    function totalFeeXCharged() external view returns(uint256);\\n\\n    /// @notice Amount of charged fee on tokenY.\\n    function totalFeeYCharged() external view returns(uint256);\\n\\n    /// @notice Percent to charge from miner's fee.\\n    function feeChargePercent() external view returns(uint24);\\n\\n    /// @notice Collect charged fee, only factory's chargeReceiver can call.\\n    function collectFeeCharged() external;\\n\\n    /// @notice modify 'feeChargePercent', only owner has authority.\\n    /// @param newFeeChargePercent new value of feeChargePercent, a nature number range in [0, 100], \\n    function modifyFeeChargePercent(uint24 newFeeChargePercent) external;\\n    \\n}\",\"keccak256\":\"0x2fca2c307255fccbb4b857e052e446a2dd1ecbd9ec1a2b2c837357ef397b834a\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/AmountMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./MulDivMath.sol\\\";\\nimport \\\"./TwoPower.sol\\\";\\nimport \\\"./LogPowMath.sol\\\";\\n\\nlibrary AmountMath {\\n\\n    function getAmountY(\\n        uint128 liquidity,\\n        uint160 sqrtPriceL_96,\\n        uint160 sqrtPriceR_96,\\n        uint160 sqrtRate_96,\\n        bool upper\\n    ) internal pure returns (uint256 amount) {\\n        uint160 numerator = sqrtPriceR_96 - sqrtPriceL_96;\\n        uint160 denominator = sqrtRate_96 - uint160(TwoPower.Pow96);\\n        if (!upper) {\\n            amount = MulDivMath.mulDivFloor(liquidity, numerator, denominator);\\n        } else {\\n            amount = MulDivMath.mulDivCeil(liquidity, numerator, denominator);\\n        }\\n    }\\n\\n    function getAmountX(\\n        uint128 liquidity,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint160 sqrtPriceR_96,\\n        uint160 sqrtRate_96,\\n        bool upper\\n    ) internal pure returns (uint256 amount) {\\n        // rightPt - (leftPt - 1), pc = leftPt - 1\\n        uint160 sqrtPricePrPl_96 = LogPowMath.getSqrtPrice(rightPt - leftPt);\\n        // 1. sqrtPriceR_96 * 2^96 < 2^256\\n        // 2. sqrtRate_96 > 2^96, so sqrtPricePrM1_96 < sqrtPriceR_96 < 2^160\\n        uint160 sqrtPricePrM1_96 = uint160(uint256(sqrtPriceR_96) * TwoPower.Pow96 / sqrtRate_96);\\n\\n        uint160 numerator = sqrtPricePrPl_96 - uint160(TwoPower.Pow96);\\n        uint160 denominator = sqrtPriceR_96 - sqrtPricePrM1_96;\\n        if (!upper) {\\n            amount = MulDivMath.mulDivFloor(liquidity, numerator, denominator);\\n        } else {\\n            amount = MulDivMath.mulDivCeil(liquidity, numerator, denominator);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0xee23189e2b97c77a950188cb89805af3b28d0084c7e2331d1f1a7a84218651e9\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/Converter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary Converter {\\n\\n    function toUint128(uint256 a) internal pure returns (uint128 b){\\n        b = uint128(a);\\n        require(a == b, 'C128');\\n    }\\n\\n}\",\"keccak256\":\"0xcabc1d5540760ceaae5a70c49c449776f7e21b6f92a89ceda444b2e0b30bef24\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/LimitOrder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary LimitOrder {\\n\\n    struct Data {\\n        uint128 sellingX;\\n        uint128 earnY;\\n        uint256 accEarnY;\\n        uint256 legacyAccEarnY;\\n        uint128 legacyEarnY;\\n        uint128 sellingY;\\n        uint128 earnX;\\n        uint128 legacyEarnX;\\n        uint256 accEarnX;\\n        uint256 legacyAccEarnX;\\n    }\\n\\n}\",\"keccak256\":\"0x8ecdf7fde43f946405187db7f94d44049165b775118a398cb404d1b10e659549\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/Liquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./MulDivMath.sol\\\";\\nimport \\\"./TwoPower.sol\\\";\\n\\nlibrary Liquidity {\\n\\n    struct Data {\\n        uint128 liquidity;\\n        uint256 lastFeeScaleX_128;\\n        uint256 lastFeeScaleY_128;\\n        uint256 tokenOwedX;\\n        uint256 tokenOwedY;\\n    }\\n    \\n    // delta cannot be int128.min and liquidDelta of any one point will not be int128.min\\n    function liquidityAddDelta(uint128 l, int128 delta) internal pure returns (uint128 nl) {\\n        if (delta < 0) {\\n            // in the pool, max(liquidity) < 2 ** 127\\n            // so, -delta > -2**127, -delta <= int128.max\\n            nl = l - uint128(-delta);\\n        } else {\\n            nl = l + uint128(delta);\\n        }\\n    }\\n\\n    function get(\\n        mapping(bytes32 => Data) storage self,\\n        address minter,\\n        int24 tl,\\n        int24 tr\\n    ) internal view returns (Liquidity.Data storage data) {\\n        data = self[keccak256(abi.encodePacked(minter, tl, tr))];\\n    }\\n\\n    function update(\\n        Liquidity.Data storage self,\\n        int128 delta,\\n        uint256 feeScaleX_128,\\n        uint256 feeScaleY_128\\n    ) internal {\\n        Data memory data = self;\\n        uint128 liquidity;\\n        if (delta == 0) {\\n            require(data.liquidity > 0, \\\"L>0\\\");\\n            liquidity = data.liquidity;\\n        } else {\\n            liquidity = liquidityAddDelta(data.liquidity, delta);\\n        }\\n        uint256 deltaScaleX = data.lastFeeScaleX_128;\\n        uint256 deltaScaleY = data.lastFeeScaleY_128;\\n        // use assembly to prevent revert if overflow\\n        // data.lastFeeScaleX(Y)_128 may be \\\"negative\\\" (>=2^255)\\n        assembly {\\n            deltaScaleX := sub(feeScaleX_128, deltaScaleX)\\n            deltaScaleY := sub(feeScaleY_128, deltaScaleY)\\n        }\\n        uint256 feeX = MulDivMath.mulDivFloor(deltaScaleX, data.liquidity, TwoPower.Pow128);\\n        uint256 feeY = MulDivMath.mulDivFloor(deltaScaleY, data.liquidity, TwoPower.Pow128);\\n        data.liquidity = liquidity;\\n\\n        // update the position\\n        if (delta != 0) self.liquidity = liquidity;\\n        self.lastFeeScaleX_128 = feeScaleX_128;\\n        self.lastFeeScaleY_128 = feeScaleY_128;\\n        if (feeX > 0 || feeY > 0) {\\n            // need to withdraw before overflow\\n            self.tokenOwedX += feeX;\\n            self.tokenOwedY += feeY;\\n        }\\n    }\\n    \\n}\",\"keccak256\":\"0x1bdcce0b818c7e1a39862db0f62cb4477a3fafc4e63bc79225dc1ecbd1bb5c1c\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/LogPowMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nlibrary LogPowMath {\\n\\n    int24 internal constant MIN_POINT = -887272;\\n\\n    int24 internal constant MAX_POINT = -MIN_POINT;\\n\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n\\n    uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice sqrt(1.0001^point) in form oy 96-bit fix point num\\n    function getSqrtPrice(int24 point) internal pure returns (uint160 sqrtPrice_96) {\\n        uint256 absIdx = point < 0 ? uint256(-int256(point)) : uint256(int256(point));\\n        require(absIdx <= uint256(int256(MAX_POINT)), 'T');\\n\\n        uint256 value = absIdx & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absIdx & 0x2 != 0) value = (value * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absIdx & 0x4 != 0) value = (value * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absIdx & 0x8 != 0) value = (value * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absIdx & 0x10 != 0) value = (value * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absIdx & 0x20 != 0) value = (value * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absIdx & 0x40 != 0) value = (value * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absIdx & 0x80 != 0) value = (value * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absIdx & 0x100 != 0) value = (value * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absIdx & 0x200 != 0) value = (value * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absIdx & 0x400 != 0) value = (value * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absIdx & 0x800 != 0) value = (value * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absIdx & 0x1000 != 0) value = (value * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absIdx & 0x2000 != 0) value = (value * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absIdx & 0x4000 != 0) value = (value * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absIdx & 0x8000 != 0) value = (value * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absIdx & 0x10000 != 0) value = (value * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absIdx & 0x20000 != 0) value = (value * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absIdx & 0x40000 != 0) value = (value * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absIdx & 0x80000 != 0) value = (value * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (point > 0) value = type(uint256).max / value;\\n\\n        sqrtPrice_96 = uint160((value >> 32) + (value % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    // floor(log1.0001(sqrtPrice_96))\\n    function getLogSqrtPriceFloor(uint160 sqrtPrice_96) internal pure returns (int24 logValue) {\\n        // second inequality must be < because the price can nevex reach the price at the max tick\\n        require(sqrtPrice_96 >= MIN_SQRT_PRICE && sqrtPrice_96 < MAX_SQRT_PRICE, 'R');\\n        uint256 sqrtPrice_128 = uint256(sqrtPrice_96) << 32;\\n\\n        uint256 x = sqrtPrice_128;\\n        uint256 m = 0;\\n\\n        assembly {\\n            let y := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(5, gt(x, 0xFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(4, gt(x, 0xFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(3, gt(x, 0xFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(2, gt(x, 0xF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(1, gt(x, 0x3))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := gt(x, 0x1)\\n            m := or(m, y)\\n        }\\n\\n        if (m >= 128) x = sqrtPrice_128 >> (m - 127);\\n        else x = sqrtPrice_128 << (127 - m);\\n\\n        int256 l2 = (int256(m) - 128) << 64;\\n\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(63, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(62, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(61, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(60, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(59, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(58, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(57, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(56, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(55, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(54, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(53, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(52, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(51, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(50, y))\\n        }\\n\\n        int256 ls10001 = l2 * 255738958999603826347141;\\n\\n        int24 logFloor = int24((ls10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 logUpper = int24((ls10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        logValue = logFloor == logUpper ? logFloor : getSqrtPrice(logUpper) <= sqrtPrice_96 ? logUpper : logFloor;\\n    }\\n\\n    function getLogSqrtPriceFU(uint160 sqrtPrice_96) internal pure returns (int24 logFloor, int24 logUpper) {\\n        // second inequality must be < because the price can nevex reach the price at the max tick\\n        require(sqrtPrice_96 >= MIN_SQRT_PRICE && sqrtPrice_96 < MAX_SQRT_PRICE, 'R');\\n        uint256 sqrtPrice_128 = uint256(sqrtPrice_96) << 32;\\n\\n        uint256 x = sqrtPrice_128;\\n        uint256 m = 0;\\n\\n        assembly {\\n            let y := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(5, gt(x, 0xFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(4, gt(x, 0xFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(3, gt(x, 0xFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(2, gt(x, 0xF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(1, gt(x, 0x3))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := gt(x, 0x1)\\n            m := or(m, y)\\n        }\\n\\n        if (m >= 128) x = sqrtPrice_128 >> (m - 127);\\n        else x = sqrtPrice_128 << (127 - m);\\n\\n        int256 l2 = (int256(m) - 128) << 64;\\n\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(63, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(62, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(61, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(60, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(59, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(58, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(57, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(56, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(55, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(54, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(53, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(52, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(51, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(50, y))\\n        }\\n\\n        int256 ls10001 = l2 * 255738958999603826347141;\\n\\n        logFloor = int24((ls10001 - 3402992956809132418596140100660247210) >> 128);\\n        logUpper = int24((ls10001 + 291339464771989622907027621153398088495) >> 128);\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x2df5e49b100617e8de67d2716538ab7b132abc85985900e475dd95e73b8d73b4\",\"license\":\"MIT\"},\"@izumifinance/iziswap_core/contracts/libraries/MaxMinMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary MaxMinMath {\\n\\n    function max(int24 a, int24 b) internal pure returns (int24) {\\n        if (a > b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    function min(int24 a, int24 b) internal pure returns (int24) {\\n        if (a < b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    function min(uint128 a, uint128 b) internal pure returns (uint128) {\\n        if (a < b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n\\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a < b) {\\n            return a;\\n        }\\n        return b;\\n    }\\n    \\n}\",\"keccak256\":\"0x5ec88223c6a72204ea694755705254d52042ab6d64326ffff8bdabc0156dfe5f\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/MulDivMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary MulDivMath {\\n\\n    // compute res = floor(a * b / c), assuming res < 2^256\\n    function mulDivFloor(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256 res) {\\n        \\n        // let prodMod2_256 = a * b % 2^256\\n        uint256 prodMod2_256; \\n        // let prodDiv2_256 = a * b / 2^256\\n        uint256 prodDiv2_256;\\n        assembly {\\n            let prodModM1 := mulmod(a, b, not(0))\\n            prodMod2_256 := mul(a, b)\\n            prodDiv2_256 := sub(sub(prodModM1, prodMod2_256), lt(prodModM1, prodMod2_256))\\n        }\\n\\n        if (prodDiv2_256 == 0) {\\n            require(c > 0);\\n            assembly {\\n                res := div(prodMod2_256, c)\\n            }\\n            return res;\\n        }\\n\\n        // we should ensure that a * b /c < 2^256 before calling\\n        require(c > prodDiv2_256);\\n\\n        uint256 resMod;\\n        assembly {\\n            resMod := mulmod(a, b, c)\\n            // a * b - resMod\\n            prodDiv2_256 := sub(prodDiv2_256, gt(resMod, prodMod2_256))\\n            prodMod2_256 := sub(prodMod2_256, resMod)\\n\\n            // compute lowbit of c\\n            let lowbit := not(c)\\n            lowbit := add(lowbit, 1)\\n            lowbit := and(lowbit, c)\\n\\n            // c / lowbit\\n            c := div(c, lowbit)\\n            // a * b / lowbit\\n            prodMod2_256 := div(prodMod2_256, lowbit)\\n            lowbit := add(div(sub(0, lowbit), lowbit), 1)\\n            prodDiv2_256 := mul(prodDiv2_256, lowbit)\\n            prodMod2_256 := or(prodMod2_256, prodDiv2_256)\\n\\n            // get inv of c\\n            // cInv * c = 1 (mod 2^4)\\n            let cInv := xor(mul(3, c), 2)\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^8\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^16\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^32\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^64\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^128\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^256\\n\\n            // a * b / c = prodMod2_256 * cInv (mod 2^256)\\n            res := mul(prodMod2_256, cInv)\\n        }\\n    }\\n\\n    // compute res = ceil(a * b / c), assuming res < 2^256\\n    function mulDivCeil(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256 res) {\\n        res = mulDivFloor(a, b, c);\\n        if (mulmod(a, b, c) > 0) {\\n            require(res < type(uint256).max);\\n            res++;\\n        }\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x9c872453614deb78d9e01dd5a3381c7c0c9f51599e027c0597a670a95c99b93d\",\"license\":\"MIT\"},\"@izumifinance/iziswap_core/contracts/libraries/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary Oracle {\\n\\n    struct Observation {\\n        uint32 timestamp;\\n        // sigma (point_i * time_i - time_(i-1))\\n        int56 accPoint;\\n        // true if this observation is inited\\n        bool init;\\n    }\\n\\n    /// @notice Record a new observation with a circular queue.\\n    /// @param last the specified observation to be updated\\n    /// @param timestamp the timestamp of the new observation, > last.timestamp\\n    /// @param currentPoint log 1.0001 of price\\n    /// @return observation generated\\n    function newObservation(\\n        Observation memory last,\\n        uint32 timestamp,\\n        int24 currentPoint\\n    ) private pure returns (Observation memory) {\\n        uint56 delta = uint56(timestamp - last.timestamp);\\n        return\\n            Observation({\\n                timestamp: timestamp,\\n                accPoint: last.accPoint + int56(currentPoint) * int56(delta),\\n                init: true\\n            });\\n    }\\n\\n    function init(Observation[65535] storage self, uint32 timestamp)\\n        internal\\n        returns (uint16 queueLen, uint16 nextQueueLen)\\n    {\\n        self[0] = Observation({\\n            timestamp: timestamp,\\n            accPoint: 0,\\n            init: true\\n        });\\n        return (1, 1);\\n    }\\n\\n    /// @notice Append a price oracle observation data in the pool\\n    /// @param self circular-queue of observation data in array form\\n    /// @param currentIndex the index of the last observation in the array\\n    /// @param timestamp timestamp of new observation\\n    /// @param currentPoint current point of new observation (usually we append the point value just-before exchange)\\n    /// @param queueLen max-length of circular queue\\n    /// @param nextQueueLen next max-length of circular queue, if length of queue increase over queueLen, queueLen will become nextQueueLen\\n    /// @return newIndex index of new observation\\n    /// @return newQueueLen queueLen value after appending\\n    function append(\\n        Observation[65535] storage self,\\n        uint16 currentIndex,\\n        uint32 timestamp,\\n        int24 currentPoint,\\n        uint16 queueLen,\\n        uint16 nextQueueLen\\n    ) internal returns (uint16 newIndex, uint16 newQueueLen) {\\n        Observation memory last = self[currentIndex];\\n\\n        if (last.timestamp == timestamp) return (currentIndex, queueLen);\\n\\n        // if the conditions are right, we can bump the cardinality\\n        if (nextQueueLen > queueLen && currentIndex == (queueLen - 1)) {\\n            newQueueLen = nextQueueLen;\\n        } else {\\n            newQueueLen = queueLen;\\n        }\\n\\n        newIndex = (currentIndex + 1) % newQueueLen;\\n        self[newIndex] = newObservation(last, timestamp, currentPoint);\\n    }\\n\\n    /// @notice Expand the max-length of observation queue\\n    /// @param queueLen current max-length of queue\\n    /// @param nextQueueLen next max-length\\n    /// @return next max-length\\n    function expand(\\n        Observation[65535] storage self,\\n        uint16 queueLen,\\n        uint16 nextQueueLen\\n    ) internal returns (uint16) {\\n        require(queueLen > 0, 'LEN');\\n        \\n        if (nextQueueLen <= queueLen) return queueLen;\\n        \\n        for (uint16 i = queueLen; i < nextQueueLen; i++) self[i].timestamp = 1;\\n        return nextQueueLen;\\n    }\\n\\n    function lte(\\n        uint32 time,\\n        uint32 a,\\n        uint32 b\\n    ) private pure returns (bool) {\\n        if (a <= time && b <= time) return a <= b;\\n\\n        uint256 aAdjusted = a > time ? a : a + 2**32;\\n        uint256 bAdjusted = b > time ? b : b + 2**32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n    \\n    /// @notice Binary search to find two neighbor observations for a target timestamp\\n    /// @param self observation queue in array form\\n    /// @param timestamp timestamp of current block\\n    /// @param targetTimestamp target time stamp\\n    /// @param currentIdx The index of the last observation in the array\\n    /// @param queueLen current max-length of queue\\n    /// @return beforeNeighbor before-or-at observation neighbor to target timestamp\\n    /// @return afterNeighbor after-or-at observation neighbor to target timestamp\\n    function findNeighbor(\\n        Observation[65535] storage self,\\n        uint32 timestamp,\\n        uint32 targetTimestamp,\\n        uint16 currentIdx,\\n        uint16 queueLen\\n    ) private view returns (Observation memory beforeNeighbor, Observation memory afterNeighbor) {\\n        uint256 l = (currentIdx + 1) % queueLen; // oldest observation\\n        uint256 r = l + queueLen - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            i = (l + r) / 2;\\n\\n            beforeNeighbor = self[i % queueLen];\\n\\n            if (!beforeNeighbor.init) {\\n                l = i + 1;\\n                continue;\\n            }\\n\\n            afterNeighbor = self[(i + 1) % queueLen];\\n\\n            bool leftLessOrEq = lte(timestamp, beforeNeighbor.timestamp, targetTimestamp);\\n\\n            if (leftLessOrEq && lte(timestamp, targetTimestamp, afterNeighbor.timestamp)) break;\\n\\n            if (!leftLessOrEq) r = i - 1;\\n            else l = i + 1;\\n        }\\n    }\\n\\n    /// @notice Find two neighbor observations for a target timestamp\\n    /// @param self observation queue in array form\\n    /// @param timestamp timestamp of current block\\n    /// @param targetTimestamp target time stamp\\n    /// @param currentPoint current point of swap\\n    /// @param currentIndex the index of the last observation in the array\\n    /// @param queueLen current max-length of queue\\n    /// @return beforeNeighbor before-or-at observation neighbor to target timestamp\\n    /// @return afterNeighbor after-or-at observation neighbor to target timestamp, if the targetTimestamp is later than last observation in queue,\\n    ///     the afterNeighbor observation does not exist in the queue\\n    function getTwoNeighborObservation(\\n        Observation[65535] storage self,\\n        uint32 timestamp,\\n        uint32 targetTimestamp,\\n        int24 currentPoint,\\n        uint16 currentIndex,\\n        uint16 queueLen\\n    ) private view returns (Observation memory beforeNeighbor, Observation memory afterNeighbor) {\\n        beforeNeighbor = self[currentIndex];\\n\\n        if (lte(timestamp, beforeNeighbor.timestamp, targetTimestamp)) {\\n            if (beforeNeighbor.timestamp == targetTimestamp) {\\n                return (beforeNeighbor, beforeNeighbor);\\n            } else {\\n                return (beforeNeighbor, newObservation(beforeNeighbor, targetTimestamp, currentPoint));\\n            }\\n        }\\n\\n        beforeNeighbor = self[(currentIndex + 1) % queueLen];\\n        if (!beforeNeighbor.init) beforeNeighbor = self[0];\\n\\n        require(lte(timestamp, beforeNeighbor.timestamp, targetTimestamp), 'OLD');\\n\\n        return findNeighbor(self, timestamp, targetTimestamp, currentIndex, queueLen);\\n    }\\n\\n    /// @dev Revert if secondsAgo too large.\\n    /// @param self the observation circular queue in array form\\n    /// @param timestamp the current block timestamp\\n    /// @param secondsAgo target timestamp is timestamp-secondsAg, 0 to return the current cumulative values.\\n    /// @param currentPoint the current point of pool\\n    /// @param currentIndex the index of the last observation in the array\\n    /// @param queueLen max-length of circular queue\\n    /// @return accPoint integral value of point(time) from 0 to each timestamp\\n    function observeSingle(\\n        Observation[65535] storage self,\\n        uint32 timestamp,\\n        uint32 secondsAgo,\\n        int24 currentPoint,\\n        uint16 currentIndex,\\n        uint16 queueLen\\n    ) internal view returns (int56 accPoint ) {\\n        if (secondsAgo == 0) {\\n            Observation memory last = self[currentIndex];\\n            if (last.timestamp != timestamp) last = newObservation(last, timestamp, currentPoint);\\n            return last.accPoint;\\n        }\\n\\n        uint32 targetTimestamp = timestamp - secondsAgo;\\n\\n        (Observation memory beforeNeighbor, Observation memory afterNeighbor) =\\n            getTwoNeighborObservation(self, timestamp, targetTimestamp, currentPoint, currentIndex, queueLen);\\n\\n        if (targetTimestamp == beforeNeighbor.timestamp) {\\n            // we're at the left boundary\\n            return beforeNeighbor.accPoint;\\n        } else if (targetTimestamp == afterNeighbor.timestamp) {\\n            // we're at the right boundary\\n            return afterNeighbor.accPoint;\\n        } else {\\n            // we're in the middle\\n            uint56 leftRightTimeDelta = afterNeighbor.timestamp - beforeNeighbor.timestamp;\\n            uint56 targetTimeDelta = targetTimestamp - beforeNeighbor.timestamp;\\n            return beforeNeighbor.accPoint  + \\n                (afterNeighbor.accPoint - beforeNeighbor.accPoint) / int56(leftRightTimeDelta) * int56(targetTimeDelta);\\n        }\\n    }\\n\\n    /// @notice Returns the integral value of point with time \\n    /// @dev Reverts if target timestamp is early than oldest observation in the queue\\n    /// @dev If you call this method with secondsAgos = [3600, 0]. the average point of this pool during recent hour is (accPoints[1] - accPoints[0]) / 3600\\n    /// @param self the observation circular queue in array form\\n    /// @param timestamp the current block timestamp\\n    /// @param secondsAgos describe the target timestamp , targetTimestimp[i] = block.timestamp - secondsAgo[i]\\n    /// @param currentPoint the current point of pool\\n    /// @param currentIndex the index of the last observation in the array\\n    /// @param queueLen max-length of circular queue\\n    /// @return accPoints integral value of point(time) from 0 to each timestamp\\n    function observe(\\n        Observation[65535] storage self,\\n        uint32 timestamp,\\n        uint32[] memory secondsAgos,\\n        int24 currentPoint,\\n        uint16 currentIndex,\\n        uint16 queueLen\\n    ) internal view returns (int56[] memory accPoints ) {\\n        require(queueLen > 0, 'I');\\n\\n        accPoints = new int56[](secondsAgos.length);\\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\\n            accPoints[i] = observeSingle(\\n                self,\\n                timestamp,\\n                secondsAgos[i],\\n                currentPoint,\\n                currentIndex,\\n                queueLen\\n            );\\n        }\\n    }\\n    \\n}\",\"keccak256\":\"0x940464e994da7e29b09bd9a9441a49307ce74acea94e26f99a993fbb72ea332c\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/OrderOrEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary OrderOrEndpoint {\\n    \\n    function getOrderOrEndptVal(mapping(int24 =>int24) storage self, int24 point, int24 pd) internal view returns(int24 val) {\\n        if (point % pd != 0) {\\n            return 0;\\n        }\\n        val = self[point / pd];\\n    }\\n    function setOrderOrEndptVal(mapping(int24 =>int24) storage self, int24 point, int24 pd, int24 val) internal {\\n        self[point / pd] = val;\\n    }\\n    \\n}\",\"keccak256\":\"0x64ec5b7c467be15bb69db9463cc7366015143d602ea682a7840bb0738cbb283e\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/Point.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary Point {\\n    \\n    struct Data {\\n        uint128 liquidSum;\\n        // value to add when pass this slot from left to right\\n        // value to dec when pass this slot from right to left\\n        int128 liquidDelta;\\n        // if pointPrice < currPrice\\n        //    value = sigma(feeScaleX(p)), which p < pointPrice\\n        // if pointPrice >= currPrice\\n        //    value = sigma(feeScaleX(p)), which p >= pointPrice\\n        uint256 accFeeXOut_128;\\n        // similar to accFeeXOut_128\\n        uint256 accFeeYOut_128;\\n        // whether the point is endpoint of a liquid segment\\n        bool isEndpt;\\n    }\\n    \\n    function _getFeeScaleL(\\n        int24 endpt,\\n        int24 currpt,\\n        uint256 feeScale_128,\\n        uint256 feeScaleBeyond_128\\n    ) internal pure returns (uint256 feeScaleL_128) {\\n        if (endpt <= currpt) {\\n            feeScaleL_128 = feeScaleBeyond_128;\\n        } else {\\n            assembly {\\n                feeScaleL_128:= sub(feeScale_128, feeScaleBeyond_128)\\n            }\\n        }\\n    }\\n    function _getFeeScaleGE(\\n        int24 endpt,\\n        int24 currpt,\\n        uint256 feeScale_128,\\n        uint256 feeScaleBeyond_128\\n    ) internal pure returns (uint256 feeScaleGE_128) {\\n        if (endpt > currpt) {\\n            feeScaleGE_128 = feeScaleBeyond_128;\\n        } else {\\n            assembly {\\n                feeScaleGE_128:= sub(feeScale_128, feeScaleBeyond_128)\\n            }\\n        }\\n    }\\n    /// @dev Calculate fee scale within range [pl, pr).\\n    /// @param axies collection of points of liquidities\\n    /// @param pl left endpoint of the segment\\n    /// @param pr right endpoint of the segment\\n    /// @param currpt point of the curr price\\n    /// @param feeScaleX_128 total fee scale of token x accummulated of the exchange\\n    /// @param feeScaleY_128 similar to feeScaleX_128\\n    /// @return accFeeXIn_128 accFeeYIn_128 fee scale of token x and token y within range [pl, pr)\\n    function getSubFeeScale(\\n        mapping(int24 =>Point.Data) storage axies,\\n        int24 pl,\\n        int24 pr,\\n        int24 currpt,\\n        uint256 feeScaleX_128,\\n        uint256 feeScaleY_128\\n    ) internal view returns (uint256 accFeeXIn_128, uint256 accFeeYIn_128) {\\n        Point.Data storage plData = axies[pl];\\n        Point.Data storage prData = axies[pr];\\n        // tot fee scale of token x for price < pl\\n        uint256 feeScaleLX_128 = _getFeeScaleL(pl, currpt, feeScaleX_128, plData.accFeeXOut_128);\\n        // to fee scale of token x for price >= pr\\n        uint256 feeScaleGEX_128 = _getFeeScaleGE(pr, currpt, feeScaleX_128, prData.accFeeXOut_128);\\n        uint256 feeScaleLY_128 = _getFeeScaleL(pl, currpt, feeScaleY_128, plData.accFeeYOut_128);\\n        uint256 feeScaleGEY_128 = _getFeeScaleGE(pr, currpt, feeScaleY_128, prData.accFeeYOut_128);\\n        assembly{\\n            accFeeXIn_128 := sub(sub(feeScaleX_128, feeScaleLX_128), feeScaleGEX_128)\\n            accFeeYIn_128 := sub(sub(feeScaleY_128, feeScaleLY_128), feeScaleGEY_128)\\n        }\\n    }\\n    \\n    /// @dev Update and endpoint of a liquidity segment.\\n    /// @param axies collections of points\\n    /// @param endpt endpoint of a segment\\n    /// @param isLeft left or right endpoint\\n    /// @param currpt point of current price\\n    /// @param delta >0 for add liquidity and <0 for dec\\n    /// @param liquidLimPt liquid limit per point\\n    /// @param feeScaleX_128 total fee scale of token x\\n    /// @param feeScaleY_128 total fee scale of token y\\n    function updateEndpoint(\\n        mapping(int24 =>Point.Data) storage axies,\\n        int24 endpt,\\n        bool isLeft,\\n        int24 currpt,\\n        int128 delta,\\n        uint128 liquidLimPt,\\n        uint256 feeScaleX_128,\\n        uint256 feeScaleY_128\\n    ) internal returns (bool) {\\n        Point.Data storage data = axies[endpt];\\n        uint128 liquidAccBefore = data.liquidSum;\\n        // delta cannot be 0\\n        require(delta!=0, \\\"D0\\\");\\n        // liquide acc cannot overflow\\n        uint128 liquidAccAfter;\\n        if (delta > 0) {\\n            liquidAccAfter = liquidAccBefore + uint128(delta);\\n            require(liquidAccAfter > liquidAccBefore, \\\"LAAO\\\");\\n        } else {\\n            liquidAccAfter = liquidAccBefore - uint128(-delta);\\n            require(liquidAccAfter < liquidAccBefore, \\\"LASO\\\");\\n        }\\n        require(liquidAccAfter <= liquidLimPt, \\\"L LIM PT\\\");\\n        data.liquidSum = liquidAccAfter;\\n\\n        if (isLeft) {\\n            data.liquidDelta = data.liquidDelta + delta;\\n        } else {\\n            data.liquidDelta = data.liquidDelta - delta;\\n        }\\n        bool new_or_erase = false;\\n        if (liquidAccBefore == 0) {\\n            // a new endpoint of certain segment\\n            new_or_erase = true;\\n            data.isEndpt = true;\\n\\n            // for either left point or right point of the liquide segment\\n            // the feeScaleBeyond can be initialized to arbitrary value\\n            // we here set the initial val to total feeScale to delay overflow\\n            if (endpt >= currpt) {\\n                data.accFeeXOut_128 = feeScaleX_128;\\n                data.accFeeYOut_128 = feeScaleY_128;\\n            }\\n        } else if (liquidAccAfter == 0) {\\n            // no segment use this endpoint\\n            new_or_erase = true;\\n            data.isEndpt = false;\\n        }\\n        return new_or_erase;\\n    }\\n\\n    /// @dev Pass the endpoint, change the feescale beyond the price.\\n    /// @param endpt endpoint to change\\n    /// @param feeScaleX_128 total fee scale of token x\\n    /// @param feeScaleY_128 total fee scale of token y \\n    function passEndpoint(\\n        Point.Data storage endpt,\\n        uint256 feeScaleX_128,\\n        uint256 feeScaleY_128\\n    ) internal {\\n        uint256 accFeeXOut_128 = endpt.accFeeXOut_128;\\n        uint256 accFeeYOut_128 = endpt.accFeeYOut_128;\\n        assembly {\\n            accFeeXOut_128 := sub(feeScaleX_128, accFeeXOut_128)\\n            accFeeYOut_128 := sub(feeScaleY_128, accFeeYOut_128)\\n        }\\n        endpt.accFeeXOut_128 = accFeeXOut_128;\\n        endpt.accFeeYOut_128 = accFeeYOut_128;\\n    }\\n\\n}\",\"keccak256\":\"0xaf3347d916730ca86fd1d5214f848a32366f9649240f1404e47697dc6224680d\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/PointBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary PointBitmap {\\n\\n    function MSB(uint256 number) internal pure returns (uint8 msb) {\\n        require(number > 0);\\n\\n        if (number >= 0x100000000000000000000000000000000) {\\n            number >>= 128;\\n            msb += 128;\\n        }\\n        if (number >= 0x10000000000000000) {\\n            number >>= 64;\\n            msb += 64;\\n        }\\n        if (number >= 0x100000000) {\\n            number >>= 32;\\n            msb += 32;\\n        }\\n        if (number >= 0x10000) {\\n            number >>= 16;\\n            msb += 16;\\n        }\\n        if (number >= 0x100) {\\n            number >>= 8;\\n            msb += 8;\\n        }\\n        if (number >= 0x10) {\\n            number >>= 4;\\n            msb += 4;\\n        }\\n        if (number >= 0x4) {\\n            number >>= 2;\\n            msb += 2;\\n        }\\n        if (number >= 0x2) msb += 1;\\n    }\\n\\n    function LSB(uint256 number) internal pure returns (uint8 msb) {\\n        require(number > 0);\\n\\n        msb = 255;\\n        if (number & type(uint128).max > 0) {\\n            msb -= 128;\\n        } else {\\n            number >>= 128;\\n        }\\n        if (number & type(uint64).max > 0) {\\n            msb -= 64;\\n        } else {\\n            number >>= 64;\\n        }\\n        if (number & type(uint32).max > 0) {\\n            msb -= 32;\\n        } else {\\n            number >>= 32;\\n        }\\n        if (number & type(uint16).max > 0) {\\n            msb -= 16;\\n        } else {\\n            number >>= 16;\\n        }\\n        if (number & type(uint8).max > 0) {\\n            msb -= 8;\\n        } else {\\n            number >>= 8;\\n        }\\n        if (number & 0xf > 0) {\\n            msb -= 4;\\n        } else {\\n            number >>= 4;\\n        }\\n        if (number & 0x3 > 0) {\\n            msb -= 2;\\n        } else {\\n            number >>= 2;\\n        }\\n        if (number & 0x1 > 0) msb -= 1;\\n    }\\n\\n    /// @notice Flips the initialized state for a given point from false to true, or vice versa\\n    /// @param self The mapping in which to flip the point\\n    /// @param point The point to flip\\n    /// @param pointDelta The spacing between usable points\\n    function flipPoint(\\n        mapping(int16 => uint256) storage self,\\n        int24 point,\\n        int24 pointDelta\\n    ) internal {\\n        require(point % pointDelta == 0);\\n        int24 mapPt = point / pointDelta;\\n        int16 wordIdx = int16(mapPt >> 8);\\n        uint8 bitIdx = uint8(uint24(mapPt % 256));\\n        self[wordIdx] ^= 1 << bitIdx;\\n    }\\n\\n    function setOne(\\n        mapping(int16 => uint256) storage self,\\n        int24 point,\\n        int24 pointDelta\\n    ) internal {\\n        require(point % pointDelta == 0);\\n        int24 mapPt = point / pointDelta;\\n        int16 wordIdx = int16(mapPt >> 8);\\n        uint8 bitIdx = uint8(uint24(mapPt % 256));\\n        self[wordIdx] |= 1 << bitIdx;\\n    }\\n\\n    function setZero(\\n        mapping(int16 => uint256) storage self,\\n        int24 point,\\n        int24 pointDelta\\n    ) internal {\\n        require(point % pointDelta == 0);\\n        int24 mapPt = point / pointDelta;\\n        int16 wordIdx = int16(mapPt >> 8);\\n        uint8 bitIdx = uint8(uint24(mapPt % 256));\\n        self[wordIdx] &= ~(1 << bitIdx);\\n    }\\n\\n    // find nearest one from point, or boundary in the same word\\n    function nearestLeftOneOrBoundary(\\n        mapping(int16 => uint256) storage self,\\n        int24 point,\\n        int24 pointDelta\\n    ) internal view returns (int24 left) {\\n        int24 mapPt = point / pointDelta;\\n        if (point < 0 && point % pointDelta != 0) mapPt--; // round towards negative infinity\\n\\n        int16 wordIdx = int16(mapPt >> 8);\\n        uint8 bitIdx = uint8(uint24(mapPt % 256));\\n        \\n        uint256 ones = self[wordIdx] & ((1 << bitIdx) - 1 + (1 << bitIdx));\\n\\n        left = (ones != 0)\\n            ? (mapPt - int24(uint24(bitIdx - MSB(ones)))) * pointDelta\\n            : (mapPt - int24(uint24(bitIdx))) * pointDelta;\\n        \\n    }\\n    \\n    // find nearest one from point, or boundary in the same word\\n    function nearestRightOneOrBoundary(\\n        mapping(int16 => uint256) storage self,\\n        int24 point,\\n        int24 pointDelta\\n    ) internal view returns (int24 right) {\\n        int24 mapPt = point / pointDelta;\\n        if (point < 0 && point % pointDelta != 0) mapPt--; // round towards negative infinity\\n\\n        mapPt += 1;\\n        int16 wordIdx = int16(mapPt >> 8);\\n        uint8 bitIdx = uint8(uint24(mapPt % 256));\\n        \\n        uint256 ones = self[wordIdx] & (~((1 << bitIdx) - 1));\\n\\n        right = (ones != 0)\\n            ? (mapPt + int24(uint24(LSB(ones) - bitIdx))) * pointDelta\\n            : (mapPt + int24(uint24(type(uint8).max - bitIdx))) * pointDelta;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xab918b619b62807aab1823dfe70c964af0b8cf5439a2de66bf1aa22e8a854cda\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/State.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nstruct State {\\n    // a 96 fixpoing number describe the sqrt value of current price(tokenX/tokenY)\\n    uint160 sqrtPrice_96;\\n    // The current point of the pool, 1.0001 ^ currentPoint = price\\n    int24 currentPoint;\\n    // The index of the last oracle observation that was written,\\n    uint16 observationCurrentIndex;\\n    // The current maximum number of observations stored in the pool,\\n    uint16 observationQueueLen;\\n    // The next maximum number of observations, to be updated when the observation.\\n    uint16 observationNextQueueLen;\\n    // whether the pool is locked (only used for checking reentrance)\\n    bool locked;\\n    // total liquidity on the currentPoint (currX * sqrtPrice + currY / sqrtPrice)\\n    uint128 liquidity;\\n    // liquidity of tokenX, liquidity of tokenY is liquidity - liquidityX\\n    uint128 liquidityX;\\n}\\n\",\"keccak256\":\"0x93c50753ff766f7245f6a4a55101575d6255646069ce577ee6e32d191e0a2fae\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/SwapMathX2Y.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./MulDivMath.sol\\\";\\nimport \\\"./TwoPower.sol\\\";\\nimport \\\"./AmountMath.sol\\\";\\nimport \\\"./State.sol\\\";\\nimport \\\"./MaxMinMath.sol\\\";\\nimport \\\"./Converter.sol\\\";\\n\\nlibrary SwapMathX2Y {\\n\\n    // group returned values of x2YRange to avoid stake too deep\\n    struct RangeRetState {\\n        // whether user run out of amountX\\n        bool finished;\\n        // actual cost of tokenX to buy tokenY\\n        uint128 costX;\\n        // amount of acquired tokenY\\n        uint256 acquireY;\\n        // final point after this swap\\n        int24 finalPt;\\n        // sqrt price on final point\\n        uint160 sqrtFinalPrice_96;\\n        // liquidity of tokenX at finalPt\\n        uint128 liquidityX;\\n    }\\n\\n    function x2YAtPrice(\\n        uint128 amountX,\\n        uint160 sqrtPrice_96,\\n        uint128 currY\\n    ) internal pure returns (uint128 costX, uint128 acquireY) {\\n        uint256 l = MulDivMath.mulDivFloor(amountX, sqrtPrice_96, TwoPower.Pow96);\\n        acquireY = Converter.toUint128(MulDivMath.mulDivFloor(l, sqrtPrice_96, TwoPower.Pow96));\\n        if (acquireY > currY) {\\n            acquireY = currY;\\n        }\\n        l = MulDivMath.mulDivCeil(acquireY, TwoPower.Pow96, sqrtPrice_96);\\n        uint256 cost = MulDivMath.mulDivCeil(l, TwoPower.Pow96, sqrtPrice_96);\\n        // costX <= amountX <= uint128.max\\n        costX = uint128(cost);\\n    }\\n\\n    function mulDivCeil(uint256 a, uint256 b, uint256 c) internal pure returns (uint256) {\\n        uint256 v = a * b;\\n        if (v % c == 0) {\\n            return v / c;\\n        }\\n        return v / c + 1;\\n    }\\n\\n    function x2YAtPriceLiquidity(\\n        uint128 amountX,\\n        uint160 sqrtPrice_96,\\n        uint128 liquidity,\\n        uint128 liquidityX\\n    ) internal pure returns (uint128 costX, uint256 acquireY, uint128 newLiquidityX) {\\n        uint256 liquidityY = uint256(liquidity - liquidityX);\\n        uint256 maxTransformLiquidityX = MulDivMath.mulDivFloor(amountX, sqrtPrice_96, TwoPower.Pow96);\\n        // transformLiquidityX <= liquidityY <= uint128.max\\n        uint128 transformLiquidityX = uint128(MaxMinMath.min256(maxTransformLiquidityX, liquidityY));\\n\\n        // 1. transformLiquidityX * TwoPower.Pow96 < 2^128 * 2^96 < 2^224 < 2^256\\n        // 2. transformLiquidityX <= floor(amountX * sqrtPrice_96 / TwoPower.Pow96)\\n        // ceil(transformLiquidityX * sqrtPrice_96 / TwoPower.Pow96) <=\\n        // ceil(floor(amountX * sqrtPrice_96 / TwoPower.Pow96) * sqrtPrice_96 / TwoPower.Pow96) <=\\n        // ceil(amountX * sqrtPrice_96 / TwoPower.Pow96 * sqrtPrice_96 / TwoPower.Pow96) =\\n        // ceil(amountX) = amountX <= uint128.max\\n        costX = uint128(mulDivCeil(transformLiquidityX, TwoPower.Pow96, sqrtPrice_96));\\n        acquireY = MulDivMath.mulDivFloor(transformLiquidityX, sqrtPrice_96, TwoPower.Pow96);\\n        newLiquidityX = liquidityX + transformLiquidityX;\\n    }\\n    \\n    struct Range {\\n        uint128 liquidity;\\n        uint160 sqrtPriceL_96;\\n        int24 leftPt;\\n        uint160 sqrtPriceR_96;\\n        int24 rightPt;\\n        uint160 sqrtRate_96;\\n    }\\n    \\n    struct RangeCompRet {\\n        uint128 costX;\\n        uint256 acquireY;\\n        bool completeLiquidity;\\n        int24 locPt;\\n        uint160 sqrtLoc_96;\\n    }\\n\\n    /// @dev Move from rightPt to leftPt, the range is [leftPt, rightPt).\\n    function x2YRangeComplete(\\n        Range memory rg,\\n        uint128 amountX\\n    ) internal pure returns (\\n        RangeCompRet memory ret\\n    ) {\\n        // rg.sqrtPriceR_96 * 2^96 < 2^160 * 2^96 = 2^256\\n        uint160 sqrtPricePrM1_96 = uint160(mulDivCeil(rg.sqrtPriceR_96, TwoPower.Pow96, rg.sqrtRate_96));\\n        uint160 sqrtPricePrMl_96 = LogPowMath.getSqrtPrice(rg.rightPt - rg.leftPt);\\n        // rg.rightPt - rg.leftPt <= 256 * 100\\n        // 1.0001 ** 25600 < 13\\n        // 13 * 2^96 - 2^96 < 2^100\\n        // rg.liquidity * (sqrtPricePrMl_96 - TwoPower.Pow96) < 2^228 < 2^256\\n        uint256 maxX = mulDivCeil(rg.liquidity, sqrtPricePrMl_96 - TwoPower.Pow96, rg.sqrtPriceR_96 - sqrtPricePrM1_96);\\n        if (maxX <= amountX) {\\n            // maxX <= amountX <= uint128.max\\n            ret.costX = uint128(maxX);\\n            ret.acquireY = AmountMath.getAmountY(rg.liquidity, rg.sqrtPriceL_96, rg.sqrtPriceR_96, rg.sqrtRate_96, false);\\n            ret.completeLiquidity = true;\\n        } else {\\n            // we should locate lowest price\\n            // 1. amountX * (rg.sqrtPriceR_96 - sqrtPricePrM1_96)\\n            // < maxX * (rg.sqrtPriceR_96 - sqrtPricePrM1_96)\\n            // < rg.liquidity * (sqrtPricePrMl_96 - TwoPower.Pow96) + (rg.sqrtPriceR_96 - sqrtPricePrM1_96)\\n            // < 2^228 + 2^160 < 2^256\\n            // 2. sqrtValue_96 = amountX * (rg.sqrtPriceR_96 - sqrtPricePrM1_96) // rg.liquidity + 2^96\\n            // <= amountX * (rg.sqrtPriceR_96 - sqrtPricePrM1_96) / rg.liquidity + 2^96\\n            // <= (maxX - 1) * (rg.sqrtPriceR_96 - sqrtPricePrM1_96) / rg.liquidity + 2^96\\n            // < rg.liquidity * (sqrtPricePrMl_96 - 2^96) / (rg.sqrtPriceR_96 - sqrtPricePrM1_96) * (rg.sqrtPriceR_96 - sqrtPricePrM1_96) / rg.liquidity + 2^96\\n            // = sqrtPricePrMl_96 < 2^160\\n            uint160 sqrtValue_96 = uint160(uint256(amountX) * (uint256(rg.sqrtPriceR_96) - sqrtPricePrM1_96) / uint256(rg.liquidity) + TwoPower.Pow96);\\n\\n            int24 logValue = LogPowMath.getLogSqrtPriceFloor(sqrtValue_96);\\n\\n            ret.locPt = rg.rightPt - logValue;\\n\\n            ret.locPt = MaxMinMath.min(ret.locPt, rg.rightPt);\\n            ret.locPt = MaxMinMath.max(ret.locPt, rg.leftPt + 1);\\n            ret.completeLiquidity = false;\\n            \\n            if (ret.locPt == rg.rightPt) {\\n                ret.costX = 0;\\n                ret.acquireY = 0;\\n                ret.locPt = ret.locPt - 1;\\n                ret.sqrtLoc_96 = LogPowMath.getSqrtPrice(ret.locPt);\\n            } else {\\n                uint160 sqrtPricePrMloc_96 = LogPowMath.getSqrtPrice(rg.rightPt - ret.locPt);\\n                // rg.rightPt - ret.locPt <= 256 * 100\\n                // 1.0001 ** 25600 < 13\\n                // 13 * 2^96 - 2^96 < 2^100\\n                // rg.liquidity * (sqrtPricePrMloc_96 - TwoPower.Pow96) < 2^228 < 2^256\\n                uint256 costX256 = mulDivCeil(rg.liquidity, sqrtPricePrMloc_96 - TwoPower.Pow96, rg.sqrtPriceR_96 - sqrtPricePrM1_96);\\n                // ret.costX <= amountX <= uint128.max\\n                ret.costX = uint128(MaxMinMath.min256(costX256, amountX));\\n                \\n                ret.locPt = ret.locPt - 1;\\n                ret.sqrtLoc_96 = LogPowMath.getSqrtPrice(ret.locPt);\\n\\n                uint160 sqrtLocA1_96 = uint160(\\n                    uint256(ret.sqrtLoc_96) +\\n                    uint256(ret.sqrtLoc_96) * (uint256(rg.sqrtRate_96) - TwoPower.Pow96) / TwoPower.Pow96\\n                );\\n                ret.acquireY = AmountMath.getAmountY(rg.liquidity, sqrtLocA1_96, rg.sqrtPriceR_96, rg.sqrtRate_96, false);\\n            }\\n        }\\n    }\\n    \\n    /// @notice Compute amount of tokens exchanged during swapX2Y and some amount values (currX, currY, allX) on final point\\n    ///    after this swap.\\n    /// @param currentState state values containing (currX, currY, allX) of start point\\n    /// @param leftPt left most point during this swap\\n    /// @param sqrtRate_96 sqrt(1.0001)\\n    /// @param amountX max amount of tokenX user willing to pay\\n    /// @return retState amount of token acquired and some values on final point\\n    function x2YRange(\\n        State memory currentState,\\n        int24 leftPt,\\n        uint160 sqrtRate_96,\\n        uint128 amountX\\n    ) internal pure returns (\\n        RangeRetState memory retState\\n    ) {\\n        retState.costX = 0;\\n        retState.acquireY = 0;\\n        retState.finished = false;\\n\\n        bool currentHasY = (currentState.liquidityX < currentState.liquidity);\\n        if (currentHasY && (currentState.liquidityX > 0 || leftPt == currentState.currentPoint)) {\\n            (retState.costX, retState.acquireY, retState.liquidityX) = x2YAtPriceLiquidity(\\n                amountX, currentState.sqrtPrice_96, currentState.liquidity, currentState.liquidityX\\n            );\\n            if (retState.liquidityX < currentState.liquidity ||  retState.costX >= amountX) {\\n                // remaining x is not enough to down current price to price / 1.0001\\n                // but x may remain, so we cannot simply use (costX == amountX)\\n                retState.finished = true;\\n                retState.finalPt = currentState.currentPoint;\\n                retState.sqrtFinalPrice_96 = currentState.sqrtPrice_96;\\n            } else {\\n                amountX -= retState.costX;\\n            }\\n        } else if (currentHasY) { // all y\\n            currentState.currentPoint = currentState.currentPoint + 1;\\n            // sqrt(price) + sqrt(price) * (1.0001 - 1) == sqrt(price) * 1.0001\\n            currentState.sqrtPrice_96 = uint160(\\n                uint256(currentState.sqrtPrice_96) +\\n                uint256(currentState.sqrtPrice_96) * (uint256(sqrtRate_96) - TwoPower.Pow96) / TwoPower.Pow96\\n            );\\n        } else {\\n            retState.liquidityX = currentState.liquidityX;\\n        }\\n\\n        if (retState.finished) {\\n            return retState;\\n        }\\n\\n        if (leftPt < currentState.currentPoint) {\\n            uint160 sqrtPriceL_96 = LogPowMath.getSqrtPrice(leftPt);\\n            RangeCompRet memory ret = x2YRangeComplete(\\n                Range({\\n                    liquidity: currentState.liquidity,\\n                    sqrtPriceL_96: sqrtPriceL_96,\\n                    leftPt: leftPt, \\n                    sqrtPriceR_96: currentState.sqrtPrice_96, \\n                    rightPt: currentState.currentPoint, \\n                    sqrtRate_96: sqrtRate_96\\n                }),\\n                amountX\\n            );\\n            retState.costX += ret.costX;\\n            amountX -= ret.costX;\\n            retState.acquireY += ret.acquireY;\\n            if (ret.completeLiquidity) {\\n                retState.finished = (amountX == 0);\\n                retState.finalPt = leftPt;\\n                retState.sqrtFinalPrice_96 = sqrtPriceL_96;\\n                retState.liquidityX = currentState.liquidity;\\n            } else {\\n                uint128 locCostX;\\n                uint256 locAcquireY;\\n                (locCostX, locAcquireY, retState.liquidityX) = x2YAtPriceLiquidity(amountX, ret.sqrtLoc_96, currentState.liquidity, 0);\\n                retState.costX += locCostX;\\n                retState.acquireY += locAcquireY;\\n                retState.finished = true;\\n                retState.sqrtFinalPrice_96 = ret.sqrtLoc_96;\\n                retState.finalPt = ret.locPt;\\n            }\\n        } else {\\n            // finishd must be false\\n            // retState.finished == false;\\n            // liquidityX has been set\\n            retState.finalPt = currentState.currentPoint;\\n            retState.sqrtFinalPrice_96 = currentState.sqrtPrice_96;\\n        }\\n    }\\n    \\n}\",\"keccak256\":\"0xb6a012a948a6c97e56c3459c63c1b8b2a66c5a03a15e758e624d6d8847f9fa3e\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/SwapMathY2X.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport './MulDivMath.sol';\\nimport './TwoPower.sol';\\nimport './AmountMath.sol';\\nimport './State.sol';\\nimport './MaxMinMath.sol';\\nimport './Converter.sol';\\n\\nlibrary SwapMathY2X {\\n\\n    struct RangeRetState {\\n        // whether user has run out of tokenY\\n        bool finished;\\n        // actual cost of tokenY to buy tokenX\\n        uint128 costY;\\n        // actual amount of tokenX acquired\\n        uint256 acquireX;\\n        // final point after this swap\\n        int24 finalPt;\\n        // sqrt price on final point\\n        uint160 sqrtFinalPrice_96;\\n        // liquidity of tokenX at finalPt\\n        // if finalPt is not rightPt, liquidityX is meaningless\\n        uint128 liquidityX;\\n    }\\n    \\n    function y2XAtPrice(\\n        uint128 amountY,\\n        uint160 sqrtPrice_96,\\n        uint128 currX\\n    ) internal pure returns (uint128 costY, uint128 acquireX) {\\n        uint256 l = MulDivMath.mulDivFloor(amountY, TwoPower.Pow96, sqrtPrice_96);\\n        // acquireX <= currX <= uint128.max\\n        acquireX = uint128(MaxMinMath.min256(MulDivMath.mulDivFloor(l, TwoPower.Pow96, sqrtPrice_96), currX));\\n        l = MulDivMath.mulDivCeil(acquireX, sqrtPrice_96, TwoPower.Pow96);\\n        uint256 cost = MulDivMath.mulDivCeil(l, sqrtPrice_96, TwoPower.Pow96);\\n        // costY = cost <= amountY <= uint128.max\\n        costY = uint128(cost);\\n    }\\n\\n    function y2XAtPriceLiquidity(\\n        uint128 amountY,\\n        uint160 sqrtPrice_96,\\n        uint128 liquidityX\\n    ) internal pure returns (uint128 costY, uint256 acquireX, uint128 newLiquidityX) {\\n        // amountY * TwoPower.Pow96 < 2^128 * 2^96 = 2^224 < 2^256 \\n        uint256 maxTransformLiquidityY = uint256(amountY) * TwoPower.Pow96 / sqrtPrice_96;\\n        // transformLiquidityY <= liquidityX\\n        uint128 transformLiquidityY = uint128(MaxMinMath.min256(maxTransformLiquidityY, liquidityX));\\n        // costY <= amountY\\n        costY = uint128(MulDivMath.mulDivCeil(transformLiquidityY, sqrtPrice_96, TwoPower.Pow96));\\n        // transformLiquidityY * 2^96 < 2^224 < 2^256\\n        acquireX = uint256(transformLiquidityY) * TwoPower.Pow96 / sqrtPrice_96;\\n        newLiquidityX = liquidityX - transformLiquidityY;\\n    }\\n\\n    struct Range {\\n        uint128 liquidity;\\n        uint160 sqrtPriceL_96;\\n        int24 leftPt;\\n        uint160 sqrtPriceR_96;\\n        int24 rightPt;\\n        uint160 sqrtRate_96;\\n    }\\n    struct RangeCompRet {\\n        uint128 costY;\\n        uint256 acquireX;\\n        bool completeLiquidity;\\n        int24 locPt;\\n        uint160 sqrtLoc_96;\\n    }\\n\\n    function y2XRangeComplete(\\n        Range memory rg,\\n        uint128 amountY\\n    ) internal pure returns (\\n        RangeCompRet memory ret\\n    ) {\\n        uint256 maxY = AmountMath.getAmountY(rg.liquidity, rg.sqrtPriceL_96, rg.sqrtPriceR_96, rg.sqrtRate_96, true);\\n        if (maxY <= amountY) {\\n            // ret.costY <= maxY <= uint128.max\\n            ret.costY = uint128(maxY);\\n            ret.acquireX = AmountMath.getAmountX(rg.liquidity, rg.leftPt, rg.rightPt, rg.sqrtPriceR_96, rg.sqrtRate_96, false);\\n            // we complete this liquidity segment\\n            ret.completeLiquidity = true;\\n        } else {\\n            // we should locate highest price\\n            // uint160 is enough for muldiv and adding, because amountY < maxY\\n            uint160 sqrtLoc_96 = uint160(MulDivMath.mulDivFloor(\\n                amountY,\\n                rg.sqrtRate_96 - TwoPower.Pow96,\\n                rg.liquidity\\n            ) + rg.sqrtPriceL_96);\\n            ret.locPt = LogPowMath.getLogSqrtPriceFloor(sqrtLoc_96);\\n\\n            ret.locPt = MaxMinMath.max(rg.leftPt, ret.locPt);\\n            ret.locPt = MaxMinMath.min(rg.rightPt - 1, ret.locPt);\\n\\n            ret.completeLiquidity = false;\\n            ret.sqrtLoc_96 = LogPowMath.getSqrtPrice(ret.locPt);\\n            if (ret.locPt == rg.leftPt) {\\n                ret.costY = 0;\\n                ret.acquireX = 0;\\n                return ret;\\n            }\\n\\n            uint256 costY256 = AmountMath.getAmountY(\\n                rg.liquidity,\\n                rg.sqrtPriceL_96,\\n                ret.sqrtLoc_96,\\n                rg.sqrtRate_96,\\n                true\\n            );\\n            // ret.costY <= amountY <= uint128.max\\n            ret.costY = uint128(MaxMinMath.min256(costY256, amountY));\\n\\n            // costY <= amountY even if the costY is the upperbound of the result\\n            // because amountY is not a real and sqrtLoc_96 <= sqrtLoc256_96\\n            ret.acquireX = AmountMath.getAmountX(\\n                rg.liquidity,\\n                rg.leftPt,\\n                ret.locPt,\\n                ret.sqrtLoc_96,\\n                rg.sqrtRate_96,\\n                false\\n            );\\n        \\n        }\\n    }\\n\\n    /// @notice Compute amount of tokens exchanged during swapY2X and some amount values (currX, currY, allX) on final point\\n    ///    after this swap.\\n    /// @param currentState state values containing (currX, currY, allX) of start point\\n    /// @param rightPt right most point during this swap\\n    /// @param sqrtRate_96 sqrt(1.0001)\\n    /// @param amountY max amount of Y user willing to pay\\n    /// @return retState amount of token acquired and some values on final point\\n    function y2XRange(\\n        State memory currentState,\\n        int24 rightPt,\\n        uint160 sqrtRate_96,\\n        uint128 amountY\\n    ) internal pure returns (\\n        RangeRetState memory retState\\n    ) {\\n        retState.costY = 0;\\n        retState.acquireX = 0;\\n        retState.finished = false;\\n        // first, if current point is not all x, we can not move right directly\\n        bool startHasY = (currentState.liquidityX < currentState.liquidity);\\n        if (startHasY) {\\n            (retState.costY, retState.acquireX, retState.liquidityX) = y2XAtPriceLiquidity(\\n                amountY, \\n                currentState.sqrtPrice_96,\\n                currentState.liquidityX\\n            );\\n            if (retState.liquidityX > 0 || retState.costY >= amountY) {\\n                // it means remaining y is not enough to rise current price to price*1.0001\\n                // but y may remain, so we cannot simply use (costY == amountY)\\n                retState.finished = true;\\n                retState.finalPt = currentState.currentPoint;\\n                retState.sqrtFinalPrice_96 = currentState.sqrtPrice_96;\\n                return retState;\\n            } else {\\n                // y not run out\\n                // not finsihed\\n                amountY -= retState.costY;\\n                currentState.currentPoint += 1;\\n                if (currentState.currentPoint == rightPt) {\\n                    retState.finalPt = currentState.currentPoint;\\n                    // get fixed sqrt price to reduce accumulated error\\n                    retState.sqrtFinalPrice_96 = LogPowMath.getSqrtPrice(rightPt);\\n                    return retState;\\n                }\\n                // sqrt(price) + sqrt(price) * (1.0001 - 1) == sqrt(price) * 1.0001\\n                currentState.sqrtPrice_96 = uint160(\\n                    uint256(currentState.sqrtPrice_96) +\\n                    uint256(currentState.sqrtPrice_96) * (uint256(sqrtRate_96) - TwoPower.Pow96) / TwoPower.Pow96\\n                );\\n            }\\n        }\\n\\n        uint160 sqrtPriceR_96 = LogPowMath.getSqrtPrice(rightPt);\\n\\n        // (uint128 liquidCostY, uint256 liquidAcquireX, bool liquidComplete, int24 locPt, uint160 sqrtLoc_96)\\n        RangeCompRet memory ret = y2XRangeComplete(\\n            Range({\\n                liquidity: currentState.liquidity,\\n                sqrtPriceL_96: currentState.sqrtPrice_96,\\n                leftPt: currentState.currentPoint,\\n                sqrtPriceR_96: sqrtPriceR_96,\\n                rightPt: rightPt,\\n                sqrtRate_96: sqrtRate_96\\n            }),\\n            amountY\\n        );\\n\\n        retState.costY += ret.costY;\\n        amountY -= ret.costY;\\n        retState.acquireX += ret.acquireX;\\n        if (ret.completeLiquidity) {\\n            retState.finished = (amountY == 0);\\n            retState.finalPt = rightPt;\\n            retState.sqrtFinalPrice_96 = sqrtPriceR_96;\\n        } else {\\n            // trade at locPt\\n            uint128 locCostY;\\n            uint256 locAcquireX;\\n\\n            (locCostY, locAcquireX, retState.liquidityX) = y2XAtPriceLiquidity(amountY, ret.sqrtLoc_96, currentState.liquidity);\\n            \\n            retState.costY += locCostY;\\n            retState.acquireX += locAcquireX;\\n            retState.finished = true;\\n            retState.sqrtFinalPrice_96 = ret.sqrtLoc_96;\\n            retState.finalPt = ret.locPt;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x2280fa555a258affca7c22bf9157f0a6036087ad89c8c3a0456b73be1a1eb510\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_core/contracts/libraries/TokenTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\nlibrary TokenTransfer {\\n    \\n    function transferToken(\\n        address tokenAddr,\\n        address toAddr,\\n        uint256 amount\\n    ) internal {\\n        (bool ok, bytes memory retData) =\\n            tokenAddr.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, toAddr, amount));\\n        require(ok && (retData.length == 0 || abi.decode(retData, (bool))), 'TNS');\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x5b1c65af62926d50965f74ac33cb1f118d55d8029ae7f72c2cf9dfaa876808e9\",\"license\":\"MIT\"},\"@izumifinance/iziswap_core/contracts/libraries/TwoPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary TwoPower {\\n\\n    uint256 internal constant Pow128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Pow96 = 0x1000000000000000000000000;\\n\\n}\",\"keccak256\":\"0xdc8b44467851f0af52033a5d37f050abc45278b5c53ae9d242dfd88bd4ecd172\",\"license\":\"MIT\"},\"@izumifinance/iziswap_core/contracts/libraries/UserEarn.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./MulDivMath.sol\\\";\\nimport \\\"./TwoPower.sol\\\";\\nimport \\\"./Converter.sol\\\";\\nimport \\\"./MaxMinMath.sol\\\";\\n\\nlibrary UserEarn {\\n\\n    // describe user's earning info for a limit order\\n    struct Data {\\n        // total amount of earned token by all users at this point \\n        // with same direction (sell x or sell y) as of the last update(add/dec)\\n        uint256 lastAccEarn;\\n        // remaing amount of token on sale in this limit order\\n        uint128 sellingRemain;\\n        // uncollected decreased token\\n        uint128 sellingDec;\\n        // unassigned and unlegacy earned token\\n        // earned token before collected need to be assigned\\n        uint128 earn;\\n        // unassigned and legacy earned token\\n        uint128 legacyEarn;\\n        // assigned but uncollected earned token (both unlegacy and legacy)\\n        uint128 earnAssign;\\n    }\\n    \\n    function get(\\n        mapping(bytes32 => Data) storage self,\\n        address user,\\n        int24 point\\n    ) internal view returns (UserEarn.Data storage data) {\\n        data = self[keccak256(abi.encodePacked(user, point))];\\n    }\\n\\n    /// @notice update UserEarn info for an unlegacy (uncleared during swap) limit order.\\n    ///    update strategy is 'first claim first earn', etc, earned token will be transformed for\\n    ///    limit orders which is update first\\n    /// @param self UserEarn storage object of target limit order\\n    /// @param currAccEarn 'accEarn' value of corresponding point order on swap pool.\\n    ///    accumulate amount of earned token \\n    /// @param sqrtPrice_96 describe price of limit order\\n    /// @param totalEarn remained(undistributed) amount of earned token of unlegacy limit order on corresponding point\\n    /// @param isEarnY direction of corresponding limit order.\\n    function updateUnlegacyOrder(\\n        UserEarn.Data storage self,\\n        uint256 currAccEarn,\\n        uint160 sqrtPrice_96,\\n        uint128 totalEarn,\\n        bool isEarnY\\n    ) internal returns (uint128 totalEarnRemain, uint128 claimSold, uint128 claimEarn) {\\n        Data memory data = self;\\n\\n        // first, we compute how many earned token remained on the point order\\n        uint256 earn = currAccEarn - data.lastAccEarn;\\n        if (earn > totalEarn) {\\n            earn = totalEarn;\\n        }\\n        // second, compute how many sold token according to the 'first claim first earn' strategy,\\n        // etc, for earnY, sold = min(sellingRemain, earn / price)\\n        //      for earnX, sold = min(sellingRemain, earn * price)\\n        uint256 sold;\\n        if (isEarnY) {\\n            uint256 l = MulDivMath.mulDivCeil(earn, TwoPower.Pow96, sqrtPrice_96);\\n            sold = MulDivMath.mulDivCeil(l, TwoPower.Pow96, sqrtPrice_96);\\n        } else {\\n            uint256 l = MulDivMath.mulDivCeil(earn, sqrtPrice_96, TwoPower.Pow96);\\n            sold = MulDivMath.mulDivCeil(l, sqrtPrice_96, TwoPower.Pow96);\\n        }\\n        if (sold > data.sellingRemain) {\\n            sold = data.sellingRemain;\\n            if (isEarnY) {\\n                uint256 l = MulDivMath.mulDivFloor(sold, sqrtPrice_96, TwoPower.Pow96);\\n                earn = MulDivMath.mulDivFloor(l, sqrtPrice_96, TwoPower.Pow96);\\n            } else {\\n                uint256 l = MulDivMath.mulDivFloor(sold, TwoPower.Pow96, sqrtPrice_96);\\n                earn = MulDivMath.mulDivFloor(l, TwoPower.Pow96, sqrtPrice_96);\\n            }\\n        }\\n        // sold1 = ceil(ceil(earn1 * Q / P) * Q / P)\\n        // if sold1 <= data.sellingRemain, earn = earn1 <= totalEarn, sold=sold1 <= data.sellingRemain\\n        // if sold1 > data.sellingRemain, sold = data.sellingRemain\\n        //     sold1 - 1 < ceil(ceil(earn1 * Q / P) * Q / P)\\n        //  => sold1 - 1 < ceil(earn1 * Q / P) * Q / P\\n        //  => floor((sold1 - 1) * P / Q) < ceil(earn1 * Q / P)\\n        //  => floor((sold1 - 1) * P / Q) < earn1 * Q / P\\n        //  => earn = floor(floor((sold1 - 1) * P / Q) * P / Q) < earn1 <= totalEarn\\n\\n        // thirdly, update info of userEarn object\\n\\n        // earn <= totalEarn\\n        data.earn += uint128(earn);\\n        // sold <= data.sellingRemain\\n        data.sellingRemain -= uint128(sold);\\n        self.lastAccEarn = currAccEarn;\\n        if (earn > 0) {\\n            self.earn = data.earn;\\n        }\\n        if (sold > 0) {\\n            self.sellingRemain = data.sellingRemain;\\n        }\\n        claimSold = uint128(sold);\\n        claimEarn = uint128(earn);\\n        // earn <= totalEarn\\n        totalEarnRemain = totalEarn - claimEarn;\\n    }\\n\\n    /// @notice update UserEarn info for an unlegacy (uncleared during swap) limit order.\\n    ///    and then add some amount of selling token\\n    ///    update strategy is 'first claim first earn', etc, earned token will be transformed for\\n    ///    limit orders which is update first\\n    /// @param self UserEarn storage object of target limit order\\n    /// @param currAccEarn 'accEarn' value of corresponding point order on swap pool.\\n    ///    accumulate amount of earned token \\n    /// @param sqrtPrice_96 describe price of limit order\\n    /// @param totalEarn remained(undistributed) amount of earned token of unlegacy limit order on corresponding point\\n    /// @param isEarnY direction of corresponding limit order.\\n    function addUnlegacyOrder(\\n        UserEarn.Data storage self,\\n        uint128 delta,\\n        uint256 currAccEarn,\\n        uint160 sqrtPrice_96,\\n        uint128 totalEarn,\\n        bool isEarnY\\n    ) internal returns(uint128 totalEarnRemain, uint128 claimSold, uint128 claimEarn) {\\n        // first, call `updateUnlegacyOrder` to update unlegacy order\\n        (totalEarnRemain, claimSold, claimEarn) = updateUnlegacyOrder(self, currAccEarn, sqrtPrice_96, totalEarn, isEarnY);\\n        // then, add\\n        self.sellingRemain = self.sellingRemain + delta;\\n    }\\n\\n    /// @notice update UserEarn info for an unlegacy (uncleared during swap) limit order.\\n    ///    and then decrease some amount of selling token (if remain)\\n    ///    update strategy is 'first claim first earn', etc, earned token will be transformed for\\n    ///    limit orders which is update first\\n    /// @param self UserEarn storage object of target limit order\\n    /// @param currAccEarn 'accEarn' value of corresponding point order on swap pool.\\n    ///    accumulate amount of earned token \\n    /// @param sqrtPrice_96 describe price of limit order\\n    /// @param totalEarn remained(undistributed) amount of earned token of unlegacy limit order on corresponding point\\n    /// @param isEarnY direction of corresponding limit order.\\n    function decUnlegacyOrder(\\n        UserEarn.Data storage self,\\n        uint128 delta,\\n        uint256 currAccEarn,\\n        uint160 sqrtPrice_96,\\n        uint128 totalEarn,\\n        bool isEarnY\\n    ) internal returns(uint128 actualDelta, uint128 totalEarnRemain, uint128 claimSold, uint128 claimEarn) {\\n        // first, call `updateUnlegacyOrder` to update unlegacy order\\n        (totalEarnRemain, claimSold, claimEarn) = updateUnlegacyOrder(self, currAccEarn, sqrtPrice_96, totalEarn, isEarnY);\\n        // then decrease\\n        actualDelta = MaxMinMath.min(delta, self.sellingRemain);\\n        self.sellingRemain = self.sellingRemain - actualDelta;\\n        self.sellingDec = self.sellingDec + actualDelta;\\n    }\\n\\n    /// @notice update UserEarn info for a legacy (cleared during swap) limit order.\\n    ///    an limit order we call it 'legacy' if it together with other limit order of same\\n    ///    direction and same point on the pool is cleared during one time of exchanging.\\n    ///    if an limit order is convinced to be 'legacy', we should mark it as 'sold out',\\n    ///    etc, transform all its remained selling token to earned token.\\n    /// @param self UserEarn storage object of target limit order\\n    /// @param addDelta addition of selling amount\\n    /// @param currAccEarn 'accEarn' value of corresponding point order on swap pool.\\n    ///    accumulate amount of earned token \\n    /// @param sqrtPrice_96 describe price of limit order\\n    /// @param totalLegacyEarn remained(undistributed) amount of earned token of legacy limit order on corresponding point\\n    /// @param isEarnY direction of corresponding limit order.\\n    function updateLegacyOrder(\\n        UserEarn.Data storage self,\\n        uint128 addDelta,\\n        uint256 currAccEarn,\\n        uint160 sqrtPrice_96,\\n        uint128 totalLegacyEarn,\\n        bool isEarnY\\n    ) internal returns(uint128 totalLegacyEarnRemain, uint128 sold, uint128 claimedEarn) {\\n        sold = self.sellingRemain;\\n        uint256 earn = 0;\\n        if (sold > 0) {\\n            // transform all its remained selling token to earned token.\\n            if (isEarnY) {\\n                uint256 l = MulDivMath.mulDivFloor(sold, sqrtPrice_96, TwoPower.Pow96);\\n                // for earnY, earn = sold * price\\n                earn = MulDivMath.mulDivFloor(l, sqrtPrice_96, TwoPower.Pow96);\\n            } else {\\n                uint256 l = MulDivMath.mulDivFloor(sold, TwoPower.Pow96, sqrtPrice_96);\\n                // for earnX, earn = sold / price\\n                earn = MulDivMath.mulDivFloor(l, TwoPower.Pow96, sqrtPrice_96);\\n            }\\n            if (earn > totalLegacyEarn) {\\n                earn = totalLegacyEarn;\\n            }\\n            self.sellingRemain = 0;\\n            // count earned token into legacyEarn field, not earn field\\n            self.legacyEarn += uint128(earn);\\n        }\\n        claimedEarn = uint128(earn);\\n        self.lastAccEarn = currAccEarn;\\n        totalLegacyEarnRemain = totalLegacyEarn - claimedEarn;\\n        if (addDelta > 0) {\\n            // sellingRemain has been clear to 0\\n            self.sellingRemain = addDelta;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x14337f18cbf31f4b2c85267643bed4877fefd8ba81d6631fc2a7b9195419e7cd\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_periphery/contracts/Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./core/interfaces/IiZiSwapCallback.sol\\\";\\nimport \\\"./core/interfaces/IiZiSwapFactory.sol\\\";\\nimport \\\"./core/interfaces/IiZiSwapPool.sol\\\";\\n\\nimport \\\"./libraries/Path.sol\\\";\\n\\nimport \\\"./base/base.sol\\\";\\n\\ncontract Quoter is Base, IiZiSwapCallback {\\n\\n    using Path for bytes;\\n\\n    struct SwapCallbackData {\\n        bytes path;\\n        address payer;\\n    }\\n\\n    uint256 private amountDesireCached;\\n\\n    /// @notice Construct this contract.\\n    /// @param _factory address iZiSwapFactory\\n    /// @param _weth address of weth token\\n    constructor(address _factory, address _weth) Base(_factory, _weth) {}\\n\\n\\n    /// @notice Make multiple function calls in this contract in a single transaction\\n    ///     and return the data for each function call, donot revert if any function call fails\\n    /// @param data The encoded function data for each function call\\n    /// @return successes whether catch a revert in the function call of data[i]\\n    /// @return results result of each function call\\n    function multicallNoRevert(bytes[] calldata data) external payable returns (bool[]memory successes, bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        successes = new bool[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            successes[i] = success;\\n            results[i] = result;\\n        }\\n    }\\n\\n    function parseRevertReason(bytes memory reason)\\n        private\\n        pure\\n        returns (\\n            uint256 amount,\\n            int24 currPt\\n        )\\n    {\\n        if (reason.length != 64) {\\n            if (reason.length < 68) revert('Unexpected error');\\n            assembly {\\n                reason := add(reason, 0x04)\\n            }\\n            revert(abi.decode(reason, (string)));\\n        }\\n        return abi.decode(reason, (uint256, int24));\\n    }\\n\\n    /// @notice Callback for swapY2X and swapY2XDesireX, in order to mark computed-amount of token and point after exchange.\\n    /// @param x amount of tokenX trader acquired\\n    /// @param y amount of tokenY need to pay from trader\\n    /// @param path encoded SwapCallbackData\\n    function swapY2XCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata path\\n    ) external view override {\\n        (address token0, address token1, uint24 fee) = path.decodeFirstPool();\\n        verify(token0, token1, fee);\\n        \\n        address poolAddr = pool(token0, token1, fee);\\n        (\\n            ,\\n            int24 currPt,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n        ) = IiZiSwapPool(poolAddr).state();\\n\\n        if (token0 < token1) {\\n            // token1 is y, amount of token1 is calculated\\n            // called from swapY2XDesireX(...)\\n            require(x >= amountDesireCached, 'x Pool Not Enough');\\n            assembly {  \\n                let ptr := mload(0x40)\\n                mstore(ptr, y)\\n                mstore(add(ptr, 0x20), currPt)\\n                revert(ptr, 64)\\n            }\\n        } else {\\n            // token0 is y, amount of token0 is input param\\n            // called from swapY2X(...)\\n            assembly {  \\n                let ptr := mload(0x40)\\n                mstore(ptr, x)\\n                mstore(add(ptr, 0x20), currPt)\\n                revert(ptr, 64)\\n            }\\n        }\\n    }\\n\\n    /// @notice Callback for swapX2Y and swapX2YDesireY in order to mark computed-amount of token and point after exchange.\\n    /// @param x amount of tokenX need to pay from trader\\n    /// @param y amount of tokenY trader acquired\\n    /// @param path encoded SwapCallbackData\\n    function swapX2YCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata path\\n    ) external view override {\\n        (address token0, address token1, uint24 fee) = path.decodeFirstPool();\\n        verify(token0, token1, fee);\\n\\n        address poolAddr = pool(token0, token1, fee);\\n        (\\n            ,\\n            int24 currPt,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n        ) = IiZiSwapPool(poolAddr).state();\\n\\n        if (token0 < token1) {\\n            // token0 is x, amount of token0 is input param\\n            // called from swapX2Y(...)\\n            assembly {  \\n                let ptr := mload(0x40)\\n                mstore(ptr, y)\\n                mstore(add(ptr, 0x20), currPt)\\n                revert(ptr, 64)\\n            }\\n        } else {\\n            // token1 is x, amount of token1 is calculated param\\n            // called from swapX2YDesireY(...)\\n            require(y >= amountDesireCached, 'y Pool Not Enough');\\n            assembly {  \\n                let ptr := mload(0x40)\\n                mstore(ptr, x)\\n                mstore(add(ptr, 0x20), currPt)\\n                revert(ptr, 64)\\n            }\\n        }\\n    }\\n\\n    function swapAmountSingleInternal(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint128 amount\\n    ) private returns (uint256 acquire, int24 currPt) {\\n        address poolAddr = pool(tokenOut, tokenIn, fee);\\n        if (tokenIn < tokenOut) {\\n            int24 boundaryPoint = -799999;\\n            try\\n                IiZiSwapPool(poolAddr).swapX2Y(\\n                    address(this), amount, boundaryPoint,\\n                    abi.encodePacked(tokenIn, fee, tokenOut)\\n                )\\n            {} catch (bytes memory reason) {\\n                return parseRevertReason(reason);\\n            }\\n        } else {\\n            int24 boundaryPoint = 799999;\\n            try\\n                IiZiSwapPool(poolAddr).swapY2X(\\n                    address(this), amount, boundaryPoint,\\n                    abi.encodePacked(tokenIn, fee, tokenOut)\\n                )\\n            {} catch (bytes memory reason) {\\n                return parseRevertReason(reason);\\n            }\\n        }\\n    }\\n\\n    function swapAmount(\\n        uint128 amount,\\n        bytes memory path\\n    ) public returns (uint256 acquire, int24[] memory pointAfterList) {\\n        // allow swapping to the router address with address 0\\n\\n        uint256 i = 0;\\n        pointAfterList = new int24[](path.numPools());\\n\\n        while (true) {\\n            bool hasMultiplePools = path.hasMultiplePools();\\n            (address tokenIn, address tokenOut, uint24 fee) = path.decodeFirstPool();\\n            int24 finalPt;\\n            (acquire, finalPt) = swapAmountSingleInternal(tokenIn, tokenOut, fee, amount);\\n            pointAfterList[i] = finalPt;\\n            i ++;\\n\\n            // decide whether to continue or terminate\\n            if (hasMultiplePools) {\\n                path = path.skipToken();\\n                amount = uint128(acquire);\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function swapDesireSingleInternal(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint128 desire\\n    ) private returns (uint256 cost, int24 currPt) {\\n        address poolAddr = pool(tokenOut, tokenIn, fee);\\n        amountDesireCached = desire;\\n        if (tokenIn < tokenOut) {\\n            int24 boundaryPoint = -799999;\\n            try\\n                IiZiSwapPool(poolAddr).swapX2YDesireY(\\n                    address(this), desire + 1, boundaryPoint,\\n                    abi.encodePacked(tokenOut, fee, tokenIn)\\n                )\\n            {} catch (bytes memory reason) {\\n                return parseRevertReason(reason);\\n            }\\n        } else {\\n            int24 boundaryPoint = 799999;\\n            try\\n                IiZiSwapPool(poolAddr).swapY2XDesireX(\\n                    address(this), desire + 1, boundaryPoint,\\n                    abi.encodePacked(tokenOut, fee, tokenIn)\\n                )\\n            {} catch (bytes memory reason) {\\n                return parseRevertReason(reason);\\n            }\\n        }\\n    }\\n\\n    function swapDesire(\\n        uint128 desire,\\n        bytes memory path\\n    ) public returns (uint256 cost, int24[] memory pointAfterList) {\\n        // allow swapping to the router address with address 0\\n\\n        uint256 i = 0;\\n        pointAfterList = new int24[](path.numPools());\\n\\n        while (true) {\\n            bool hasMultiplePools = path.hasMultiplePools();\\n            (address tokenOut, address tokenIn, uint24 fee) = path.decodeFirstPool();\\n            int24 finalPt;\\n            (cost, finalPt) = swapDesireSingleInternal(tokenIn, tokenOut, fee, desire);\\n            pointAfterList[i] = finalPt;\\n            i ++;\\n\\n            // decide whether to continue or terminate\\n            if (hasMultiplePools) {\\n                path = path.skipToken();\\n                desire = uint128(cost);\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Estimate amount of tokenX acquired when user wants to buy tokenX given max amount of tokenY user willing to pay.\\n    /// calling this function will not generate any real exchanges in the pool\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    /// @param amount max-amount of tokenY user willing to pay\\n    /// @param highPt highest point during exchange\\n    /// @return amountX estimated amount of tokenX user would acquire\\n    /// @return finalPoint estimated point of pool after swap\\n    function swapY2X(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        uint128 amount,\\n        int24 highPt\\n    ) public returns (uint256 amountX, int24 finalPoint) {\\n        require(tokenX < tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(tokenX, tokenY, fee);\\n        try\\n            IiZiSwapPool(poolAddr).swapY2X(\\n                address(this), amount, highPt,\\n                abi.encodePacked(tokenY, fee, tokenX)\\n            )\\n        {} catch (bytes memory reason) {\\n            (amountX, finalPoint) = parseRevertReason(reason);\\n        }\\n    }\\n\\n    /// @notice Estimate amount of tokenY required when an user wants to buy token given amount of tokenX user wants to buy\\n    ///    calling this function will not generate any real exchanges in the pool.\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    /// @param desireX amount of tokenX user wants to buy\\n    /// @param highPt highest point during exchange\\n    /// @return amountY estimated amount of tokenY user need to pay\\n    /// @return finalPoint estimated point of pool after swap\\n    function swapY2XDesireX(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        uint128 desireX,\\n        int24 highPt\\n    ) public returns (uint256 amountY, int24 finalPoint) {\\n        require(tokenX < tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(tokenX, tokenY, fee);\\n        if (highPt == 800001) {\\n            // highPt higher than rightMostPt\\n            // means user wants to get enough X\\n            amountDesireCached = desireX;\\n        }\\n        try\\n            IiZiSwapPool(poolAddr).swapY2XDesireX(\\n                address(this), desireX, highPt,\\n                abi.encodePacked(tokenX, fee, tokenY)\\n            )\\n        {} catch (bytes memory reason) {\\n            (amountY, finalPoint) = parseRevertReason(reason);\\n        }\\n        amountDesireCached = 0;\\n    }\\n\\n    /// @notice Estimate amount of tokenY acquired when an user wants to buy tokenY given max amount of tokenX user willing to pay\\n    ///    calling this function will not generate any real exchanges in the pool.\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    /// @param amount max-amount of tokenX user willing to pay\\n    /// @param lowPt lowest point during exchange\\n    /// @return amountY estimated amount of tokenY user would acquire\\n    /// @return finalPoint estimated point of pool after swap\\n    function swapX2Y(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        uint128 amount,\\n        int24 lowPt\\n    ) public returns (uint256 amountY, int24 finalPoint) {\\n        require(tokenX < tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(tokenX, tokenY, fee);\\n        try\\n            IiZiSwapPool(poolAddr).swapX2Y(\\n                address(this), amount, lowPt,\\n                abi.encodePacked(tokenX, fee, tokenY)\\n            )\\n        {} catch (bytes memory reason) {\\n            (amountY, finalPoint) = parseRevertReason(reason);\\n        }\\n    }\\n\\n    /// @notice Estimate amount of tokenX required when an user wants to buy tokenY given amount of tokenX user wants to buy\\n    ///    calling this function will not generate any real exchanges in the pool.\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    /// @param desireY amount of tokenY user wants to buy\\n    /// @param lowPt highest point during exchange\\n    /// @return amountX estimated amount of tokenX user need to pay\\n    /// @return finalPoint estimated point of pool after swap\\n    function swapX2YDesireY(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        uint128 desireY,\\n        int24 lowPt\\n    ) public returns (uint256 amountX, int24 finalPoint) {\\n        require(tokenX < tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(tokenX, tokenY, fee);\\n        if (lowPt == -800001) {\\n            // lowPt lower than leftMostPt\\n            // means user wants to get enough Y\\n            amountDesireCached = desireY;\\n        }\\n        try \\n            IiZiSwapPool(poolAddr).swapX2YDesireY(\\n                address(this), desireY, lowPt,\\n                abi.encodePacked(tokenY, fee, tokenX)\\n            )\\n        {} catch (bytes memory reason) {\\n            (amountX, finalPoint) = parseRevertReason(reason);\\n        }\\n        amountDesireCached = 0;\\n    }\\n    \\n}\",\"keccak256\":\"0x167849182c2a5a2c46964ba2cea3ebdfe0dba3d8d12aebff414c0e71e1d5de4f\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_periphery/contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./core/interfaces/IiZiSwapCallback.sol\\\";\\nimport \\\"./core/interfaces/IiZiSwapFactory.sol\\\";\\nimport \\\"./core/interfaces/IiZiSwapPool.sol\\\";\\n\\nimport \\\"./libraries/Path.sol\\\";\\n\\nimport \\\"./base/base.sol\\\";\\n\\ncontract Swap is Base, IiZiSwapCallback {\\n\\n    uint256 private constant DEFAULT_PAYED_CACHED = type(uint256).max;\\n    uint256 private payedCached = DEFAULT_PAYED_CACHED;\\n\\n    using Path for bytes;\\n\\n    struct SwapCallbackData {\\n        bytes path;\\n        address payer;\\n    }\\n\\n    /// @notice constructor to create this contract\\n    /// @param _factory address of iZiSwapFactory\\n    /// @param _weth address of weth token\\n    constructor(address _factory, address _weth) Base(_factory, _weth) {}\\n\\n    /// @notice Callback for swapY2X and swapY2XDesireX, in order to pay tokenY from trader.\\n    /// @param x amount of tokenX trader acquired\\n    /// @param y amount of tokenY need to pay from trader\\n    /// @param data encoded SwapCallbackData\\n    function swapY2XCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        SwapCallbackData memory dt = abi.decode(data, (SwapCallbackData));\\n\\n        (address token0, address token1, uint24 fee) = dt.path.decodeFirstPool();\\n        verify(token0, token1, fee);\\n        if (token0 < token1) {\\n            // token1 is y, amount of token1 is calculated\\n            // called from swapY2XDesireX(...)\\n            if (dt.path.hasMultiplePools()) {\\n                dt.path = dt.path.skipToken();\\n                swapDesireInternal(y, msg.sender, dt);\\n            } else {\\n                pay(token1, dt.payer, msg.sender, y);\\n                payedCached = y;\\n            }\\n        } else {\\n            // token0 is y, amount of token0 is input param\\n            // called from swapY2X(...)\\n            pay(token0, dt.payer, msg.sender, y);\\n        }\\n    }\\n\\n    /// @notice Callback for swapX2Y and swapX2YDesireY, in order to pay tokenX from trader.\\n    /// @param x amount of tokenX need to pay from trader\\n    /// @param y amount of tokenY trader acquired\\n    /// @param data encoded SwapCallbackData\\n    function swapX2YCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external override {\\n        SwapCallbackData memory dt = abi.decode(data, (SwapCallbackData));\\n        (address token0, address token1, uint24 fee) = dt.path.decodeFirstPool();\\n        verify(token0, token1, fee);\\n        if (token0 < token1) {\\n            // token0 is x, amount of token0 is input param\\n            // called from swapX2Y(...)\\n            pay(token0, dt.payer, msg.sender, x);\\n        } else {\\n            // token1 is x, amount of token1 is calculated param\\n            // called from swapX2YDesireY(...)\\n            if (dt.path.hasMultiplePools()) {\\n                dt.path = dt.path.skipToken();\\n                swapDesireInternal(x, msg.sender, dt);\\n            } else {\\n                pay(token1, dt.payer, msg.sender, x);\\n                payedCached = x;\\n            }\\n        }\\n    }\\n\\n    function swapDesireInternal(\\n        uint256 desire,\\n        address recipient,\\n        SwapCallbackData memory data\\n    ) private returns (uint256 acquire) {\\n        // allow swapping to the router address with address 0\\n        if (recipient == address(0)) recipient = address(this);\\n\\n        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\\n\\n        address poolAddr = pool(tokenOut, tokenIn, fee);\\n        if (tokenOut < tokenIn) {\\n            // tokenOut is tokenX, tokenIn is tokenY\\n            // we should call y2XDesireX\\n\\n            (acquire, ) = IiZiSwapPool(poolAddr).swapY2XDesireX(\\n                recipient, uint128(desire), 800001,\\n                abi.encode(data)\\n            );\\n        } else {\\n            // tokenOut is tokenY\\n            // tokenIn is tokenX\\n            (, acquire) = IiZiSwapPool(poolAddr).swapX2YDesireY(\\n                recipient, uint128(desire), -800001,\\n                abi.encode(data)\\n            );\\n        }\\n    }\\n\\n    function swapAmountInternal(\\n        uint128 amount,\\n        address recipient,\\n        SwapCallbackData memory data\\n    ) private returns (uint256 cost, uint256 acquire) {\\n        // allow swapping to the router address with address 0\\n        if (recipient == address(0)) recipient = address(this);\\n\\n        address payer = msg.sender; // msg.sender pays for the first hop\\n\\n        bool firstHop = true;\\n\\n        while (true) {\\n            bool hasMultiplePools = data.path.hasMultiplePools();\\n            (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\\n            address poolAddr = pool(tokenOut, tokenIn, fee);\\n            if (tokenIn < tokenOut) {\\n                // swapX2Y\\n                uint256 costX;\\n                (costX, acquire) = IiZiSwapPool(poolAddr).swapX2Y(\\n                    hasMultiplePools? address(this): recipient, amount, -799999,\\n                    abi.encode(SwapCallbackData({path: abi.encodePacked(tokenIn, fee, tokenOut), payer: payer}))\\n                );\\n                if (firstHop) {\\n                    cost = costX;\\n                }\\n            } else {\\n                // swapY2X\\n                uint256 costY;\\n                (acquire, costY) = IiZiSwapPool(poolAddr).swapY2X(\\n                    hasMultiplePools? address(this): recipient, amount, 799999,\\n                    abi.encode(SwapCallbackData({path: abi.encodePacked(tokenIn, fee, tokenOut), payer: payer}))\\n                );\\n                if (firstHop) {\\n                    cost = costY;\\n                }\\n            }\\n            firstHop = false;\\n\\n            // decide whether to continue or terminate\\n            if (hasMultiplePools) {\\n                payer = address(this); // at this point, the caller has paid\\n                data.path = data.path.skipToken();\\n                amount = uint128(acquire);\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    struct SwapDesireParams {\\n        bytes path;\\n        address recipient;\\n        uint128 desire;\\n        uint256 maxPayed;\\n\\n        uint256 deadline;\\n    }\\n\\n\\n    /// @notice Swap given amount of target token, usually used in multi-hop case.\\n    function swapDesire(SwapDesireParams calldata params)\\n        external\\n        payable\\n        checkDeadline(params.deadline)\\n        returns (uint256 cost, uint256 acquire)\\n    {\\n        \\n        acquire = swapDesireInternal(\\n            params.desire,\\n            params.recipient,\\n            SwapCallbackData({path: params.path, payer: msg.sender})\\n        );\\n        cost = payedCached;\\n        require(cost <= params.maxPayed, 'Too much payed in swapDesire');\\n        require(acquire >= params.desire, 'Too much requested in swapDesire');\\n        payedCached = DEFAULT_PAYED_CACHED;\\n    }\\n\\n    struct SwapAmountParams {\\n        bytes path;\\n        address recipient;\\n        // uint256 deadline;\\n        uint128 amount;\\n        uint256 minAcquired;\\n\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Swap given amount of input token, usually used in multi-hop case.\\n    function swapAmount(SwapAmountParams calldata params)\\n        external\\n        payable\\n        checkDeadline(params.deadline)\\n        returns (uint256 cost, uint256 acquire) \\n    {\\n        (cost, acquire) = swapAmountInternal(\\n            params.amount, \\n            params.recipient, \\n            SwapCallbackData({path: params.path, payer: msg.sender})\\n        );\\n        require(acquire >= params.minAcquired, 'Too much requested in swapAmount');\\n    }\\n\\n    /// parameters when calling Swap.swap..., grouped together to avoid stake too deep\\n    struct SwapParams {\\n        // tokenX of swap pool\\n        address tokenX;\\n        // tokenY of swap pool\\n        address tokenY;\\n        // fee amount of swap pool\\n        uint24 fee;\\n        // highPt for y2x, lowPt for x2y\\n        // here y2X is calling swapY2X or swapY2XDesireX\\n        // in swapY2XDesireX, if boundaryPt is 800001, means user wants to get enough X\\n        // in swapX2YDesireY, if boundaryPt is -800001, means user wants to get enough Y\\n        int24 boundaryPt; \\n        // who will receive acquired token\\n        address recipient;\\n        // desired amount for desired mode, paid amount for non-desired mode\\n        // here, desire mode is calling swapX2YDesireY or swapY2XDesireX\\n        uint128 amount;\\n        // max amount of payed token from trader, used in desire mode\\n        uint256 maxPayed;\\n        // min amount of received token trader wanted, used in undesire mode\\n        uint256 minAcquired;\\n\\n        uint256 deadline;\\n    }\\n\\n    // amount of exchanged tokens\\n    struct ExchangeAmount {\\n        // amount of tokenX paid or acquired\\n        uint256 amountX;\\n        // amount of tokenY acquired or paid\\n        uint256 amountY;\\n    }\\n\\n    /// @notice Swap tokenY for tokenX, given max amount of tokenY user willing to pay\\n    /// @param swapParams params(for example: max amount in above line), see SwapParams for more\\n    function swapY2X(\\n        SwapParams calldata swapParams\\n    ) external payable checkDeadline(swapParams.deadline) {\\n        require(swapParams.tokenX < swapParams.tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(swapParams.tokenX, swapParams.tokenY, swapParams.fee);\\n        address payer = msg.sender;\\n        address recipient = (swapParams.recipient == address(0)) ? address(this): swapParams.recipient;\\n        (uint256 amountX, ) = IiZiSwapPool(poolAddr).swapY2X(\\n            recipient, swapParams.amount, swapParams.boundaryPt,\\n            abi.encode(SwapCallbackData({path: abi.encodePacked(swapParams.tokenY, swapParams.fee, swapParams.tokenX), payer: payer}))\\n        );\\n        require(amountX >= swapParams.minAcquired, \\\"XMIN\\\");\\n    }\\n\\n    /// @notice Swap tokenY for tokenX, given user's desired amount of tokenX.\\n    /// @param swapParams params(for example: desired amount in above line), see SwapParams for more\\n    function swapY2XDesireX(\\n        SwapParams calldata swapParams\\n    ) external payable checkDeadline(swapParams.deadline) {\\n        require(swapParams.tokenX < swapParams.tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(swapParams.tokenX, swapParams.tokenY, swapParams.fee);\\n        address payer = msg.sender;\\n        address recipient = (swapParams.recipient == address(0)) ? address(this): swapParams.recipient;\\n        ExchangeAmount memory amount;\\n        (amount.amountX, amount.amountY) = IiZiSwapPool(poolAddr).swapY2XDesireX(\\n            recipient, swapParams.amount, swapParams.boundaryPt,\\n            abi.encode(SwapCallbackData({path: abi.encodePacked(swapParams.tokenX, swapParams.fee, swapParams.tokenY), payer: payer}))\\n        );\\n        if (swapParams.boundaryPt == 800001) {\\n            require(amount.amountX >= swapParams.amount, 'Too much requested in swapY2XDesireX');\\n        }\\n        require(amount.amountY <= swapParams.maxPayed, \\\"YMAX\\\");\\n    }\\n\\n    /// @notice Swap tokenX for tokenY, given max amount of tokenX user willing to pay.\\n    /// @param swapParams params(for example: max amount in above line), see SwapParams for more\\n    function swapX2Y(\\n        SwapParams calldata swapParams\\n    ) external payable checkDeadline(swapParams.deadline) {\\n        require(swapParams.tokenX < swapParams.tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(swapParams.tokenX, swapParams.tokenY, swapParams.fee);\\n        address payer = msg.sender;\\n        address recipient = (swapParams.recipient == address(0)) ? address(this): swapParams.recipient;\\n        (, uint256 amountY) = IiZiSwapPool(poolAddr).swapX2Y(\\n            recipient, swapParams.amount, swapParams.boundaryPt,\\n            abi.encode(SwapCallbackData({path: abi.encodePacked(swapParams.tokenX, swapParams.fee, swapParams.tokenY), payer: payer}))\\n        );\\n        require(amountY >= swapParams.minAcquired, \\\"YMIN\\\");\\n    }\\n\\n    /// @notice Swap tokenX for tokenY, given amount of tokenY user desires.\\n    /// @param swapParams params(for example: desired amount in above line), see SwapParams for more\\n    function swapX2YDesireY(\\n        SwapParams calldata swapParams\\n    ) external payable checkDeadline(swapParams.deadline) {\\n        require(swapParams.tokenX < swapParams.tokenY, \\\"x<y\\\");\\n        address poolAddr = pool(swapParams.tokenX, swapParams.tokenY, swapParams.fee);\\n        address payer = msg.sender;\\n        address recipient = (swapParams.recipient == address(0)) ? address(this): swapParams.recipient;\\n        ExchangeAmount memory amount;\\n        (amount.amountX, amount.amountY) = IiZiSwapPool(poolAddr).swapX2YDesireY(\\n            recipient, swapParams.amount, swapParams.boundaryPt,\\n            abi.encode(SwapCallbackData({path: abi.encodePacked(swapParams.tokenY, swapParams.fee, swapParams.tokenX), payer: payer}))\\n        );\\n        require(amount.amountX <= swapParams.maxPayed, \\\"XMAX\\\");\\n        if (swapParams.boundaryPt == -800001) {\\n            require(amount.amountY >= swapParams.amount, 'Too much requested in swapX2YDesireY');\\n        }\\n    }\\n    \\n}\",\"keccak256\":\"0xa9120061c1faefaafc58d0b552e15f744b1ee89f3b83ac34229d6e8d1d4e5361\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_periphery/contracts/base/base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../core/interfaces/IiZiSwapFactory.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\\nabstract contract Base {\\n    /// @notice address of iZiSwapFactory\\n    address public immutable factory;\\n\\n    /// @notice address of weth9 token\\n    address public immutable WETH9;\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, 'Out of time');\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Constructor of base.\\n    /// @param _factory address of iZiSwapFactory\\n    /// @param _WETH9 address of weth9 token\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n\\n    /// @notice Make multiple function calls in this contract in a single transaction\\n    ///     and return the data for each function call, revert if any function call fails\\n    /// @param data The encoded function data for each function call\\n    /// @return results result of each function call\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n\\n    /// @notice Transfer tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfer tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approve the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfer ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n\\n    /// @notice Withdraw all weth9 token of this contract and send the withdrawed eth to recipient\\n    ///    usually used in multicall when mint/swap/update limitorder with eth\\n    ///    normally this contract has no any erc20 token or eth after or before a transaction\\n    ///    we donot need to worry that some one can steal eth from this contract\\n    /// @param minAmount The minimum amount of WETH9 to withdraw\\n    /// @param recipient The address to receive all withdrawed eth from this contract\\n    function unwrapWETH9(uint256 minAmount, address recipient) external payable {\\n        uint256 all = IWETH9(WETH9).balanceOf(address(this));\\n        require(all >= minAmount, 'WETH9 Not Enough');\\n\\n        if (all > 0) {\\n            IWETH9(WETH9).withdraw(all);\\n            safeTransferETH(recipient, all);\\n        }\\n    }\\n\\n    /// @notice Send all balance of specified token in this contract to recipient\\n    ///    usually used in multicall when mint/swap/update limitorder with eth\\n    ///    normally this contract has no any erc20 token or eth after or before a transaction\\n    ///    we donot need to worry that some one can steal some token from this contract\\n    /// @param token address of the token\\n    /// @param minAmount balance should >= minAmount\\n    /// @param recipient the address to receive specified token from this contract\\n    function sweepToken(\\n        address token,\\n        uint256 minAmount,\\n        address recipient\\n    ) external payable {\\n        uint256 all = IERC20(token).balanceOf(address(this));\\n        require(all >= minAmount, 'WETH9 Not Enough');\\n\\n        if (all > 0) {\\n            safeTransfer(token, recipient, all);\\n        }\\n    }\\n\\n    /// @notice Send all balance of eth in this contract to msg.sender\\n    ///    usually used in multicall when mint/swap/update limitorder with eth\\n    ///    normally this contract has no any erc20 token or eth after or before a transaction\\n    ///    we donot need to worry that some one can steal some token from this contract\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) safeTransferETH(msg.sender, address(this).balance);\\n    }\\n\\n    /// @param token The token to pay\\n    /// @param payer The entity that must pay\\n    /// @param recipient The entity that will receive payment\\n    /// @param value The amount to pay\\n    function pay(\\n        address token,\\n        address payer,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        if (token == WETH9 && address(this).balance >= value) {\\n            // pay with WETH9\\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\\n            IWETH9(WETH9).transfer(recipient, value);\\n        } else if (payer == address(this)) {\\n            // pay with tokens already in the contract (for the exact input multihop case)\\n            safeTransfer(token, recipient, value);\\n        } else {\\n            // pull payment\\n            safeTransferFrom(token, payer, recipient, value);\\n        }\\n    }\\n\\n    /// @notice Query pool address from factory by (tokenX, tokenY, fee).\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    function pool(address tokenX, address tokenY, uint24 fee) public view returns(address) {\\n        return IiZiSwapFactory(factory).pool(tokenX, tokenY, fee);\\n    }\\n    function verify(address tokenX, address tokenY, uint24 fee) internal view {\\n        require (msg.sender == pool(tokenX, tokenY, fee), \\\"sp\\\");\\n    }\\n}\",\"keccak256\":\"0x315e695a436d45dd4b9fc30768b6fc7aa3340cc65a5402a0521a5235f5c7600c\",\"license\":\"MIT\"},\"@izumifinance/iziswap_periphery/contracts/core/interfaces/IiZiSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapMintCallback {\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#mint call\\n    /// @param x Amount of tokenX need to pay from miner\\n    /// @param y Amount of tokenY need to pay from miner\\n    /// @param data Any data passed through by the msg.sender via the iZiSwapPool#mint call\\n    function mintDepositCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\\ninterface IiZiSwapCallback {\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#swapY2X(DesireX) call\\n    /// @param x Amount of tokenX trader will acquire\\n    /// @param y Amount of tokenY trader will pay\\n    /// @param data Any dadta passed though by the msg.sender via the iZiSwapPool#swapY2X(DesireX) call\\n    function swapY2XCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#swapX2Y(DesireY) call\\n    /// @param x Amount of tokenX trader will pay\\n    /// @param y Amount of tokenY trader will require\\n    /// @param data Any dadta passed though by the msg.sender via the iZiSwapPool#swapX2Y(DesireY) call\\n    function swapX2YCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\\ninterface IiZiSwapAddLimOrderCallback {\\n\\n    /// @notice Called to msg.sender in iZiSwapPool#addLimOrderWithX(Y) call\\n    /// @param x Amount of tokenX seller will pay\\n    /// @param y Amount of tokenY seller will pay\\n    /// @param data Any dadta passed though by the msg.sender via the iZiSwapPool#addLimOrderWithX(Y) call\\n    function payCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\",\"keccak256\":\"0x9d55a9bc9897a53558013e738ce1c609c320aa44f8fe45ad0193d792e14a9ada\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_periphery/contracts/core/interfaces/IiZiSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapFactory {\\n\\n    /// @notice emit when successfuly create a new pool (calling iZiSwapFactory#newPool)\\n    /// @param tokenX address of erc-20 tokenX\\n    /// @param tokenY address of erc-20 tokenY\\n    /// @param fee fee amount of swap (3000 means 0.3%)\\n    /// @param pointDelta minimum number of distance between initialized or limitorder points\\n    /// @param pool address of swap pool\\n    event NewPool(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint24 indexed fee,\\n        uint24 pointDelta,\\n        address pool\\n    );\\n\\n    /// @notice module to support swap from tokenX to tokenY\\n    /// @return swapX2YModule address\\n    function swapX2YModule() external returns (address);\\n\\n    /// @notice module to support swap from tokenY to tokenX\\n    /// @return swapY2XModule address\\n    function swapY2XModule() external returns (address);\\n\\n    /// @notice module to support mint/burn/collect function of pool\\n    /// @return liquidityModule address\\n    function liquidityModule() external returns (address);\\n\\n    /// @notice address of module for user to manage limit orders\\n    /// @return limitOrderModule address\\n    function limitOrderModule() external returns (address);\\n\\n    /// @notice address of module for flash loan\\n    /// @return flashModule address\\n    function flashModule() external returns (address);\\n\\n    /// @notice default fee rate from miner's fee gain\\n    /// @return defaultFeeChargePercent default fee rate * 100\\n    function defaultFeeChargePercent() external returns (uint24);\\n\\n    /// @notice Enables a fee amount with the given pointDelta\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee fee amount (3000 means 0.3%)\\n    /// @param pointDelta The spacing between points to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, uint24 pointDelta) external;\\n\\n    /// @notice Create a new pool which not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @param currentPoint initial point (log 1.0001 of price)\\n    /// @return address of newly created pool\\n    function newPool(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        int24 currentPoint\\n    ) external returns (address);\\n\\n    /// @notice Charge receiver of all pools.\\n    /// @return address of charge receiver\\n    function chargeReceiver() external view returns(address);\\n\\n    /// @notice Get pool of (tokenX, tokenY, fee), address(0) for not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @return address of pool\\n    function pool(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee\\n    ) external view returns(address);\\n\\n    /// @notice Get point delta of a given fee amount.\\n    /// @param fee fee amount\\n    /// @return pointDelta the point delta\\n    function fee2pointDelta(uint24 fee) external view returns (int24 pointDelta);\\n\\n    /// @notice Change charge receiver, only owner of factory can call.\\n    /// @param _chargeReceiver address of new receiver\\n    function modifyChargeReceiver(address _chargeReceiver) external;\\n\\n    /// @notice Change defaultFeeChargePercent\\n    /// @param _defaultFeeChargePercent new charge percent\\n    function modifyDefaultFeeChargePercent(uint24 _defaultFeeChargePercent) external;\\n\\n    function deployPoolParams() external view returns(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        int24 currentPoint,\\n        int24 pointDelta,\\n        uint24 feeChargePercent\\n    );\\n    \\n}\",\"keccak256\":\"0xcdd0baf60deddee51f5422ae068e0f53e7748a9678a3de657bdc09c85bb23ceb\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_periphery/contracts/core/interfaces/IiZiSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IiZiSwapPool {\\n\\n    /// @notice Emitted when miner successfully add liquidity (mint).\\n    /// @param sender the address that minted the liquidity\\n    /// @param owner the owner who will benefit from this liquidity\\n    /// @param leftPoint left endpoint of the liquidity\\n    /// @param rightPoint right endpoint of the liquidity\\n    /// @param liquidity the amount of liquidity minted to the range [leftPoint, rightPoint)\\n    /// @param amountX amount of tokenX deposit\\n    /// @param amountY amount of tokenY deposit\\n    event Mint(\\n        address sender, \\n        address indexed owner, \\n        int24 indexed leftPoint, \\n        int24 indexed rightPoint, \\n        uint128 liquidity, \\n        uint256 amountX, \\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when miner successfully decrease liquidity (withdraw).\\n    /// @param owner owner address of liquidity\\n    /// @param leftPoint left endpoint of liquidity\\n    /// @param rightPoint right endpoint of liquidity\\n    /// @param liquidity amount of liquidity decreased\\n    /// @param amountX amount of tokenX withdrawed\\n    /// @param amountY amount of tokenY withdrawed\\n    event Burn(\\n        address indexed owner, \\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when fees and withdrawed liquidity are collected \\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param leftPoint The left point of the liquidity\\n    /// @param rightPoint The right point of the liquidity\\n    /// @param amountX The amount of tokenX (fees and withdrawed tokenX from liquidity)\\n    /// @param amountY The amount of tokenY (fees and withdrawed tokenY from liquidity)\\n    event CollectLiquidity(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when a trader successfully exchange.\\n    /// @param tokenX tokenX of pool\\n    /// @param tokenY tokenY of pool\\n    /// @param fee fee amount of pool\\n    /// @param sellXEarnY true for selling tokenX, false for buying tokenX\\n    /// @param amountX amount of tokenX in this exchange\\n    /// @param amountY amount of tokenY in this exchange\\n    event Swap(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint24 indexed fee,\\n        bool sellXEarnY,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of tokenX/tokenY.\\n    /// @param sender the address that initiated the swap call, and that received the callback\\n    /// @param recipient the address that received the tokens from flash\\n    /// @param amountX the amount of tokenX that was flashed\\n    /// @param amountY the amount of tokenY that was flashed\\n    /// @param paidX the amount of tokenX paid for the flash, which can exceed the amountX plus the fee\\n    /// @param paidY the amount of tokenY paid for the flash, which can exceed the amountY plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 paidX,\\n        uint256 paidY\\n    );\\n\\n    /// @notice Emitted when a seller successfully add a limit order.\\n    /// @param owner owner of limit order\\n    /// @param addAmount amount of token to sell the seller added\\n    /// @param acquireAmount amount of earn-token acquired, if there exists some opposite order before \\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token, if this owner has order with same direction on this point before\\n    /// @param claimEarn claimed earned earn-token, if this owner has order with same direction on this point before\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event AddLimitOrder(\\n        address indexed owner,\\n        uint128 addAmount,\\n        uint128 acquireAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when a seller successfully decrease a limit order.\\n    /// @param owner owner of limit order\\n    /// @param decreaseAmount amount of token to sell the seller decreased\\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token\\n    /// @param claimEarn claimed earned earn-token\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event DecLimitOrder(\\n        address indexed owner,\\n        uint128 decreaseAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when collect from a limit order\\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param point The point of the limit order\\n    /// @param collectDec The amount of decreased sell token collected\\n    /// @param collectEarn The amount of earn token collected\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event CollectLimitOrder(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed point,\\n        uint128 collectDec,\\n        uint128 collectEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Returns the information about a liquidity by the liquidity's key.\\n    /// @param key the liquidity's key is a hash of a preimage composed by the miner(owner), pointLeft and pointRight\\n    /// @return liquidity the amount of liquidity,\\n    /// @return lastFeeScaleX_128 fee growth of tokenX inside the range as of the last mint/burn/collect,\\n    /// @return lastFeeScaleY_128 fee growth of tokenY inside the range as of the last mint/burn/collect,\\n    /// @return tokenOwedX the computed amount of tokenX miner can collect as of the last mint/burn/collect,\\n    /// @return tokenOwedY the computed amount of tokenY miner can collect as of the last mint/burn/collect\\n    function liquidity(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 lastFeeScaleX_128,\\n            uint256 lastFeeScaleY_128,\\n            uint256 tokenOwedX,\\n            uint256 tokenOwedY\\n        );\\n    \\n    /// @notice Returns the information about a user's limit order (sell tokenY and earn tokenX).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenX earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenY not selled in this limit order\\n    /// @return sellingDec amount of tokenY decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenX in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenX in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenX earned (both legacy and unlegacy) in this limit order\\n    function userEarnX(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint256 lastAccEarn,\\n            uint128 sellingRemain,\\n            uint128 sellingDec,\\n            uint128 earn,\\n            uint128 legacyEarn,\\n            uint128 earnAssign\\n        );\\n    \\n    /// @notice Returns the information about a user's limit order (sell tokenX and earn tokenY).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenY earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenX not selled in this limit order\\n    /// @return sellingDec amount of tokenX decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenY in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenY in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenY earned (both legacy and unlegacy) in this limit order\\n    function userEarnY(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint256 lastAccEarn,\\n            uint128 sellingRemain,\\n            uint128 sellingDec,\\n            uint128 earn,\\n            uint128 legacyEarn,\\n            uint128 earnAssign\\n        );\\n    \\n    /// @notice Mark a given amount of tokenY in a limitorder(sellx and earn y) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignY max amount of tokenY to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnY\\n    /// @return actualAssignY actual amount of tokenY marked\\n    function assignLimOrderEarnY(\\n        int24 point,\\n        uint128 assignY,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignY);\\n    \\n    /// @notice Mark a given amount of tokenX in a limitorder(selly and earn x) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignX max amount of tokenX to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnX\\n    /// @return actualAssignX actual amount of tokenX marked\\n    function assignLimOrderEarnX(\\n        int24 point,\\n        uint128 assignX,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignX);\\n\\n    /// @notice Decrease limitorder of selling X.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaX max amount of tokenX seller wants to decrease\\n    /// @return actualDeltaX actual amount of tokenX decreased\\n    /// @return legacyAccEarn legacyAccEarnY of pointOrder at point when calling this interface\\n    function decLimOrderWithX(\\n        int24 point,\\n        uint128 deltaX\\n    ) external returns (uint128 actualDeltaX, uint256 legacyAccEarn);\\n    \\n    /// @notice Decrease limitorder of selling Y.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaY max amount of tokenY seller wants to decrease\\n    /// @return actualDeltaY actual amount of tokenY decreased\\n    /// @return legacyAccEarn legacyAccEarnX of pointOrder at point when calling this interface\\n    function decLimOrderWithY(\\n        int24 point,\\n        uint128 deltaY\\n    ) external returns (uint128 actualDeltaY, uint256 legacyAccEarn);\\n    \\n    /// @notice Add a limit order (selling x) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountX amount of tokenX to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderX actual added amount of tokenX\\n    /// @return acquireY amount of tokenY acquired if there is a limit order to sell y before adding\\n    function addLimOrderWithX(\\n        address recipient,\\n        int24 point,\\n        uint128 amountX,\\n        bytes calldata data\\n    ) external returns (uint128 orderX, uint128 acquireY);\\n\\n    /// @notice Add a limit order (selling y) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountY amount of tokenY to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderY actual added amount of tokenY\\n    /// @return acquireX amount of tokenX acquired if there exists a limit order to sell x before adding\\n    function addLimOrderWithY(\\n        address recipient,\\n        int24 point,\\n        uint128 amountY,\\n        bytes calldata data\\n    ) external returns (uint128 orderY, uint128 acquireX);\\n\\n    /// @notice Collect earned or decreased token from limit order.\\n    /// @param recipient address to benefit\\n    /// @param point point of limit order, be sure to be times of pointDelta\\n    /// @param collectDec max amount of decreased selling token to collect\\n    /// @param collectEarn max amount of earned token to collect\\n    /// @param isEarnY direction of this limit order, true for sell y, false for sell x\\n    /// @return actualCollectDec actual amount of decresed selling token collected\\n    /// @return actualCollectEarn actual amount of earned token collected\\n    function collectLimOrder(\\n        address recipient, int24 point, uint128 collectDec, uint128 collectEarn, bool isEarnY\\n    ) external returns(uint128 actualCollectDec, uint128 actualCollectEarn);\\n\\n    /// @notice Add liquidity to the pool.\\n    /// @param recipient newly created liquidity will belong to this address\\n    /// @param leftPt left endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param rightPt right endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param liquidDelta amount of liquidity to add\\n    /// @param data any data that should be passed through to the callback\\n    /// @return amountX The amount of tokenX that was paid for the liquidity. Matches the value in the callback\\n    /// @return amountY The amount of tokenY that was paid for the liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Decrease a given amount of liquidity from msg.sender's liquidities.\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param liquidDelta amount of liquidity to burn\\n    /// @return amountX The amount of tokenX should be refund after burn\\n    /// @return amountY The amount of tokenY should be refund after burn\\n    function burn(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Collect tokens (fee or refunded after burn) from a liquidity.\\n    /// @param recipient the address which should receive the collected tokens\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param amountXLim max amount of tokenX the owner wants to collect\\n    /// @param amountYLim max amount of tokenY the owner wants to collect\\n    /// @return actualAmountX the amount tokenX collected\\n    /// @return actualAmountY the amount tokenY collected\\n    function collect(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint256 amountXLim,\\n        uint256 amountYLim\\n    ) external returns (uint256 actualAmountX, uint256 actualAmountY);\\n\\n    /// @notice Swap tokenY for tokenX, given max amount of tokenY user willing to pay.\\n    /// @param recipient the address to receive tokenX\\n    /// @param amount the max amount of tokenY user willing to pay\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    function swapY2X(\\n        address recipient,\\n        uint128 amount,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenY for tokenX, given amount of tokenX user desires.\\n    /// @param recipient the address to receive tokenX\\n    /// @param desireX the amount of tokenX user desires\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    function swapY2XDesireX(\\n        address recipient,\\n        uint128 desireX,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenX for tokenY, given max amount of tokenX user willing to pay.\\n    /// @param recipient the address to receive tokenY\\n    /// @param amount the max amount of tokenX user willing to pay\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    function swapX2Y(\\n        address recipient,\\n        uint128 amount,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenX for tokenY, given amount of tokenY user desires.\\n    /// @param recipient the address to receive tokenY\\n    /// @param desireY the amount of tokenY user desires\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    function swapX2YDesireY(\\n        address recipient,\\n        uint128 desireY,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Returns sqrt(1.0001), in 96 bit fixpoint number.\\n    function sqrtRate_96() external view returns(uint160);\\n    \\n    /// @notice State values of pool.\\n    /// @return sqrtPrice_96 a 96 fixpoing number describe the sqrt value of current price(tokenX/tokenY)\\n    /// @return currentPoint the current point of the pool, 1.0001 ^ currentPoint = price\\n    /// @return observationCurrentIndex the index of the last oracle observation that was written,\\n    /// @return observationQueueLen the current maximum number of observations stored in the pool,\\n    /// @return observationNextQueueLen the next maximum number of observations, to be updated when the observation.\\n    /// @return locked whether the pool is locked (only used for checking reentrance)\\n    /// @return liquidity liquidity on the currentPoint (currX * sqrtPrice + currY / sqrtPrice)\\n    /// @return liquidityX liquidity of tokenX\\n    function state()\\n        external view\\n        returns(\\n            uint160 sqrtPrice_96,\\n            int24 currentPoint,\\n            uint16 observationCurrentIndex,\\n            uint16 observationQueueLen,\\n            uint16 observationNextQueueLen,\\n            bool locked,\\n            uint128 liquidity,\\n            uint128 liquidityX\\n        );\\n    \\n    /// @notice LimitOrder info on a given point.\\n    /// @param point the given point \\n    /// @return sellingX total amount of tokenX selling on the point\\n    /// @return earnY total amount of unclaimed earned tokenY for unlegacy sellingX\\n    /// @return accEarnY total amount of earned tokenY(via selling tokenX) by all users at this point as of the last swap\\n    /// @return legacyAccEarnY latest recorded 'accEarnY' value when sellingX is clear (legacy)\\n    /// @return legacyEarnY total amount of unclaimed earned tokenY for legacy (cleared during swap) sellingX\\n    /// @return sellingY total amount of tokenYselling on the point\\n    /// @return earnX total amount of unclaimed earned tokenX for unlegacy sellingY\\n    /// @return legacyEarnX total amount of unclaimed earned tokenX for legacy (cleared during swap) sellingY\\n    /// @return accEarnX total amount of earned tokenX(via selling tokenY) by all users at this point as of the last swap\\n    /// @return legacyAccEarnX latest recorded 'accEarnX' value when sellingY is clear (legacy)\\n    function limitOrderData(int24 point)\\n        external view\\n        returns(\\n            uint128 sellingX,\\n            uint128 earnY,\\n            uint256 accEarnY,\\n            uint256 legacyAccEarnY,\\n            uint128 legacyEarnY,\\n            uint128 sellingY,\\n            uint128 earnX,\\n            uint128 legacyEarnX,\\n            uint256 accEarnX,\\n            uint256 legacyAccEarnX\\n        );\\n    \\n    /// @notice Query infomation about a point whether has limit order or is an liquidity's endpoint.\\n    /// @param point point to query\\n    /// @return val endpoint for val&1>0 and has limit order for val&2 > 0\\n    function orderOrEndpoint(int24 point) external returns(int24 val);\\n\\n    /// @notice Returns observation data about a specific index.\\n    /// @param index the index of observation array\\n    /// @return timestamp the timestamp of the observation,\\n    /// @return accPoint the point multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return init whether the observation has been initialized and the above values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 timestamp,\\n            int56 accPoint,\\n            bool init\\n        );\\n\\n    /// @notice Point status in the pool.\\n    /// @param point the point\\n    /// @return liquidSum the total amount of liquidity that uses the point either as left endpoint or right endpoint\\n    /// @return liquidDelta how much liquidity changes when the pool price crosses the point from left to right\\n    /// @return accFeeXOut_128 the fee growth on the other side of the point from the current point in tokenX\\n    /// @return accFeeYOut_128 the fee growth on the other side of the point from the current point in tokenY\\n    /// @return isEndpt whether the point is an endpoint of a some miner's liquidity, true if liquidSum > 0\\n    function points(int24 point)\\n        external\\n        view\\n        returns (\\n            uint128 liquidSum,\\n            int128 liquidDelta,\\n            uint256 accFeeXOut_128,\\n            uint256 accFeeYOut_128,\\n            bool isEndpt\\n        );\\n\\n    /// @notice Returns 256 packed point (statusVal>0) boolean values. See PointBitmap for more information.\\n    function pointBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the integral value of point(time) and integral value of 1/liquidity(time)\\n    ///     at some target timestamps (block.timestamp - secondsAgo[i])\\n    /// @dev Reverts if target timestamp is early than oldest observation in the queue\\n    /// @dev If you call this method with secondsAgos = [3600, 0]. the average point of this pool during recent hour is \\n    /// (accPoints[1] - accPoints[0]) / 3600\\n    /// @param secondsAgos describe the target timestamp , targetTimestimp[i] = block.timestamp - secondsAgo[i]\\n    /// @return accPoints integral value of point(time) from 0 to each target timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory accPoints);\\n    \\n    /// @notice Expand max-length of observation queue.\\n    /// @param newNextQueueLen new value of observationNextQueueLen, which should be greater than current observationNextQueueLen\\n    function expandObservationQueue(uint16 newNextQueueLen) external;\\n\\n    /// @notice Borrow tokenX and/or tokenY and pay it back within a block.\\n    /// @dev The caller needs to implement a IiZiSwapPool#flashCallback callback function\\n    /// @param recipient the address which will receive the tokenY and/or tokenX\\n    /// @param amountX the amount of tokenX to borrow\\n    /// @param amountY the amount of tokenY to borrow\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Returns a snapshot infomation of Liquidity in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return deltaLiquidities an array of delta liquidity for points in the range\\n    ///    note 1. delta liquidity here is amount of liquidity changed when cross a point from left to right\\n    ///    note 2. deltaLiquidities only contains points which are times of pointDelta\\n    ///    note 3. this function may cost a ENORMOUS amount of gas, be careful to call\\n    function liquiditySnapshot(int24 leftPoint, int24 rightPoint) external view returns(int128[] memory deltaLiquidities);\\n\\n    struct LimitOrderStruct {\\n        uint128 sellingX;\\n        uint128 earnY;\\n        uint256 accEarnY;\\n        uint128 sellingY;\\n        uint128 earnX;\\n        uint256 accEarnX;\\n    }\\n\\n    /// @notice Returns a snapshot infomation of Limit Order in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return limitOrders an array of Limit Orders for points in the range\\n    ///    note 1. this function may cost a HUGE amount of gas, be careful to call\\n    function limitOrderSnapshot(int24 leftPoint, int24 rightPoint) external view returns(LimitOrderStruct[] memory limitOrders); \\n\\n    /// @notice Amount of charged fee on tokenX.\\n    function totalFeeXCharged() external view returns(uint256);\\n\\n    /// @notice Amount of charged fee on tokenY.\\n    function totalFeeYCharged() external view returns(uint256);\\n\\n    /// @notice Percent to charge from miner's fee.\\n    function feeChargePercent() external view returns(uint24);\\n\\n    /// @notice Collect charged fee, only factory's chargeReceiver can call.\\n    function collectFeeCharged() external;\\n\\n    /// @notice modify 'feeChargePercent', only owner has authority.\\n    /// @param newFeeChargePercent new value of feeChargePercent, a nature number range in [0, 100], \\n    function modifyFeeChargePercent(uint24 newFeeChargePercent) external;\\n    \\n}\",\"keccak256\":\"0x2fca2c307255fccbb4b857e052e446a2dd1ecbd9ec1a2b2c837357ef397b834a\",\"license\":\"BUSL-1.1\"},\"@izumifinance/iziswap_periphery/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity ^0.8.4;\\n\\nlibrary BytesLib {\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toAddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'toUint24_overflow');\\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n    \\n}\\n\",\"keccak256\":\"0xb8da823bb44e85312815f241577645ef6107d9d6c02181cca7fbd5ab783deaf0\",\"license\":\"GPL-2.0-or-later\"},\"@izumifinance/iziswap_periphery/contracts/libraries/Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokenA,\\n            address tokenB,\\n            uint24 fee\\n        )\\n    {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n    \\n}\\n\",\"keccak256\":\"0x7b1f1bd992bec3e12570bd8f3fa6d13e13048b07cb54c9bc74687ee99c91244d\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dex_connectors/DexConnectorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IDexConnector.sol\\\";\\n\\nabstract contract DexConnectorStorage is IDexConnector {\\n    string public override name;\\n    address public override wrappedNativeToken;\\n    address public override exchangeRouter;\\n    address public override liquidityPoolFactory;\\n    address public quoterAddress;\\n    mapping(address => mapping(address => uint24)) public feeTier;\\n}\\n\",\"keccak256\":\"0xe3ab676eff55a17fe5ba365f0121c3a0c831b88964e5ef558d1b0572fca15f82\",\"license\":\"MIT\"},\"contracts/dex_connectors/iZiSwapConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./DexConnectorStorage.sol\\\";\\nimport \\\"@izumifinance/iziswap_periphery/contracts/Swap.sol\\\" as ExternalSwap; // Avoid conflict with Swap event\\nimport \\\"@izumifinance/iziswap_periphery/contracts/Quoter.sol\\\";\\nimport \\\"@izumifinance/iziswap_periphery/contracts/core/interfaces/IiZiSwapFactory.sol\\\";\\nimport \\\"@izumifinance/iziswap_core/contracts/iZiSwapPool.sol\\\" as LiquidityPool;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract iZiSwapConnector is\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DexConnectorStorage\\n{\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"iZiSwapConnector: zero address\\\");\\n        _;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice This contract is used for interacting with UniswapV3 contract\\n    /// @param _name Name of the underlying DEX\\n    /// @param _exchangeRouter Address of the DEX router contract\\n    function initialize(\\n        string memory _name,\\n        address _exchangeRouter,\\n        address _quoterAddress\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        name = _name;\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = ExternalSwap\\n            .Swap(payable(exchangeRouter))\\n            .factory();\\n        quoterAddress = _quoterAddress;\\n        wrappedNativeToken = ExternalSwap.Swap(payable(exchangeRouter)).WETH9();\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Setter for wrapped native token\\n    /// @dev Get address from exchange router\\n    function setWrappedNativeToken() external override onlyOwner {\\n        wrappedNativeToken = ExternalSwap.Swap(payable(exchangeRouter)).WETH9();\\n    }\\n\\n    /// @notice Setter for exchange router\\n    /// @dev Set address of liquidity pool factory from the exchange router\\n    /// @param _exchangeRouter Address of the new exchange router contract\\n    function setExchangeRouter(\\n        address _exchangeRouter\\n    ) external override nonZeroAddress(_exchangeRouter) onlyOwner {\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = ExternalSwap\\n            .Swap(payable(exchangeRouter))\\n            .factory();\\n    }\\n\\n    /// @notice Setter for liquidity pool factory\\n    /// @dev Set address from exchange router\\n    function setLiquidityPoolFactory() external override onlyOwner {\\n        liquidityPoolFactory = ExternalSwap\\n            .Swap(payable(exchangeRouter))\\n            .factory();\\n    }\\n\\n    /// @notice Setter for quoter\\n    function setQuoter(address _quoterAddress) external onlyOwner {\\n        quoterAddress = _quoterAddress;\\n    }\\n\\n    /// @notice Setter for fee tier\\n    /// @dev We set the fee tier that is used for exchanging tokens\\n    function setFeeTier(\\n        address _firstToken,\\n        address _secondToken,\\n        uint24 _feeTier\\n    ) external onlyOwner {\\n        feeTier[_firstToken][_secondToken] = _feeTier;\\n        feeTier[_secondToken][_firstToken] = _feeTier;\\n    }\\n\\n    function convertedPath(\\n        address[] memory _path\\n    ) public view returns (bytes memory packedData) {\\n        packedData = abi.encodePacked(_path[0]);\\n\\n        for (uint i = 1; i < _path.length; i++) {\\n            address firstToken = _path[i - 1];\\n            address secondToken = _path[i];\\n            uint24 _feeTier = feeTier[firstToken][secondToken];\\n            packedData = abi.encodePacked(packedData, _feeTier, secondToken);\\n        }\\n    }\\n\\n    /// @notice Return the needed input amount to get the output amount\\n    /// @dev Return (false, 0) if DEX cannot give the output amount\\n    function getExactOutput(\\n        address[] memory _path,\\n        uint256 _amountOut\\n    ) public returns (bool, uint256) {\\n        if (!isPathValid(_path)) {\\n            return (false, 0);\\n        }\\n        (uint amountIn, ) = Quoter(payable(quoterAddress)).swapDesire(\\n            uint128(_amountOut), // TODO: Uint 128\\n            convertedPath(_path)\\n        );\\n        return (true, amountIn);\\n    }\\n\\n    /// @notice Return the output amount for the given input amount\\n    /// @dev Return (false, 0) if DEX cannot swap the input amount\\n    function getExactInput(\\n        address[] memory _path,\\n        uint256 _amountIn\\n    ) public returns (bool, uint256) {\\n        if (!isPathValid(_path)) {\\n            return (false, 0);\\n        }\\n        (uint amountOut, ) = Quoter(payable(quoterAddress)).swapAmount(\\n            uint128(_amountIn), // TODO: Uint 128\\n            convertedPath(_path)\\n        );\\n        return (true, amountOut);\\n    }\\n\\n    /// @notice Deprecated for v3\\n    function getInputAmount(\\n        uint,\\n        address,\\n        address\\n    ) external pure override returns (bool, uint) {\\n        return (true, 0);\\n    }\\n\\n    /// @notice Deprecated for v3\\n    function getOutputAmount(\\n        uint,\\n        address,\\n        address\\n    ) external pure override returns (bool, uint) {\\n        return (true, 0);\\n    }\\n\\n    /// @notice Return the swap rate between two tokens\\n    /// @dev Decimal determines the precision of the swap rate\\n    function getSwapRate(\\n        address[] memory _path,\\n        uint256 _decimal\\n    ) external view returns (uint _swapRate) {\\n        address liquidityPool;\\n        uint sqrtPriceX96;\\n        _swapRate = 10 ** _decimal;\\n\\n        for (uint i = 0; i < _path.length - 1; i++) {\\n            liquidityPool = IiZiSwapFactory(liquidityPoolFactory).pool(\\n                _path[i],\\n                _path[i + 1],\\n                feeTier[_path[i]][_path[i + 1]]\\n            );\\n\\n            (sqrtPriceX96, , , , , , , ) = LiquidityPool\\n                .iZiSwapPool(liquidityPool)\\n                .state();\\n\\n            if (LiquidityPool.iZiSwapPool(liquidityPool).tokenX() == _path[i]) {\\n                _swapRate =\\n                    (_swapRate * sqrtPriceX96 * sqrtPriceX96) /\\n                    2 ** 96 /\\n                    2 ** 96;\\n            } else {\\n                _swapRate =\\n                    (_swapRate * 2 ** 96 * 2 ** 96) /\\n                    sqrtPriceX96 /\\n                    sqrtPriceX96;\\n            }\\n        }\\n\\n        uint firstDecimal = IERC20Metadata(_path[0]).decimals();\\n        uint LastDecimal = IERC20Metadata(_path[_path.length - 1]).decimals();\\n\\n        if (firstDecimal > LastDecimal) {\\n            _swapRate = _swapRate * 10 ** (firstDecimal - LastDecimal);\\n        } else {\\n            _swapRate = _swapRate / 10 ** (LastDecimal - firstDecimal);\\n        }\\n    }\\n\\n    /// @notice Exchange input token for output token through exchange router\\n    /// @dev Check exchange conditions before exchanging\\n    ///      We assume that the input token is not WETH (it is teleBTC)\\n    /// @param _inputAmount Amount of input token\\n    /// @param _outputAmount Amount of output token\\n    /// @param _path List of tokens that are used for exchanging\\n    /// @param _to Receiver address\\n    /// @param _deadline Deadline of exchanging tokens\\n    /// @param _isFixedToken True if the input token amount is fixed\\n    /// @return _result True if the exchange is successful\\n    /// @return _amounts Amounts of tokens that are involved in exchanging\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    )\\n        external\\n        override\\n        nonReentrant\\n        nonZeroAddress(_to)\\n        returns (bool _result, uint[] memory _amounts)\\n    {\\n        uint neededInputAmount;\\n        (_result, neededInputAmount) = _checkExchangeConditions(\\n            _inputAmount,\\n            _outputAmount,\\n            _path,\\n            _deadline,\\n            _isFixedToken\\n        );\\n\\n        uint _amount;\\n        if (_result) {\\n            _amounts = new uint[](2);\\n            // Get tokens from user\\n            IERC20(_path[0]).safeTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                neededInputAmount\\n            );\\n\\n            // Give allowance to exchange router\\n            IERC20(_path[0]).approve(exchangeRouter, neededInputAmount);\\n\\n            if (_isFixedToken == true) {\\n                (, _amount) = ExternalSwap\\n                    .Swap(payable(exchangeRouter))\\n                    .swapAmount(\\n                        _buildInputSwap(\\n                            neededInputAmount,\\n                            _outputAmount,\\n                            _path,\\n                            _to,\\n                            _deadline\\n                        )\\n                    );\\n                _amounts[0] = neededInputAmount;\\n                _amounts[1] = _amount;\\n            }\\n\\n            if (_isFixedToken == false) {\\n                (, _amount) = ExternalSwap\\n                    .Swap(payable(exchangeRouter))\\n                    .swapDesire(\\n                        _buildOutputSwap(\\n                            neededInputAmount,\\n                            _outputAmount,\\n                            _path,\\n                            _to,\\n                            _deadline\\n                        )\\n                    );\\n                _amounts[0] = _amount;\\n                _amounts[1] = _outputAmount;\\n            }\\n            // emit Swap(_path, _amounts, _to);\\n        }\\n    }\\n\\n    /// @notice Return true if the exchange path is valid\\n    /// @param _path List of tokens that are used for exchanging\\n    function isPathValid(\\n        address[] memory _path\\n    ) public view override returns (bool _result) {\\n        address liquidityPool;\\n\\n        // Checks that path length is greater than one\\n        if (_path.length < 2) {\\n            return false;\\n        }\\n\\n        for (uint i = 0; i < _path.length - 1; i++) {\\n            liquidityPool = IiZiSwapFactory(liquidityPoolFactory).pool(\\n                _path[i],\\n                _path[i + 1],\\n                feeTier[_path[i]][_path[i + 1]]\\n            );\\n            if (liquidityPool == address(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // Private functions\\n\\n    function _buildInputSwap(\\n        uint _amountIn,\\n        uint _amountOutMin,\\n        address[] memory _path,\\n        address _recipient,\\n        uint _deadline\\n    ) private view returns (ExternalSwap.Swap.SwapAmountParams memory) {\\n        return\\n            ExternalSwap.Swap.SwapAmountParams({\\n                path: convertedPath(_path),\\n                recipient: _recipient,\\n                amount: uint128(_amountIn), // TODO: Uint 128\\n                minAcquired: _amountOutMin,\\n                deadline: _deadline\\n            });\\n    }\\n\\n    function _buildOutputSwap(\\n        uint _amountInMaximum,\\n        uint _amountOut,\\n        address[] memory _path,\\n        address _recipient,\\n        uint _deadline\\n    ) private view returns (ExternalSwap.Swap.SwapDesireParams memory) {\\n        return\\n            ExternalSwap.Swap.SwapDesireParams({\\n                path: convertedPath(_path),\\n                recipient: _recipient,\\n                desire: uint128(_amountOut), // TODO: Uint 128\\n                maxPayed: _amountInMaximum,\\n                deadline: _deadline\\n            });\\n    }\\n\\n    /// @notice Check if exchanging is possible or not\\n    /// @dev Avoid reverting by exchange router\\n    /// @return True if exchange conditions are satisfied\\n    /// @return Needed amount of input token\\n    function _checkExchangeConditions(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) private returns (bool, uint) {\\n        // Check deadline has not passed\\n        if (_deadline < block.timestamp) {\\n            return (false, 0);\\n        }\\n\\n        // Find maximum output amount\\n        (bool success, uint outputResult) = getExactInput(_path, _inputAmount);\\n\\n        // Check that exchanging is possible or not\\n        if (_outputAmount > outputResult) {\\n            return (false, 0);\\n        } else {\\n            if (_isFixedToken == true) {\\n                return (success, _inputAmount);\\n            } else {\\n                return getExactOutput(_path, _outputAmount);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe39f4da8a8aedb2f4d58a24847ffde46d4f1cbf6687f359aca09f67c0e71c18\",\"license\":\"MIT\"},\"contracts/dex_connectors/interfaces/IDexConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IDexConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x4063ca823f0ca14d76c64730d0364a0939c7b2ac5286705d9d2c5be23fb7097d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506126bd806100206000396000f3fe608060405234801561001057600080fd5b506004361061011d5760003560e01c806301e65db31461012257806304fe3fcb1461016b57806306fdde031461018057806311a2f0cb146101955780631580b5e5146101c057806317fcb39b146101c85780631cb85818146101db5780633566967d146101ee578063463fd1af1461021857806360efb0a51461022b5780636145f8761461024c578063715018a61461025f578063838b7ccb14610267578063898830741461027a5780638b1937cd146102945780638da5cb5b146102a75780639b4bca24146102af578063b0bbcd88146102d2578063b23e4fc6146102f3578063df71d7f31461027a578063e75d75d5146102fb578063f2fde38b1461030e578063f912c64b14610321575b600080fd5b610152610130366004611de6565b609c60209081526000928352604080842090915290825290205462ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61017e610179366004611e1e565b610334565b005b610188610397565b6040516101629190612342565b609b546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610162565b61017e610425565b6098546101a8906001600160a01b031681565b6099546101a8906001600160a01b031681565b6102016101fc366004611ea9565b6104d5565b604080519215158352602083019190915201610162565b61017e610226366004611f07565b610591565b61023e610239366004611ea9565b610813565b604051908152602001610162565b61018861025a366004611e6f565b610d30565b61017e610e6d565b61017e610275366004611dae565b610e77565b610201610288366004612051565b60016000935093915050565b6102016102a2366004611ea9565b610f56565b6101a8610f8f565b6102c26102bd366004611e6f565b610f9e565b6040519015158152602001610162565b6102e56102e0366004612151565b611195565b604051610162929190612300565b61017e611502565b609a546101a8906001600160a01b031681565b61017e61031c366004611dae565b6115b2565b61017e61032f366004611dae565b61162b565b61033c611655565b6001600160a01b039283166000818152609c60208181526040808420969097168352948552858220805462ffffff90951662ffffff199586168117909155908552858220928252919093529290912080549091169091179055565b609780546103a4906125e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103d0906125e8565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b61042d611655565b609960009054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611dca565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6000806104e184610f9e565b6104f05750600090508061058a565b609b546000906001600160a01b03166318ce06108561050e88610d30565b6040518363ffffffff1660e01b815260040161052b9291906123ea565b600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105819190810190612087565b50600193509150505b9250929050565b600054610100900460ff16158080156105b15750600054600160ff909116105b806105cb5750303b1580156105cb575060005460ff166001145b6106335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610656576000805461ff0019166101001790555b61065e6116b4565b6106666116e3565b8351610679906097906020870190611c52565b50609980546001600160a01b0319166001600160a01b0385169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b1580156106ce57600080fd5b505afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190611dca565b609a80546001600160a01b03199081166001600160a01b0393841617909155609b8054909116848316179055609954604080516312a9293f60e21b815290519190921691634aa4a4fc916004808301926020929190829003018186803b15801561076f57600080fd5b505afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190611dca565b609880546001600160a01b0319166001600160a01b0392909216919091179055801561080d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000808061082284600a6124dc565b925060005b6001865161083591906125a5565b811015610b8957609a5486516001600160a01b039091169063becbcc6a9088908490811061087357634e487b7160e01b600052603260045260246000fd5b6020026020010151888460016108899190612461565b815181106108a757634e487b7160e01b600052603260045260246000fd5b6020026020010151609c60008b87815181106108d357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b87600161090b9190612461565b8151811061092957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b815260040161097f939291906122d8565b60206040518083038186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190611dca565b9250826001600160a01b031663c19d93fb6040518163ffffffff1660e01b81526004016101006040518083038186803b158015610a0b57600080fd5b505afa158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190611fb7565b50508b516001600160a01b0390961697508b9587955085109350610a7b9250505057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b03166316dc165b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac557600080fd5b505afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190611dca565b6001600160a01b03161415610b4257600160601b8083610b1d8188612586565b610b279190612586565b610b319190612479565b610b3b9190612479565b9350610b77565b8180610b5286600160601b612586565b610b6090600160601b612586565b610b6a9190612479565b610b749190612479565b93505b80610b818161261d565b915050610827565b50600085600081518110610bad57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2591906121ce565b60ff16905060008660018851610c3b91906125a5565b81518110610c5957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9957600080fd5b505afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd191906121ce565b60ff16905080821115610d0457610ce881836125a5565b610cf390600a6124dc565b610cfd9086612586565b9450610d26565b610d0e82826125a5565b610d1990600a6124dc565b610d239086612479565b94505b5050505092915050565b606081600081518110610d5357634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d7e919060609190911b6001600160601b031916815260140190565b60408051601f19818403018152919052905060015b8251811015610e6757600083610daa6001846125a5565b81518110610dc857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610df457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038085166000908152609c84526040808220928416825291845281902054905191935062ffffff1691610e409187918491869101612291565b60405160208183030381529060405294505050508080610e5f9061261d565b915050610d93565b50919050565b610e75611655565b565b806001600160a01b038116610e9e5760405162461bcd60e51b815260040161062a90612355565b610ea6611655565b609980546001600160a01b0319166001600160a01b0384169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190611dca565b609a80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080610f6284610f9e565b610f715750600090508061058a565b609b546000906001600160a01b0316630980929e8561050e88610d30565b6033546001600160a01b031690565b600080600283511015610fb45750600092915050565b60005b60018451610fc591906125a5565b81101561118b57609a5484516001600160a01b039091169063becbcc6a9086908490811061100357634e487b7160e01b600052603260045260246000fd5b6020026020010151868460016110199190612461565b8151811061103757634e487b7160e01b600052603260045260246000fd5b6020026020010151609c600089878151811061106357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008987600161109b9190612461565b815181106110b957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b815260040161110f939291906122d8565b60206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190611dca565b91506001600160a01b038216611179575060009392505050565b806111838161261d565b915050610fb7565b5060019392505050565b600060606111a1611712565b846001600160a01b0381166111c85760405162461bcd60e51b815260040161062a90612355565b60006111d78a8a8a898961176c565b9094509050600084156114ea57604080516002808252606082018352909160208301908036833701905050935061124c3330848c60008151811061122b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166117da909392919063ffffffff16565b8860008151811061126d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160995460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b1580156112c557600080fd5b505af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611eeb565b50600186151514156113f7576099546001600160a01b03166375ceafe6611327848d8d8d8d611834565b6040518263ffffffff1660e01b815260040161134391906123d7565b6040805180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611394919061212e565b90508091505081846000815181106113bc57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505080846001815181106113ea57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b856114ea576099546001600160a01b031663115ff67e61141a848d8d8d8d6118c2565b6040518263ffffffff1660e01b815260040161143691906123d7565b6040805180830381600087803b15801561144f57600080fd5b505af1158015611463573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611487919061212e565b90508091505080846000815181106114af57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505089846001815181106114dd57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050506114f76001606555565b965096945050505050565b61150a611655565b609960009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115909190611dca565b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6115ba611655565b6001600160a01b03811661161f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062a565b61162881611958565b50565b611633611655565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b3361165e610f8f565b6001600160a01b031614610e755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062a565b600054610100900460ff166116db5760405162461bcd60e51b815260040161062a9061238c565b610e756119aa565b600054610100900460ff1661170a5760405162461bcd60e51b815260040161062a9061238c565b610e756119da565b600260655414156117655760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161062a565b6002606555565b60008042841015611782575060009050806117d0565b60008061178f878a610f56565b91509150808811156117a9576000809350935050506117d0565b600185151514156117bf575091508690506117d0565b6117c987896104d5565b9350935050505b9550959350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261080d908590611a01565b6118786040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160801b0316815260200160008152602001600081525090565b6040518060a0016040528061188c86610d30565b81526001600160a01b0390941660208501526001600160801b039096166040840152506060820193909352608001919091525090565b6119066040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160801b0316815260200160008152602001600081525090565b6040518060a0016040528061191a86610d30565b81526001600160a01b0390941660208501526001600160801b03909516604084015250606082019490945260800192909252919050565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119d15760405162461bcd60e51b815260040161062a9061238c565b610e7533611958565b600054610100900460ff166119515760405162461bcd60e51b815260040161062a9061238c565b6000611a56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ad89092919063ffffffff16565b805190915015611ad35780806020019051810190611a749190611eeb565b611ad35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062a565b505050565b6060611ae78484600085611af1565b90505b9392505050565b606082471015611b525760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062a565b843b611ba05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062a565b600080866001600160a01b03168587604051611bbc9190612275565b60006040518083038185875af1925050503d8060008114611bf9576040519150601f19603f3d011682016040523d82523d6000602084013e611bfe565b606091505b5091509150611c0e828286611c19565b979650505050505050565b60608315611c28575081611aea565b825115611c385782518084602001fd5b8160405162461bcd60e51b815260040161062a9190612342565b828054611c5e906125e8565b90600052602060002090601f016020900481019282611c805760008555611cc6565b82601f10611c9957805160ff1916838001178555611cc6565b82800160010185558215611cc6579182015b82811115611cc6578251825591602001919060010190611cab565b50611cd2929150611cd6565b5090565b5b80821115611cd25760008155600101611cd7565b8035611cf681612664565b919050565b600082601f830112611d0b578081fd5b81356020611d20611d1b8361243e565b61240e565b80838252828201915082860187848660051b8901011115611d3f578586fd5b855b85811015611d66578135611d5481612664565b84529284019290840190600101611d41565b5090979650505050505050565b8051600281900b8114611cf657600080fd5b80516001600160801b0381168114611cf657600080fd5b805161ffff81168114611cf657600080fd5b600060208284031215611dbf578081fd5b8135611aea81612664565b600060208284031215611ddb578081fd5b8151611aea81612664565b60008060408385031215611df8578081fd5b8235611e0381612664565b91506020830135611e1381612664565b809150509250929050565b600080600060608486031215611e32578081fd5b8335611e3d81612664565b92506020840135611e4d81612664565b9150604084013562ffffff81168114611e64578182fd5b809150509250925092565b600060208284031215611e80578081fd5b81356001600160401b03811115611e95578182fd5b611ea184828501611cfb565b949350505050565b60008060408385031215611ebb578182fd5b82356001600160401b03811115611ed0578283fd5b611edc85828601611cfb565b95602094909401359450505050565b600060208284031215611efc578081fd5b8151611aea81612679565b600080600060608486031215611f1b578283fd5b83356001600160401b0380821115611f31578485fd5b818601915086601f830112611f44578485fd5b8135602082821115611f5857611f5861264e565b611f6a601f8301601f1916820161240e565b92508183528881838601011115611f7f578687fd5b818185018285013786818385010152829650611f9c818901611ceb565b955050505050611fae60408501611ceb565b90509250925092565b600080600080600080600080610100898b031215611fd3578586fd5b8851611fde81612664565b9750611fec60208a01611d73565b9650611ffa60408a01611d9c565b955061200860608a01611d9c565b945061201660808a01611d9c565b935060a089015161202681612679565b925061203460c08a01611d85565b915061204260e08a01611d85565b90509295985092959890939650565b600080600060608486031215612065578081fd5b83359250602084013561207781612664565b91506040840135611e6481612664565b60008060408385031215612099578182fd5b8251602080850151919350906001600160401b038111156120b8578283fd5b8401601f810186136120c8578283fd5b80516120d6611d1b8261243e565b80828252848201915084840189868560051b87010111156120f5578687fd5b8694505b8385101561211e5761210a81611d73565b8352600194909401939185019185016120f9565b5080955050505050509250929050565b60008060408385031215612140578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215612169578384fd5b863595506020870135945060408701356001600160401b0381111561218c578485fd5b61219889828a01611cfb565b94505060608701356121a981612664565b92506080870135915060a08701356121c081612679565b809150509295509295509295565b6000602082840312156121df578081fd5b815160ff81168114611aea578182fd5b600081518084526122078160208601602086016125bc565b601f01601f19169290920160200192915050565b6000815160a0845261223060a08501826121ef565b6020848101516001600160a01b0316908601526040808501516001600160801b0316908601526060808501519086015260809384015193909401929092525090919050565b600082516122878184602087016125bc565b9190910192915050565b600084516122a38184602089016125bc565b60e89490941b6001600160e81b0319169190930190815260609190911b6001600160601b031916600382015260170192915050565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b600060408201841515835260206040818501528185518084526060860191508287019350845b81811015611d6657845183529383019391830191600101612326565b602081526000611aea60208301846121ef565b6020808252601e908201527f695a6953776170436f6e6e6563746f723a207a65726f20616464726573730000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000611aea602083018461221b565b6001600160801b0383168152604060208201819052600090611ae7908301846121ef565b604051601f8201601f191681016001600160401b03811182821017156124365761243661264e565b604052919050565b60006001600160401b038211156124575761245761264e565b5060051b60200190565b6000821982111561247457612474612638565b500190565b60008261249457634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156124d45781600019048211156124ba576124ba612638565b808516156124c757918102915b93841c939080029061249e565b509250929050565b6000611aea83836000826124f257506001612580565b816124ff57506000612580565b8160018114612515576002811461251f5761253b565b6001915050612580565b60ff84111561253057612530612638565b50506001821b612580565b5060208310610133831016604e8410600b841016171561255e575081810a612580565b6125688383612499565b806000190482111561257c5761257c612638565b0290505b92915050565b60008160001904831182151516156125a0576125a0612638565b500290565b6000828210156125b7576125b7612638565b500390565b60005b838110156125d75781810151838201526020016125bf565b8381111561080d5750506000910152565b600181811c908216806125fc57607f821691505b60208210811415610e6757634e487b7160e01b600052602260045260246000fd5b600060001982141561263157612631612638565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461162857600080fd5b801515811461162857600080fdfea2646970667358221220f962224c83595637c18ecad6d3687504afd265b8d65a97911817b1ba14f9dc1764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011d5760003560e01c806301e65db31461012257806304fe3fcb1461016b57806306fdde031461018057806311a2f0cb146101955780631580b5e5146101c057806317fcb39b146101c85780631cb85818146101db5780633566967d146101ee578063463fd1af1461021857806360efb0a51461022b5780636145f8761461024c578063715018a61461025f578063838b7ccb14610267578063898830741461027a5780638b1937cd146102945780638da5cb5b146102a75780639b4bca24146102af578063b0bbcd88146102d2578063b23e4fc6146102f3578063df71d7f31461027a578063e75d75d5146102fb578063f2fde38b1461030e578063f912c64b14610321575b600080fd5b610152610130366004611de6565b609c60209081526000928352604080842090915290825290205462ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61017e610179366004611e1e565b610334565b005b610188610397565b6040516101629190612342565b609b546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610162565b61017e610425565b6098546101a8906001600160a01b031681565b6099546101a8906001600160a01b031681565b6102016101fc366004611ea9565b6104d5565b604080519215158352602083019190915201610162565b61017e610226366004611f07565b610591565b61023e610239366004611ea9565b610813565b604051908152602001610162565b61018861025a366004611e6f565b610d30565b61017e610e6d565b61017e610275366004611dae565b610e77565b610201610288366004612051565b60016000935093915050565b6102016102a2366004611ea9565b610f56565b6101a8610f8f565b6102c26102bd366004611e6f565b610f9e565b6040519015158152602001610162565b6102e56102e0366004612151565b611195565b604051610162929190612300565b61017e611502565b609a546101a8906001600160a01b031681565b61017e61031c366004611dae565b6115b2565b61017e61032f366004611dae565b61162b565b61033c611655565b6001600160a01b039283166000818152609c60208181526040808420969097168352948552858220805462ffffff90951662ffffff199586168117909155908552858220928252919093529290912080549091169091179055565b609780546103a4906125e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103d0906125e8565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b61042d611655565b609960009054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611dca565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6000806104e184610f9e565b6104f05750600090508061058a565b609b546000906001600160a01b03166318ce06108561050e88610d30565b6040518363ffffffff1660e01b815260040161052b9291906123ea565b600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105819190810190612087565b50600193509150505b9250929050565b600054610100900460ff16158080156105b15750600054600160ff909116105b806105cb5750303b1580156105cb575060005460ff166001145b6106335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610656576000805461ff0019166101001790555b61065e6116b4565b6106666116e3565b8351610679906097906020870190611c52565b50609980546001600160a01b0319166001600160a01b0385169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b1580156106ce57600080fd5b505afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190611dca565b609a80546001600160a01b03199081166001600160a01b0393841617909155609b8054909116848316179055609954604080516312a9293f60e21b815290519190921691634aa4a4fc916004808301926020929190829003018186803b15801561076f57600080fd5b505afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190611dca565b609880546001600160a01b0319166001600160a01b0392909216919091179055801561080d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000808061082284600a6124dc565b925060005b6001865161083591906125a5565b811015610b8957609a5486516001600160a01b039091169063becbcc6a9088908490811061087357634e487b7160e01b600052603260045260246000fd5b6020026020010151888460016108899190612461565b815181106108a757634e487b7160e01b600052603260045260246000fd5b6020026020010151609c60008b87815181106108d357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b87600161090b9190612461565b8151811061092957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b815260040161097f939291906122d8565b60206040518083038186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf9190611dca565b9250826001600160a01b031663c19d93fb6040518163ffffffff1660e01b81526004016101006040518083038186803b158015610a0b57600080fd5b505afa158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190611fb7565b50508b516001600160a01b0390961697508b9587955085109350610a7b9250505057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b03166316dc165b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac557600080fd5b505afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190611dca565b6001600160a01b03161415610b4257600160601b8083610b1d8188612586565b610b279190612586565b610b319190612479565b610b3b9190612479565b9350610b77565b8180610b5286600160601b612586565b610b6090600160601b612586565b610b6a9190612479565b610b749190612479565b93505b80610b818161261d565b915050610827565b50600085600081518110610bad57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bed57600080fd5b505afa158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2591906121ce565b60ff16905060008660018851610c3b91906125a5565b81518110610c5957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9957600080fd5b505afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd191906121ce565b60ff16905080821115610d0457610ce881836125a5565b610cf390600a6124dc565b610cfd9086612586565b9450610d26565b610d0e82826125a5565b610d1990600a6124dc565b610d239086612479565b94505b5050505092915050565b606081600081518110610d5357634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d7e919060609190911b6001600160601b031916815260140190565b60408051601f19818403018152919052905060015b8251811015610e6757600083610daa6001846125a5565b81518110610dc857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610df457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038085166000908152609c84526040808220928416825291845281902054905191935062ffffff1691610e409187918491869101612291565b60405160208183030381529060405294505050508080610e5f9061261d565b915050610d93565b50919050565b610e75611655565b565b806001600160a01b038116610e9e5760405162461bcd60e51b815260040161062a90612355565b610ea6611655565b609980546001600160a01b0319166001600160a01b0384169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f329190611dca565b609a80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080610f6284610f9e565b610f715750600090508061058a565b609b546000906001600160a01b0316630980929e8561050e88610d30565b6033546001600160a01b031690565b600080600283511015610fb45750600092915050565b60005b60018451610fc591906125a5565b81101561118b57609a5484516001600160a01b039091169063becbcc6a9086908490811061100357634e487b7160e01b600052603260045260246000fd5b6020026020010151868460016110199190612461565b8151811061103757634e487b7160e01b600052603260045260246000fd5b6020026020010151609c600089878151811061106357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008987600161109b9190612461565b815181106110b957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b815260040161110f939291906122d8565b60206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190611dca565b91506001600160a01b038216611179575060009392505050565b806111838161261d565b915050610fb7565b5060019392505050565b600060606111a1611712565b846001600160a01b0381166111c85760405162461bcd60e51b815260040161062a90612355565b60006111d78a8a8a898961176c565b9094509050600084156114ea57604080516002808252606082018352909160208301908036833701905050935061124c3330848c60008151811061122b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166117da909392919063ffffffff16565b8860008151811061126d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160995460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b1580156112c557600080fd5b505af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611eeb565b50600186151514156113f7576099546001600160a01b03166375ceafe6611327848d8d8d8d611834565b6040518263ffffffff1660e01b815260040161134391906123d7565b6040805180830381600087803b15801561135c57600080fd5b505af1158015611370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611394919061212e565b90508091505081846000815181106113bc57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505080846001815181106113ea57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b856114ea576099546001600160a01b031663115ff67e61141a848d8d8d8d6118c2565b6040518263ffffffff1660e01b815260040161143691906123d7565b6040805180830381600087803b15801561144f57600080fd5b505af1158015611463573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611487919061212e565b90508091505080846000815181106114af57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505089846001815181106114dd57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050506114f76001606555565b965096945050505050565b61150a611655565b609960009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115909190611dca565b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6115ba611655565b6001600160a01b03811661161f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062a565b61162881611958565b50565b611633611655565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b3361165e610f8f565b6001600160a01b031614610e755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062a565b600054610100900460ff166116db5760405162461bcd60e51b815260040161062a9061238c565b610e756119aa565b600054610100900460ff1661170a5760405162461bcd60e51b815260040161062a9061238c565b610e756119da565b600260655414156117655760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161062a565b6002606555565b60008042841015611782575060009050806117d0565b60008061178f878a610f56565b91509150808811156117a9576000809350935050506117d0565b600185151514156117bf575091508690506117d0565b6117c987896104d5565b9350935050505b9550959350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261080d908590611a01565b6118786040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160801b0316815260200160008152602001600081525090565b6040518060a0016040528061188c86610d30565b81526001600160a01b0390941660208501526001600160801b039096166040840152506060820193909352608001919091525090565b6119066040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160801b0316815260200160008152602001600081525090565b6040518060a0016040528061191a86610d30565b81526001600160a01b0390941660208501526001600160801b03909516604084015250606082019490945260800192909252919050565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119d15760405162461bcd60e51b815260040161062a9061238c565b610e7533611958565b600054610100900460ff166119515760405162461bcd60e51b815260040161062a9061238c565b6000611a56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ad89092919063ffffffff16565b805190915015611ad35780806020019051810190611a749190611eeb565b611ad35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062a565b505050565b6060611ae78484600085611af1565b90505b9392505050565b606082471015611b525760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062a565b843b611ba05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062a565b600080866001600160a01b03168587604051611bbc9190612275565b60006040518083038185875af1925050503d8060008114611bf9576040519150601f19603f3d011682016040523d82523d6000602084013e611bfe565b606091505b5091509150611c0e828286611c19565b979650505050505050565b60608315611c28575081611aea565b825115611c385782518084602001fd5b8160405162461bcd60e51b815260040161062a9190612342565b828054611c5e906125e8565b90600052602060002090601f016020900481019282611c805760008555611cc6565b82601f10611c9957805160ff1916838001178555611cc6565b82800160010185558215611cc6579182015b82811115611cc6578251825591602001919060010190611cab565b50611cd2929150611cd6565b5090565b5b80821115611cd25760008155600101611cd7565b8035611cf681612664565b919050565b600082601f830112611d0b578081fd5b81356020611d20611d1b8361243e565b61240e565b80838252828201915082860187848660051b8901011115611d3f578586fd5b855b85811015611d66578135611d5481612664565b84529284019290840190600101611d41565b5090979650505050505050565b8051600281900b8114611cf657600080fd5b80516001600160801b0381168114611cf657600080fd5b805161ffff81168114611cf657600080fd5b600060208284031215611dbf578081fd5b8135611aea81612664565b600060208284031215611ddb578081fd5b8151611aea81612664565b60008060408385031215611df8578081fd5b8235611e0381612664565b91506020830135611e1381612664565b809150509250929050565b600080600060608486031215611e32578081fd5b8335611e3d81612664565b92506020840135611e4d81612664565b9150604084013562ffffff81168114611e64578182fd5b809150509250925092565b600060208284031215611e80578081fd5b81356001600160401b03811115611e95578182fd5b611ea184828501611cfb565b949350505050565b60008060408385031215611ebb578182fd5b82356001600160401b03811115611ed0578283fd5b611edc85828601611cfb565b95602094909401359450505050565b600060208284031215611efc578081fd5b8151611aea81612679565b600080600060608486031215611f1b578283fd5b83356001600160401b0380821115611f31578485fd5b818601915086601f830112611f44578485fd5b8135602082821115611f5857611f5861264e565b611f6a601f8301601f1916820161240e565b92508183528881838601011115611f7f578687fd5b818185018285013786818385010152829650611f9c818901611ceb565b955050505050611fae60408501611ceb565b90509250925092565b600080600080600080600080610100898b031215611fd3578586fd5b8851611fde81612664565b9750611fec60208a01611d73565b9650611ffa60408a01611d9c565b955061200860608a01611d9c565b945061201660808a01611d9c565b935060a089015161202681612679565b925061203460c08a01611d85565b915061204260e08a01611d85565b90509295985092959890939650565b600080600060608486031215612065578081fd5b83359250602084013561207781612664565b91506040840135611e6481612664565b60008060408385031215612099578182fd5b8251602080850151919350906001600160401b038111156120b8578283fd5b8401601f810186136120c8578283fd5b80516120d6611d1b8261243e565b80828252848201915084840189868560051b87010111156120f5578687fd5b8694505b8385101561211e5761210a81611d73565b8352600194909401939185019185016120f9565b5080955050505050509250929050565b60008060408385031215612140578182fd5b505080516020909101519092909150565b60008060008060008060c08789031215612169578384fd5b863595506020870135945060408701356001600160401b0381111561218c578485fd5b61219889828a01611cfb565b94505060608701356121a981612664565b92506080870135915060a08701356121c081612679565b809150509295509295509295565b6000602082840312156121df578081fd5b815160ff81168114611aea578182fd5b600081518084526122078160208601602086016125bc565b601f01601f19169290920160200192915050565b6000815160a0845261223060a08501826121ef565b6020848101516001600160a01b0316908601526040808501516001600160801b0316908601526060808501519086015260809384015193909401929092525090919050565b600082516122878184602087016125bc565b9190910192915050565b600084516122a38184602089016125bc565b60e89490941b6001600160e81b0319169190930190815260609190911b6001600160601b031916600382015260170192915050565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b600060408201841515835260206040818501528185518084526060860191508287019350845b81811015611d6657845183529383019391830191600101612326565b602081526000611aea60208301846121ef565b6020808252601e908201527f695a6953776170436f6e6e6563746f723a207a65726f20616464726573730000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000611aea602083018461221b565b6001600160801b0383168152604060208201819052600090611ae7908301846121ef565b604051601f8201601f191681016001600160401b03811182821017156124365761243661264e565b604052919050565b60006001600160401b038211156124575761245761264e565b5060051b60200190565b6000821982111561247457612474612638565b500190565b60008261249457634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156124d45781600019048211156124ba576124ba612638565b808516156124c757918102915b93841c939080029061249e565b509250929050565b6000611aea83836000826124f257506001612580565b816124ff57506000612580565b8160018114612515576002811461251f5761253b565b6001915050612580565b60ff84111561253057612530612638565b50506001821b612580565b5060208310610133831016604e8410600b841016171561255e575081810a612580565b6125688383612499565b806000190482111561257c5761257c612638565b0290505b92915050565b60008160001904831182151516156125a0576125a0612638565b500290565b6000828210156125b7576125b7612638565b500390565b60005b838110156125d75781810151838201526020016125bf565b8381111561080d5750506000910152565b600181811c908216806125fc57607f821691505b60208210811415610e6757634e487b7160e01b600052602260045260246000fd5b600060001982141561263157612631612638565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461162857600080fd5b801515811461162857600080fdfea2646970667358221220f962224c83595637c18ecad6d3687504afd265b8d65a97911817b1ba14f9dc1764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getExactInput(address[],uint256)": {
        "details": "Return (false, 0) if DEX cannot swap the input amount"
      },
      "getExactOutput(address[],uint256)": {
        "details": "Return (false, 0) if DEX cannot give the output amount"
      },
      "getSwapRate(address[],uint256)": {
        "details": "Decimal determines the precision of the swap rate"
      },
      "initialize(string,address,address)": {
        "params": {
          "_exchangeRouter": "Address of the DEX router contract",
          "_name": "Name of the underlying DEX"
        }
      },
      "isPathValid(address[])": {
        "params": {
          "_path": "List of tokens that are used for exchanging"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExchangeRouter(address)": {
        "details": "Set address of liquidity pool factory from the exchange router",
        "params": {
          "_exchangeRouter": "Address of the new exchange router contract"
        }
      },
      "setFeeTier(address,address,uint24)": {
        "details": "We set the fee tier that is used for exchanging tokens"
      },
      "setLiquidityPoolFactory()": {
        "details": "Set address from exchange router"
      },
      "setWrappedNativeToken()": {
        "details": "Get address from exchange router"
      },
      "swap(uint256,uint256,address[],address,uint256,bool)": {
        "details": "Check exchange conditions before exchanging      We assume that the input token is not WETH (it is teleBTC)",
        "params": {
          "_deadline": "Deadline of exchanging tokens",
          "_inputAmount": "Amount of input token",
          "_isFixedToken": "True if the input token amount is fixed",
          "_outputAmount": "Amount of output token",
          "_path": "List of tokens that are used for exchanging",
          "_to": "Receiver address"
        },
        "returns": {
          "_amounts": "Amounts of tokens that are involved in exchanging",
          "_result": "True if the exchange is successful"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExactInput(address[],uint256)": {
        "notice": "Return the output amount for the given input amount"
      },
      "getExactOutput(address[],uint256)": {
        "notice": "Return the needed input amount to get the output amount"
      },
      "getInputAmount(uint256,address,address)": {
        "notice": "Deprecated for v3"
      },
      "getOutputAmount(uint256,address,address)": {
        "notice": "Deprecated for v3"
      },
      "getSwapRate(address[],uint256)": {
        "notice": "Return the swap rate between two tokens"
      },
      "initialize(string,address,address)": {
        "notice": "This contract is used for interacting with UniswapV3 contract"
      },
      "isPathValid(address[])": {
        "notice": "Return true if the exchange path is valid"
      },
      "setExchangeRouter(address)": {
        "notice": "Setter for exchange router"
      },
      "setFeeTier(address,address,uint24)": {
        "notice": "Setter for fee tier"
      },
      "setLiquidityPoolFactory()": {
        "notice": "Setter for liquidity pool factory"
      },
      "setQuoter(address)": {
        "notice": "Setter for quoter"
      },
      "setWrappedNativeToken()": {
        "notice": "Setter for wrapped native token"
      },
      "swap(uint256,uint256,address[],address,uint256,bool)": {
        "notice": "Exchange input token for output token through exchange router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11827,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11830,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13298,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11699,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 11819,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12132,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 12201,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25985,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 25988,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 25991,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "exchangeRouter",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 25994,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "liquidityPoolFactory",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 25996,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "quoterAddress",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 26002,
        "contract": "contracts/dex_connectors/iZiSwapConnector.sol:iZiSwapConnector",
        "label": "feeTier",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint24))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint24))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint24))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint24)"
      },
      "t_mapping(t_address,t_uint24)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}