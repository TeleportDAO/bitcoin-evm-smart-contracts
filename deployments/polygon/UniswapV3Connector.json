{
  "address": "0x875aB6A78A8fb5D4c46a2b72a8C350512Dd68146",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "convertedPath",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "packedData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeTier",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getExactInput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "getExactOutput",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_decimal",
          "type": "uint256"
        }
      ],
      "name": "getSwapRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_swapRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoterAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "isPathValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        }
      ],
      "name": "setExchangeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_firstToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondToken",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_feeTier",
          "type": "uint24"
        }
      ],
      "name": "setFeeTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLiquidityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quoterAddress",
          "type": "address"
        }
      ],
      "name": "setQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isFixedToken",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x294d3604d5d001385c3948f3f2b33e72c99086e8c4ef09a3b2d39e5cac2ae565",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0x875aB6A78A8fb5D4c46a2b72a8C350512Dd68146",
    "transactionIndex": 40,
    "gasUsed": "2249078",
    "logsBloom": "0x
    "blockHash": "0xbc1f3e339287e83b7f09c74d29b1949a29979a682e7baa39b043f4491176befe",
    "transactionHash": "0x294d3604d5d001385c3948f3f2b33e72c99086e8c4ef09a3b2d39e5cac2ae565",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 62796423,
        "transactionHash": "0x294d3604d5d001385c3948f3f2b33e72c99086e8c4ef09a3b2d39e5cac2ae565",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d3e4aeb9347c224dae7f1dc1213be082f6fddec",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f7b3429da41e04000000000000000000000000000000000000000000000000262bc82891f49bd400000000000000000000000000000000000000000000076afe0b7242e1e32069000000000000000000000000000000000000000000000000253414e5f4507dd000000000000000000000000000000000000000000000076aff0325857f873e6d",
        "logIndex": 209,
        "blockHash": "0xbc1f3e339287e83b7f09c74d29b1949a29979a682e7baa39b043f4491176befe"
      }
    ],
    "blockNumber": 62796423,
    "cumulativeGasUsed": "7872629",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "570438f4278e600a77dd4a25841890ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"convertedPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"packedData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTier\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getExactInput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"getExactOutput\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoterAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"isPathValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"}],\"name\":\"setExchangeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_feeTier\",\"type\":\"uint24\"}],\"name\":\"setFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLiquidityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quoterAddress\",\"type\":\"address\"}],\"name\":\"setQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExactInput(address[],uint256)\":{\"details\":\"Return (false, 0) if DEX cannot swap the input amount\"},\"getExactOutput(address[],uint256)\":{\"details\":\"Return (false, 0) if DEX cannot give the output amount\"},\"getSwapRate(address[],uint256)\":{\"details\":\"Decimal determines the precision of the swap rate\"},\"initialize(string,address,address)\":{\"params\":{\"_exchangeRouter\":\"Address of the DEX router contract\",\"_name\":\"Name of the underlying DEX\"}},\"isPathValid(address[])\":{\"params\":{\"_path\":\"List of tokens that are used for exchanging\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setExchangeRouter(address)\":{\"details\":\"Set address of liquidity pool factory from the exchange router\",\"params\":{\"_exchangeRouter\":\"Address of the new exchange router contract\"}},\"setFeeTier(address,address,uint24)\":{\"details\":\"We set the fee tier that is used for exchanging tokens\"},\"setLiquidityPoolFactory()\":{\"details\":\"Set address from exchange router\"},\"setWrappedNativeToken()\":{\"details\":\"Get address from exchange router\"},\"swap(uint256,uint256,address[],address,uint256,bool)\":{\"details\":\"Check exchange conditions before exchanging      We assume that the input token is not WETH (it is teleBTC)\",\"params\":{\"_deadline\":\"Deadline of exchanging tokens\",\"_inputAmount\":\"Amount of input token\",\"_isFixedToken\":\"True if the input token amount is fixed\",\"_outputAmount\":\"Amount of output token\",\"_path\":\"List of tokens that are used for exchanging\",\"_to\":\"Receiver address\"},\"returns\":{\"_amounts\":\"Amounts of tokens that are involved in exchanging\",\"_result\":\"True if the exchange is successful\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExactInput(address[],uint256)\":{\"notice\":\"Return the output amount for the given input amount\"},\"getExactOutput(address[],uint256)\":{\"notice\":\"Return the needed input amount to get the output amount\"},\"getInputAmount(uint256,address,address)\":{\"notice\":\"Deprecated for v3\"},\"getOutputAmount(uint256,address,address)\":{\"notice\":\"Deprecated for v3\"},\"getSwapRate(address[],uint256)\":{\"notice\":\"Return the swap rate between two tokens\"},\"initialize(string,address,address)\":{\"notice\":\"This contract is used for interacting with UniswapV3 contract\"},\"isPathValid(address[])\":{\"notice\":\"Return true if the exchange path is valid\"},\"setExchangeRouter(address)\":{\"notice\":\"Setter for exchange router\"},\"setFeeTier(address,address,uint24)\":{\"notice\":\"Setter for fee tier\"},\"setLiquidityPoolFactory()\":{\"notice\":\"Setter for liquidity pool factory\"},\"setQuoter(address)\":{\"notice\":\"Setter for quoter\"},\"setWrappedNativeToken()\":{\"notice\":\"Setter for wrapped native token\"},\"swap(uint256,uint256,address[],address,uint256,bool)\":{\"notice\":\"Exchange input token for output token through exchange router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dex_connectors/UniswapV3Connector.sol\":\"UniswapV3Connector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dex_connectors/DexConnectorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IDexConnector.sol\\\";\\n\\nabstract contract DexConnectorStorage is IDexConnector {\\n    string public override name;\\n    address public override wrappedNativeToken;\\n    address public override exchangeRouter;\\n    address public override liquidityPoolFactory;\\n    address public quoterAddress;\\n    mapping(address => mapping(address => uint24)) public feeTier;\\n}\\n\",\"keccak256\":\"0xe3ab676eff55a17fe5ba365f0121c3a0c831b88964e5ef558d1b0572fca15f82\",\"license\":\"MIT\"},\"contracts/dex_connectors/UniswapV3Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./DexConnectorStorage.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract UniswapV3Connector is\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DexConnectorStorage\\n{\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"UniswapV3Connector: zero address\\\");\\n        _;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice This contract is used for interacting with UniswapV3 contract\\n    /// @param _name Name of the underlying DEX\\n    /// @param _exchangeRouter Address of the DEX router contract\\n    function initialize(\\n        string memory _name,\\n        address _exchangeRouter,\\n        address _quoterAddress\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        name = _name;\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IPeripheryImmutableState(exchangeRouter)\\n            .factory();\\n        quoterAddress = _quoterAddress;\\n        wrappedNativeToken = IPeripheryImmutableState(exchangeRouter).WETH9();\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Setter for wrapped native token\\n    /// @dev Get address from exchange router\\n    function setWrappedNativeToken() external override onlyOwner {\\n        wrappedNativeToken = IPeripheryImmutableState(exchangeRouter).WETH9();\\n    }\\n\\n    /// @notice Setter for exchange router\\n    /// @dev Set address of liquidity pool factory from the exchange router\\n    /// @param _exchangeRouter Address of the new exchange router contract\\n    function setExchangeRouter(\\n        address _exchangeRouter\\n    ) external override nonZeroAddress(_exchangeRouter) onlyOwner {\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IPeripheryImmutableState(exchangeRouter)\\n            .factory();\\n    }\\n\\n    /// @notice Setter for liquidity pool factory\\n    /// @dev Set address from exchange router\\n    function setLiquidityPoolFactory() external override onlyOwner {\\n        liquidityPoolFactory = IPeripheryImmutableState(exchangeRouter)\\n            .factory();\\n    }\\n\\n    /// @notice Setter for quoter\\n    function setQuoter(address _quoterAddress) external onlyOwner {\\n        quoterAddress = _quoterAddress;\\n    }\\n\\n    /// @notice Setter for fee tier\\n    /// @dev We set the fee tier that is used for exchanging tokens\\n    function setFeeTier(\\n        address _firstToken,\\n        address _secondToken,\\n        uint24 _feeTier\\n    ) external onlyOwner {\\n        feeTier[_firstToken][_secondToken] = _feeTier;\\n        feeTier[_secondToken][_firstToken] = _feeTier;\\n    }\\n\\n    function convertedPath(\\n        address[] memory _path\\n    ) public view returns (bytes memory packedData) {\\n        packedData = abi.encodePacked(_path[0]);\\n\\n        for (uint i = 1; i < _path.length; i++) {\\n            address firstToken = _path[i - 1];\\n            address secondToken = _path[i];\\n            uint24 _feeTier = feeTier[firstToken][secondToken];\\n            packedData = abi.encodePacked(packedData, _feeTier, secondToken);\\n        }\\n    }\\n\\n    /// @notice Return the needed input amount to get the output amount\\n    /// @dev Return (false, 0) if DEX cannot give the output amount\\n    function getExactOutput(\\n        address[] memory _path,\\n        uint256 _amountOut\\n    ) public returns (bool, uint256) {\\n        if (!isPathValid(_path)) {\\n            return (false, 0);\\n        }\\n        (uint amountIn, , , ) = IQuoterV2(quoterAddress).quoteExactOutput(\\n            convertedPath(_path),\\n            _amountOut\\n        );\\n        return (true, amountIn);\\n    }\\n\\n    /// @notice Return the output amount for the given input amount\\n    /// @dev Return (false, 0) if DEX cannot swap the input amount\\n    function getExactInput(\\n        address[] memory _path,\\n        uint256 _amountIn\\n    ) public returns (bool, uint256) {\\n        if (!isPathValid(_path)) {\\n            return (false, 0);\\n        }\\n        (uint amountOut, , , ) = IQuoterV2(quoterAddress).quoteExactInput(\\n            convertedPath(_path),\\n            _amountIn\\n        );\\n        return (true, amountOut);\\n    }\\n\\n    /// @notice Deprecated for v3\\n    function getInputAmount(\\n        uint,\\n        address,\\n        address\\n    ) external pure override returns (bool, uint) {\\n        return (true, 0);\\n    }\\n\\n    /// @notice Deprecated for v3\\n    function getOutputAmount(\\n        uint,\\n        address,\\n        address\\n    ) external pure override returns (bool, uint) {\\n        return (true, 0);\\n    }\\n\\n    /// @notice Return the swap rate between two tokens\\n    /// @dev Decimal determines the precision of the swap rate\\n    function getSwapRate(\\n        address[] memory _path,\\n        uint256 _decimal\\n    ) external view returns (uint _swapRate) {\\n        address liquidityPool;\\n        uint sqrtPriceX96;\\n        _swapRate = 10 ** _decimal;\\n\\n        for (uint i = 0; i < _path.length - 1; i++) {\\n            liquidityPool = IUniswapV3Factory(liquidityPoolFactory).getPool(\\n                _path[i],\\n                _path[i + 1],\\n                feeTier[_path[i]][_path[i + 1]]\\n            );\\n            (sqrtPriceX96, , , , , , ) = IUniswapV3PoolState(liquidityPool)\\n                .slot0();\\n\\n            if (IUniswapV3PoolImmutables(liquidityPool).token0() == _path[i]) {\\n                _swapRate =\\n                    (_swapRate * sqrtPriceX96 * sqrtPriceX96) /\\n                    2 ** 96 /\\n                    2 ** 96;\\n            } else {\\n                _swapRate =\\n                    (_swapRate * 2 ** 96 * 2 ** 96) /\\n                    sqrtPriceX96 /\\n                    sqrtPriceX96;\\n            }\\n        }\\n\\n        uint firstDecimal = IERC20Metadata(_path[0]).decimals();\\n        uint LastDecimal = IERC20Metadata(_path[_path.length - 1]).decimals();\\n\\n        if (firstDecimal > LastDecimal) {\\n            _swapRate = _swapRate * 10 ** (firstDecimal - LastDecimal);\\n        } else {\\n            _swapRate = _swapRate / 10 ** (LastDecimal - firstDecimal);\\n        }\\n    }\\n\\n    /// @notice Exchange input token for output token through exchange router\\n    /// @dev Check exchange conditions before exchanging\\n    ///      We assume that the input token is not WETH (it is teleBTC)\\n    /// @param _inputAmount Amount of input token\\n    /// @param _outputAmount Amount of output token\\n    /// @param _path List of tokens that are used for exchanging\\n    /// @param _to Receiver address\\n    /// @param _deadline Deadline of exchanging tokens\\n    /// @param _isFixedToken True if the input token amount is fixed\\n    /// @return _result True if the exchange is successful\\n    /// @return _amounts Amounts of tokens that are involved in exchanging\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    )\\n        external\\n        override\\n        nonReentrant\\n        nonZeroAddress(_to)\\n        returns (bool _result, uint[] memory _amounts)\\n    {\\n        uint neededInputAmount;\\n        (_result, neededInputAmount) = _checkExchangeConditions(\\n            _inputAmount,\\n            _outputAmount,\\n            _path,\\n            _deadline,\\n            _isFixedToken\\n        );\\n\\n        uint _amount;\\n        if (_result) {\\n            _amounts = new uint[](2);\\n            // Get tokens from user\\n            IERC20(_path[0]).safeTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                neededInputAmount\\n            );\\n\\n            // Give allowance to exchange router\\n            IERC20(_path[0]).approve(exchangeRouter, neededInputAmount);\\n\\n            if (_isFixedToken == true) {\\n                _amount = ISwapRouter(exchangeRouter).exactInput(\\n                    _buildInputSwap(\\n                        neededInputAmount,\\n                        _outputAmount,\\n                        _path,\\n                        _to,\\n                        _deadline\\n                    )\\n                );\\n                _amounts[0] = neededInputAmount;\\n                _amounts[1] = _amount;\\n            }\\n\\n            if (_isFixedToken == false) {\\n                _amount = ISwapRouter(exchangeRouter).exactOutput(\\n                    _buildOutputSwap(\\n                        neededInputAmount,\\n                        _outputAmount,\\n                        _path,\\n                        _to,\\n                        _deadline\\n                    )\\n                );\\n                _amounts[0] = _amount;\\n                _amounts[1] = _outputAmount;\\n            }\\n            emit Swap(_path, _amounts, _to);\\n        }\\n    }\\n\\n    /// @notice Return true if the exchange path is valid\\n    /// @param _path List of tokens that are used for exchanging\\n    function isPathValid(\\n        address[] memory _path\\n    ) public view override returns (bool _result) {\\n        address liquidityPool;\\n\\n        // Checks that path length is greater than one\\n        if (_path.length < 2) {\\n            return false;\\n        }\\n\\n        for (uint i = 0; i < _path.length - 1; i++) {\\n            liquidityPool = IUniswapV3Factory(liquidityPoolFactory).getPool(\\n                _path[i],\\n                _path[i + 1],\\n                feeTier[_path[i]][_path[i + 1]]\\n            );\\n            if (liquidityPool == address(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    // Private functions\\n\\n    function _buildInputSwap(\\n        uint _amountIn,\\n        uint _amountOutMin,\\n        address[] memory _path,\\n        address _recipient,\\n        uint _deadline\\n    ) private view returns (ISwapRouter.ExactInputParams memory) {\\n        return\\n            ISwapRouter.ExactInputParams({\\n                path: convertedPath(_path),\\n                recipient: _recipient,\\n                deadline: _deadline,\\n                amountIn: _amountIn,\\n                amountOutMinimum: _amountOutMin\\n            });\\n    }\\n\\n    function _buildOutputSwap(\\n        uint _amountInMaximum,\\n        uint _amountOut,\\n        address[] memory _path,\\n        address _recipient,\\n        uint _deadline\\n    ) private view returns (ISwapRouter.ExactOutputParams memory) {\\n        return\\n            ISwapRouter.ExactOutputParams({\\n                path: convertedPath(_path),\\n                recipient: _recipient,\\n                deadline: _deadline,\\n                amountOut: _amountOut,\\n                amountInMaximum: _amountInMaximum\\n            });\\n    }\\n\\n    /// @notice Check if exchanging is possible or not\\n    /// @dev Avoid reverting by exchange router\\n    /// @return True if exchange conditions are satisfied\\n    /// @return Needed amount of input token\\n    function _checkExchangeConditions(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) private returns (bool, uint) {\\n        // Check deadline has not passed\\n        if (_deadline < block.timestamp) {\\n            return (false, 0);\\n        }\\n\\n        // Find maximum output amount\\n        (bool success, uint outputResult) = getExactInput(_path, _inputAmount);\\n\\n        // Check that exchanging is possible or not\\n        if (_outputAmount > outputResult) {\\n            return (false, 0);\\n        } else {\\n            if (_isFixedToken == true) {\\n                return (success, _inputAmount);\\n            } else {\\n                return getExactOutput(_path, _outputAmount);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x275e5a7fd9c74a89d7135eb99770611e08dfe2df3cb87d07d523ab7ccbe92ab1\",\"license\":\"MIT\"},\"contracts/dex_connectors/interfaces/IDexConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IDexConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x4063ca823f0ca14d76c64730d0364a0939c7b2ac5286705d9d2c5be23fb7097d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127b6806100206000396000f3fe608060405234801561001057600080fd5b506004361061011d5760003560e01c806301e65db31461012257806304fe3fcb1461016b57806306fdde031461018057806311a2f0cb146101955780631580b5e5146101c057806317fcb39b146101c85780631cb85818146101db5780633566967d146101ee578063463fd1af1461021857806360efb0a51461022b5780636145f8761461024c578063715018a61461025f578063838b7ccb14610267578063898830741461027a5780638b1937cd146102945780638da5cb5b146102a75780639b4bca24146102af578063b0bbcd88146102d2578063b23e4fc6146102f3578063df71d7f31461027a578063e75d75d5146102fb578063f2fde38b1461030e578063f912c64b14610321575b600080fd5b610152610130366004611e50565b609c60209081526000928352604080842090915290825290205462ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61017e610179366004611e88565b610334565b005b610188610397565b604051610162919061243f565b609b546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610162565b61017e610425565b6098546101a8906001600160a01b031681565b6099546101a8906001600160a01b031681565b6102016101fc366004611f13565b6104d5565b604080519215158352602083019190915201610162565b61017e610226366004611f71565b610594565b61023e610239366004611f13565b610816565b604051908152602001610162565b61018861025a366004611ed9565b610d31565b61017e610e6e565b61017e610275366004611e18565b610e78565b6102016102883660046120cd565b60016000935093915050565b6102016102a2366004611f13565b610f57565b6101a8610f8f565b6102c26102bd366004611ed9565b610f9e565b6040519015158152602001610162565b6102e56102e03660046121db565b611195565b604051610162929190612424565b61017e611538565b609a546101a8906001600160a01b031681565b61017e61031c366004611e18565b6115e8565b61017e61032f366004611e18565b611661565b61033c61168b565b6001600160a01b039283166000818152609c60208181526040808420969097168352948552858220805462ffffff90951662ffffff199586168117909155908552858220928252919093529290912080549091169091179055565b609780546103a4906126e1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d0906126e1565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b61042d61168b565b609960009054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611e34565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6000806104e184610f9e565b6104f05750600090508061058d565b609b546000906001600160a01b0316632f80bb1d61050d87610d31565b866040518363ffffffff1660e01b815260040161052b929190612452565b600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105819190810190612103565b50600195509193505050505b9250929050565b600054610100900460ff16158080156105b45750600054600160ff909116105b806105ce5750303b1580156105ce575060005460ff166001145b6106365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610659576000805461ff0019166101001790555b6106616116ea565b610669611719565b835161067c906097906020870190611c66565b50609980546001600160a01b0319166001600160a01b0385169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190611e34565b609a80546001600160a01b03199081166001600160a01b0393841617909155609b8054909116848316179055609954604080516312a9293f60e21b815290519190921691634aa4a4fc916004808301926020929190829003018186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611e34565b609880546001600160a01b0319166001600160a01b03929092169190911790558015610810576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000808061082584600a6125d5565b925060005b60018651610838919061269e565b811015610b8a57609a5486516001600160a01b0390911690631698ee829088908490811061087657634e487b7160e01b600052603260045260246000fd5b60200260200101518884600161088c919061255a565b815181106108aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151609c60008b87815181106108d657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b87600161090e919061255a565b8151811061092c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b81526004016109829392919061238c565b60206040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611e34565b9250826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612021565b50508a516001600160a01b0390951696508a9486945084109250610a7c91505057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac657600080fd5b505afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe9190611e34565b6001600160a01b03161415610b4357600160601b8083610b1e818861267f565b610b28919061267f565b610b329190612572565b610b3c9190612572565b9350610b78565b8180610b5386600160601b61267f565b610b6190600160601b61267f565b610b6b9190612572565b610b759190612572565b93505b80610b8281612716565b91505061082a565b50600085600081518110610bae57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190612258565b60ff16905060008660018851610c3c919061269e565b81518110610c5a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9a57600080fd5b505afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190612258565b60ff16905080821115610d0557610ce9818361269e565b610cf490600a6125d5565b610cfe908661267f565b9450610d27565b610d0f828261269e565b610d1a90600a6125d5565b610d249086612572565b94505b5050505092915050565b606081600081518110610d5457634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d7f919060609190911b6001600160601b031916815260140190565b60408051601f19818403018152919052905060015b8251811015610e6857600083610dab60018461269e565b81518110610dc957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610df557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038085166000908152609c84526040808220928416825291845281902054905191935062ffffff1691610e419187918491869101612345565b60405160208183030381529060405294505050508080610e6090612716565b915050610d94565b50919050565b610e7661168b565b565b806001600160a01b038116610e9f5760405162461bcd60e51b815260040161062d90612474565b610ea761168b565b609980546001600160a01b0319166001600160a01b0384169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190611e34565b609a80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080610f6384610f9e565b610f725750600090508061058d565b609b546000906001600160a01b031663cdca175361050d87610d31565b6033546001600160a01b031690565b600080600283511015610fb45750600092915050565b60005b60018451610fc5919061269e565b81101561118b57609a5484516001600160a01b0390911690631698ee829086908490811061100357634e487b7160e01b600052603260045260246000fd5b602002602001015186846001611019919061255a565b8151811061103757634e487b7160e01b600052603260045260246000fd5b6020026020010151609c600089878151811061106357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008987600161109b919061255a565b815181106110b957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b815260040161110f9392919061238c565b60206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190611e34565b91506001600160a01b038216611179575060009392505050565b8061118381612716565b915050610fb7565b5060019392505050565b600060606111a1611748565b846001600160a01b0381166111c85760405162461bcd60e51b815260040161062d90612474565b60006111d78a8a8a89896117a2565b90945090506000841561152057604080516002808252606082018352909160208301908036833701905050935061124c3330848c60008151811061122b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316611810909392919063ffffffff16565b8860008151811061126d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160995460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b1580156112c557600080fd5b505af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611f55565b50600186151514156113f4576099546001600160a01b031663c04b8d59611327848d8d8d8d61186a565b6040518263ffffffff1660e01b815260040161134391906124f4565b602060405180830381600087803b15801561135d57600080fd5b505af1158015611371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139591906120b5565b905081846000815181106113b957634e487b7160e01b600052603260045260246000fd5b60200260200101818152505080846001815181106113e757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b856114e4576099546001600160a01b031663f28c0498611417848d8d8d8d6118e7565b6040518263ffffffff1660e01b815260040161143391906124f4565b602060405180830381600087803b15801561144d57600080fd5b505af1158015611461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148591906120b5565b905080846000815181106114a957634e487b7160e01b600052603260045260246000fd5b60200260200101818152505089846001815181106114d757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b7fe1010d0ab476908054981d12fbb96915efcceb8d57a09ae8ca62f4bda731837389858a604051611517939291906123b4565b60405180910390a15b50505061152d6001606555565b965096945050505050565b61154061168b565b609960009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561158e57600080fd5b505afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c69190611e34565b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6115f061168b565b6001600160a01b0381166116555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062d565b61165e8161196c565b50565b61166961168b565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b33611694610f8f565b6001600160a01b031614610e765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062d565b600054610100900460ff166117115760405162461bcd60e51b815260040161062d906124a9565b610e766119be565b600054610100900460ff166117405760405162461bcd60e51b815260040161062d906124a9565b610e766119ee565b6002606554141561179b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161062d565b6002606555565b600080428410156117b857506000905080611806565b6000806117c5878a610f57565b91509150808811156117df57600080935093505050611806565b600185151514156117f557509150869050611806565b6117ff87896104d5565b9350935050505b9550959350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610810908590611a15565b6118a56040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060a001604052806118b986610d31565b81526001600160a01b0390941660208501526040840192909252506060820194909452608001919091525090565b6119226040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060a0016040528061193686610d31565b8152602001846001600160a01b0316815260200183815260200186815260200187815250905095945050505050565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119e55760405162461bcd60e51b815260040161062d906124a9565b610e763361196c565b600054610100900460ff166119655760405162461bcd60e51b815260040161062d906124a9565b6000611a6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611aec9092919063ffffffff16565b805190915015611ae75780806020019051810190611a889190611f55565b611ae75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062d565b505050565b6060611afb8484600085611b05565b90505b9392505050565b606082471015611b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062d565b843b611bb45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062d565b600080866001600160a01b03168587604051611bd09190612329565b60006040518083038185875af1925050503d8060008114611c0d576040519150601f19603f3d011682016040523d82523d6000602084013e611c12565b606091505b5091509150611c22828286611c2d565b979650505050505050565b60608315611c3c575081611afe565b825115611c4c5782518084602001fd5b8160405162461bcd60e51b815260040161062d919061243f565b828054611c72906126e1565b90600052602060002090601f016020900481019282611c945760008555611cda565b82601f10611cad57805160ff1916838001178555611cda565b82800160010185558215611cda579182015b82811115611cda578251825591602001919060010190611cbf565b50611ce6929150611cea565b5090565b5b80821115611ce65760008155600101611ceb565b8035611d0a8161275d565b919050565b600082601f830112611d1f578081fd5b81356020611d34611d2f83612537565b612507565b80838252828201915082860187848660051b8901011115611d53578586fd5b855b85811015611d7a578135611d688161275d565b84529284019290840190600101611d55565b5090979650505050505050565b600082601f830112611d97578081fd5b81516020611da7611d2f83612537565b80838252828201915082860187848660051b8901011115611dc6578586fd5b855b85811015611d7a57815163ffffffff81168114611de3578788fd5b84529284019290840190600101611dc8565b805161ffff81168114611d0a57600080fd5b805160ff81168114611d0a57600080fd5b600060208284031215611e29578081fd5b8135611afe8161275d565b600060208284031215611e45578081fd5b8151611afe8161275d565b60008060408385031215611e62578081fd5b8235611e6d8161275d565b91506020830135611e7d8161275d565b809150509250929050565b600080600060608486031215611e9c578081fd5b8335611ea78161275d565b92506020840135611eb78161275d565b9150604084013562ffffff81168114611ece578182fd5b809150509250925092565b600060208284031215611eea578081fd5b81356001600160401b03811115611eff578182fd5b611f0b84828501611d0f565b949350505050565b60008060408385031215611f25578182fd5b82356001600160401b03811115611f3a578283fd5b611f4685828601611d0f565b95602094909401359450505050565b600060208284031215611f66578081fd5b8151611afe81612772565b600080600060608486031215611f85578081fd5b83356001600160401b0380821115611f9b578283fd5b818601915086601f830112611fae578283fd5b8135602082821115611fc257611fc2612747565b611fd4601f8301601f19168201612507565b92508183528881838601011115611fe9578485fd5b818185018285013784818385010152829650612006818901611cff565b95505050505061201860408501611cff565b90509250925092565b600080600080600080600060e0888a03121561203b578485fd5b87516120468161275d565b8097505060208801518060020b811461205d578586fd5b955061206b60408901611df5565b945061207960608901611df5565b935061208760808901611df5565b925061209560a08901611e07565b915060c08801516120a581612772565b8091505092959891949750929550565b6000602082840312156120c6578081fd5b5051919050565b6000806000606084860312156120e1578081fd5b8335925060208401356120f38161275d565b91506040840135611ece8161275d565b60008060008060808587031215612118578182fd5b8451602080870151919550906001600160401b0380821115612138578485fd5b818801915088601f83011261214b578485fd5b8151612159611d2f82612537565b8082825285820191508585018c878560051b8801011115612178578889fd5b8895505b838610156121a357805161218f8161275d565b83526001959095019491860191860161217c565b5060408b015190985094505050808311156121bc578485fd5b50506121ca87828801611d87565b606096909601519497939650505050565b60008060008060008060c087890312156121f3578384fd5b863595506020870135945060408701356001600160401b03811115612216578485fd5b61222289828a01611d0f565b94505060608701356122338161275d565b92506080870135915060a087013561224a81612772565b809150509295509295509295565b600060208284031215612269578081fd5b611afe82611e07565b6000815180845260208085019450808401835b838110156122a157815187529582019590820190600101612285565b509495945050505050565b600081518084526122c48160208601602086016126b5565b601f01601f19169290920160200192915050565b6000815160a084526122ed60a08501826122ac565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b6000825161233b8184602087016126b5565b9190910192915050565b600084516123578184602089016126b5565b60e89490941b6001600160e81b0319169190930190815260609190911b6001600160601b031916600382015260170192915050565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b606080825284519082018190526000906020906080840190828801845b828110156123f65781516001600160a01b0316845292840192908401906001016123d1565b5050508381038285015261240a8187612272565b9250505060018060a01b0383166040830152949350505050565b8215158152604060208201526000611afb6040830184612272565b602081526000611afe60208301846122ac565b60408152600061246560408301856122ac565b90508260208301529392505050565b6020808252818101527f556e69737761705633436f6e6e6563746f723a207a65726f2061646472657373604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000611afe60208301846122d8565b604051601f8201601f191681016001600160401b038111828210171561252f5761252f612747565b604052919050565b60006001600160401b0382111561255057612550612747565b5060051b60200190565b6000821982111561256d5761256d612731565b500190565b60008261258d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156125cd5781600019048211156125b3576125b3612731565b808516156125c057918102915b93841c9390800290612597565b509250929050565b6000611afe83836000826125eb57506001612679565b816125f857506000612679565b816001811461260e576002811461261857612634565b6001915050612679565b60ff84111561262957612629612731565b50506001821b612679565b5060208310610133831016604e8410600b8410161715612657575081810a612679565b6126618383612592565b806000190482111561267557612675612731565b0290505b92915050565b600081600019048311821515161561269957612699612731565b500290565b6000828210156126b0576126b0612731565b500390565b60005b838110156126d05781810151838201526020016126b8565b838111156108105750506000910152565b600181811c908216806126f557607f821691505b60208210811415610e6857634e487b7160e01b600052602260045260246000fd5b600060001982141561272a5761272a612731565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461165e57600080fd5b801515811461165e57600080fdfea264697066735822122037200cc7745ebe75415decb390a738e3fee221769247d135831ad295897eaaac64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011d5760003560e01c806301e65db31461012257806304fe3fcb1461016b57806306fdde031461018057806311a2f0cb146101955780631580b5e5146101c057806317fcb39b146101c85780631cb85818146101db5780633566967d146101ee578063463fd1af1461021857806360efb0a51461022b5780636145f8761461024c578063715018a61461025f578063838b7ccb14610267578063898830741461027a5780638b1937cd146102945780638da5cb5b146102a75780639b4bca24146102af578063b0bbcd88146102d2578063b23e4fc6146102f3578063df71d7f31461027a578063e75d75d5146102fb578063f2fde38b1461030e578063f912c64b14610321575b600080fd5b610152610130366004611e50565b609c60209081526000928352604080842090915290825290205462ffffff1681565b60405162ffffff90911681526020015b60405180910390f35b61017e610179366004611e88565b610334565b005b610188610397565b604051610162919061243f565b609b546101a8906001600160a01b031681565b6040516001600160a01b039091168152602001610162565b61017e610425565b6098546101a8906001600160a01b031681565b6099546101a8906001600160a01b031681565b6102016101fc366004611f13565b6104d5565b604080519215158352602083019190915201610162565b61017e610226366004611f71565b610594565b61023e610239366004611f13565b610816565b604051908152602001610162565b61018861025a366004611ed9565b610d31565b61017e610e6e565b61017e610275366004611e18565b610e78565b6102016102883660046120cd565b60016000935093915050565b6102016102a2366004611f13565b610f57565b6101a8610f8f565b6102c26102bd366004611ed9565b610f9e565b6040519015158152602001610162565b6102e56102e03660046121db565b611195565b604051610162929190612424565b61017e611538565b609a546101a8906001600160a01b031681565b61017e61031c366004611e18565b6115e8565b61017e61032f366004611e18565b611661565b61033c61168b565b6001600160a01b039283166000818152609c60208181526040808420969097168352948552858220805462ffffff90951662ffffff199586168117909155908552858220928252919093529290912080549091169091179055565b609780546103a4906126e1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d0906126e1565b801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b61042d61168b565b609960009054906101000a90046001600160a01b03166001600160a01b0316634aa4a4fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611e34565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6000806104e184610f9e565b6104f05750600090508061058d565b609b546000906001600160a01b0316632f80bb1d61050d87610d31565b866040518363ffffffff1660e01b815260040161052b929190612452565b600060405180830381600087803b15801561054557600080fd5b505af1158015610559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105819190810190612103565b50600195509193505050505b9250929050565b600054610100900460ff16158080156105b45750600054600160ff909116105b806105ce5750303b1580156105ce575060005460ff166001145b6106365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610659576000805461ff0019166101001790555b6106616116ea565b610669611719565b835161067c906097906020870190611c66565b50609980546001600160a01b0319166001600160a01b0385169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190611e34565b609a80546001600160a01b03199081166001600160a01b0393841617909155609b8054909116848316179055609954604080516312a9293f60e21b815290519190921691634aa4a4fc916004808301926020929190829003018186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611e34565b609880546001600160a01b0319166001600160a01b03929092169190911790558015610810576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000808061082584600a6125d5565b925060005b60018651610838919061269e565b811015610b8a57609a5486516001600160a01b0390911690631698ee829088908490811061087657634e487b7160e01b600052603260045260246000fd5b60200260200101518884600161088c919061255a565b815181106108aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151609c60008b87815181106108d657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b87600161090e919061255a565b8151811061092c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b81526004016109829392919061238c565b60206040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611e34565b9250826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190612021565b50508a516001600160a01b0390951696508a9486945084109250610a7c91505057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac657600080fd5b505afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe9190611e34565b6001600160a01b03161415610b4357600160601b8083610b1e818861267f565b610b28919061267f565b610b329190612572565b610b3c9190612572565b9350610b78565b8180610b5386600160601b61267f565b610b6190600160601b61267f565b610b6b9190612572565b610b759190612572565b93505b80610b8281612716565b91505061082a565b50600085600081518110610bae57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190612258565b60ff16905060008660018851610c3c919061269e565b81518110610c5a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9a57600080fd5b505afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190612258565b60ff16905080821115610d0557610ce9818361269e565b610cf490600a6125d5565b610cfe908661267f565b9450610d27565b610d0f828261269e565b610d1a90600a6125d5565b610d249086612572565b94505b5050505092915050565b606081600081518110610d5457634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610d7f919060609190911b6001600160601b031916815260140190565b60408051601f19818403018152919052905060015b8251811015610e6857600083610dab60018461269e565b81518110610dc957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110610df557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038085166000908152609c84526040808220928416825291845281902054905191935062ffffff1691610e419187918491869101612345565b60405160208183030381529060405294505050508080610e6090612716565b915050610d94565b50919050565b610e7661168b565b565b806001600160a01b038116610e9f5760405162461bcd60e51b815260040161062d90612474565b610ea761168b565b609980546001600160a01b0319166001600160a01b0384169081179091556040805163c45a015560e01b8152905163c45a015591600480820192602092909190829003018186803b158015610efb57600080fd5b505afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190611e34565b609a80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080610f6384610f9e565b610f725750600090508061058d565b609b546000906001600160a01b031663cdca175361050d87610d31565b6033546001600160a01b031690565b600080600283511015610fb45750600092915050565b60005b60018451610fc5919061269e565b81101561118b57609a5484516001600160a01b0390911690631698ee829086908490811061100357634e487b7160e01b600052603260045260246000fd5b602002602001015186846001611019919061255a565b8151811061103757634e487b7160e01b600052603260045260246000fd5b6020026020010151609c600089878151811061106357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008987600161109b919061255a565b815181106110b957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900462ffffff166040518463ffffffff1660e01b815260040161110f9392919061238c565b60206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190611e34565b91506001600160a01b038216611179575060009392505050565b8061118381612716565b915050610fb7565b5060019392505050565b600060606111a1611748565b846001600160a01b0381166111c85760405162461bcd60e51b815260040161062d90612474565b60006111d78a8a8a89896117a2565b90945090506000841561152057604080516002808252606082018352909160208301908036833701905050935061124c3330848c60008151811061122b57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316611810909392919063ffffffff16565b8860008151811061126d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015160995460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b1580156112c557600080fd5b505af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611f55565b50600186151514156113f4576099546001600160a01b031663c04b8d59611327848d8d8d8d61186a565b6040518263ffffffff1660e01b815260040161134391906124f4565b602060405180830381600087803b15801561135d57600080fd5b505af1158015611371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139591906120b5565b905081846000815181106113b957634e487b7160e01b600052603260045260246000fd5b60200260200101818152505080846001815181106113e757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b856114e4576099546001600160a01b031663f28c0498611417848d8d8d8d6118e7565b6040518263ffffffff1660e01b815260040161143391906124f4565b602060405180830381600087803b15801561144d57600080fd5b505af1158015611461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148591906120b5565b905080846000815181106114a957634e487b7160e01b600052603260045260246000fd5b60200260200101818152505089846001815181106114d757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b7fe1010d0ab476908054981d12fbb96915efcceb8d57a09ae8ca62f4bda731837389858a604051611517939291906123b4565b60405180910390a15b50505061152d6001606555565b965096945050505050565b61154061168b565b609960009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561158e57600080fd5b505afa1580156115a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c69190611e34565b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6115f061168b565b6001600160a01b0381166116555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062d565b61165e8161196c565b50565b61166961168b565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b33611694610f8f565b6001600160a01b031614610e765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062d565b600054610100900460ff166117115760405162461bcd60e51b815260040161062d906124a9565b610e766119be565b600054610100900460ff166117405760405162461bcd60e51b815260040161062d906124a9565b610e766119ee565b6002606554141561179b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161062d565b6002606555565b600080428410156117b857506000905080611806565b6000806117c5878a610f57565b91509150808811156117df57600080935093505050611806565b600185151514156117f557509150869050611806565b6117ff87896104d5565b9350935050505b9550959350505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610810908590611a15565b6118a56040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060a001604052806118b986610d31565b81526001600160a01b0390941660208501526040840192909252506060820194909452608001919091525090565b6119226040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b6040518060a0016040528061193686610d31565b8152602001846001600160a01b0316815260200183815260200186815260200187815250905095945050505050565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119e55760405162461bcd60e51b815260040161062d906124a9565b610e763361196c565b600054610100900460ff166119655760405162461bcd60e51b815260040161062d906124a9565b6000611a6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611aec9092919063ffffffff16565b805190915015611ae75780806020019051810190611a889190611f55565b611ae75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062d565b505050565b6060611afb8484600085611b05565b90505b9392505050565b606082471015611b665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062d565b843b611bb45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062d565b600080866001600160a01b03168587604051611bd09190612329565b60006040518083038185875af1925050503d8060008114611c0d576040519150601f19603f3d011682016040523d82523d6000602084013e611c12565b606091505b5091509150611c22828286611c2d565b979650505050505050565b60608315611c3c575081611afe565b825115611c4c5782518084602001fd5b8160405162461bcd60e51b815260040161062d919061243f565b828054611c72906126e1565b90600052602060002090601f016020900481019282611c945760008555611cda565b82601f10611cad57805160ff1916838001178555611cda565b82800160010185558215611cda579182015b82811115611cda578251825591602001919060010190611cbf565b50611ce6929150611cea565b5090565b5b80821115611ce65760008155600101611ceb565b8035611d0a8161275d565b919050565b600082601f830112611d1f578081fd5b81356020611d34611d2f83612537565b612507565b80838252828201915082860187848660051b8901011115611d53578586fd5b855b85811015611d7a578135611d688161275d565b84529284019290840190600101611d55565b5090979650505050505050565b600082601f830112611d97578081fd5b81516020611da7611d2f83612537565b80838252828201915082860187848660051b8901011115611dc6578586fd5b855b85811015611d7a57815163ffffffff81168114611de3578788fd5b84529284019290840190600101611dc8565b805161ffff81168114611d0a57600080fd5b805160ff81168114611d0a57600080fd5b600060208284031215611e29578081fd5b8135611afe8161275d565b600060208284031215611e45578081fd5b8151611afe8161275d565b60008060408385031215611e62578081fd5b8235611e6d8161275d565b91506020830135611e7d8161275d565b809150509250929050565b600080600060608486031215611e9c578081fd5b8335611ea78161275d565b92506020840135611eb78161275d565b9150604084013562ffffff81168114611ece578182fd5b809150509250925092565b600060208284031215611eea578081fd5b81356001600160401b03811115611eff578182fd5b611f0b84828501611d0f565b949350505050565b60008060408385031215611f25578182fd5b82356001600160401b03811115611f3a578283fd5b611f4685828601611d0f565b95602094909401359450505050565b600060208284031215611f66578081fd5b8151611afe81612772565b600080600060608486031215611f85578081fd5b83356001600160401b0380821115611f9b578283fd5b818601915086601f830112611fae578283fd5b8135602082821115611fc257611fc2612747565b611fd4601f8301601f19168201612507565b92508183528881838601011115611fe9578485fd5b818185018285013784818385010152829650612006818901611cff565b95505050505061201860408501611cff565b90509250925092565b600080600080600080600060e0888a03121561203b578485fd5b87516120468161275d565b8097505060208801518060020b811461205d578586fd5b955061206b60408901611df5565b945061207960608901611df5565b935061208760808901611df5565b925061209560a08901611e07565b915060c08801516120a581612772565b8091505092959891949750929550565b6000602082840312156120c6578081fd5b5051919050565b6000806000606084860312156120e1578081fd5b8335925060208401356120f38161275d565b91506040840135611ece8161275d565b60008060008060808587031215612118578182fd5b8451602080870151919550906001600160401b0380821115612138578485fd5b818801915088601f83011261214b578485fd5b8151612159611d2f82612537565b8082825285820191508585018c878560051b8801011115612178578889fd5b8895505b838610156121a357805161218f8161275d565b83526001959095019491860191860161217c565b5060408b015190985094505050808311156121bc578485fd5b50506121ca87828801611d87565b606096909601519497939650505050565b60008060008060008060c087890312156121f3578384fd5b863595506020870135945060408701356001600160401b03811115612216578485fd5b61222289828a01611d0f565b94505060608701356122338161275d565b92506080870135915060a087013561224a81612772565b809150509295509295509295565b600060208284031215612269578081fd5b611afe82611e07565b6000815180845260208085019450808401835b838110156122a157815187529582019590820190600101612285565b509495945050505050565b600081518084526122c48160208601602086016126b5565b601f01601f19169290920160200192915050565b6000815160a084526122ed60a08501826122ac565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b6000825161233b8184602087016126b5565b9190910192915050565b600084516123578184602089016126b5565b60e89490941b6001600160e81b0319169190930190815260609190911b6001600160601b031916600382015260170192915050565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b606080825284519082018190526000906020906080840190828801845b828110156123f65781516001600160a01b0316845292840192908401906001016123d1565b5050508381038285015261240a8187612272565b9250505060018060a01b0383166040830152949350505050565b8215158152604060208201526000611afb6040830184612272565b602081526000611afe60208301846122ac565b60408152600061246560408301856122ac565b90508260208301529392505050565b6020808252818101527f556e69737761705633436f6e6e6563746f723a207a65726f2061646472657373604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b602081526000611afe60208301846122d8565b604051601f8201601f191681016001600160401b038111828210171561252f5761252f612747565b604052919050565b60006001600160401b0382111561255057612550612747565b5060051b60200190565b6000821982111561256d5761256d612731565b500190565b60008261258d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156125cd5781600019048211156125b3576125b3612731565b808516156125c057918102915b93841c9390800290612597565b509250929050565b6000611afe83836000826125eb57506001612679565b816125f857506000612679565b816001811461260e576002811461261857612634565b6001915050612679565b60ff84111561262957612629612731565b50506001821b612679565b5060208310610133831016604e8410600b8410161715612657575081810a612679565b6126618383612592565b806000190482111561267557612675612731565b0290505b92915050565b600081600019048311821515161561269957612699612731565b500290565b6000828210156126b0576126b0612731565b500390565b60005b838110156126d05781810151838201526020016126b8565b838111156108105750506000910152565b600181811c908216806126f557607f821691505b60208210811415610e6857634e487b7160e01b600052602260045260246000fd5b600060001982141561272a5761272a612731565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461165e57600080fd5b801515811461165e57600080fdfea264697066735822122037200cc7745ebe75415decb390a738e3fee221769247d135831ad295897eaaac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getExactInput(address[],uint256)": {
        "details": "Return (false, 0) if DEX cannot swap the input amount"
      },
      "getExactOutput(address[],uint256)": {
        "details": "Return (false, 0) if DEX cannot give the output amount"
      },
      "getSwapRate(address[],uint256)": {
        "details": "Decimal determines the precision of the swap rate"
      },
      "initialize(string,address,address)": {
        "params": {
          "_exchangeRouter": "Address of the DEX router contract",
          "_name": "Name of the underlying DEX"
        }
      },
      "isPathValid(address[])": {
        "params": {
          "_path": "List of tokens that are used for exchanging"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setExchangeRouter(address)": {
        "details": "Set address of liquidity pool factory from the exchange router",
        "params": {
          "_exchangeRouter": "Address of the new exchange router contract"
        }
      },
      "setFeeTier(address,address,uint24)": {
        "details": "We set the fee tier that is used for exchanging tokens"
      },
      "setLiquidityPoolFactory()": {
        "details": "Set address from exchange router"
      },
      "setWrappedNativeToken()": {
        "details": "Get address from exchange router"
      },
      "swap(uint256,uint256,address[],address,uint256,bool)": {
        "details": "Check exchange conditions before exchanging      We assume that the input token is not WETH (it is teleBTC)",
        "params": {
          "_deadline": "Deadline of exchanging tokens",
          "_inputAmount": "Amount of input token",
          "_isFixedToken": "True if the input token amount is fixed",
          "_outputAmount": "Amount of output token",
          "_path": "List of tokens that are used for exchanging",
          "_to": "Receiver address"
        },
        "returns": {
          "_amounts": "Amounts of tokens that are involved in exchanging",
          "_result": "True if the exchange is successful"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExactInput(address[],uint256)": {
        "notice": "Return the output amount for the given input amount"
      },
      "getExactOutput(address[],uint256)": {
        "notice": "Return the needed input amount to get the output amount"
      },
      "getInputAmount(uint256,address,address)": {
        "notice": "Deprecated for v3"
      },
      "getOutputAmount(uint256,address,address)": {
        "notice": "Deprecated for v3"
      },
      "getSwapRate(address[],uint256)": {
        "notice": "Return the swap rate between two tokens"
      },
      "initialize(string,address,address)": {
        "notice": "This contract is used for interacting with UniswapV3 contract"
      },
      "isPathValid(address[])": {
        "notice": "Return true if the exchange path is valid"
      },
      "setExchangeRouter(address)": {
        "notice": "Setter for exchange router"
      },
      "setFeeTier(address,address,uint24)": {
        "notice": "Setter for fee tier"
      },
      "setLiquidityPoolFactory()": {
        "notice": "Setter for liquidity pool factory"
      },
      "setQuoter(address)": {
        "notice": "Setter for quoter"
      },
      "setWrappedNativeToken()": {
        "notice": "Setter for wrapped native token"
      },
      "swap(uint256,uint256,address[],address,uint256,bool)": {
        "notice": "Exchange input token for output token through exchange router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11640,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11643,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12267,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11512,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 11632,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11817,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 11886,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13354,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 13357,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 13360,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "exchangeRouter",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 13363,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "liquidityPoolFactory",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 13365,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "quoterAddress",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 13371,
        "contract": "contracts/dex_connectors/UniswapV3Connector.sol:UniswapV3Connector",
        "label": "feeTier",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint24))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint24))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint24))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint24)"
      },
      "t_mapping(t_address,t_uint24)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}