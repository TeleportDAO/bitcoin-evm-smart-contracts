{
  "0x75aa050fa7ad1dad5198c368648ee84989758d71ce933010b54862e89d1865cc": {
    "name": "CCBurnRouter",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "CCBurnRouter",
      "sourceName": "contracts/routers/CCBurnRouter.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_startingBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_relay",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lockers",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_teleBTC",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_transferDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_protocolPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_slasherPercentageReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_bitcoinFee",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "userTargetAddress",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_lockerTargetAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "lockerLockingScript",
              "type": "bytes"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "requestIdOfLocker",
              "type": "uint256"
            }
          ],
          "name": "BurnDispute",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "userTargetAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "userScript",
              "type": "bytes"
            },
            {
              "indexed": false,
              "internalType": "enum ScriptTypes",
              "name": "scriptType",
              "type": "uint8"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "teleBTCAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "burntAmount",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "lockerTargetAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "requestIdOfLocker",
              "type": "uint256"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "name": "CCBurn",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_lockerTargetAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "lockerLockingScript",
              "type": "bytes"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_blockNumber",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "txId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "LockerDispute",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldBitcoinFee",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newBitcoinFee",
              "type": "uint256"
            }
          ],
          "name": "NewBitcoinFee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldLockers",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newLockers",
              "type": "address"
            }
          ],
          "name": "NewLockers",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldProtocolPercentageFee",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newProtocolPercentageFee",
              "type": "uint256"
            }
          ],
          "name": "NewProtocolPercentageFee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldRelay",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newRelay",
              "type": "address"
            }
          ],
          "name": "NewRelay",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldSlasherPercentageFee",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newSlasherPercentageFee",
              "type": "uint256"
            }
          ],
          "name": "NewSlasherPercentageFee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldTeleBTC",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newTeleBTC",
              "type": "address"
            }
          ],
          "name": "NewTeleBTC",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldTransferDeadline",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newTransferDeadline",
              "type": "uint256"
            }
          ],
          "name": "NewTransferDeadline",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldTreasury",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newTreasury",
              "type": "address"
            }
          ],
          "name": "NewTreasury",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "lockerTargetAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "requestIdOfLocker",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "bitcoinTxId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "bitcoinTxOutputIndex",
              "type": "uint256"
            }
          ],
          "name": "PaidCCBurn",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "bitcoinFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "_version",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "_vin",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_vout",
              "type": "bytes"
            },
            {
              "internalType": "bytes4",
              "name": "_locktime",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "_blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_intermediateNodes",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_lockerLockingScript",
              "type": "bytes"
            },
            {
              "internalType": "uint256[]",
              "name": "_burnReqIndexes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_voutIndexes",
              "type": "uint256[]"
            }
          ],
          "name": "burnProof",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "burnRequestCounter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "burnRequests",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "burntAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "userScript",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTransferred",
              "type": "bool"
            },
            {
              "internalType": "enum ScriptTypes",
              "name": "scriptType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "requestIdOfLocker",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_userScript",
              "type": "bytes"
            },
            {
              "internalType": "enum ScriptTypes",
              "name": "_scriptType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "_lockerLockingScript",
              "type": "bytes"
            }
          ],
          "name": "ccBurn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "_amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "_isFixedToken",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "_path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "_deadline",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_userScript",
              "type": "bytes"
            },
            {
              "internalType": "enum ScriptTypes",
              "name": "_scriptType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "_lockerLockingScript",
              "type": "bytes"
            }
          ],
          "name": "ccExchangeAndBurn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_lockerLockingScript",
              "type": "bytes"
            },
            {
              "internalType": "uint256[]",
              "name": "_indices",
              "type": "uint256[]"
            }
          ],
          "name": "disputeBurn",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_lockerLockingScript",
              "type": "bytes"
            },
            {
              "internalType": "bytes4[]",
              "name": "_versions",
              "type": "bytes4[]"
            },
            {
              "internalType": "bytes",
              "name": "_inputVin",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_inputVout",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_outputVin",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_outputVout",
              "type": "bytes"
            },
            {
              "internalType": "bytes4[]",
              "name": "_locktimes",
              "type": "bytes4[]"
            },
            {
              "internalType": "bytes",
              "name": "_inputIntermediateNodes",
              "type": "bytes"
            },
            {
              "internalType": "uint256[]",
              "name": "_indexesAndBlockNumbers",
              "type": "uint256[]"
            }
          ],
          "name": "disputeLocker",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "fixTransferDeadline",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_lockerTargetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "isTransferred",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "isUsedAsBurnProof",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lockers",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "protocolPercentageFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "relay",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_bitcoinFee",
              "type": "uint256"
            }
          ],
          "name": "setBitcoinFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_lockers",
              "type": "address"
            }
          ],
          "name": "setLockers",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_protocolPercentageFee",
              "type": "uint256"
            }
          ],
          "name": "setProtocolPercentageFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_relay",
              "type": "address"
            }
          ],
          "name": "setRelay",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_slasherPercentageReward",
              "type": "uint256"
            }
          ],
          "name": "setSlasherPercentageReward",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_teleBTC",
              "type": "address"
            }
          ],
          "name": "setTeleBTC",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_transferDeadline",
              "type": "uint256"
            }
          ],
          "name": "setTransferDeadline",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_treasury",
              "type": "address"
            }
          ],
          "name": "setTreasury",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "slasherPercentageReward",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startingBlockNumber",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "teleBTC",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "transferDeadline",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "treasury",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "$f78472418b29d5d2fb49b19dc055a858ae$__637ebc2327600360009054906101000a90046001600160a01b0316838660028151811061147557634e487b7160e01b600052603260045260246000fd5b6020026020010151888860018151811061149f57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518663ffffffff1660e01b81526004016114c7959493929190615a06565b60206040518083038186803b1580156114df57600080fd5b505af41580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906154c8565b6115635760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a206e6f742066696e616c697a656400000000006044820152606401610674565b6000818152600d602052604090205460ff16156115c25760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20616c726561647920757365640000000000006044820152606401610674565b6000818152600d60205260408120805460ff1916600117905583518190611610908c908790849061160357634e487b7160e01b600052603260045260246000fd5b6020026020010151612aa6565b915091506116638c60018151811061163857634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a60018151811061141457634e487b7160e01b600052603260045260246000fd5b82146116b15760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a2077726f6e67206f75747075742074780000006044820152606401610674565b8c5160208e01206116c28983612b55565b80519060200120146117165760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a206e6f7420666f72206c6f636b6572000000006044820152606401610674565b8460028151811061173757634e487b7160e01b600052603260045260246000fd5b602002602001015160075461174c9190615db6565b600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561179a57600080fd5b505afa1580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d291906155a2565b116117ef5760405162461bcd60e51b815260040161067490615c09565b6118238a8e858860028151811061181657634e487b7160e01b600052603260045260246000fd5b6020026020010151612bc9565b505060018080559b9a5050505050505050505050565b6000546001600160a01b031633146118635760405162461bcd60e51b815260040161067490615bd4565b6108c281612d94565b6000546001600160a01b031633146118965760405162461bcd60e51b815260040161067490615bd4565b6108c281612e25565b6000600260015414156118c45760405162461bcd60e51b815260040161067490615c4a565b60026001819055548710156119175760405162461bcd60e51b815260206004820152601960248201527810d0d09d5c9b949bdd5d195c8e881bdb19081c995c5d595cdd603a1b6044820152606401610674565b6001600160e01b031988161561196f5760405162461bcd60e51b815260206004820181905260248201527f43434275726e526f757465723a206e6f6e2d7a65726f206c6f636b2074696d656044820152606401610674565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa39161199e91889101615abe565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906154c8565b611a0a5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526000926001600160a01b039092169163c4d10b6a91611a3c91899101615abe565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190615385565b90508251845114611adf5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720696e646578657300000000006044820152606401610674565b6000611aed8d8d8d8d6129b0565b600354604051637ebc232760e01b815291925073__$f78472418b29d5d2fb49b19dc055a858ae$__91637ebc232791611b3c916001600160a01b039091169085908e908e908e90600401615a06565b60206040518083038186803b158015611b5457600080fd5b505af4158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c91906154c8565b611bd85760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a206e6f742066696e616c697a656400000000006044820152606401610674565b6000611be8828b858f8a8a612eb8565b9050611bf6818d89856133e7565b505060018080559c9b505050505050505050505050565b6000546001600160a01b03163314611c375760405162461bcd60e51b815260040161067490615bd4565b6108c281613470565b6000546001600160a01b03163314611c6a5760405162461bcd60e51b815260040161067490615bd4565b6001600160a01b038116611ccf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610674565b6108c281613501565b600b6020528160005260406000208181548110611cf457600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611d3090615f12565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5c90615f12565b8015611da95780601f10611d7e57610100808354040283529160200191611da9565b820191906000526020600020905b815481529060010190602001808311611d8c57829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b60035460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b158015611e1a57600080fd5b505afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5291906155a2565b9050808211611ea35760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a206c6f7720646561646c696e650000000000006044820152606401610674565b60075460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600755565b600080611ef28686613551565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa391611f23918891889101615a86565b60206040518083038186803b158015611f3b57600080fd5b505afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7391906154c8565b611f8f5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526001600160a01b039091169163c4d10b6a91611fc0918891889101615a86565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190615385565b9050600061201d8861364a565b6005546004805460405163095ea7b360e01b81526001600160a01b03918216928101929092526024820184905292935091169063095ea7b390604401602060405180830381600087803b15801561207357600080fd5b505af1158015612087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ab91906154c8565b5080600a54826120bb9190615ea8565b600480546040516338463cff60e01b81526001600160a01b03909116916338463cff916120ee918b918b91899101615a9a565b602060405180830381600087803b15801561210857600080fd5b505af115801561211c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214091906155a2565b61214a9190615e60565b6121549190615e40565b92506121e988848989600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ab57600080fd5b505afa1580156121bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e391906155a2565b87613771565b509550959350505050565b8061271010156122465760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420726577617264000000006044820152606401610674565b60095460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600955565b8061271010156122d95760405162461bcd60e51b815260206004820152601960248201527f43434275726e526f757465723a20696e76616c696420666565000000000000006044820152606401610674565b60085460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600855565b806001600160a01b0381166123415760405162461bcd60e51b815260040161067490615b2f565b600554604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031684846123c7600182615ea8565b8181106123e457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123f99190615369565b6001600160a01b03161461244f5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20696e76616c696420706174680000000000006044820152606401610674565b6002861461249f5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720616d6f756e747300000000006044820152606401610674565b838360008181106124c057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906124d59190615369565b6001600160a01b03166323b872dd33308a8a600081811061250657634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401602060405180830381600087803b15801561255d57600080fd5b505af1158015612571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259591906154c8565b50838360008181106125b757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906125cc9190615369565b6001600160a01b031663095ea7b389898960008181106125fc57634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401602060405180830381600087803b15801561264b57600080fd5b505af115801561265f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268391906154c8565b50600080896001600160a01b031663b0bbcd888a8a60008181106126b757634e487b7160e01b600052603260045260246000fd5b905060200201358b8b60018181106126df57634e487b7160e01b600052603260045260246000fd5b905060200201358989308a8e6040518863ffffffff1660e01b815260040161270d9796959493929190615ce4565b600060405180830381600087803b15801561272757600080fd5b505af115801561273b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261276391908101906154e4565b91509150816127b45760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a2065786368616e6765206661696c65640000006044820152606401610674565b80600182516127c39190615ea8565b815181106127e157634e487b7160e01b600052603260045260246000fd5b602002602001015192505050979650505050505050565b6000806128088787878787611ee5565b6001600160a01b0381166000908152600b6020526040902080549294509092509061283590600190615ea8565b8154811061285357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015461286c3390565b6001600160a01b038381166000908152600b60205260409020805492909116917fc19dabf19fdfd8c6124bed2178a4564d0c5d5812bfb916777cc90d1b53ed5a5a918a918a918f918f918f918b918b916128c890600190615ea8565b815481106128e657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161290c989796959493929190615ad1565b60405180910390a3505050505050505050565b806001600160a01b0381166129465760405162461bcd60e51b815260040161067490615b2f565b600454604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000806002868686866040516020016129cc9493929190615997565b60408051601f19818403018152908290526129e6916159ea565b602060405180830381855afa158015612a03573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a2691906155a2565b90506000600282604051602001612a3f91815260200190565b60408051601f1981840301815290829052612a59916159ea565b602060405180830381855afa158015612a76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a9991906155a2565b925050505b949350505050565b60008080612abc612ab78683613939565b61395d565b905062ffffff198082161415612b145760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610674565b6000612b208286613a93565b90506000612b2d82613bb1565b9050612b3881613bd5565b9450612b4381613bf7565b63ffffffff1693505050509250929050565b60606000612b6d612b68825b8690613939565b613c21565b905062ffffff198082161415612b955760405162461bcd60e51b815260040161067490615b66565b6000612ba18285613d12565b90506000612bae82613e0c565b9050612bbf62ffffff198216613e5d565b9695505050505050565b6000612bd485613ead565b6004805460405163626885b560e11b81526001600160401b039390931693506000926001600160a01b039091169163c4d10b6a91612c1491899101615abe565b60206040518083038186803b158015612c2c57600080fd5b505afa158015612c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c649190615385565b6004546009549192506001600160a01b03169063b734de2690839061271090612c8d9087615e60565b612c979190615e40565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612cf057600080fd5b505af1158015612d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2891906154c8565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060095488612d5f9190615e60565b612d699190615e40565b612d739088615db6565b604051612d84959493929190615a45565b60405180910390a1505050505050565b806001600160a01b038116612dbb5760405162461bcd60e51b815260040161067490615b2f565b600354604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b600a5460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a1806127101015612eb35760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a20696e76616c696420627463206665650000006044820152606401610674565b600a55565b60008080805b85518110156133da5780612efb57848181518110612eec57634e487b7160e01b600052603260045260246000fd5b60200260200101519150612fa8565b81858281518110612f1c57634e487b7160e01b600052603260045260246000fd5b602002602001015111612f7d5760405162461bcd60e51b8152602060048201526024808201527f43434275726e526f757465723a20756e2d736f7274656420766f757420696e646044820152636578657360e01b6064820152608401610674565b848181518110612f9d57634e487b7160e01b600052603260045260246000fd5b602002602001015191505b6000868281518110612fca57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600b60008a6001600160a01b03166001600160a01b03168152602001908152602001600020818154811061301857634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615801561308757506001600160a01b0389166000908152600b6020526040902080548b91908390811061307257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b156133c757613232888784815181106130b057634e487b7160e01b600052603260045260246000fd5b6020026020010151600b60008d6001600160a01b03166001600160a01b0316815260200190815260200160002084815481106130fc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600301805461311890615f12565b80601f016020809104026020016040519081016040528092919081815260200182805461314490615f12565b80156131915780601f1061316657610100808354040283529160200191613191565b820191906000526020600020905b81548152906001019060200180831161317457829003601f168201915b5050506001600160a01b038f166000908152600b60205260409020805490925087915081106131d057634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff16600481111561320e57634e487b7160e01b600052602160045260246000fd5b600481111561322d57634e487b7160e01b600052602160045260246000fd5b613f47565b6001600160401b0316935083600b60008b6001600160a01b03166001600160a01b03168152602001908152602001600020828154811061328257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016001015414156133c7576001600160a01b0389166000908152600b60205260409020805460019190839081106132d657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055613303856001615db6565b6001600160a01b038a166000818152600b60205260409020805492975090917f1b46655c2f394f2191cb246d5982dbe00ad671f0b590e75e97c90ee97f1f782a91908490811061336357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548d89868151811061339657634e487b7160e01b600052603260045260246000fd5b60200260200101516040516133be939291909283526020830191909152604082015260600190565b60405180910390a25b50806133d281615f47565b915050612ebe565b5050509695505050505050565b60006133f38484614182565b6001600160401b03169050600061340985614285565b90508115801590613423575080613421876001615db6565b145b15613446576000838152600d60205260409020805460ff19166001179055613468565b80861415613468576000838152600d60205260409020805460ff191660011790555b505050505050565b806001600160a01b0381166134975760405162461bcd60e51b815260040161067490615b2f565b600654604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600481111561357357634e487b7160e01b600052602160045260246000fd5b148061359e5750600481600481111561359c57634e487b7160e01b600052602160045260246000fd5b145b156135f95781516020146135f45760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420736372697074000000006044820152606401610674565b6106a0565b81516014146106a05760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420736372697074000000006044820152606401610674565b6000806127106008548461365e9190615e60565b6136689190615e40565b9050600a5460026136799190615e60565b6136839082615db6565b83116136d15760405162461bcd60e51b815260206004820152601860248201527f43434275726e526f757465723a206c6f7720616d6f756e7400000000000000006044820152606401610674565b60006136dd8285615ea8565b60055460065460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb90604401602060405180830381600087803b15801561372f57600080fd5b505af1158015613743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376791906154c8565b509150505b919050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e083019190915288825260208201889052339282019290925260608101869052908460048111156137d557634e487b7160e01b600052602160045260246000fd5b908160048111156137f657634e487b7160e01b600052602160045260246000fd5b9052506007546138069084615db6565b6080820152600060a082018190526001600160a01b038316808252600c6020818152604084205460e0860181905292909352909152613846906001615db6565b6001600160a01b038381166000908152600c6020908152604080832094909455600b81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b03191691909316179091556060830151805184936138c69260038501929101906150de565b50608082015160048281019190915560a083015160058301805460ff19169115159190911780825560c08501519261ff00199091169061010090849081111561391f57634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b81516000906020840161395464ffffffffff851682846142b1565b95945050505050565b60008181613973815b62ffffff198416906142f8565b50601884901c6001600160601b03166139935762ffffff195b9250613a8c565b60006139a08560006143d2565b9050601885901c6001600160601b03166001600160401b0382166139cd5762ffffff195b94505050613a8c565b60006139d883614519565b60ff16905060005b836001600160401b0316811015613a5457828210613a095762ffffff195b965050505050613a8c565b6000613a29613a188486615ea8565b60055b62ffffff198c169190614572565b9050613a34816145a6565b613a3e9084615db6565b9250508080613a4c90615f47565b9150506139e0565b50818114613a6c5762ffffff195b9550505050613a8c565b613a8660065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b6000826006613aa181613966565b506000613aaf8660006143d2565b6001600160401b03169050601886901c6001600160601b0316818610613b0a5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610674565b6000613b1583614519565b60ff1690506000805b88811015613b6d57613b44613b338486615ea8565b60055b62ffffff198d169190614572565b9150613b4f826145a6565b613b599084615db6565b9250613b66600182615db6565b9050613b1e565b50613b7b613a188385615ea8565b90506000613b88826145a6565b9050613ba1838260045b62ffffff198e169291906145fa565b975050505050505b505092915050565b6000816004613bbf81613966565b50612a9e62ffffff1985166000602460036145fa565b6000816003613be381613966565b50612a9e62ffffff1985166000602061466a565b6000816003613c0581613966565b50612a9e613c1c62ffffff198616602060046147c3565b61490d565b60008181613c2e81613966565b50601884901c6001600160601b0316613c4b5762ffffff1961398c565b6000613c588560006143d2565b9050601885901c6001600160601b03166001600160401b038216613c805762ffffff196139c4565b6000613c8b83614519565b60ff16905060005b836001600160401b0316811015613cf657828210613cb55762ffffff196139fe565b6000613ccb613cc48486615ea8565b600e613a1b565b9050613cd681614976565b613ce09084615db6565b9250508080613cee90615f47565b915050613c93565b50818114613d085762ffffff19613a62565b613a86600f613a72565b600082600f613d2081613966565b506000613d2e8660006143d2565b6001600160401b03169050601886901c6001600160601b0316818610613d8a5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610674565b6000613d9583614519565b60ff1690506000805b88811015613de357613dba613db38486615ea8565b600e613b36565b9150613dc582614976565b613dcf9084615db6565b9250613ddc600182615db6565b9050613d9e565b50613df1613cc48385615ea8565b90506000613dfe82614976565b9050613ba18382600d613b92565b600081600d613e1a81613966565b506000613e288560086143d2565b9050613954613e3682614519565b613e41906008615df9565b62ffffff1987169060ff166001600160401b03841660076145fa565b6060600080613e758460181c6001600160601b031690565b60405193508392506001600160601b03169050613e9c84613e97846020615db6565b6149bf565b508181016020016040529052919050565b600080613ebf612b68825b8590613939565b905062ffffff198082161415613ee75760405162461bcd60e51b815260040161067490615b66565b600080613ef58360006143d2565b6001600160401b0316905060005b81811015613f3e57613f158482613d12565b9250613f2083614b17565b613f2a9086615dce565b945080613f3681615f47565b915050613f03565b50505050919050565b600080613f57612b688783613939565b905062ffffff198082161415613f7f5760405162461bcd60e51b815260040161067490615b66565b6000613f8b8287613d12565b90506000613f9882613e0c565b90506000856004811115613fbc57634e487b7160e01b600052602160045260246000fd5b141561402157613fd562ffffff1982166001602061466a565b604051602001613fe791815260200190565b6040516020818303038152906040528051906020012086805190602001201461401157600061401a565b61401a82614b17565b9350614177565b600185600481111561404357634e487b7160e01b600052602160045260246000fd5b14156140825761405a62ffffff1982166003614b3c565b604051602001613fe7919060609190911b6bffffffffffffffffffffffff1916815260140190565b60028560048111156140a457634e487b7160e01b600052602160045260246000fd5b14156140bb5761405a62ffffff1982166002614b3c565b60038560048111156140dd57634e487b7160e01b600052602160045260246000fd5b14156140f45761405a62ffffff1982166002614b3c565b600485600481111561411657634e487b7160e01b600052602160045260246000fd5b14156141775761412f62ffffff1982166002602061466a565b60405160200161414191815260200190565b6040516020818303038152906040528051906020012086805190602001201461416b576000614174565b61417482614b17565b93505b505050949350505050565b600080614191612b6882612b61565b905062ffffff1980821614156141b95760405162461bcd60e51b815260040161067490615b66565b60008060006141c98460006143d2565b6001600160401b0316905060005b8181101561427a576141e98582613d12565b93506141f484613e0c565b92508660405160200161420791906159ea565b6040516020818303038152906040528051906020012061422c8462ffffff1916613e5d565b60405160200161423c91906159ea565b6040516020818303038152906040528051906020012014156142685761426184614b17565b955061427a565b8061427281615f47565b9150506141d7565b505050505092915050565b600080614294612b6882613eb8565b90506142a18160006143d2565b6001600160401b03169392505050565b6000806142be8385615db6565b90506040518111156142ce575060005b806142e05762ffffff199150506142f1565b5050606083811b8317901b811760181b5b9392505050565b60006143048383614b4a565b6143cb5760006143236143178560d81c90565b64ffffffffff16614b6d565b91505060006143388464ffffffffff16614b6d565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016106749190615abe565b5090919050565b6000806143e762ffffff198516846001614c19565b905060fc8111614402576143fa81614c49565b91505061112c565b8060fd14156144685761443061442b61441c856001615db6565b62ffffff1987169060026147c3565b614c49565b915061443b82614519565b60ff166003146144635761446161445c62ffffff19861685600360006145fa565b614cb1565b505b614512565b8060fe14156144bd5761449161442b614482856001615db6565b62ffffff1987169060046147c3565b915061449c82614519565b60ff166005146144635761446161445c62ffffff19861685600560006145fa565b8060ff1415614512576144e661442b6144d7856001615db6565b62ffffff1987169060086147c3565b91506144f182614519565b60ff1660091461451257613ba961445c62ffffff19861685600960006145fa565b5092915050565b600060fc826001600160401b0316116145345750600161376c565b61ffff826001600160401b03161161454e5750600361376c565b63ffffffff826001600160401b03161161456a5750600561376c565b50600961376c565b6000612a9e848461458c8760181c6001600160601b031690565b6001600160601b031661459f9190615ea8565b85856145fa565b60008160056145b481613966565b5060006145c28560246143d2565b9050806001600160401b03166145d782614519565b60ff166145e49190615db6565b6145ef906024615db6565b613954906004615db6565b6000806146108660781c6001600160601b031690565b6001600160601b0316905061462486614d38565b8461462f8784615db6565b6146399190615db6565b111561464c5762ffffff19915050612a9e565b6146568582615db6565b9050612bbf8364ffffffffff1682866142b1565b600060ff821661467c575060006142f1565b61468f8460181c6001600160601b031690565b6001600160601b03166146a560ff841685615db6565b1115614709576146f06146c18560781c6001600160601b031690565b6001600160601b03166146dd8660181c6001600160601b031690565b6001600160601b0316858560ff16614d79565b60405162461bcd60e51b81526004016106749190615abe565b60208260ff1611156147835760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610674565b60088202600061479c8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000612a9e6147d385858561466a565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b600063ffffffff8211156149725760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610674565b5090565b600081600e61498481613966565b5060006149928560086143d2565b9050806001600160401b03166149a782614519565b60ff166149b49190615db6565b613954906008615db6565b600062ffffff198084161415614a285760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610674565b614a3183614ea3565b614a915760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610674565b6000614aa68460181c6001600160601b031690565b6001600160601b031690506000614ac68560781c6001600160601b031690565b6001600160601b031690506000604051905084811115614ae65760206060fd5b8285848460045afa50612bbf614afc8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600d614b2581613966565b50612a9e61442b62ffffff198616600060086147c3565b60006142f183836014614c19565b60008164ffffffffff16614b5e8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115614bcb576000614b8c826008615e7f565b60ff1685901c9050614b9d81614ee1565b61ffff16841793508160ff16601014614bb857601084901b93505b50614bc4600182615ebf565b9050614b73565b50600f5b60ff8160ff161015614c135760ff600882021684901c614bee81614ee1565b61ffff16831792508160ff16600014614c0957601083901b92505b5060001901614bcf565b50915091565b6000614c26826020615ebf565b614c31906008615e7f565b60ff16614c3f85858561466a565b901c949350505050565b60006001600160401b038211156149725760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610674565b60606000614ce5614ce082614cd2601887901c6001600160601b0316614f11565b62ffffff1987169190614c19565b614b6d565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d016143a0565b6000614d4d8260181c6001600160601b031690565b614d608360781c6001600160601b031690565b614d6a9190615e1e565b6001600160601b031692915050565b60606000614d8686614b6d565b9150506000614d9486614b6d565b9150506000614da286614b6d565b9150506000614db086614b6d565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000614eaf8260d81c90565b64ffffffffff1664ffffffffff1415614eca5750600061376c565b6000614ed583614d38565b60405110199392505050565b6000614ef360048360ff16901c614f72565b60ff161760081b62ffff0016614f0882614f72565b60ff1617919050565b600060ff8211156149725760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610674565b600060f08083179060ff82161415614f8e57603091505061376c565b8060ff1660f11415614fa457603191505061376c565b8060ff1660f21415614fba57603291505061376c565b8060ff1660f31415614fd057603391505061376c565b8060ff1660f41415614fe657603491505061376c565b8060ff1660f51415614ffc57603591505061376c565b8060ff1660f6141561501257603691505061376c565b8060ff1660f7141561502857603791505061376c565b8060ff1660f8141561503e57603891505061376c565b8060ff1660f9141561505457603991505061376c565b8060ff1660fa141561506a57606191505061376c565b8060ff1660fb141561508057606291505061376c565b8060ff1660fc141561509657606391505061376c565b8060ff1660fd14156150ac57606491505061376c565b8060ff1660fe14156150c257606591505061376c565b8060ff1660ff14156150d857606691505061376c565b50919050565b8280546150ea90615f12565b90600052602060002090601f01602090048101928261510c5760008555615152565b82601f1061512557805160ff1916838001178555615152565b82800160010185558215615152579182015b82811115615152578251825591602001919060010190615137565b506149729291505b80821115614972576000815560010161515a565b803561376c81615f8e565b60008083601f84011261518a578182fd5b5081356001600160401b038111156151a0578182fd5b60208301915083602080830285010111156151ba57600080fd5b9250929050565b600082601f8301126151d1578081fd5b813560206151e66151e183615d93565b615d63565b8281528181019085830183850287018401881015615202578586fd5b855b858110156152275761521582615299565b84529284019290840190600101615204565b5090979650505050505050565b600082601f830112615244578081fd5b813560206152546151e183615d93565b8281528181019085830183850287018401881015615270578586fd5b855b8581101561522757813584529284019290840190600101615272565b803561376c81615fa3565b80356001600160e01b03198116811461376c57600080fd5b60008083601f8401126152c2578182fd5b5081356001600160401b038111156152d8578182fd5b6020830191508360208285010111156151ba57600080fd5b600082601f830112615300578081fd5b81356001600160401b0381111561531957615319615f78565b61532c601f8201601f1916602001615d63565b818152846020838601011115615340578283fd5b816020850160208301379081016020019190915292915050565b80356005811061376c57600080fd5b60006020828403121561537a578081fd5b81356142f181615f8e565b600060208284031215615396578081fd5b81516142f181615f8e565b60008060008060008060008060008060006101008c8e0312156153c2578687fd5b6153cb8c61516e565b9a506001600160401b038060208e013511156153e5578788fd5b6153f58e60208f01358f01615179565b909b50995061540660408e0161528e565b98508060608e01351115615418578788fd5b6154288e60608f01358f01615179565b909850965060808d0135955060a08d0135811015615444578485fd5b6154548e60a08f01358f016152f0565b945061546260c08e0161535a565b93508060e08e01351115615474578283fd5b506154858d60e08e01358e016152b1565b81935080925050509295989b509295989b9093969950565b600080604083850312156154af578182fd5b82356154ba81615f8e565b946020939093013593505050565b6000602082840312156154d9578081fd5b81516142f181615fa3565b600080604083850312156154f6578182fd5b825161550181615fa3565b809250506020808401516001600160401b0381111561551e578283fd5b8401601f8101861361552e578283fd5b805161553c6151e182615d93565b81815283810190838501858402850186018a1015615558578687fd5b8694505b8385101561557a57805183526001949094019391850191850161555c565b5080955050505050509250929050565b60006020828403121561559b578081fd5b5035919050565b6000602082840312156155b3578081fd5b5051919050565b6000806000806000806000806000806101408b8d0312156155d9578384fd5b6155e28b615299565b995060208b01356001600160401b03808211156155fd578586fd5b6156098e838f016152f0565b9a5060408d013591508082111561561e578586fd5b61562a8e838f016152f0565b995061563860608e01615299565b985060808d0135975060a08d0135915080821115615654578586fd5b6156608e838f016152f0565b965060c08d0135955060e08d013591508082111561567c578485fd5b6156888e838f016152f0565b94506101008d013591508082111561569e578384fd5b6156aa8e838f01615234565b93506101208d01359150808211156156c0578283fd5b506156cd8d828e01615234565b9150509295989b9194979a5092959850565b6000806000604084860312156156f3578081fd5b83356001600160401b0380821115615709578283fd5b615715878388016152b1565b9095509350602086013591508082111561572d578283fd5b5061573a86828701615234565b9150509250925092565b60008060008060008060008060006101208a8c031215615762578283fd5b89356001600160401b0380821115615778578485fd5b6157848d838e016152f0565b9a5060208c0135915080821115615799578485fd5b6157a58d838e016151c1565b995060408c01359150808211156157ba578485fd5b6157c68d838e016152f0565b985060608c01359150808211156157db578485fd5b6157e78d838e016152f0565b975060808c01359150808211156157fc578485fd5b6158088d838e016152f0565b965060a08c013591508082111561581d578485fd5b6158298d838e016152f0565b955060c08c013591508082111561583e578485fd5b61584a8d838e016151c1565b945060e08c013591508082111561585f578384fd5b61586b8d838e016152f0565b93506101008c0135915080821115615881578283fd5b5061588e8c828d01615234565b9150509295985092959850929598565b6000806000806000608086880312156158b5578283fd5b8535945060208601356001600160401b03808211156158d2578485fd5b6158de89838a016152f0565b95506158ec6040890161535a565b94506060880135915080821115615901578283fd5b5061590e888289016152b1565b969995985093965092949392505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452615961816020860160208601615ee2565b601f01601f19169290920160200192915050565b6005811061599357634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b808716835285516159b9816004860160208a01615ee2565b8551908401906159d0816004840160208a01615ee2565b919094169301600481019390935250506008019392505050565b600082516159fc818460208701615ee2565b9190910192915050565b600060018060a01b038716825285602083015284604083015260a06060830152615a3360a0830185615949565b90508260808301529695505050505050565b6001600160a01b038616815260a060208201819052600090615a6990830187615949565b604083019590955250606081019290925260809091015292915050565b600060208252612a9e60208301848661591f565b600060408252615aae60408301858761591f565b9050826020830152949350505050565b6000602082526142f16020830184615949565b6000610100808352615ae58184018c615949565b915050615af5602083018a615975565b60408201979097526001600160a01b039586166060820152608081019490945260a084019290925290921660c082015260e0015292915050565b6020808252601a908201527f43434275726e526f757465723a207a65726f2061646472657373000000000000604082015260600190565b6020808252601b908201527f426974636f696e48656c7065723a20766f7574206973206e756c6c0000000000604082015260600190565b60208082526018908201527f43434275726e526f757465723a206e6f74206c6f636b65720000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f43434275726e526f757465723a20646561646c696e65206e6f742070617373656040820152601960fa1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b888152602081018890526001600160a01b038716604082015261010060608201819052600090615cb383820189615949565b91505085608083015284151560a0830152615cd160c0830185615975565b8260e08301529998505050505050505050565b878152602080820188905260c0604083018190528201869052600090879060e08401835b89811015615d36578335615d1b81615f8e565b6001600160a01b031682529282019290820190600101615d08565b506001600160a01b039790971660608501525050506080810192909252151560a090910152949350505050565b604051601f8201601f191681016001600160401b0381118282101715615d8b57615d8b615f78565b604052919050565b60006001600160401b03821115615dac57615dac615f78565b5060209081020190565b60008219821115615dc957615dc9615f62565b500190565b60006001600160401b03808316818516808303821115615df057615df0615f62565b01949350505050565b600060ff821660ff84168060ff03821115615e1657615e16615f62565b019392505050565b60006001600160601b03808316818516808303821115615df057615df0615f62565b600082615e5b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615e7a57615e7a615f62565b500290565b600060ff821660ff84168160ff0481118215151615615ea057615ea0615f62565b029392505050565b600082821015615eba57615eba615f62565b500390565b600060ff821660ff841680821015615ed957615ed9615f62565b90039392505050565b60005b83811015615efd578181015183820152602001615ee5565b83811115615f0c576000848401525b50505050565b600281046001821680615f2657607f821691505b602082108114156150d857634e487b7160e01b600052602260045260246000fd5b6000600019821415615f5b57615f5b615f62565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108c257600080fd5b80151581146108c257600080fdfea2646970667358221220f4e06622dd52fa7dbab4fc74fca75673ca437c4bfe932375e439f3c05dc5852964736f6c63430008020033",
      "linkReferences": {
        "contracts/libraries/RelayHelper.sol": {
          "RelayHelper": [
            {
              "length": 20,
              "start": 7064
            },
            {
              "length": 20,
              "start": 8821
            }
          ]
        }
      },
      "deployedLinkReferences": {
        "contracts/libraries/RelayHelper.sol": {
          "RelayHelper": [
            {
              "length": 20,
              "start": 5157
            },
            {
              "length": 20,
              "start": 6914
            }
          ]
        }
      },
      "devdoc": {
        "kind": "dev",
        "methods": {
          "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
            "details": "Makes isTransferred flag true for the paid requests",
            "params": {
              "_blockNumber": "Height of the block containing the Bitcoin tx",
              "_burnReqIndexes": "Indexes of requests that locker wants to provide proof for them",
              "_index": "Index of the Bitcoin tx the block",
              "_intermediateNodes": "Merkle inclusion proof for the Bitcoin tx",
              "_lockerLockingScript": "Locker's locking script that this burn request belongs to",
              "_locktime": "Lock time of the Bitcoin tx",
              "_version": "Version of the Bitcoin tx",
              "_vin": "Inputs of the Bitcoin tx",
              "_vout": "Outputs of the Bitcoin tx",
              "_voutIndexes": "Indexes of outputs that were used to pay burn requests.                      _voutIndexes[i] belongs to _burnReqIndexes[i]"
            }
          },
          "ccBurn(uint256,bytes,uint8,bytes)": {
            "details": "After submitting the burn request, Locker has a limited time      to send BTC and provide burn proof",
            "params": {
              "_amount": "of teleBTC that user wants to burn",
              "_lockerLockingScript": "of locker that should execute the burn request",
              "_scriptType": "User script type",
              "_userScript": "User script hash"
            }
          },
          "ccExchangeAndBurn(address,uint256[],bool,address[],uint256,bytes,uint8,bytes)": {
            "details": "After exchanging, rest of the process is similar to ccBurn",
            "params": {
              "_amounts": "[inputTokenAmount, teleBTCAmount]",
              "_deadline": "of exchanging",
              "_exchangeConnector": "Address of exchange connector to be used",
              "_isFixedToken": "True if input token amount is fixed",
              "_path": "of exchanging inputToken to teleBTC"
            }
          },
          "constructor": {
            "params": {
              "_bitcoinFee": "Fee of submitting a transaction on Bitcoin",
              "_lockers": "Address of lockers contract",
              "_protocolPercentageFee": "Percentage of tokens that user pays to protocol for burning",
              "_relay": "Address of relay contract",
              "_slasherPercentageReward": "Percentage of tokens that slasher receives after slashing a locker",
              "_startingBlockNumber": "Requests that are included in a block older                              than _startingBlockNumber cannot be executed",
              "_teleBTC": "Address of teleBTC contract",
              "_transferDeadline": "of sending BTC to user (aster submitting a burn request)",
              "_treasury": "Address of the treasury of the protocol"
            }
          },
          "disputeBurn(bytes,uint256[])": {
            "params": {
              "_indices": "Indices of requests that their deadline has passed",
              "_lockerLockingScript": "Locker's locking script that the unpaid request belongs to"
            },
            "returns": {
              "_0": "True if dispute is successful"
            }
          },
          "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
            "details": "Input tx is a malicious tx which shows that locker spent BTC      Output tx is the tx that was spent by locker in input tx      Output tx shows money goes to locker      Input tx shows locker steals the funds",
            "params": {
              "_indexesAndBlockNumbers": "Indices of malicious input in input tx, input tx in block and block number of input tx",
              "_inputIntermediateNodes": "Merkle inclusion proof for the malicious transaction",
              "_inputVin": "Inputs of the malicious transaction",
              "_inputVout": "Outputs of the malicious transaction",
              "_lockerLockingScript": "Suspicious locker's locking script",
              "_locktimes": "Locktimes of input and output tx",
              "_outputVin": "Inputs of the spent transaction",
              "_outputVout": "Outputs of the spent transaction",
              "_versions": "Versions of input and output tx"
            },
            "returns": {
              "_0": "True if dispute is successful"
            }
          },
          "fixTransferDeadline()": {
            "details": "This func protects lockers in the case that finalization parameter was updated      so they can process burn requests"
          },
          "isTransferred(address,uint256)": {
            "params": {
              "_index": "the request for the locker",
              "_lockerTargetAddress": "Locker address on the target chain"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "setBitcoinFee(uint256)": {
            "details": "Only owner can call this",
            "params": {
              "_bitcoinFee": "The new Bitcoin transaction fee"
            }
          },
          "setLockers(address)": {
            "details": "Only owner can call this",
            "params": {
              "_lockers": "The new lockers contract address"
            }
          },
          "setProtocolPercentageFee(uint256)": {
            "details": "Only owner can call this",
            "params": {
              "_protocolPercentageFee": "The new protocol percentage fee"
            }
          },
          "setRelay(address)": {
            "details": "Only owner can call this",
            "params": {
              "_relay": "The new relay contract address"
            }
          },
          "setSlasherPercentageReward(uint256)": {
            "details": "Only owner can call this",
            "params": {
              "_slasherPercentageReward": "The new slasher percentage reward"
            }
          },
          "setTeleBTC(address)": {
            "details": "Only owner can call this",
            "params": {
              "_teleBTC": "The new teleBTC contract address"
            }
          },
          "setTransferDeadline(uint256)": {
            "details": "Only owner can call this      Deadline should be greater than relay finalization parameter",
            "params": {
              "_transferDeadline": "The new transfer deadline"
            }
          },
          "setTreasury(address)": {
            "details": "Only owner can call this",
            "params": {
              "_treasury": "The new treasury address"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3522:77",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:77",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:117:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "169:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "178:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "181:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "171:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "171:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "128:5:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:5:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "154:3:77",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:77",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "150:3:77"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "150:11:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "163:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:19:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "135:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "135:31:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "125:42:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "118:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "118:50:77"
                          },
                          "nodeType": "YulIf",
                          "src": "115:2:77"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:77",
                        "type": ""
                      }
                    ],
                    "src": "14:177:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "277:113:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "323:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "332:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "340:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "325:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "325:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "325:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "298:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "307:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "294:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "294:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "319:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "290:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "290:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "287:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "358:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "374:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "368:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "368:16:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "358:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "243:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "254:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "266:6:77",
                        "type": ""
                      }
                    ],
                    "src": "196:194:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "612:567:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "659:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "668:6:77"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "676:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "661:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "661:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "661:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "633:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "642:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "629:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "629:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "654:3:77",
                                "type": "",
                                "value": "288"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "625:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "625:33:77"
                          },
                          "nodeType": "YulIf",
                          "src": "622:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "694:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "710:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "704:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "704:16:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "694:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "729:59:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "773:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "784:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "769:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "769:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "739:29:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "739:49:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "729:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "797:59:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "841:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "852:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "837:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "837:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "807:29:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "807:49:77"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "797:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "865:59:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "909:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "920:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "905:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "905:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "875:29:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "875:49:77"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "865:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "933:60:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "977:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "988:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "973:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "973:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "943:29:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "943:50:77"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "933:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1002:36:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1022:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1033:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1018:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1018:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1012:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1012:26:77"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "1002:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1047:36:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1067:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1078:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1063:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1063:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1057:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1057:26:77"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "1047:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1092:36:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1112:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1123:3:77",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1108:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1108:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1102:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1102:26:77"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "1092:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1137:36:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1157:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1168:3:77",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1153:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1153:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1147:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1147:26:77"
                          },
                          "variableNames": [
                            {
                              "name": "value8",
                              "nodeType": "YulIdentifier",
                              "src": "1137:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_addresst_addresst_addresst_addresst_uint256t_uint256t_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "514:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "525:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "537:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "545:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "553:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "561:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "569:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "577:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "585:6:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "593:6:77",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "601:6:77",
                        "type": ""
                      }
                    ],
                    "src": "395:784:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1313:175:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1323:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1335:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1346:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1331:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1331:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1323:4:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1358:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1376:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1381:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1372:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1372:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1385:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1368:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1368:19:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1362:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1403:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1418:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1426:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1414:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1414:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1396:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1396:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1396:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1450:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1461:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1446:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1446:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1470:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1478:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1466:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1466:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1439:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1439:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1439:43:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1274:9:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1285:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1293:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1304:4:77",
                        "type": ""
                      }
                    ],
                    "src": "1184:304:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1667:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1684:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1695:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1677:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1677:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1677:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1718:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1729:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1714:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1714:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1734:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1707:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1707:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1707:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1757:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1768:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1753:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1753:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1773:28:77",
                                "type": "",
                                "value": "CCBurnRouter: zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1746:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1746:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1746:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1811:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1823:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1834:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1819:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1819:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1811:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d51a1c1087121d0b0ced3a7488a6c8c12aa9960fbc2bff1b1f2e10d08944840__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1644:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1658:4:77",
                        "type": ""
                      }
                    ],
                    "src": "1493:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2022:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2039:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2050:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2032:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2032:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2032:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2073:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2084:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2069:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2069:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2089:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2062:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2062:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2062:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2112:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2123:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2108:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2108:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2128:28:77",
                                "type": "",
                                "value": "CCBurnRouter: low deadline"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2101:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2101:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2101:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2166:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2178:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2189:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2174:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2174:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2166:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2bb597245ff28b5b02e37cfcd82a8f8206b6656a92188202be220ba0d66c3994__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1999:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2013:4:77",
                        "type": ""
                      }
                    ],
                    "src": "1848:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2377:179:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2394:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2405:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2387:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2387:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2387:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2428:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2439:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2424:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2424:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2444:2:77",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2417:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2417:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2417:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2467:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2478:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2463:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2463:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2483:31:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid btc fee"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2456:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2456:59:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2456:59:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2524:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2536:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2547:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2532:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2532:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2524:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_81c6996717fe749150fc854bb7f6786e6cd03398f0991f7c08bc43f80025aedc__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2354:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2368:4:77",
                        "type": ""
                      }
                    ],
                    "src": "2203:353:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2735:178:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2752:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2763:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2745:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2745:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2745:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2786:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2797:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2782:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2782:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2802:2:77",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2775:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2775:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2775:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2825:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2836:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2821:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2821:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2841:30:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid reward"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2814:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2814:58:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2814:58:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2881:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2893:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2904:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2889:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2889:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2881:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ca02a5f8e28dff006ae98bf24a68419cbc701fa52ca60cda1d31f697659de0f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2712:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2726:4:77",
                        "type": ""
                      }
                    ],
                    "src": "2561:352:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3092:175:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3109:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3120:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3102:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3102:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3102:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3143:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3154:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3139:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3139:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3159:2:77",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3132:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3132:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3132:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3182:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3193:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3178:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3178:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3198:27:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid fee"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3171:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3171:55:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3171:55:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3235:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3247:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3258:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3243:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3243:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3235:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_eb9b10f896edba34f7480c6937b74b82a142d56eda1e960f5163a38d5f0591cd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3069:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3083:4:77",
                        "type": ""
                      }
                    ],
                    "src": "2918:349:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3401:119:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3411:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3423:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3434:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3419:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3419:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3411:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3453:9:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3464:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3446:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3446:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3446:25:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3491:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3502:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3487:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3487:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3507:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3480:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3480:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3480:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3362:9:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3373:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3381:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3392:4:77",
                        "type": ""
                      }
                    ],
                    "src": "3272:248:77"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_addresst_addresst_addresst_addresst_uint256t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(value4, value4) }\n        value0 := mload(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_address_fromMemory(add(headStart, 128))\n        value5 := mload(add(headStart, 160))\n        value6 := mload(add(headStart, 192))\n        value7 := mload(add(headStart, 224))\n        value8 := mload(add(headStart, 256))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_0d51a1c1087121d0b0ced3a7488a6c8c12aa9960fbc2bff1b1f2e10d08944840__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2bb597245ff28b5b02e37cfcd82a8f8206b6656a92188202be220ba0d66c3994__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: low deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_81c6996717fe749150fc854bb7f6786e6cd03398f0991f7c08bc43f80025aedc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid btc fee\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ca02a5f8e28dff006ae98bf24a68419cbc701fa52ca60cda1d31f697659de0f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid reward\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_eb9b10f896edba34f7480c6937b74b82a142d56eda1e960f5163a38d5f0591cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid fee\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}",
              "id": 77,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {
            "contracts/libraries/RelayHelper.sol": {
              "RelayHelper": [
                {
                  "length": 20,
                  "start": 7064
                },
                {
                  "length": 20,
                  "start": 8821
                }
              ]
            }
          },
          "object": "60806040523480156200001157600080fd5b506040516200677a3803806200677a8339810160408190526200003491620006d6565b6200003f33620000af565b6001805560028990556200005388620000ff565b6200005e87620001b5565b620000698662000267565b620000748562000319565b6200007f84620003cb565b6200008a83620004e1565b620000958262000576565b620000a0816200060b565b50505050505050505062000763565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b806001600160a01b0381166200014b5760405162461bcd60e51b815260206004820152601a60248201526000805160206200675a83398151915260448201526064015b60405180910390fd5b600354604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116620001fd5760405162461bcd60e51b815260206004820152601a60248201526000805160206200675a833981519152604482015260640162000142565b600454604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116620002af5760405162461bcd60e51b815260206004820152601a60248201526000805160206200675a833981519152604482015260640162000142565b600654604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116620003615760405162461bcd60e51b815260206004820152601a60248201526000805160206200675a833981519152604482015260640162000142565b600554604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b60035460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156200041157600080fd5b505afa15801562000426573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044c9190620006bd565b90508082116200049f5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a206c6f7720646561646c696e65000000000000604482015260640162000142565b60075460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600755565b806127101015620005355760405162461bcd60e51b815260206004820152601960248201527f43434275726e526f757465723a20696e76616c69642066656500000000000000604482015260640162000142565b60085460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600855565b806127101015620005ca5760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c69642072657761726400000000604482015260640162000142565b60095460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600955565b600a5460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a18061271010156200069b5760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a20696e76616c69642062746320666565000000604482015260640162000142565b600a55565b80516001600160a01b0381168114620006b857600080fd5b919050565b600060208284031215620006cf578081fd5b5051919050565b60008060008060008060008060006101208a8c031215620006f5578485fd5b895198506200070760208b01620006a0565b97506200071760408b01620006a0565b96506200072760608b01620006a0565b95506200073760808b01620006a0565b945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b615fe780620007736000396000f3fe6080604052600436106101d15760003560e01c80638d3d78cd116100f7578063bed6a60211610095578063ea73263711610064578063ea73263714610520578063f0f4426014610533578063f2fde38b14610553578063f47e224014610573576101d8565b8063bed6a602146104b7578063c780c03f146104cd578063c805f68b146104e0578063cdbe374114610500576101d8565b8063930a60e8116100d1578063930a60e814610434578063b14d353214610461578063b59589d114610481578063b74d0d35146104a1576101d8565b80638d3d78cd146103d65780638d774f8e146103f65780638da5cb5b14610416576101d8565b80635c4f5f3e1161016f57806373532b2a1161013e57806373532b2a146103565780637ed55748146103765780637f0f1817146103965780637ffe9a92146103b6576101d8565b80635c4f5f3e146102eb57806361d027b31461030b57806370872aa51461032b578063715018a614610341576101d8565b80631e236168116101ab5780631e23616814610255578063419cba7f1461029557806343149dba146102ab5780634782bc36146102cb576101d8565b80630e5811a8146101dd5780631812adb6146101f45780631876dec41461021d576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b506101f26105a7565b005b34801561020057600080fd5b5061020a60085481565b6040519081526020015b60405180910390f35b34801561022957600080fd5b5060045461023d906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b34801561026157600080fd5b5061028561027036600461558a565b600d6020526000908152604090205460ff1681565b6040519015158152602001610214565b3480156102a157600080fd5b5061020a60095481565b3480156102b757600080fd5b506101f26102c636600461589e565b6106a4565b3480156102d757600080fd5b506101f26102e636600461558a565b61088f565b3480156102f757600080fd5b506101f261030636600461558a565b6108c5565b34801561031757600080fd5b5060065461023d906001600160a01b031681565b34801561033757600080fd5b5061020a60025481565b34801561034d57600080fd5b506101f26108f8565b34801561036257600080fd5b506102856103713660046156df565b610924565b34801561038257600080fd5b506101f261039136600461558a565b611074565b3480156103a257600080fd5b506101f26103b1366004615369565b6110a7565b3480156103c257600080fd5b506102856103d136600461549d565b6110da565b3480156103e257600080fd5b5060055461023d906001600160a01b031681565b34801561040257600080fd5b506101f26104113660046153a1565b611132565b34801561042257600080fd5b506000546001600160a01b031661023d565b34801561044057600080fd5b5061020a61044f366004615369565b600c6020526000908152604090205481565b34801561046d57600080fd5b506101f261047c366004615369565b6111ea565b34801561048d57600080fd5b5060035461023d906001600160a01b031681565b3480156104ad57600080fd5b5061020a600a5481565b3480156104c357600080fd5b5061020a60075481565b6102856104db366004615744565b61121d565b3480156104ec57600080fd5b506101f26104fb366004615369565b611839565b34801561050c57600080fd5b506101f261051b36600461558a565b61186c565b61028561052e3660046155ba565b61189f565b34801561053f57600080fd5b506101f261054e366004615369565b611c0d565b34801561055f57600080fd5b506101f261056e366004615369565b611c40565b34801561057f57600080fd5b5061059361058e36600461549d565b611cd8565b604051610214989796959493929190615c81565b60035460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062491906155a2565b905060075481111561067d5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a206c6f7720646561646c696e6500000000000060448201526064015b60405180910390fd5b600061068a826002615e60565b610695906001615db6565b90506106a081611dd5565b5050565b600260015414156106c75760405162461bcd60e51b815260040161067490615c4a565b60026001556005546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101889052606401602060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906154c8565b506000806107758787878787611ee5565b6001600160a01b0381166000908152600b602052604090208054929450909250906107a290600190615ea8565b815481106107c057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600401546107d93390565b6001600160a01b038381166000908152600b60205260408120805493909216927fc19dabf19fdfd8c6124bed2178a4564d0c5d5812bfb916777cc90d1b53ed5a5a928b928b92909182918f918b918b919061083690600190615ea8565b8154811061085457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161087a989796959493929190615ad1565b60405180910390a35050600180555050505050565b6000546001600160a01b031633146108b95760405162461bcd60e51b815260040161067490615bd4565b6108c2816121f4565b50565b6000546001600160a01b031633146108ef5760405162461bcd60e51b815260040161067490615bd4565b6108c281611dd5565b6000546001600160a01b031633146109225760405162461bcd60e51b815260040161067490615bd4565b565b6000600260015414156109495760405162461bcd60e51b815260040161067490615c4a565b60026001556004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa39161097f918891889101615a86565b60206040518083038186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906154c8565b6109eb5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526000926001600160a01b039092169163c4d10b6a91610a1f918991899101615a86565b60206040518083038186803b158015610a3757600080fd5b505afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190615385565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac157600080fd5b505afa158015610ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af991906155a2565b905060005b8451811015611064576001600160a01b0383166000908152600b602052604090208551869083908110610b4157634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610b6757634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615610bcb5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20616c726561647920706169640000000000006044820152606401610674565b6001600160a01b0383166000908152600b602052604090208551839190879084908110610c0857634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610c2e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410610c5d5760405162461bcd60e51b815260040161067490615c09565b6001600160a01b0383166000908152600b60205260409020855160019190879084908110610c9b57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610cc157634e487b7160e01b600052603260045260246000fd5b60009182526020808320600792909202909101600501805460ff1916931515939093179092556004546009546001600160a01b038781168452600b909452604090922088519390911692631697565b928792612710928b9088908110610d3757634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610d5d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154610d799190615e60565b610d839190615e40565b336001600160a01b0388166000908152600b602052604090208a518b9088908110610dbe57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610de457634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154600b60008a6001600160a01b03166001600160a01b031681526020019081526020016000208b8881518110610e3b57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610e6157634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c91906154c8565b506001600160a01b0383166000818152600b602052604090208651879084908110610f4757634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610f6d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160020160009054906101000a90046001600160a01b03166001600160a01b03167f58c23b4ae0617be275628875bcfd65759a441263099a256eeb27899fb5dd846d8989600b6000896001600160a01b03166001600160a01b031681526020019081526020016000208a878151811061100357634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061102957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161104a93929190615a9a565b60405180910390a38061105c81615f47565b915050610afe565b5050600180805595945050505050565b6000546001600160a01b0316331461109e5760405162461bcd60e51b815260040161067490615bd4565b6108c281612287565b6000546001600160a01b031633146110d15760405162461bcd60e51b815260040161067490615bd4565b6108c28161231a565b6001600160a01b0382166000908152600b6020526040812080548390811061111257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1690505b92915050565b600260015414156111555760405162461bcd60e51b815260040161067490615c4a565b6002600155600061116b8c8c8c8c8c8c8c6123ab565b90506111d88b8b600081811061119157634e487b7160e01b600052603260045260246000fd5b90506020020135898960008181106111b957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906111ce9190615369565b83888888886127f8565b50506001805550505050505050505050565b6000546001600160a01b031633146112145760405162461bcd60e51b815260040161067490615bd4565b6108c28161291f565b6000600260015414156112425760405162461bcd60e51b815260040161067490615c4a565b600260018190558951148015611259575083516002145b8015611266575081516003145b6112b25760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a2077726f6e6720696e707574730000000000006044820152606401610674565b600254826002815181106112d657634e487b7160e01b600052603260045260246000fd5b602002602001015110156113285760405162461bcd60e51b815260206004820152601960248201527810d0d09d5c9b949bdd5d195c8e881bdb19081c995c5d595cdd603a1b6044820152606401610674565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa391611357918e9101615abe565b60206040518083038186803b15801561136f57600080fd5b505afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a791906154c8565b6113c35760405162461bcd60e51b815260040161067490615b9d565b60006114218a6000815181106113e957634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8860008151811061141457634e487b7160e01b600052603260045260246000fd5b60200260200101516129b0565b905073__$f78472418b29d5d2fb49b19dc055a858ae$__637ebc2327600360009054906101000a90046001600160a01b0316838660028151811061147557634e487b7160e01b600052603260045260246000fd5b6020026020010151888860018151811061149f57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518663ffffffff1660e01b81526004016114c7959493929190615a06565b60206040518083038186803b1580156114df57600080fd5b505af41580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906154c8565b6115635760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a206e6f742066696e616c697a656400000000006044820152606401610674565b6000818152600d602052604090205460ff16156115c25760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20616c726561647920757365640000000000006044820152606401610674565b6000818152600d60205260408120805460ff1916600117905583518190611610908c908790849061160357634e487b7160e01b600052603260045260246000fd5b6020026020010151612aa6565b915091506116638c60018151811061163857634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a60018151811061141457634e487b7160e01b600052603260045260246000fd5b82146116b15760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a2077726f6e67206f75747075742074780000006044820152606401610674565b8c5160208e01206116c28983612b55565b80519060200120146117165760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a206e6f7420666f72206c6f636b6572000000006044820152606401610674565b8460028151811061173757634e487b7160e01b600052603260045260246000fd5b602002602001015160075461174c9190615db6565b600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561179a57600080fd5b505afa1580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d291906155a2565b116117ef5760405162461bcd60e51b815260040161067490615c09565b6118238a8e858860028151811061181657634e487b7160e01b600052603260045260246000fd5b6020026020010151612bc9565b505060018080559b9a5050505050505050505050565b6000546001600160a01b031633146118635760405162461bcd60e51b815260040161067490615bd4565b6108c281612d94565b6000546001600160a01b031633146118965760405162461bcd60e51b815260040161067490615bd4565b6108c281612e25565b6000600260015414156118c45760405162461bcd60e51b815260040161067490615c4a565b60026001819055548710156119175760405162461bcd60e51b815260206004820152601960248201527810d0d09d5c9b949bdd5d195c8e881bdb19081c995c5d595cdd603a1b6044820152606401610674565b6001600160e01b031988161561196f5760405162461bcd60e51b815260206004820181905260248201527f43434275726e526f757465723a206e6f6e2d7a65726f206c6f636b2074696d656044820152606401610674565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa39161199e91889101615abe565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906154c8565b611a0a5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526000926001600160a01b039092169163c4d10b6a91611a3c91899101615abe565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190615385565b90508251845114611adf5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720696e646578657300000000006044820152606401610674565b6000611aed8d8d8d8d6129b0565b600354604051637ebc232760e01b815291925073__$f78472418b29d5d2fb49b19dc055a858ae$__91637ebc232791611b3c916001600160a01b039091169085908e908e908e90600401615a06565b60206040518083038186803b158015611b5457600080fd5b505af4158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c91906154c8565b611bd85760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a206e6f742066696e616c697a656400000000006044820152606401610674565b6000611be8828b858f8a8a612eb8565b9050611bf6818d89856133e7565b505060018080559c9b505050505050505050505050565b6000546001600160a01b03163314611c375760405162461bcd60e51b815260040161067490615bd4565b6108c281613470565b6000546001600160a01b03163314611c6a5760405162461bcd60e51b815260040161067490615bd4565b6001600160a01b038116611ccf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610674565b6108c281613501565b600b6020528160005260406000208181548110611cf457600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611d3090615f12565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5c90615f12565b8015611da95780601f10611d7e57610100808354040283529160200191611da9565b820191906000526020600020905b815481529060010190602001808311611d8c57829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b60035460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b158015611e1a57600080fd5b505afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5291906155a2565b9050808211611ea35760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a206c6f7720646561646c696e650000000000006044820152606401610674565b60075460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600755565b600080611ef28686613551565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa391611f23918891889101615a86565b60206040518083038186803b158015611f3b57600080fd5b505afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7391906154c8565b611f8f5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526001600160a01b039091169163c4d10b6a91611fc0918891889101615a86565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190615385565b9050600061201d8861364a565b6005546004805460405163095ea7b360e01b81526001600160a01b03918216928101929092526024820184905292935091169063095ea7b390604401602060405180830381600087803b15801561207357600080fd5b505af1158015612087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ab91906154c8565b5080600a54826120bb9190615ea8565b600480546040516338463cff60e01b81526001600160a01b03909116916338463cff916120ee918b918b91899101615a9a565b602060405180830381600087803b15801561210857600080fd5b505af115801561211c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214091906155a2565b61214a9190615e60565b6121549190615e40565b92506121e988848989600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ab57600080fd5b505afa1580156121bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e391906155a2565b87613771565b509550959350505050565b8061271010156122465760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420726577617264000000006044820152606401610674565b60095460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600955565b8061271010156122d95760405162461bcd60e51b815260206004820152601960248201527f43434275726e526f757465723a20696e76616c696420666565000000000000006044820152606401610674565b60085460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600855565b806001600160a01b0381166123415760405162461bcd60e51b815260040161067490615b2f565b600554604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031684846123c7600182615ea8565b8181106123e457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123f99190615369565b6001600160a01b03161461244f5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20696e76616c696420706174680000000000006044820152606401610674565b6002861461249f5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720616d6f756e747300000000006044820152606401610674565b838360008181106124c057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906124d59190615369565b6001600160a01b03166323b872dd33308a8a600081811061250657634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401602060405180830381600087803b15801561255d57600080fd5b505af1158015612571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259591906154c8565b50838360008181106125b757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906125cc9190615369565b6001600160a01b031663095ea7b389898960008181106125fc57634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401602060405180830381600087803b15801561264b57600080fd5b505af115801561265f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268391906154c8565b50600080896001600160a01b031663b0bbcd888a8a60008181106126b757634e487b7160e01b600052603260045260246000fd5b905060200201358b8b60018181106126df57634e487b7160e01b600052603260045260246000fd5b905060200201358989308a8e6040518863ffffffff1660e01b815260040161270d9796959493929190615ce4565b600060405180830381600087803b15801561272757600080fd5b505af115801561273b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261276391908101906154e4565b91509150816127b45760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a2065786368616e6765206661696c65640000006044820152606401610674565b80600182516127c39190615ea8565b815181106127e157634e487b7160e01b600052603260045260246000fd5b602002602001015192505050979650505050505050565b6000806128088787878787611ee5565b6001600160a01b0381166000908152600b6020526040902080549294509092509061283590600190615ea8565b8154811061285357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015461286c3390565b6001600160a01b038381166000908152600b60205260409020805492909116917fc19dabf19fdfd8c6124bed2178a4564d0c5d5812bfb916777cc90d1b53ed5a5a918a918a918f918f918f918b918b916128c890600190615ea8565b815481106128e657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161290c989796959493929190615ad1565b60405180910390a3505050505050505050565b806001600160a01b0381166129465760405162461bcd60e51b815260040161067490615b2f565b600454604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000806002868686866040516020016129cc9493929190615997565b60408051601f19818403018152908290526129e6916159ea565b602060405180830381855afa158015612a03573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a2691906155a2565b90506000600282604051602001612a3f91815260200190565b60408051601f1981840301815290829052612a59916159ea565b602060405180830381855afa158015612a76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a9991906155a2565b925050505b949350505050565b60008080612abc612ab78683613939565b61395d565b905062ffffff198082161415612b145760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610674565b6000612b208286613a93565b90506000612b2d82613bb1565b9050612b3881613bd5565b9450612b4381613bf7565b63ffffffff1693505050509250929050565b60606000612b6d612b68825b8690613939565b613c21565b905062ffffff198082161415612b955760405162461bcd60e51b815260040161067490615b66565b6000612ba18285613d12565b90506000612bae82613e0c565b9050612bbf62ffffff198216613e5d565b9695505050505050565b6000612bd485613ead565b6004805460405163626885b560e11b81526001600160401b039390931693506000926001600160a01b039091169163c4d10b6a91612c1491899101615abe565b60206040518083038186803b158015612c2c57600080fd5b505afa158015612c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c649190615385565b6004546009549192506001600160a01b03169063b734de2690839061271090612c8d9087615e60565b612c979190615e40565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612cf057600080fd5b505af1158015612d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2891906154c8565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060095488612d5f9190615e60565b612d699190615e40565b612d739088615db6565b604051612d84959493929190615a45565b60405180910390a1505050505050565b806001600160a01b038116612dbb5760405162461bcd60e51b815260040161067490615b2f565b600354604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b600a5460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a1806127101015612eb35760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a20696e76616c696420627463206665650000006044820152606401610674565b600a55565b60008080805b85518110156133da5780612efb57848181518110612eec57634e487b7160e01b600052603260045260246000fd5b60200260200101519150612fa8565b81858281518110612f1c57634e487b7160e01b600052603260045260246000fd5b602002602001015111612f7d5760405162461bcd60e51b8152602060048201526024808201527f43434275726e526f757465723a20756e2d736f7274656420766f757420696e646044820152636578657360e01b6064820152608401610674565b848181518110612f9d57634e487b7160e01b600052603260045260246000fd5b602002602001015191505b6000868281518110612fca57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600b60008a6001600160a01b03166001600160a01b03168152602001908152602001600020818154811061301857634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615801561308757506001600160a01b0389166000908152600b6020526040902080548b91908390811061307257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b156133c757613232888784815181106130b057634e487b7160e01b600052603260045260246000fd5b6020026020010151600b60008d6001600160a01b03166001600160a01b0316815260200190815260200160002084815481106130fc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600301805461311890615f12565b80601f016020809104026020016040519081016040528092919081815260200182805461314490615f12565b80156131915780601f1061316657610100808354040283529160200191613191565b820191906000526020600020905b81548152906001019060200180831161317457829003601f168201915b5050506001600160a01b038f166000908152600b60205260409020805490925087915081106131d057634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff16600481111561320e57634e487b7160e01b600052602160045260246000fd5b600481111561322d57634e487b7160e01b600052602160045260246000fd5b613f47565b6001600160401b0316935083600b60008b6001600160a01b03166001600160a01b03168152602001908152602001600020828154811061328257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016001015414156133c7576001600160a01b0389166000908152600b60205260409020805460019190839081106132d657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055613303856001615db6565b6001600160a01b038a166000818152600b60205260409020805492975090917f1b46655c2f394f2191cb246d5982dbe00ad671f0b590e75e97c90ee97f1f782a91908490811061336357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548d89868151811061339657634e487b7160e01b600052603260045260246000fd5b60200260200101516040516133be939291909283526020830191909152604082015260600190565b60405180910390a25b50806133d281615f47565b915050612ebe565b5050509695505050505050565b60006133f38484614182565b6001600160401b03169050600061340985614285565b90508115801590613423575080613421876001615db6565b145b15613446576000838152600d60205260409020805460ff19166001179055613468565b80861415613468576000838152600d60205260409020805460ff191660011790555b505050505050565b806001600160a01b0381166134975760405162461bcd60e51b815260040161067490615b2f565b600654604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600481111561357357634e487b7160e01b600052602160045260246000fd5b148061359e5750600481600481111561359c57634e487b7160e01b600052602160045260246000fd5b145b156135f95781516020146135f45760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420736372697074000000006044820152606401610674565b6106a0565b81516014146106a05760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420736372697074000000006044820152606401610674565b6000806127106008548461365e9190615e60565b6136689190615e40565b9050600a5460026136799190615e60565b6136839082615db6565b83116136d15760405162461bcd60e51b815260206004820152601860248201527f43434275726e526f757465723a206c6f7720616d6f756e7400000000000000006044820152606401610674565b60006136dd8285615ea8565b60055460065460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb90604401602060405180830381600087803b15801561372f57600080fd5b505af1158015613743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376791906154c8565b509150505b919050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e083019190915288825260208201889052339282019290925260608101869052908460048111156137d557634e487b7160e01b600052602160045260246000fd5b908160048111156137f657634e487b7160e01b600052602160045260246000fd5b9052506007546138069084615db6565b6080820152600060a082018190526001600160a01b038316808252600c6020818152604084205460e0860181905292909352909152613846906001615db6565b6001600160a01b038381166000908152600c6020908152604080832094909455600b81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b03191691909316179091556060830151805184936138c69260038501929101906150de565b50608082015160048281019190915560a083015160058301805460ff19169115159190911780825560c08501519261ff00199091169061010090849081111561391f57634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b81516000906020840161395464ffffffffff851682846142b1565b95945050505050565b60008181613973815b62ffffff198416906142f8565b50601884901c6001600160601b03166139935762ffffff195b9250613a8c565b60006139a08560006143d2565b9050601885901c6001600160601b03166001600160401b0382166139cd5762ffffff195b94505050613a8c565b60006139d883614519565b60ff16905060005b836001600160401b0316811015613a5457828210613a095762ffffff195b965050505050613a8c565b6000613a29613a188486615ea8565b60055b62ffffff198c169190614572565b9050613a34816145a6565b613a3e9084615db6565b9250508080613a4c90615f47565b9150506139e0565b50818114613a6c5762ffffff195b9550505050613a8c565b613a8660065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b6000826006613aa181613966565b506000613aaf8660006143d2565b6001600160401b03169050601886901c6001600160601b0316818610613b0a5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610674565b6000613b1583614519565b60ff1690506000805b88811015613b6d57613b44613b338486615ea8565b60055b62ffffff198d169190614572565b9150613b4f826145a6565b613b599084615db6565b9250613b66600182615db6565b9050613b1e565b50613b7b613a188385615ea8565b90506000613b88826145a6565b9050613ba1838260045b62ffffff198e169291906145fa565b975050505050505b505092915050565b6000816004613bbf81613966565b50612a9e62ffffff1985166000602460036145fa565b6000816003613be381613966565b50612a9e62ffffff1985166000602061466a565b6000816003613c0581613966565b50612a9e613c1c62ffffff198616602060046147c3565b61490d565b60008181613c2e81613966565b50601884901c6001600160601b0316613c4b5762ffffff1961398c565b6000613c588560006143d2565b9050601885901c6001600160601b03166001600160401b038216613c805762ffffff196139c4565b6000613c8b83614519565b60ff16905060005b836001600160401b0316811015613cf657828210613cb55762ffffff196139fe565b6000613ccb613cc48486615ea8565b600e613a1b565b9050613cd681614976565b613ce09084615db6565b9250508080613cee90615f47565b915050613c93565b50818114613d085762ffffff19613a62565b613a86600f613a72565b600082600f613d2081613966565b506000613d2e8660006143d2565b6001600160401b03169050601886901c6001600160601b0316818610613d8a5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610674565b6000613d9583614519565b60ff1690506000805b88811015613de357613dba613db38486615ea8565b600e613b36565b9150613dc582614976565b613dcf9084615db6565b9250613ddc600182615db6565b9050613d9e565b50613df1613cc48385615ea8565b90506000613dfe82614976565b9050613ba18382600d613b92565b600081600d613e1a81613966565b506000613e288560086143d2565b9050613954613e3682614519565b613e41906008615df9565b62ffffff1987169060ff166001600160401b03841660076145fa565b6060600080613e758460181c6001600160601b031690565b60405193508392506001600160601b03169050613e9c84613e97846020615db6565b6149bf565b508181016020016040529052919050565b600080613ebf612b68825b8590613939565b905062ffffff198082161415613ee75760405162461bcd60e51b815260040161067490615b66565b600080613ef58360006143d2565b6001600160401b0316905060005b81811015613f3e57613f158482613d12565b9250613f2083614b17565b613f2a9086615dce565b945080613f3681615f47565b915050613f03565b50505050919050565b600080613f57612b688783613939565b905062ffffff198082161415613f7f5760405162461bcd60e51b815260040161067490615b66565b6000613f8b8287613d12565b90506000613f9882613e0c565b90506000856004811115613fbc57634e487b7160e01b600052602160045260246000fd5b141561402157613fd562ffffff1982166001602061466a565b604051602001613fe791815260200190565b6040516020818303038152906040528051906020012086805190602001201461401157600061401a565b61401a82614b17565b9350614177565b600185600481111561404357634e487b7160e01b600052602160045260246000fd5b14156140825761405a62ffffff1982166003614b3c565b604051602001613fe7919060609190911b6bffffffffffffffffffffffff1916815260140190565b60028560048111156140a457634e487b7160e01b600052602160045260246000fd5b14156140bb5761405a62ffffff1982166002614b3c565b60038560048111156140dd57634e487b7160e01b600052602160045260246000fd5b14156140f45761405a62ffffff1982166002614b3c565b600485600481111561411657634e487b7160e01b600052602160045260246000fd5b14156141775761412f62ffffff1982166002602061466a565b60405160200161414191815260200190565b6040516020818303038152906040528051906020012086805190602001201461416b576000614174565b61417482614b17565b93505b505050949350505050565b600080614191612b6882612b61565b905062ffffff1980821614156141b95760405162461bcd60e51b815260040161067490615b66565b60008060006141c98460006143d2565b6001600160401b0316905060005b8181101561427a576141e98582613d12565b93506141f484613e0c565b92508660405160200161420791906159ea565b6040516020818303038152906040528051906020012061422c8462ffffff1916613e5d565b60405160200161423c91906159ea565b6040516020818303038152906040528051906020012014156142685761426184614b17565b955061427a565b8061427281615f47565b9150506141d7565b505050505092915050565b600080614294612b6882613eb8565b90506142a18160006143d2565b6001600160401b03169392505050565b6000806142be8385615db6565b90506040518111156142ce575060005b806142e05762ffffff199150506142f1565b5050606083811b8317901b811760181b5b9392505050565b60006143048383614b4a565b6143cb5760006143236143178560d81c90565b64ffffffffff16614b6d565b91505060006143388464ffffffffff16614b6d565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016106749190615abe565b5090919050565b6000806143e762ffffff198516846001614c19565b905060fc8111614402576143fa81614c49565b91505061112c565b8060fd14156144685761443061442b61441c856001615db6565b62ffffff1987169060026147c3565b614c49565b915061443b82614519565b60ff166003146144635761446161445c62ffffff19861685600360006145fa565b614cb1565b505b614512565b8060fe14156144bd5761449161442b614482856001615db6565b62ffffff1987169060046147c3565b915061449c82614519565b60ff166005146144635761446161445c62ffffff19861685600560006145fa565b8060ff1415614512576144e661442b6144d7856001615db6565b62ffffff1987169060086147c3565b91506144f182614519565b60ff1660091461451257613ba961445c62ffffff19861685600960006145fa565b5092915050565b600060fc826001600160401b0316116145345750600161376c565b61ffff826001600160401b03161161454e5750600361376c565b63ffffffff826001600160401b03161161456a5750600561376c565b50600961376c565b6000612a9e848461458c8760181c6001600160601b031690565b6001600160601b031661459f9190615ea8565b85856145fa565b60008160056145b481613966565b5060006145c28560246143d2565b9050806001600160401b03166145d782614519565b60ff166145e49190615db6565b6145ef906024615db6565b613954906004615db6565b6000806146108660781c6001600160601b031690565b6001600160601b0316905061462486614d38565b8461462f8784615db6565b6146399190615db6565b111561464c5762ffffff19915050612a9e565b6146568582615db6565b9050612bbf8364ffffffffff1682866142b1565b600060ff821661467c575060006142f1565b61468f8460181c6001600160601b031690565b6001600160601b03166146a560ff841685615db6565b1115614709576146f06146c18560781c6001600160601b031690565b6001600160601b03166146dd8660181c6001600160601b031690565b6001600160601b0316858560ff16614d79565b60405162461bcd60e51b81526004016106749190615abe565b60208260ff1611156147835760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610674565b60088202600061479c8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000612a9e6147d385858561466a565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b600063ffffffff8211156149725760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610674565b5090565b600081600e61498481613966565b5060006149928560086143d2565b9050806001600160401b03166149a782614519565b60ff166149b49190615db6565b613954906008615db6565b600062ffffff198084161415614a285760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610674565b614a3183614ea3565b614a915760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610674565b6000614aa68460181c6001600160601b031690565b6001600160601b031690506000614ac68560781c6001600160601b031690565b6001600160601b031690506000604051905084811115614ae65760206060fd5b8285848460045afa50612bbf614afc8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600d614b2581613966565b50612a9e61442b62ffffff198616600060086147c3565b60006142f183836014614c19565b60008164ffffffffff16614b5e8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115614bcb576000614b8c826008615e7f565b60ff1685901c9050614b9d81614ee1565b61ffff16841793508160ff16601014614bb857601084901b93505b50614bc4600182615ebf565b9050614b73565b50600f5b60ff8160ff161015614c135760ff600882021684901c614bee81614ee1565b61ffff16831792508160ff16600014614c0957601083901b92505b5060001901614bcf565b50915091565b6000614c26826020615ebf565b614c31906008615e7f565b60ff16614c3f85858561466a565b901c949350505050565b60006001600160401b038211156149725760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610674565b60606000614ce5614ce082614cd2601887901c6001600160601b0316614f11565b62ffffff1987169190614c19565b614b6d565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d016143a0565b6000614d4d8260181c6001600160601b031690565b614d608360781c6001600160601b031690565b614d6a9190615e1e565b6001600160601b031692915050565b60606000614d8686614b6d565b9150506000614d9486614b6d565b9150506000614da286614b6d565b9150506000614db086614b6d565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000614eaf8260d81c90565b64ffffffffff1664ffffffffff1415614eca5750600061376c565b6000614ed583614d38565b60405110199392505050565b6000614ef360048360ff16901c614f72565b60ff161760081b62ffff0016614f0882614f72565b60ff1617919050565b600060ff8211156149725760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610674565b600060f08083179060ff82161415614f8e57603091505061376c565b8060ff1660f11415614fa457603191505061376c565b8060ff1660f21415614fba57603291505061376c565b8060ff1660f31415614fd057603391505061376c565b8060ff1660f41415614fe657603491505061376c565b8060ff1660f51415614ffc57603591505061376c565b8060ff1660f6141561501257603691505061376c565b8060ff1660f7141561502857603791505061376c565b8060ff1660f8141561503e57603891505061376c565b8060ff1660f9141561505457603991505061376c565b8060ff1660fa141561506a57606191505061376c565b8060ff1660fb141561508057606291505061376c565b8060ff1660fc141561509657606391505061376c565b8060ff1660fd14156150ac57606491505061376c565b8060ff1660fe14156150c257606591505061376c565b8060ff1660ff14156150d857606691505061376c565b50919050565b8280546150ea90615f12565b90600052602060002090601f01602090048101928261510c5760008555615152565b82601f1061512557805160ff1916838001178555615152565b82800160010185558215615152579182015b82811115615152578251825591602001919060010190615137565b506149729291505b80821115614972576000815560010161515a565b803561376c81615f8e565b60008083601f84011261518a578182fd5b5081356001600160401b038111156151a0578182fd5b60208301915083602080830285010111156151ba57600080fd5b9250929050565b600082601f8301126151d1578081fd5b813560206151e66151e183615d93565b615d63565b8281528181019085830183850287018401881015615202578586fd5b855b858110156152275761521582615299565b84529284019290840190600101615204565b5090979650505050505050565b600082601f830112615244578081fd5b813560206152546151e183615d93565b8281528181019085830183850287018401881015615270578586fd5b855b8581101561522757813584529284019290840190600101615272565b803561376c81615fa3565b80356001600160e01b03198116811461376c57600080fd5b60008083601f8401126152c2578182fd5b5081356001600160401b038111156152d8578182fd5b6020830191508360208285010111156151ba57600080fd5b600082601f830112615300578081fd5b81356001600160401b0381111561531957615319615f78565b61532c601f8201601f1916602001615d63565b818152846020838601011115615340578283fd5b816020850160208301379081016020019190915292915050565b80356005811061376c57600080fd5b60006020828403121561537a578081fd5b81356142f181615f8e565b600060208284031215615396578081fd5b81516142f181615f8e565b60008060008060008060008060008060006101008c8e0312156153c2578687fd5b6153cb8c61516e565b9a506001600160401b038060208e013511156153e5578788fd5b6153f58e60208f01358f01615179565b909b50995061540660408e0161528e565b98508060608e01351115615418578788fd5b6154288e60608f01358f01615179565b909850965060808d0135955060a08d0135811015615444578485fd5b6154548e60a08f01358f016152f0565b945061546260c08e0161535a565b93508060e08e01351115615474578283fd5b506154858d60e08e01358e016152b1565b81935080925050509295989b509295989b9093969950565b600080604083850312156154af578182fd5b82356154ba81615f8e565b946020939093013593505050565b6000602082840312156154d9578081fd5b81516142f181615fa3565b600080604083850312156154f6578182fd5b825161550181615fa3565b809250506020808401516001600160401b0381111561551e578283fd5b8401601f8101861361552e578283fd5b805161553c6151e182615d93565b81815283810190838501858402850186018a1015615558578687fd5b8694505b8385101561557a57805183526001949094019391850191850161555c565b5080955050505050509250929050565b60006020828403121561559b578081fd5b5035919050565b6000602082840312156155b3578081fd5b5051919050565b6000806000806000806000806000806101408b8d0312156155d9578384fd5b6155e28b615299565b995060208b01356001600160401b03808211156155fd578586fd5b6156098e838f016152f0565b9a5060408d013591508082111561561e578586fd5b61562a8e838f016152f0565b995061563860608e01615299565b985060808d0135975060a08d0135915080821115615654578586fd5b6156608e838f016152f0565b965060c08d0135955060e08d013591508082111561567c578485fd5b6156888e838f016152f0565b94506101008d013591508082111561569e578384fd5b6156aa8e838f01615234565b93506101208d01359150808211156156c0578283fd5b506156cd8d828e01615234565b9150509295989b9194979a5092959850565b6000806000604084860312156156f3578081fd5b83356001600160401b0380821115615709578283fd5b615715878388016152b1565b9095509350602086013591508082111561572d578283fd5b5061573a86828701615234565b9150509250925092565b60008060008060008060008060006101208a8c031215615762578283fd5b89356001600160401b0380821115615778578485fd5b6157848d838e016152f0565b9a5060208c0135915080821115615799578485fd5b6157a58d838e016151c1565b995060408c01359150808211156157ba578485fd5b6157c68d838e016152f0565b985060608c01359150808211156157db578485fd5b6157e78d838e016152f0565b975060808c01359150808211156157fc578485fd5b6158088d838e016152f0565b965060a08c013591508082111561581d578485fd5b6158298d838e016152f0565b955060c08c013591508082111561583e578485fd5b61584a8d838e016151c1565b945060e08c013591508082111561585f578384fd5b61586b8d838e016152f0565b93506101008c0135915080821115615881578283fd5b5061588e8c828d01615234565b9150509295985092959850929598565b6000806000806000608086880312156158b5578283fd5b8535945060208601356001600160401b03808211156158d2578485fd5b6158de89838a016152f0565b95506158ec6040890161535a565b94506060880135915080821115615901578283fd5b5061590e888289016152b1565b969995985093965092949392505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452615961816020860160208601615ee2565b601f01601f19169290920160200192915050565b6005811061599357634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b808716835285516159b9816004860160208a01615ee2565b8551908401906159d0816004840160208a01615ee2565b919094169301600481019390935250506008019392505050565b600082516159fc818460208701615ee2565b9190910192915050565b600060018060a01b038716825285602083015284604083015260a06060830152615a3360a0830185615949565b90508260808301529695505050505050565b6001600160a01b038616815260a060208201819052600090615a6990830187615949565b604083019590955250606081019290925260809091015292915050565b600060208252612a9e60208301848661591f565b600060408252615aae60408301858761591f565b9050826020830152949350505050565b6000602082526142f16020830184615949565b6000610100808352615ae58184018c615949565b915050615af5602083018a615975565b60408201979097526001600160a01b039586166060820152608081019490945260a084019290925290921660c082015260e0015292915050565b6020808252601a908201527f43434275726e526f757465723a207a65726f2061646472657373000000000000604082015260600190565b6020808252601b908201527f426974636f696e48656c7065723a20766f7574206973206e756c6c0000000000604082015260600190565b60208082526018908201527f43434275726e526f757465723a206e6f74206c6f636b65720000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f43434275726e526f757465723a20646561646c696e65206e6f742070617373656040820152601960fa1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b888152602081018890526001600160a01b038716604082015261010060608201819052600090615cb383820189615949565b91505085608083015284151560a0830152615cd160c0830185615975565b8260e08301529998505050505050505050565b878152602080820188905260c0604083018190528201869052600090879060e08401835b89811015615d36578335615d1b81615f8e565b6001600160a01b031682529282019290820190600101615d08565b506001600160a01b039790971660608501525050506080810192909252151560a090910152949350505050565b604051601f8201601f191681016001600160401b0381118282101715615d8b57615d8b615f78565b604052919050565b60006001600160401b03821115615dac57615dac615f78565b5060209081020190565b60008219821115615dc957615dc9615f62565b500190565b60006001600160401b03808316818516808303821115615df057615df0615f62565b01949350505050565b600060ff821660ff84168060ff03821115615e1657615e16615f62565b019392505050565b60006001600160601b03808316818516808303821115615df057615df0615f62565b600082615e5b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615e7a57615e7a615f62565b500290565b600060ff821660ff84168160ff0481118215151615615ea057615ea0615f62565b029392505050565b600082821015615eba57615eba615f62565b500390565b600060ff821660ff841680821015615ed957615ed9615f62565b90039392505050565b60005b83811015615efd578181015183820152602001615ee5565b83811115615f0c576000848401525b50505050565b600281046001821680615f2657607f821691505b602082108114156150d857634e487b7160e01b600052602260045260246000fd5b6000600019821415615f5b57615f5b615f62565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108c257600080fd5b80151581146108c257600080fdfea2646970667358221220f4e06622dd52fa7dbab4fc74fca75673ca437c4bfe932375e439f3c05dc5852964736f6c6343000802003343434275726e526f757465723a207a65726f2061646472657373000000000000",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x677A CODESIZE SUB DUP1 PUSH3 0x677A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x6D6 JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0xAF JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH1 0x2 DUP10 SWAP1 SSTORE PUSH3 0x53 DUP9 PUSH3 0xFF JUMP JUMPDEST PUSH3 0x5E DUP8 PUSH3 0x1B5 JUMP JUMPDEST PUSH3 0x69 DUP7 PUSH3 0x267 JUMP JUMPDEST PUSH3 0x74 DUP6 PUSH3 0x319 JUMP JUMPDEST PUSH3 0x7F DUP5 PUSH3 0x3CB JUMP JUMPDEST PUSH3 0x8A DUP4 PUSH3 0x4E1 JUMP JUMPDEST PUSH3 0x95 DUP3 PUSH3 0x576 JUMP JUMPDEST PUSH3 0xA0 DUP2 PUSH3 0x60B JUMP JUMPDEST POP POP POP POP POP POP POP POP POP PUSH3 0x763 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x14B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x675A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x4C28A3F61A715259C4DC930C23E7423B8FA52E13232C061A6E488729C66184F4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x1FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x675A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFA021C2EC0F46429A53E7F88B88065E40001F50C9D38B2E8B713BEAF9828D4C3 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x2AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x675A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x567657FA3F286518B318F4A29870674F433F622FDFC819691ACB13105B228225 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x361 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x675A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x36A4C08A38B736DCECB6C328DBA61238529620E83CCB23DB2CC43CD34EC26096 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA072BC5 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA072BC50 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x426 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x44C SWAP2 SWAP1 PUSH3 0x6BD JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT PUSH3 0x49F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720646561646C696E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x92C10A242CA42973030420E2EE32B3BA7818CC643F896958F620C606CF300416 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x7 SSTORE JUMP JUMPDEST DUP1 PUSH2 0x2710 LT ISZERO PUSH3 0x535 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642066656500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7D205F60891F60851C61CD244BA387D72B6589E7C0AC41B9D909AB0CE2C2A53B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x8 SSTORE JUMP JUMPDEST DUP1 PUSH2 0x2710 LT ISZERO PUSH3 0x5CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642072657761726400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xAA50B3683E42A13535A5B9C2C32780CCCF956FB546B523A3542AC4AD8B544F67 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x47C5F9C13C35EBB166F6A8D8C56AF73F8B323AC0FEE7AEC4A5E0490BBF67A4FE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 PUSH2 0x2710 LT ISZERO PUSH3 0x69B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642062746320666565000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x142 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x6CF JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x6F5 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP10 MLOAD SWAP9 POP PUSH3 0x707 PUSH1 0x20 DUP12 ADD PUSH3 0x6A0 JUMP JUMPDEST SWAP8 POP PUSH3 0x717 PUSH1 0x40 DUP12 ADD PUSH3 0x6A0 JUMP JUMPDEST SWAP7 POP PUSH3 0x727 PUSH1 0x60 DUP12 ADD PUSH3 0x6A0 JUMP JUMPDEST SWAP6 POP PUSH3 0x737 PUSH1 0x80 DUP12 ADD PUSH3 0x6A0 JUMP JUMPDEST SWAP5 POP PUSH1 0xA0 DUP11 ADD MLOAD SWAP4 POP PUSH1 0xC0 DUP11 ADD MLOAD SWAP3 POP PUSH1 0xE0 DUP11 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP11 ADD MLOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH2 0x5FE7 DUP1 PUSH3 0x773 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8D3D78CD GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xBED6A602 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEA732637 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEA732637 EQ PUSH2 0x520 JUMPI DUP1 PUSH4 0xF0F44260 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0xF47E2240 EQ PUSH2 0x573 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0xBED6A602 EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0xC780C03F EQ PUSH2 0x4CD JUMPI DUP1 PUSH4 0xC805F68B EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0xCDBE3741 EQ PUSH2 0x500 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x930A60E8 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x930A60E8 EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0xB14D3532 EQ PUSH2 0x461 JUMPI DUP1 PUSH4 0xB59589D1 EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xB74D0D35 EQ PUSH2 0x4A1 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x8D3D78CD EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x8D774F8E EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x416 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x5C4F5F3E GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x73532B2A GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x73532B2A EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x7ED55748 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x7F0F1817 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x7FFE9A92 EQ PUSH2 0x3B6 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x5C4F5F3E EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x70872AA5 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x341 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x1E236168 GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x1E236168 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x419CBA7F EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x43149DBA EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x4782BC36 EQ PUSH2 0x2CB JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0xE5811A8 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x1812ADB6 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x1876DEC4 EQ PUSH2 0x21D JUMPI PUSH2 0x1D8 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1D8 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x5A7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x589E JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x88F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x8C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x8F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x371 CALLDATASIZE PUSH1 0x4 PUSH2 0x56DF JUMP JUMPDEST PUSH2 0x924 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x1074 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x10A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x549D JUMP JUMPDEST PUSH2 0x10DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x53A1 JUMP JUMPDEST PUSH2 0x1132 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH2 0x44F CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x11EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x285 PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x5744 JUMP JUMPDEST PUSH2 0x121D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x1839 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x51B CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x186C JUMP JUMPDEST PUSH2 0x285 PUSH2 0x52E CALLDATASIZE PUSH1 0x4 PUSH2 0x55BA JUMP JUMPDEST PUSH2 0x189F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x1C0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x56E CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x1C40 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x593 PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x549D JUMP JUMPDEST PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5C81 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA072BC5 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA072BC50 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x600 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x624 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x7 SLOAD DUP2 GT ISZERO PUSH2 0x67D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720646561646C696E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x68A DUP3 PUSH1 0x2 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x695 SWAP1 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x6A0 DUP2 PUSH2 0x1DD5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x740 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x764 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x775 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EE5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP5 POP SWAP1 SWAP3 POP SWAP1 PUSH2 0x7A2 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x7C0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD PUSH2 0x7D9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP4 SWAP1 SWAP3 AND SWAP3 PUSH32 0xC19DABF19FDFD8C6124BED2178A4564D0C5D5812BFB916777CC90D1B53ED5A5A SWAP3 DUP12 SWAP3 DUP12 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 DUP16 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 PUSH2 0x836 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x854 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x87A SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x21F4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x1DD5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x922 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x949 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x97F SWAP2 DUP9 SWAP2 DUP9 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9CF SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x9EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0xA1F SWAP2 DUP10 SWAP2 DUP10 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA6F SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F796D90 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAF9 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1064 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD DUP7 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xB41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xB67 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 PUSH1 0x7 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20616C72656164792070616964000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD DUP4 SWAP2 SWAP1 DUP8 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xC08 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xC2E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD LT PUSH2 0xC5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD PUSH1 0x1 SWAP2 SWAP1 DUP8 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xC9B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xCC1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x7 SWAP3 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD PUSH1 0x5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 SLOAD PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP5 MSTORE PUSH1 0xB SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP9 MLOAD SWAP4 SWAP1 SWAP2 AND SWAP3 PUSH4 0x1697565B SWAP3 DUP8 SWAP3 PUSH2 0x2710 SWAP3 DUP12 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0xD37 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xD5D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0xD79 SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0xD83 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP11 MLOAD DUP12 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0xDBE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xDE4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x0 ADD SLOAD PUSH1 0xB PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xE3B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xE61 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP8 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xED4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF0C SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP7 MLOAD DUP8 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xF47 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xF6D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x58C23B4AE0617BE275628875BCFD65759A441263099A256EEB27899FB5DD846D DUP10 DUP10 PUSH1 0xB PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1003 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0x1029 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x104A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH2 0x105C DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAFE JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP1 SSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x109E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x2287 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x231A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x1112 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 PUSH1 0x7 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1155 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x0 PUSH2 0x116B DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x23AB JUMP JUMPDEST SWAP1 POP PUSH2 0x11D8 DUP12 DUP12 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x1191 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x11B9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x11CE SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST DUP4 DUP9 DUP9 DUP9 DUP9 PUSH2 0x27F8 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1214 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x291F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1242 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE DUP10 MLOAD EQ DUP1 ISZERO PUSH2 0x1259 JUMPI POP DUP4 MLOAD PUSH1 0x2 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1266 JUMPI POP DUP2 MLOAD PUSH1 0x3 EQ JUMPDEST PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E6720696E70757473000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP3 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x12D6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x1328 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x10D0D09D5C9B949BDD5D195C8E881BDB19081C995C5D595CDD PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x1357 SWAP2 DUP15 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x136F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1383 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A7 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x13C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1421 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13E9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP11 DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1414 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x29B0 JUMP JUMPDEST SWAP1 POP PUSH20 0x0 PUSH4 0x7EBC2327 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1475 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x149F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A06 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1517 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F742066696E616C697A65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20616C72656164792075736564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 MLOAD DUP2 SWAP1 PUSH2 0x1610 SWAP1 DUP13 SWAP1 DUP8 SWAP1 DUP5 SWAP1 PUSH2 0x1603 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2AA6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1663 DUP13 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1638 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP11 DUP11 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1414 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP3 EQ PUSH2 0x16B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E67206F7574707574207478000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP13 MLOAD PUSH1 0x20 DUP15 ADD KECCAK256 PUSH2 0x16C2 DUP10 DUP4 PUSH2 0x2B55 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x1716 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F7420666F72206C6F636B657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP5 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1737 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x7 SLOAD PUSH2 0x174C SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F796D90 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x179A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D2 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST GT PUSH2 0x17EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C09 JUMP JUMPDEST PUSH2 0x1823 DUP11 DUP15 DUP6 DUP9 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1816 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2BC9 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP1 SSTORE SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1863 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1896 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x18C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE SLOAD DUP8 LT ISZERO PUSH2 0x1917 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x10D0D09D5C9B949BDD5D195C8E881BDB19081C995C5D595CDD PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND ISZERO PUSH2 0x196F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F6E2D7A65726F206C6F636B2074696D65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x199E SWAP2 DUP9 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19EE SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1A0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0x1A3C SWAP2 DUP10 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A8C SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST SWAP1 POP DUP3 MLOAD DUP5 MLOAD EQ PUSH2 0x1ADF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E6720696E64657865730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AED DUP14 DUP14 DUP14 DUP14 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7EBC2327 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0x0 SWAP2 PUSH4 0x7EBC2327 SWAP2 PUSH2 0x1B3C SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A06 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1B68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B8C SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1BD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F742066696E616C697A65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE8 DUP3 DUP12 DUP6 DUP16 DUP11 DUP11 PUSH2 0x2EB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BF6 DUP2 DUP14 DUP10 DUP6 PUSH2 0x33E7 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP1 SSTORE SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x3470 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1CCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x3501 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1CF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 SWAP7 POP SWAP2 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 PUSH2 0x1D30 SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D5C SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DA9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D7E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DA9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D8C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP5 SWAP1 SWAP4 PUSH1 0xFF DUP1 DUP4 AND SWAP5 POP PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP2 POP DUP9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA072BC5 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA072BC50 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E2E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E52 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT PUSH2 0x1EA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720646561646C696E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x92C10A242CA42973030420E2EE32B3BA7818CC643F896958F620C606CF300416 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1EF2 DUP7 DUP7 PUSH2 0x3551 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x1F23 SWAP2 DUP9 SWAP2 DUP9 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F73 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1F8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0x1FC0 SWAP2 DUP9 SWAP2 DUP9 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2010 SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x201D DUP9 PUSH2 0x364A JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2073 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2087 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20AB SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP DUP1 PUSH1 0xA SLOAD DUP3 PUSH2 0x20BB SWAP2 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x38463CFF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x38463CFF SWAP2 PUSH2 0x20EE SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP10 SWAP2 ADD PUSH2 0x5A9A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x211C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2140 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST PUSH2 0x214A SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x2154 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST SWAP3 POP PUSH2 0x21E9 DUP9 DUP5 DUP10 DUP10 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F796D90 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21E3 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST DUP8 PUSH2 0x3771 JUMP JUMPDEST POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x2710 LT ISZERO PUSH2 0x2246 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642072657761726400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xAA50B3683E42A13535A5B9C2C32780CCCF956FB546B523A3542AC4AD8B544F67 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x9 SSTORE JUMP JUMPDEST DUP1 PUSH2 0x2710 LT ISZERO PUSH2 0x22D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642066656500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7D205F60891F60851C61CD244BA387D72B6589E7C0AC41B9D909AB0CE2C2A53B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x8 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x36A4C08A38B736DCECB6C328DBA61238529620E83CCB23DB2CC43CD34EC26096 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH2 0x23C7 PUSH1 0x1 DUP3 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x23E4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x23F9 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x244F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642070617468000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x2 DUP7 EQ PUSH2 0x249F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E6720616D6F756E74730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x24C0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x24D5 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER ADDRESS DUP11 DUP11 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x2506 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x255D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2571 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2595 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x25B7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x25CC SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95EA7B3 DUP10 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x25FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x264B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x265F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2683 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB0BBCD88 DUP11 DUP11 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x26B7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP12 DUP12 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x26DF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 ADDRESS DUP11 DUP15 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x270D SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x273B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2763 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x54E4 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x27B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2065786368616E6765206661696C6564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x27C3 SWAP2 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x27E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2808 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EE5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP5 POP SWAP1 SWAP3 POP SWAP1 PUSH2 0x2835 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x2853 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD PUSH2 0x286C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0xC19DABF19FDFD8C6124BED2178A4564D0C5D5812BFB916777CC90D1B53ED5A5A SWAP2 DUP11 SWAP2 DUP11 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP12 SWAP2 DUP12 SWAP2 PUSH2 0x28C8 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x28E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x290C SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2946 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFA021C2EC0F46429A53E7F88B88065E40001F50C9D38B2E8B713BEAF9828D4C3 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x29CC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5997 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x29E6 SWAP2 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A03 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A26 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A3F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x2A59 SWAP2 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A76 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A99 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2ABC PUSH2 0x2AB7 DUP7 DUP4 PUSH2 0x3939 JUMP JUMPDEST PUSH2 0x395D JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x2B14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E48656C7065723A2076696E206973206E756C6C000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B20 DUP3 DUP7 PUSH2 0x3A93 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B2D DUP3 PUSH2 0x3BB1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B38 DUP2 PUSH2 0x3BD5 JUMP JUMPDEST SWAP5 POP PUSH2 0x2B43 DUP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2B6D PUSH2 0x2B68 DUP3 JUMPDEST DUP7 SWAP1 PUSH2 0x3939 JUMP JUMPDEST PUSH2 0x3C21 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x2B95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BA1 DUP3 DUP6 PUSH2 0x3D12 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BAE DUP3 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP PUSH2 0x2BBF PUSH3 0xFFFFFF NOT DUP3 AND PUSH2 0x3E5D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BD4 DUP6 PUSH2 0x3EAD JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP4 POP PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0x2C14 SWAP2 DUP10 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C40 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C64 SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x9 SLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB734DE26 SWAP1 DUP4 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x2C8D SWAP1 DUP8 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x2C97 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD PUSH1 0xE0 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D28 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH32 0x7FF138134E34CCAB071315C38E38EEC079F54726B890304AB46E2C5AB6F722BB DUP2 DUP7 DUP6 DUP8 PUSH2 0x2710 PUSH1 0x9 SLOAD DUP9 PUSH2 0x2D5F SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x2D69 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST PUSH2 0x2D73 SWAP1 DUP9 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D84 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2DBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x4C28A3F61A715259C4DC930C23E7423B8FA52E13232C061A6E488729C66184F4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x47C5F9C13C35EBB166F6A8D8C56AF73F8B323AC0FEE7AEC4A5E0490BBF67A4FE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 PUSH2 0x2710 LT ISZERO PUSH2 0x2EB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642062746320666565000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x33DA JUMPI DUP1 PUSH2 0x2EFB JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2EEC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP PUSH2 0x2FA8 JUMP JUMPDEST DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F1C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x2F7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20756E2D736F7274656420766F757420696E64 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x65786573 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2F9D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST PUSH1 0x0 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FCA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0xB PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3018 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 PUSH1 0x7 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x3087 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP12 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x3072 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x33C7 JUMPI PUSH2 0x3232 DUP9 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x30B0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xB PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x30FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x3118 SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3144 SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3191 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3166 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3191 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3174 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP16 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 POP DUP8 SWAP2 POP DUP2 LT PUSH2 0x31D0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x5 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x320E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x322D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3F47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 POP DUP4 PUSH1 0xB PUSH1 0x0 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3282 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x1 ADD SLOAD EQ ISZERO PUSH2 0x33C7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x32D6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x3303 DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP8 POP SWAP1 SWAP2 PUSH32 0x1B46655C2F394F2191CB246D5982DBE00AD671F0B590E75E97C90EE97F1F782A SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x3363 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD DUP14 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3396 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x33BE SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP DUP1 PUSH2 0x33D2 DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2EBE JUMP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F3 DUP5 DUP5 PUSH2 0x4182 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH2 0x3409 DUP6 PUSH2 0x4285 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3423 JUMPI POP DUP1 PUSH2 0x3421 DUP8 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x3446 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x3468 JUMP JUMPDEST DUP1 DUP7 EQ ISZERO PUSH2 0x3468 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3497 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x567657FA3F286518B318F4A29870674F433F622FDFC819691ACB13105B228225 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3573 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP1 PUSH2 0x359E JUMPI POP PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x359C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x35F9 JUMPI DUP2 MLOAD PUSH1 0x20 EQ PUSH2 0x35F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642073637269707400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH2 0x6A0 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x14 EQ PUSH2 0x6A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642073637269707400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2710 PUSH1 0x8 SLOAD DUP5 PUSH2 0x365E SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x3668 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST SWAP1 POP PUSH1 0xA SLOAD PUSH1 0x2 PUSH2 0x3679 SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x3683 SWAP1 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST DUP4 GT PUSH2 0x36D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720616D6F756E740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DD DUP3 DUP6 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP3 SWAP4 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x372F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3743 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3767 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0xE0 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP9 SWAP1 MSTORE CALLER SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x37D5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x37F6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE POP PUSH1 0x7 SLOAD PUSH2 0x3806 SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP1 DUP3 MSTORE PUSH1 0xC PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD PUSH1 0xE0 DUP7 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP1 SWAP4 MSTORE SWAP1 SWAP2 MSTORE PUSH2 0x3846 SWAP1 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0xB DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 DUP7 MLOAD PUSH1 0x7 SWAP1 SWAP5 MUL ADD SWAP3 DUP4 SSTORE DUP6 DUP3 ADD MLOAD SWAP1 DUP4 ADD SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP1 MLOAD DUP5 SWAP4 PUSH2 0x38C6 SWAP3 PUSH1 0x3 DUP6 ADD SWAP3 SWAP2 ADD SWAP1 PUSH2 0x50DE JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR DUP1 DUP3 SSTORE PUSH1 0xC0 DUP6 ADD MLOAD SWAP3 PUSH2 0xFF00 NOT SWAP1 SWAP2 AND SWAP1 PUSH2 0x100 SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x391F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD PUSH2 0x3954 PUSH5 0xFFFFFFFFFF DUP6 AND DUP3 DUP5 PUSH2 0x42B1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 PUSH2 0x3973 DUP2 JUMPDEST PUSH3 0xFFFFFF NOT DUP5 AND SWAP1 PUSH2 0x42F8 JUMP JUMPDEST POP PUSH1 0x18 DUP5 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x3993 JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP3 POP PUSH2 0x3A8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39A0 DUP6 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x18 DUP6 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH2 0x39CD JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP5 POP POP POP PUSH2 0x3A8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39D8 DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 LT ISZERO PUSH2 0x3A54 JUMPI DUP3 DUP3 LT PUSH2 0x3A09 JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP7 POP POP POP POP POP PUSH2 0x3A8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A29 PUSH2 0x3A18 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x5 JUMPDEST PUSH3 0xFFFFFF NOT DUP13 AND SWAP2 SWAP1 PUSH2 0x4572 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A34 DUP2 PUSH2 0x45A6 JUMP JUMPDEST PUSH2 0x3A3E SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x3A4C SWAP1 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x39E0 JUMP JUMPDEST POP DUP2 DUP2 EQ PUSH2 0x3A6C JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP6 POP POP POP POP PUSH2 0x3A8C JUMP JUMPDEST PUSH2 0x3A86 PUSH1 0x6 JUMPDEST PUSH1 0xD8 SHL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xD8 SHL SUB DUP10 AND OR SWAP1 JUMP JUMPDEST SWAP6 POP POP POP POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x6 PUSH2 0x3AA1 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3AAF DUP7 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x18 DUP7 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 DUP7 LT PUSH2 0x3B0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2B34B7103932B0B21037BB32B9393AB7 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B15 DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x3B6D JUMPI PUSH2 0x3B44 PUSH2 0x3B33 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x5 JUMPDEST PUSH3 0xFFFFFF NOT DUP14 AND SWAP2 SWAP1 PUSH2 0x4572 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B4F DUP3 PUSH2 0x45A6 JUMP JUMPDEST PUSH2 0x3B59 SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP PUSH2 0x3B66 PUSH1 0x1 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B1E JUMP JUMPDEST POP PUSH2 0x3B7B PUSH2 0x3A18 DUP4 DUP6 PUSH2 0x5EA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3B88 DUP3 PUSH2 0x45A6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BA1 DUP4 DUP3 PUSH1 0x4 JUMPDEST PUSH3 0xFFFFFF NOT DUP15 AND SWAP3 SWAP2 SWAP1 PUSH2 0x45FA JUMP JUMPDEST SWAP8 POP POP POP POP POP POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 PUSH2 0x3BBF DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH3 0xFFFFFF NOT DUP6 AND PUSH1 0x0 PUSH1 0x24 PUSH1 0x3 PUSH2 0x45FA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 PUSH2 0x3BE3 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH3 0xFFFFFF NOT DUP6 AND PUSH1 0x0 PUSH1 0x20 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 PUSH2 0x3C05 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH2 0x3C1C PUSH3 0xFFFFFF NOT DUP7 AND PUSH1 0x20 PUSH1 0x4 PUSH2 0x47C3 JUMP JUMPDEST PUSH2 0x490D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 PUSH2 0x3C2E DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x18 DUP5 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x3C4B JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x398C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C58 DUP6 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x18 DUP6 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH2 0x3C80 JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x39C4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C8B DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 LT ISZERO PUSH2 0x3CF6 JUMPI DUP3 DUP3 LT PUSH2 0x3CB5 JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x39FE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CCB PUSH2 0x3CC4 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0xE PUSH2 0x3A1B JUMP JUMPDEST SWAP1 POP PUSH2 0x3CD6 DUP2 PUSH2 0x4976 JUMP JUMPDEST PUSH2 0x3CE0 SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x3CEE SWAP1 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3C93 JUMP JUMPDEST POP DUP2 DUP2 EQ PUSH2 0x3D08 JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x3A62 JUMP JUMPDEST PUSH2 0x3A86 PUSH1 0xF PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF PUSH2 0x3D20 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3D2E DUP7 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x18 DUP7 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 DUP7 LT PUSH2 0x3D8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2B37BABA103932B0B21037BB32B9393AB7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D95 DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x3DE3 JUMPI PUSH2 0x3DBA PUSH2 0x3DB3 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0xE PUSH2 0x3B36 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DC5 DUP3 PUSH2 0x4976 JUMP JUMPDEST PUSH2 0x3DCF SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP PUSH2 0x3DDC PUSH1 0x1 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D9E JUMP JUMPDEST POP PUSH2 0x3DF1 PUSH2 0x3CC4 DUP4 DUP6 PUSH2 0x5EA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3DFE DUP3 PUSH2 0x4976 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BA1 DUP4 DUP3 PUSH1 0xD PUSH2 0x3B92 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xD PUSH2 0x3E1A DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3E28 DUP6 PUSH1 0x8 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP PUSH2 0x3954 PUSH2 0x3E36 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH2 0x3E41 SWAP1 PUSH1 0x8 PUSH2 0x5DF9 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0xFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x7 PUSH2 0x45FA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x3E75 DUP5 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 POP DUP4 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH2 0x3E9C DUP5 PUSH2 0x3E97 DUP5 PUSH1 0x20 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x49BF JUMP JUMPDEST POP DUP2 DUP2 ADD PUSH1 0x20 ADD PUSH1 0x40 MSTORE SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EBF PUSH2 0x2B68 DUP3 JUMPDEST DUP6 SWAP1 PUSH2 0x3939 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x3EE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EF5 DUP4 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F3E JUMPI PUSH2 0x3F15 DUP5 DUP3 PUSH2 0x3D12 JUMP JUMPDEST SWAP3 POP PUSH2 0x3F20 DUP4 PUSH2 0x4B17 JUMP JUMPDEST PUSH2 0x3F2A SWAP1 DUP7 PUSH2 0x5DCE JUMP JUMPDEST SWAP5 POP DUP1 PUSH2 0x3F36 DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F03 JUMP JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3F57 PUSH2 0x2B68 DUP8 DUP4 PUSH2 0x3939 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x3F7F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8B DUP3 DUP8 PUSH2 0x3D12 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3F98 DUP3 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3FBC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x4021 JUMPI PUSH2 0x3FD5 PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x1 PUSH1 0x20 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3FE7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x4011 JUMPI PUSH1 0x0 PUSH2 0x401A JUMP JUMPDEST PUSH2 0x401A DUP3 PUSH2 0x4B17 JUMP JUMPDEST SWAP4 POP PUSH2 0x4177 JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4043 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x4082 JUMPI PUSH2 0x405A PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x3 PUSH2 0x4B3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3FE7 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x40A4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x40BB JUMPI PUSH2 0x405A PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x2 PUSH2 0x4B3C JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x40DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x40F4 JUMPI PUSH2 0x405A PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x2 PUSH2 0x4B3C JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4116 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x4177 JUMPI PUSH2 0x412F PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x2 PUSH1 0x20 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4141 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x416B JUMPI PUSH1 0x0 PUSH2 0x4174 JUMP JUMPDEST PUSH2 0x4174 DUP3 PUSH2 0x4B17 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4191 PUSH2 0x2B68 DUP3 PUSH2 0x2B61 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x41B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x41C9 DUP5 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x427A JUMPI PUSH2 0x41E9 DUP6 DUP3 PUSH2 0x3D12 JUMP JUMPDEST SWAP4 POP PUSH2 0x41F4 DUP5 PUSH2 0x3E0C JUMP JUMPDEST SWAP3 POP DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4207 SWAP2 SWAP1 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x422C DUP5 PUSH3 0xFFFFFF NOT AND PUSH2 0x3E5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x423C SWAP2 SWAP1 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ ISZERO PUSH2 0x4268 JUMPI PUSH2 0x4261 DUP5 PUSH2 0x4B17 JUMP JUMPDEST SWAP6 POP PUSH2 0x427A JUMP JUMPDEST DUP1 PUSH2 0x4272 DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x41D7 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4294 PUSH2 0x2B68 DUP3 PUSH2 0x3EB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x42A1 DUP2 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42BE DUP4 DUP6 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP2 GT ISZERO PUSH2 0x42CE JUMPI POP PUSH1 0x0 JUMPDEST DUP1 PUSH2 0x42E0 JUMPI PUSH3 0xFFFFFF NOT SWAP2 POP POP PUSH2 0x42F1 JUMP JUMPDEST POP POP PUSH1 0x60 DUP4 DUP2 SHL DUP4 OR SWAP1 SHL DUP2 OR PUSH1 0x18 SHL JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4304 DUP4 DUP4 PUSH2 0x4B4A JUMP JUMPDEST PUSH2 0x43CB JUMPI PUSH1 0x0 PUSH2 0x4323 PUSH2 0x4317 DUP6 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4338 DUP5 PUSH5 0xFFFFFFFFFF AND PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5479706520617373657274696F6E206661696C65642E20476F74203078000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT PUSH1 0xB0 DUP7 DUP2 SHL DUP3 AND PUSH1 0x3D DUP5 ADD MSTORE PUSH13 0x5C408AF0E0CAC6E8CAC84060F PUSH1 0x9B SHL PUSH1 0x47 DUP5 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x54 DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH1 0x5E ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP2 SWAP1 PUSH2 0x5ABE JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x43E7 PUSH3 0xFFFFFF NOT DUP6 AND DUP5 PUSH1 0x1 PUSH2 0x4C19 JUMP JUMPDEST SWAP1 POP PUSH1 0xFC DUP2 GT PUSH2 0x4402 JUMPI PUSH2 0x43FA DUP2 PUSH2 0x4C49 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x112C JUMP JUMPDEST DUP1 PUSH1 0xFD EQ ISZERO PUSH2 0x4468 JUMPI PUSH2 0x4430 PUSH2 0x442B PUSH2 0x441C DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x2 PUSH2 0x47C3 JUMP JUMPDEST PUSH2 0x4C49 JUMP JUMPDEST SWAP2 POP PUSH2 0x443B DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x4463 JUMPI PUSH2 0x4461 PUSH2 0x445C PUSH3 0xFFFFFF NOT DUP7 AND DUP6 PUSH1 0x3 PUSH1 0x0 PUSH2 0x45FA JUMP JUMPDEST PUSH2 0x4CB1 JUMP JUMPDEST POP JUMPDEST PUSH2 0x4512 JUMP JUMPDEST DUP1 PUSH1 0xFE EQ ISZERO PUSH2 0x44BD JUMPI PUSH2 0x4491 PUSH2 0x442B PUSH2 0x4482 DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 PUSH2 0x47C3 JUMP JUMPDEST SWAP2 POP PUSH2 0x449C DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x5 EQ PUSH2 0x4463 JUMPI PUSH2 0x4461 PUSH2 0x445C PUSH3 0xFFFFFF NOT DUP7 AND DUP6 PUSH1 0x5 PUSH1 0x0 PUSH2 0x45FA JUMP JUMPDEST DUP1 PUSH1 0xFF EQ ISZERO PUSH2 0x4512 JUMPI PUSH2 0x44E6 PUSH2 0x442B PUSH2 0x44D7 DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x8 PUSH2 0x47C3 JUMP JUMPDEST SWAP2 POP PUSH2 0x44F1 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x9 EQ PUSH2 0x4512 JUMPI PUSH2 0x3BA9 PUSH2 0x445C PUSH3 0xFFFFFF NOT DUP7 AND DUP6 PUSH1 0x9 PUSH1 0x0 PUSH2 0x45FA JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFC DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x4534 JUMPI POP PUSH1 0x1 PUSH2 0x376C JUMP JUMPDEST PUSH2 0xFFFF DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x454E JUMPI POP PUSH1 0x3 PUSH2 0x376C JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x456A JUMPI POP PUSH1 0x5 PUSH2 0x376C JUMP JUMPDEST POP PUSH1 0x9 PUSH2 0x376C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9E DUP5 DUP5 PUSH2 0x458C DUP8 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x459F SWAP2 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP6 DUP6 PUSH2 0x45FA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 PUSH2 0x45B4 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x45C2 DUP6 PUSH1 0x24 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x45D7 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x45E4 SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x45EF SWAP1 PUSH1 0x24 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x3954 SWAP1 PUSH1 0x4 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4610 DUP7 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH2 0x4624 DUP7 PUSH2 0x4D38 JUMP JUMPDEST DUP5 PUSH2 0x462F DUP8 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x4639 SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST GT ISZERO PUSH2 0x464C JUMPI PUSH3 0xFFFFFF NOT SWAP2 POP POP PUSH2 0x2A9E JUMP JUMPDEST PUSH2 0x4656 DUP6 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2BBF DUP4 PUSH5 0xFFFFFFFFFF AND DUP3 DUP7 PUSH2 0x42B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH2 0x467C JUMPI POP PUSH1 0x0 PUSH2 0x42F1 JUMP JUMPDEST PUSH2 0x468F DUP5 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x46A5 PUSH1 0xFF DUP5 AND DUP6 PUSH2 0x5DB6 JUMP JUMPDEST GT ISZERO PUSH2 0x4709 JUMPI PUSH2 0x46F0 PUSH2 0x46C1 DUP6 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x46DD DUP7 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 DUP6 PUSH1 0xFF AND PUSH2 0x4D79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP2 SWAP1 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x4783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54797065644D656D566965772F696E646578202D20417474656D707465642074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F20696E646578206D6F7265207468616E203332206279746573000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x8 DUP3 MUL PUSH1 0x0 PUSH2 0x479C DUP7 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP5 ADD SAR SWAP2 SWAP1 SWAP6 ADD MLOAD AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9E PUSH2 0x47D3 DUP6 DUP6 DUP6 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x8 DUP2 DUP2 SHR PUSH31 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF AND PUSH32 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x10 DUP2 DUP2 SHR PUSH30 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF AND PUSH32 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x20 DUP2 DUP2 SHR PUSH28 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF AND PUSH32 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x40 DUP2 DUP2 SHR PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF NOT SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x80 DUP2 DUP2 SHR SWAP2 SWAP1 SHL OR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE PUSH2 0x4984 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x4992 DUP6 PUSH1 0x8 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x49A7 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x49B4 SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x3954 SWAP1 PUSH1 0x8 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF NOT DUP1 DUP5 AND EQ ISZERO PUSH2 0x4A28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54797065644D656D566965772F636F7079546F202D204E756C6C20706F696E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x32B9103232B932B3 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH2 0x4A31 DUP4 PUSH2 0x4EA3 JUMP JUMPDEST PUSH2 0x4A91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54797065644D656D566965772F636F7079546F202D20496E76616C696420706F PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x34B73A32B9103232B932B3 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AA6 DUP5 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH2 0x4AC6 DUP6 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x4AE6 JUMPI PUSH1 0x20 PUSH1 0x60 REVERT JUMPDEST DUP3 DUP6 DUP5 DUP5 PUSH1 0x4 GAS STATICCALL POP PUSH2 0x2BBF PUSH2 0x4AFC DUP8 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x60 SHL PUSH1 0x60 SWAP2 DUP3 SHL AND DUP8 OR SWAP1 SHL DUP5 OR PUSH1 0x18 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xD PUSH2 0x4B25 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH2 0x442B PUSH3 0xFFFFFF NOT DUP7 AND PUSH1 0x0 PUSH1 0x8 PUSH2 0x47C3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F1 DUP4 DUP4 PUSH1 0x14 PUSH2 0x4C19 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH5 0xFFFFFFFFFF AND PUSH2 0x4B5E DUP5 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F JUMPDEST PUSH1 0xF DUP2 PUSH1 0xFF AND GT ISZERO PUSH2 0x4BCB JUMPI PUSH1 0x0 PUSH2 0x4B8C DUP3 PUSH1 0x8 PUSH2 0x5E7F JUMP JUMPDEST PUSH1 0xFF AND DUP6 SWAP1 SHR SWAP1 POP PUSH2 0x4B9D DUP2 PUSH2 0x4EE1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP5 OR SWAP4 POP DUP2 PUSH1 0xFF AND PUSH1 0x10 EQ PUSH2 0x4BB8 JUMPI PUSH1 0x10 DUP5 SWAP1 SHL SWAP4 POP JUMPDEST POP PUSH2 0x4BC4 PUSH1 0x1 DUP3 PUSH2 0x5EBF JUMP JUMPDEST SWAP1 POP PUSH2 0x4B73 JUMP JUMPDEST POP PUSH1 0xF JUMPDEST PUSH1 0xFF DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x4C13 JUMPI PUSH1 0xFF PUSH1 0x8 DUP3 MUL AND DUP5 SWAP1 SHR PUSH2 0x4BEE DUP2 PUSH2 0x4EE1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP4 OR SWAP3 POP DUP2 PUSH1 0xFF AND PUSH1 0x0 EQ PUSH2 0x4C09 JUMPI PUSH1 0x10 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH2 0x4BCF JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C26 DUP3 PUSH1 0x20 PUSH2 0x5EBF JUMP JUMPDEST PUSH2 0x4C31 SWAP1 PUSH1 0x8 PUSH2 0x5E7F JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x4C3F DUP6 DUP6 DUP6 PUSH2 0x466A JUMP JUMPDEST SWAP1 SHR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2036 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x342062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x4CE5 PUSH2 0x4CE0 DUP3 PUSH2 0x4CD2 PUSH1 0x18 DUP8 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4F11 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP2 SWAP1 PUSH2 0x4C19 JUMP JUMPDEST PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4E6F6E2D6D696E696D616C2076617220696E742E20476F742030780000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x70 DUP4 SWAP1 SHL AND PUSH1 0x3B DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH1 0x4D ADD PUSH2 0x43A0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D4D DUP3 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x4D60 DUP4 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x4D6A SWAP2 SWAP1 PUSH2 0x5E1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x4D86 DUP7 PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4D94 DUP7 PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4DA2 DUP7 PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4DB0 DUP7 PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x54797065644D656D566965772F696E646578202D204F76657272616E20746865 PUSH1 0x20 DUP3 ADD MSTORE PUSH21 0x40ECD2CAEE5C40A6D8D2C6CA40D2E640C2E84060F PUSH1 0x5B SHL DUP2 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT PUSH1 0xD0 SWAP9 DUP10 SHL DUP2 AND PUSH1 0x55 DUP4 ADD MSTORE PUSH15 0x40EED2E8D040D8CADCCEE8D04060F PUSH1 0x8B SHL PUSH1 0x5B DUP4 ADD DUP2 SWAP1 MSTORE SWAP8 DUP10 SHL DUP2 AND PUSH1 0x6A DUP4 ADD MSTORE PUSH32 0x2E20417474656D7074656420746F20696E646578206174206F66667365742030 PUSH1 0x70 DUP4 ADD MSTORE PUSH1 0xF PUSH1 0xFB SHL PUSH1 0x90 DUP4 ADD MSTORE SWAP6 DUP9 SHL DUP7 AND PUSH1 0x91 DUP3 ADD MSTORE PUSH1 0x97 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP6 SHL SWAP1 SWAP3 AND PUSH1 0xA6 DUP5 ADD MSTORE POP POP PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0xAC DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP3 SUB PUSH1 0x8D ADD DUP2 MSTORE PUSH1 0xAD SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EAF DUP3 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF EQ ISZERO PUSH2 0x4ECA JUMPI POP PUSH1 0x0 PUSH2 0x376C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4ED5 DUP4 PUSH2 0x4D38 JUMP JUMPDEST PUSH1 0x40 MLOAD LT NOT SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EF3 PUSH1 0x4 DUP4 PUSH1 0xFF AND SWAP1 SHR PUSH2 0x4F72 JUMP JUMPDEST PUSH1 0xFF AND OR PUSH1 0x8 SHL PUSH3 0xFFFF00 AND PUSH2 0x4F08 DUP3 PUSH2 0x4F72 JUMP JUMPDEST PUSH1 0xFF AND OR SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2038 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2062697473 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF0 DUP1 DUP4 OR SWAP1 PUSH1 0xFF DUP3 AND EQ ISZERO PUSH2 0x4F8E JUMPI PUSH1 0x30 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF1 EQ ISZERO PUSH2 0x4FA4 JUMPI PUSH1 0x31 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF2 EQ ISZERO PUSH2 0x4FBA JUMPI PUSH1 0x32 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF3 EQ ISZERO PUSH2 0x4FD0 JUMPI PUSH1 0x33 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF4 EQ ISZERO PUSH2 0x4FE6 JUMPI PUSH1 0x34 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF5 EQ ISZERO PUSH2 0x4FFC JUMPI PUSH1 0x35 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF6 EQ ISZERO PUSH2 0x5012 JUMPI PUSH1 0x36 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF7 EQ ISZERO PUSH2 0x5028 JUMPI PUSH1 0x37 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF8 EQ ISZERO PUSH2 0x503E JUMPI PUSH1 0x38 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF9 EQ ISZERO PUSH2 0x5054 JUMPI PUSH1 0x39 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFA EQ ISZERO PUSH2 0x506A JUMPI PUSH1 0x61 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFB EQ ISZERO PUSH2 0x5080 JUMPI PUSH1 0x62 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFC EQ ISZERO PUSH2 0x5096 JUMPI PUSH1 0x63 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFD EQ ISZERO PUSH2 0x50AC JUMPI PUSH1 0x64 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFE EQ ISZERO PUSH2 0x50C2 JUMPI PUSH1 0x65 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFF EQ ISZERO PUSH2 0x50D8 JUMPI PUSH1 0x66 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x50EA SWAP1 PUSH2 0x5F12 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x510C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x5152 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x5125 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x5152 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x5152 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5152 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5137 JUMP JUMPDEST POP PUSH2 0x4972 SWAP3 SWAP2 POP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x515A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x376C DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x518A JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x51A0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x51BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x51D1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x51E6 PUSH2 0x51E1 DUP4 PUSH2 0x5D93 JUMP JUMPDEST PUSH2 0x5D63 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0x5202 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5227 JUMPI PUSH2 0x5215 DUP3 PUSH2 0x5299 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5204 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5244 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x5254 PUSH2 0x51E1 DUP4 PUSH2 0x5D93 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0x5270 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5227 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5272 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x376C DUP2 PUSH2 0x5FA3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x376C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x52C2 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x52D8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x51BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5300 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5319 JUMPI PUSH2 0x5319 PUSH2 0x5F78 JUMP JUMPDEST PUSH2 0x532C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x5D63 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x5340 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x5 DUP2 LT PUSH2 0x376C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x537A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x42F1 DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5396 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x42F1 DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x53C2 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x53CB DUP13 PUSH2 0x516E JUMP JUMPDEST SWAP11 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 PUSH1 0x20 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x53E5 JUMPI DUP8 DUP9 REVERT JUMPDEST PUSH2 0x53F5 DUP15 PUSH1 0x20 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x5179 JUMP JUMPDEST SWAP1 SWAP12 POP SWAP10 POP PUSH2 0x5406 PUSH1 0x40 DUP15 ADD PUSH2 0x528E JUMP JUMPDEST SWAP9 POP DUP1 PUSH1 0x60 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x5418 JUMPI DUP8 DUP9 REVERT JUMPDEST PUSH2 0x5428 DUP15 PUSH1 0x60 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x5179 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD SWAP6 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x5444 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5454 DUP15 PUSH1 0xA0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP5 POP PUSH2 0x5462 PUSH1 0xC0 DUP15 ADD PUSH2 0x535A JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0xE0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x5474 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x5485 DUP14 PUSH1 0xE0 DUP15 ADD CALLDATALOAD DUP15 ADD PUSH2 0x52B1 JUMP JUMPDEST DUP2 SWAP4 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x54AF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x54BA DUP2 PUSH2 0x5F8E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54D9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x42F1 DUP2 PUSH2 0x5FA3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x54F6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x5501 DUP2 PUSH2 0x5FA3 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x551E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x552E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x553C PUSH2 0x51E1 DUP3 PUSH2 0x5D93 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP11 LT ISZERO PUSH2 0x5558 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x557A JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x555C JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x559B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x55B3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x55D9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x55E2 DUP12 PUSH2 0x5299 JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x55FD JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x5609 DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP11 POP PUSH1 0x40 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x561E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x562A DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP10 POP PUSH2 0x5638 PUSH1 0x60 DUP15 ADD PUSH2 0x5299 JUMP JUMPDEST SWAP9 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD SWAP8 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5654 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x5660 DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP7 POP PUSH1 0xC0 DUP14 ADD CALLDATALOAD SWAP6 POP PUSH1 0xE0 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x567C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5688 DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x569E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x56AA DUP15 DUP4 DUP16 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP4 POP PUSH2 0x120 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x56C0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x56CD DUP14 DUP3 DUP15 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x56F3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5709 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x5715 DUP8 DUP4 DUP9 ADD PUSH2 0x52B1 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x572D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x573A DUP7 DUP3 DUP8 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x5762 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5778 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5784 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5799 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x57A5 DUP14 DUP4 DUP15 ADD PUSH2 0x51C1 JUMP JUMPDEST SWAP10 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x57BA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x57C6 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP9 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x57DB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x57E7 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP8 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x57FC JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5808 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP7 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x581D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5829 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP6 POP PUSH1 0xC0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x583E JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x584A DUP14 DUP4 DUP15 ADD PUSH2 0x51C1 JUMP JUMPDEST SWAP5 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x585F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x586B DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP4 POP PUSH2 0x100 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5881 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x588E DUP13 DUP3 DUP14 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x58B5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x58D2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x58DE DUP10 DUP4 DUP11 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP6 POP PUSH2 0x58EC PUSH1 0x40 DUP10 ADD PUSH2 0x535A JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5901 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x590E DUP9 DUP3 DUP10 ADD PUSH2 0x52B1 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x5961 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5EE2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x5993 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP1 DUP8 AND DUP4 MSTORE DUP6 MLOAD PUSH2 0x59B9 DUP2 PUSH1 0x4 DUP7 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x5EE2 JUMP JUMPDEST DUP6 MLOAD SWAP1 DUP5 ADD SWAP1 PUSH2 0x59D0 DUP2 PUSH1 0x4 DUP5 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x5EE2 JUMP JUMPDEST SWAP2 SWAP1 SWAP5 AND SWAP4 ADD PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x8 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x59FC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x5EE2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE DUP6 PUSH1 0x20 DUP4 ADD MSTORE DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x5A33 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x5949 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5A69 SWAP1 DUP4 ADD DUP8 PUSH2 0x5949 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2A9E PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x591F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x5AAE PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0x591F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x42F1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5949 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 MSTORE PUSH2 0x5AE5 DUP2 DUP5 ADD DUP13 PUSH2 0x5949 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5AF5 PUSH1 0x20 DUP4 ADD DUP11 PUSH2 0x5975 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A207A65726F2061646472657373000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x426974636F696E48656C7065723A20766F7574206973206E756C6C0000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F74206C6F636B65720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20646561646C696E65206E6F74207061737365 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5CB3 DUP4 DUP3 ADD DUP10 PUSH2 0x5949 JUMP JUMPDEST SWAP2 POP POP DUP6 PUSH1 0x80 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5CD1 PUSH1 0xC0 DUP4 ADD DUP6 PUSH2 0x5975 JUMP JUMPDEST DUP3 PUSH1 0xE0 DUP4 ADD MSTORE SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP8 SWAP1 PUSH1 0xE0 DUP5 ADD DUP4 JUMPDEST DUP10 DUP2 LT ISZERO PUSH2 0x5D36 JUMPI DUP4 CALLDATALOAD PUSH2 0x5D1B DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5D08 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 SWAP1 SWAP8 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5D8B JUMPI PUSH2 0x5D8B PUSH2 0x5F78 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x5DAC JUMPI PUSH2 0x5DAC PUSH2 0x5F78 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x5DC9 JUMPI PUSH2 0x5DC9 PUSH2 0x5F62 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x5DF0 JUMPI PUSH2 0x5DF0 PUSH2 0x5F62 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x5E16 JUMPI PUSH2 0x5E16 PUSH2 0x5F62 JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x5DF0 JUMPI PUSH2 0x5DF0 PUSH2 0x5F62 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5E5B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5E7A JUMPI PUSH2 0x5E7A PUSH2 0x5F62 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP2 PUSH1 0xFF DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5EA0 JUMPI PUSH2 0x5EA0 PUSH2 0x5F62 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5EBA JUMPI PUSH2 0x5EBA PUSH2 0x5F62 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 DUP3 LT ISZERO PUSH2 0x5ED9 JUMPI PUSH2 0x5ED9 PUSH2 0x5F62 JUMP JUMPDEST SWAP1 SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5EFD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5EE5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5F0C JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x5F26 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x50D8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x5F5B JUMPI PUSH2 0x5F5B PUSH2 0x5F62 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL 0xE0 PUSH7 0x22DD52FA7DBAB4 0xFC PUSH21 0xFCA75673CA437C4BFE932375E439F3C05DC5852964 PUSH20 0x6F6C6343000802003343434275726E526F757465 PUSH19 0x3A207A65726F20616464726573730000000000 STOP ",
          "sourceMap": "497:32458:54:-:0;;;2445:679;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;867:23:7;666:10:20;867:9:7;:23::i;:::-;1637:1:14;1742:22;;2745:19:54;:42;;;2797:17;2807:6;2797:9;:17::i;:::-;2824:21;2836:8;2824:11;:21::i;:::-;2855:23;2868:9;2855:12;:23::i;:::-;2888:21;2900:8;2888:11;:21::i;:::-;2919:39;2940:17;2919:20;:39::i;:::-;2968:49;2994:22;2968:25;:49::i;:::-;3027:53;3055:24;3027:27;:53::i;:::-;3090:27;3105:11;3090:14;:27::i;:::-;2445:679;;;;;;;;;497:32458;;2041:169:7;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:7;;;-1:-1:-1;;;;;;2131:17:7;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;6587:135:54:-;6645:6;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;1695:2:77;655:61:54;;;1677:21:77;1734:2;1714:18;;;1707:30;-1:-1:-1;;;;;;;;;;;1753:18:77;;;1746:56;1819:18;;655:61:54;;;;;;;;;6677:5:::1;::::0;6668:23:::1;::::0;;-1:-1:-1;;;;;6677:5:54;;::::1;1396:34:77::0;;1466:15;;;1461:2;1446:18;;1439:43;6668:23:54::1;::::0;1331:18:77;6668:23:54::1;;;;;;;-1:-1:-1::0;6701:5:54::1;:14:::0;;-1:-1:-1;;;;;;6701:14:54::1;-1:-1:-1::0;;;;;6701:14:54;;;::::1;::::0;;;::::1;::::0;;6587:135::o;6894:151::-;6956:8;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;1695:2:77;655:61:54;;;1677:21:77;1734:2;1714:18;;;1707:30;-1:-1:-1;;;;;;;;;;;1753:18:77;;;1746:56;1819:18;;655:61:54;1667:176:77;655:61:54;6992:7:::1;::::0;6981:29:::1;::::0;;-1:-1:-1;;;;;6992:7:54;;::::1;1396:34:77::0;;1466:15;;;1461:2;1446:18;;1439:43;6981:29:54::1;::::0;1331:18:77;6981:29:54::1;;;;;;;-1:-1:-1::0;7020:7:54::1;:18:::0;;-1:-1:-1;;;;;;7020:18:54::1;-1:-1:-1::0;;;;;7020:18:54;;;::::1;::::0;;;::::1;::::0;;6894:151::o;7331:159::-;7395:9;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;1695:2:77;655:61:54;;;1677:21:77;1734:2;1714:18;;;1707:30;-1:-1:-1;;;;;;;;;;;1753:18:77;;;1746:56;1819:18;;655:61:54;1667:176:77;655:61:54;7433:8:::1;::::0;7421:32:::1;::::0;;-1:-1:-1;;;;;7433:8:54;;::::1;1396:34:77::0;;1466:15;;;1461:2;1446:18;;1439:43;7421:32:54::1;::::0;1331:18:77;7421:32:54::1;;;;;;;-1:-1:-1::0;7463:8:54::1;:20:::0;;-1:-1:-1;;;;;;7463:20:54::1;-1:-1:-1::0;;;;;7463:20:54;;;::::1;::::0;;;::::1;::::0;;7331:159::o;7112:151::-;7174:8;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;1695:2:77;655:61:54;;;1677:21:77;1734:2;1714:18;;;1707:30;-1:-1:-1;;;;;;;;;;;1753:18:77;;;1746:56;1819:18;;655:61:54;1667:176:77;655:61:54;7210:7:::1;::::0;7199:29:::1;::::0;;-1:-1:-1;;;;;7210:7:54;;::::1;1396:34:77::0;;1466:15;;;1461:2;1446:18;;1439:43;7199:29:54::1;::::0;1331:18:77;7199:29:54::1;;;;;;;-1:-1:-1::0;7238:7:54::1;:18:::0;;-1:-1:-1;;;;;;7238:18:54::1;-1:-1:-1::0;;;;;7238:18:54;;;::::1;::::0;;;::::1;::::0;;7112:151::o;7568:422::-;7684:5;;7670:44;;;-1:-1:-1;;;7670:44:54;;;;7640:27;;-1:-1:-1;;;;;7684:5:54;;7670:42;;:44;;;;;;;;;;;;;;7684:5;7670:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7640:74;;7813:22;7793:17;:42;7785:81;;;;-1:-1:-1;;;7785:81:54;;2050:2:77;7785:81:54;;;2032:21:77;2089:2;2069:18;;;2062:30;2128:28;2108:18;;;2101:56;2174:18;;7785:81:54;2022:176:77;7785:81:54;7901:16;;7881:56;;;3446:25:77;;;3502:2;3487:18;;3480:34;;;7881:56:54;;3419:18:77;7881:56:54;;;;;;;-1:-1:-1;7947:16:54;:36;7568:422::o;8075:311::-;8185:22;790:5;8165:42;;8157:80;;;;-1:-1:-1;;;8157:80:54;;3120:2:77;8157:80:54;;;3102:21:77;3159:2;3139:18;;;3132:30;3198:27;3178:18;;;3171:55;3243:18;;8157:80:54;3092:175:77;8157:80:54;8277:21;;8252:71;;;3446:25:77;;;3502:2;3487:18;;3480:34;;;8252:71:54;;3419:18:77;8252:71:54;;;;;;;8333:21;:46;8075:311::o;8476:329::-;8592:24;836:5;8570:46;;8562:87;;;;-1:-1:-1;;;8562:87:54;;2763:2:77;8562:87:54;;;2745:21:77;2802:2;2782:18;;;2775:30;2841;2821:18;;;2814:58;2889:18;;8562:87:54;2735:178:77;8562:87:54;8688:23;;8664:74;;;3446:25:77;;;3502:2;3487:18;;3480:34;;;8664:74:54;;3419:18:77;8664:74:54;;;;;;;8748:23;:50;8476:329::o;8871:227::-;8950:10;;8936:38;;;3446:25:77;;;3502:2;3487:18;;3480:34;;;8936:38:54;;3419:18:77;8936:38:54;;;;;;;9012:11;790:5;8992:31;;8984:73;;;;-1:-1:-1;;;8984:73:54;;2405:2:77;8984:73:54;;;2387:21:77;2444:2;2424:18;;;2417:30;2483:31;2463:18;;;2456:59;2532:18;;8984:73:54;2377:179:77;8984:73:54;9067:10;:24;8871:227::o;14:177:77:-;93:13;;-1:-1:-1;;;;;135:31:77;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:194::-;;319:2;307:9;298:7;294:23;290:32;287:2;;;340:6;332;325:22;287:2;-1:-1:-1;368:16:77;;277:113;-1:-1:-1;277:113:77:o;395:784::-;;;;;;;;;;654:3;642:9;633:7;629:23;625:33;622:2;;;676:6;668;661:22;622:2;710:9;704:16;694:26;;739:49;784:2;773:9;769:18;739:49;:::i;:::-;729:59;;807:49;852:2;841:9;837:18;807:49;:::i;:::-;797:59;;875:49;920:2;909:9;905:18;875:49;:::i;:::-;865:59;;943:50;988:3;977:9;973:19;943:50;:::i;:::-;933:60;;1033:3;1022:9;1018:19;1012:26;1002:36;;1078:3;1067:9;1063:19;1057:26;1047:36;;1123:3;1112:9;1108:19;1102:26;1092:36;;1168:3;1157:9;1153:19;1147:26;1137:36;;612:567;;;;;;;;;;;:::o;3401:119::-;497:32458:54;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:43313:77",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:77",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:85:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:77"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "136:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "111:24:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "111:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "111:31:77"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:77",
                        "type": ""
                      }
                    ],
                    "src": "14:134:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "237:314:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "286:30:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "295:8:77"
                                    },
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "305:8:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "288:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "288:26:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "288:26:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "265:6:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "273:4:77",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "261:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "261:17:77"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "280:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "257:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "257:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "250:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "250:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "247:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "325:30:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "348:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "335:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "335:20:77"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "325:6:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "398:30:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "407:8:77"
                                    },
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "417:8:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "400:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "400:26:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "400:26:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "370:6:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "378:18:77",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "367:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "367:30:77"
                          },
                          "nodeType": "YulIf",
                          "src": "364:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "437:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "453:6:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "461:4:77",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "449:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "449:17:77"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "437:8:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "529:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "538:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "541:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "531:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "531:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "531:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "489:6:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "501:6:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "509:4:77",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "497:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "497:17:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "485:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "485:30:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "517:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "481:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "481:41:77"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "524:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "478:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "478:50:77"
                          },
                          "nodeType": "YulIf",
                          "src": "475:2:77"
                        }
                      ]
                    },
                    "name": "abi_decode_array_address_dyn_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "200:6:77",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "208:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "216:8:77",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "226:6:77",
                        "type": ""
                      }
                    ],
                    "src": "153:398:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "619:634:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "668:24:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "677:5:77"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "684:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "670:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "670:20:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "670:20:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "647:6:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "655:4:77",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "643:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "643:17:77"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "662:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "639:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "639:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "632:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "632:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "629:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "701:30:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "724:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "711:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "711:20:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "705:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "740:14:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "750:4:77",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "744:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "763:70:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "829:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_bytes4_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "790:38:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "790:42:77"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "774:15:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "774:59:77"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "767:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "842:16:77",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "855:3:77"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "846:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "874:3:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "879:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "867:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "867:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "867:15:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "891:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "902:3:77"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "907:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "898:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "898:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "891:3:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "919:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "934:6:77"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "942:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "930:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "930:15:77"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "923:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1000:24:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1009:5:77"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1016:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1002:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1002:20:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1002:20:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "968:6:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "980:2:77"
                                          },
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "984:2:77"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "976:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "976:11:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "964:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "964:24:77"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "990:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "960:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "960:33:77"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "995:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "957:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "957:42:77"
                          },
                          "nodeType": "YulIf",
                          "src": "954:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1033:14:77",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "1042:5:77"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1037:1:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1101:123:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "1122:3:77"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "1145:3:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_bytes4",
                                        "nodeType": "YulIdentifier",
                                        "src": "1127:17:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1127:22:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1115:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1115:35:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1115:35:77"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "1163:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "1174:3:77"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1179:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1170:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1170:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "1163:3:77"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "1195:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "1206:3:77"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1211:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1202:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1202:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1195:3:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1067:1:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1070:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1064:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1064:9:77"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1074:18:77",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1076:14:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1085:1:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1088:1:77",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1081:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1081:9:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1076:1:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1060:3:77",
                            "statements": []
                          },
                          "src": "1056:168:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1233:14:77",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "1242:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1233:5:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_bytes4_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "593:6:77",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "601:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "609:5:77",
                        "type": ""
                      }
                    ],
                    "src": "556:697:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1322:629:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1371:24:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1380:5:77"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1387:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1373:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1373:20:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1373:20:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1350:6:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1358:4:77",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1346:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1346:17:77"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "1365:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1342:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1342:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1335:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1335:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "1332:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1404:30:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1427:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1414:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1414:20:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1408:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1443:14:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1453:4:77",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1447:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1466:70:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1532:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_bytes4_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "1493:38:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1493:42:77"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1477:15:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1477:59:77"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "1470:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1545:16:77",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "1558:3:77"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "1549:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1577:3:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1582:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1570:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1570:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1570:15:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1594:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "1605:3:77"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1610:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1601:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1601:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "1594:3:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1622:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1637:6:77"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1645:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1633:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1633:15:77"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "1626:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1703:24:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1712:5:77"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1719:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1705:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1705:20:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1705:20:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1671:6:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1683:2:77"
                                          },
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "1687:2:77"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "1679:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1679:11:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1667:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1667:24:77"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1693:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1663:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1663:33:77"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1698:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1660:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1660:42:77"
                          },
                          "nodeType": "YulIf",
                          "src": "1657:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1736:14:77",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "1745:5:77"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1740:1:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1804:118:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "1825:3:77"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "1843:3:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1830:12:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1830:17:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1818:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1818:30:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1818:30:77"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "1861:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "1872:3:77"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1877:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1868:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1868:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "1861:3:77"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "1893:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "1904:3:77"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1909:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1900:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1900:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1893:3:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1770:1:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1773:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1767:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1767:9:77"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1777:18:77",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1779:14:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1788:1:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1791:1:77",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1784:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1784:9:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1779:1:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1763:3:77",
                            "statements": []
                          },
                          "src": "1759:163:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1931:14:77",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "1940:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1931:5:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1296:6:77",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1304:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1312:5:77",
                        "type": ""
                      }
                    ],
                    "src": "1258:693:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2002:82:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2012:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2034:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2021:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2021:20:77"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "2012:5:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2072:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "2050:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2050:28:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2050:28:77"
                        }
                      ]
                    },
                    "name": "abi_decode_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1981:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1992:5:77",
                        "type": ""
                      }
                    ],
                    "src": "1956:128:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2137:125:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2147:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2169:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2156:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2156:20:77"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "2147:5:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2240:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2249:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2252:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2242:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2242:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2242:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2198:5:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2209:5:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2220:3:77",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2225:10:77",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "2216:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2216:20:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2205:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2205:32:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2195:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2195:43:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2188:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2188:51:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2185:2:77"
                        }
                      ]
                    },
                    "name": "abi_decode_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2116:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2127:5:77",
                        "type": ""
                      }
                    ],
                    "src": "2089:173:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2339:303:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2388:30:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2397:8:77"
                                    },
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2407:8:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2390:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2390:26:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2390:26:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2367:6:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2375:4:77",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2363:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2363:17:77"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2382:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2359:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2359:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2352:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2352:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2349:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2427:30:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2450:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2437:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2437:20:77"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2427:6:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2500:30:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2509:8:77"
                                    },
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2519:8:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2502:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2502:26:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2502:26:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2472:6:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2480:18:77",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2469:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2469:30:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2466:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2539:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2555:6:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2563:4:77",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2551:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2551:17:77"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "2539:8:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2620:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2629:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2632:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2622:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2622:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2622:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2591:6:77"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "2599:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2587:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2587:19:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2608:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2583:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2583:30:77"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2615:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2580:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2580:39:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2577:2:77"
                        }
                      ]
                    },
                    "name": "abi_decode_bytes_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2302:6:77",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2310:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "2318:8:77",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2328:6:77",
                        "type": ""
                      }
                    ],
                    "src": "2267:375:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2699:498:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2748:24:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2757:5:77"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2764:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2750:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2750:20:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2750:20:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2727:6:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2735:4:77",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2723:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2723:17:77"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2742:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2719:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2719:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2712:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2712:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2709:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2781:30:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2804:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2791:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2791:20:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2785:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2850:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "2852:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2852:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2852:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2826:2:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2830:18:77",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2823:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2823:26:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2820:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2881:70:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2924:2:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2928:4:77",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2920:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2920:13:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2939:2:77",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2935:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2935:7:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2916:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2916:27:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2945:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2912:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2912:38:77"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2896:15:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2896:55:77"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "2885:7:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "2967:7:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2976:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2960:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2960:19:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2960:19:77"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3027:24:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "3036:5:77"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "3043:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3029:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3029:20:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3029:20:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "3002:6:77"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3010:2:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2998:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2998:15:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3015:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2994:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2994:26:77"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "3022:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2991:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2991:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "2988:2:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3077:7:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3086:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3073:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3073:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3097:6:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3105:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3093:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3093:17:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3112:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "3060:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3060:55:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3060:55:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3139:7:77"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3148:2:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3135:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3135:16:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3153:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3131:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3131:27:77"
                              },
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "3160:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3124:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3124:42:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3124:42:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3175:16:77",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "3184:7:77"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3175:5:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2673:6:77",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2681:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2689:5:77",
                        "type": ""
                      }
                    ],
                    "src": "2647:550:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3260:94:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3270:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3292:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3279:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3279:20:77"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3270:5:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3332:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3341:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3344:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3334:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3334:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3334:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3321:5:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3328:1:77",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3318:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3318:12:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3311:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3311:20:77"
                          },
                          "nodeType": "YulIf",
                          "src": "3308:2:77"
                        }
                      ]
                    },
                    "name": "abi_decode_enum_ScriptTypes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3239:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3250:5:77",
                        "type": ""
                      }
                    ],
                    "src": "3202:152:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3429:187:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3475:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3484:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3492:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3477:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3477:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3477:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3450:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3459:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3446:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3446:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3471:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3442:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3442:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "3439:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3510:36:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3536:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3523:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3523:23:77"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3514:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3580:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3555:24:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3555:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3555:31:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3595:15:77",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3605:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3595:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3395:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3406:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3418:6:77",
                        "type": ""
                      }
                    ],
                    "src": "3359:257:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3702:180:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3748:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3757:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3765:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3750:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3750:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3750:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3723:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3732:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3719:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3719:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3744:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3715:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3715:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "3712:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3783:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3802:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3796:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3796:16:77"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3787:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3846:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3821:24:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3821:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3821:31:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3861:15:77",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3871:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3861:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3668:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3679:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3691:6:77",
                        "type": ""
                      }
                    ],
                    "src": "3621:261:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4189:1297:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4236:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4245:6:77"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4253:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4238:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4238:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4238:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4210:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4219:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4206:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4206:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4231:3:77",
                                "type": "",
                                "value": "256"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4202:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4202:33:77"
                          },
                          "nodeType": "YulIf",
                          "src": "4199:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4271:39:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4300:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "4281:18:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4281:29:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4271:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4319:28:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4329:18:77",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4323:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4400:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4409:6:77"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4417:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4402:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4402:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4402:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4379:9:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4390:2:77",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4375:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4375:18:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4362:12:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4362:32:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4396:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4359:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4359:40:77"
                          },
                          "nodeType": "YulIf",
                          "src": "4356:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4435:122:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4503:9:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "4531:9:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4542:2:77",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4527:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4527:18:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "calldataload",
                                      "nodeType": "YulIdentifier",
                                      "src": "4514:12:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4514:32:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4499:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4499:48:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4549:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4461:37:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4461:96:77"
                          },
                          "variables": [
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "4439:8:77",
                              "type": ""
                            },
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "4449:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4566:18:77",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "4576:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4566:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4593:18:77",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "4603:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4593:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4620:45:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4650:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4661:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4646:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4646:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bool",
                              "nodeType": "YulIdentifier",
                              "src": "4630:15:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4630:35:77"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4620:6:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4718:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4727:6:77"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "4735:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4720:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4720:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4720:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4697:9:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4708:2:77",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4693:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4693:18:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4680:12:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4680:32:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4714:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4677:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4677:40:77"
                          },
                          "nodeType": "YulIf",
                          "src": "4674:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4753:122:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4821:9:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "4849:9:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4860:2:77",
                                            "type": "",
                                            "value": "96"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4845:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4845:18:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "calldataload",
                                      "nodeType": "YulIdentifier",
                                      "src": "4832:12:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4832:32:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4817:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4817:48:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4867:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4779:37:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4779:96:77"
                          },
                          "variables": [
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "4757:8:77",
                              "type": ""
                            },
                            {
                              "name": "value5_1",
                              "nodeType": "YulTypedName",
                              "src": "4767:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4884:18:77",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "4894:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "4884:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4911:18:77",
                          "value": {
                            "name": "value5_1",
                            "nodeType": "YulIdentifier",
                            "src": "4921:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "4911:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4938:43:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4965:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4976:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4961:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4961:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4948:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4948:33:77"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "4938:6:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5035:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value7",
                                      "nodeType": "YulIdentifier",
                                      "src": "5044:6:77"
                                    },
                                    {
                                      "name": "value7",
                                      "nodeType": "YulIdentifier",
                                      "src": "5052:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5037:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5037:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5037:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5013:9:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5024:3:77",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5009:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5009:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4996:12:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4996:33:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5031:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4993:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4993:41:77"
                          },
                          "nodeType": "YulIf",
                          "src": "4990:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5070:86:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5101:9:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "5129:9:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5140:3:77",
                                            "type": "",
                                            "value": "160"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5125:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5125:19:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "calldataload",
                                      "nodeType": "YulIdentifier",
                                      "src": "5112:12:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5112:33:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5097:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5097:49:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5148:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "5080:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5080:76:77"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "5070:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5165:58:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5207:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5218:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5203:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5203:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_enum_ScriptTypes",
                              "nodeType": "YulIdentifier",
                              "src": "5175:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5175:48:77"
                          },
                          "variableNames": [
                            {
                              "name": "value8",
                              "nodeType": "YulIdentifier",
                              "src": "5165:6:77"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5277:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value9",
                                      "nodeType": "YulIdentifier",
                                      "src": "5286:6:77"
                                    },
                                    {
                                      "name": "value9",
                                      "nodeType": "YulIdentifier",
                                      "src": "5294:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5279:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5279:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5279:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5255:9:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5266:3:77",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5251:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5251:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5238:12:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5238:33:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5273:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5235:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5235:41:77"
                          },
                          "nodeType": "YulIf",
                          "src": "5232:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5312:112:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5369:9:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "5397:9:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5408:3:77",
                                            "type": "",
                                            "value": "224"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5393:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5393:19:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "calldataload",
                                      "nodeType": "YulIdentifier",
                                      "src": "5380:12:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5380:33:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5365:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5365:49:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5416:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "5339:25:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5339:85:77"
                          },
                          "variables": [
                            {
                              "name": "value9_1",
                              "nodeType": "YulTypedName",
                              "src": "5316:8:77",
                              "type": ""
                            },
                            {
                              "name": "value10_1",
                              "nodeType": "YulTypedName",
                              "src": "5326:9:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5433:18:77",
                          "value": {
                            "name": "value9_1",
                            "nodeType": "YulIdentifier",
                            "src": "5443:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value9",
                              "nodeType": "YulIdentifier",
                              "src": "5433:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5460:20:77",
                          "value": {
                            "name": "value10_1",
                            "nodeType": "YulIdentifier",
                            "src": "5471:9:77"
                          },
                          "variableNames": [
                            {
                              "name": "value10",
                              "nodeType": "YulIdentifier",
                              "src": "5460:7:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_boolt_array$_t_address_$dyn_calldata_ptrt_uint256t_bytes_memory_ptrt_enum$_ScriptTypes_$25205t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4074:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4085:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4097:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4105:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4113:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4121:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "4129:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "4137:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "4145:6:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "4153:6:77",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "4161:6:77",
                        "type": ""
                      },
                      {
                        "name": "value9",
                        "nodeType": "YulTypedName",
                        "src": "4169:6:77",
                        "type": ""
                      },
                      {
                        "name": "value10",
                        "nodeType": "YulTypedName",
                        "src": "4177:7:77",
                        "type": ""
                      }
                    ],
                    "src": "3887:1599:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5578:238:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5624:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5633:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5641:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5626:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5626:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5626:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5599:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5608:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5595:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5595:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5620:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5591:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5591:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "5588:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5659:36:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5685:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5672:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5672:23:77"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5663:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5729:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5704:24:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5704:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5704:31:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5744:15:77",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5754:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5744:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5768:42:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5795:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5806:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5791:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5791:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5778:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5778:32:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5768:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5536:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5547:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5559:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5567:6:77",
                        "type": ""
                      }
                    ],
                    "src": "5491:325:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5899:177:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5945:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5954:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5962:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5947:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5947:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5947:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5920:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5929:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5916:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5916:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5941:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5912:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5912:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "5909:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5980:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5999:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5993:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5993:16:77"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5984:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6040:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "6018:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6018:28:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6018:28:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6055:15:77",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6065:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6055:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5865:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5876:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5888:6:77",
                        "type": ""
                      }
                    ],
                    "src": "5821:255:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6201:939:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6247:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "6256:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "6264:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6249:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6249:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6249:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6222:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6231:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6218:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6218:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6243:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6214:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6214:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "6211:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6282:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6301:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6295:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6295:16:77"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6286:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6342:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "6320:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6320:28:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6320:28:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6357:15:77",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6367:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6357:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6381:12:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6391:2:77",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6385:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6402:39:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6426:9:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6437:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6422:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6422:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6416:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6416:25:77"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "6406:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6484:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6493:6:77"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6501:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6486:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6486:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6486:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6456:6:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6464:18:77",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6453:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6453:30:77"
                          },
                          "nodeType": "YulIf",
                          "src": "6450:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6519:32:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6533:9:77"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6544:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6529:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6529:22:77"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "6523:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6599:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6608:6:77"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6616:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6601:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6601:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6601:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6578:2:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6582:4:77",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6574:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6574:13:77"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6589:7:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6570:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6570:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6563:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6563:35:77"
                          },
                          "nodeType": "YulIf",
                          "src": "6560:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6634:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6650:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6644:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6644:9:77"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "6638:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6662:70:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "6728:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_bytes4_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "6689:38:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6689:42:77"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6673:15:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6673:59:77"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "6666:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6741:16:77",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "6754:3:77"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "6745:5:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "6773:3:77"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "6778:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6766:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6766:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6766:15:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6790:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "6801:3:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6806:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6797:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6797:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "6790:3:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6818:22:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6833:2:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6837:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6829:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6829:11:77"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "6822:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6895:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6904:6:77"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6912:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6897:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6897:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6897:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "6863:2:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "6871:2:77"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "6875:2:77"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "6867:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6867:11:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6859:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6859:20:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6881:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6855:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6855:29:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6886:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6852:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6852:42:77"
                          },
                          "nodeType": "YulIf",
                          "src": "6849:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6930:15:77",
                          "value": {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "6939:6:77"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "6934:1:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6999:111:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "7020:3:77"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "7031:3:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "7025:5:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7025:10:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7013:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7013:23:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7013:23:77"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7049:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "7060:3:77"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7065:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7056:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7056:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "7049:3:77"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7081:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "7092:3:77"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7097:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7088:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7088:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "7081:3:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "6965:1:77"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "6968:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6962:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6962:9:77"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6972:18:77",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6974:14:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "6983:1:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6986:1:77",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6979:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6979:9:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "6974:1:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6958:3:77",
                            "statements": []
                          },
                          "src": "6954:156:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7119:15:77",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "7129:5:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7119:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_boolt_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6159:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6170:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6182:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6190:6:77",
                        "type": ""
                      }
                    ],
                    "src": "6081:1059:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7215:120:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7261:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7270:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7278:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7263:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7263:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7263:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7236:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7245:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7232:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7232:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7257:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7228:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7228:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "7225:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7296:33:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7319:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7306:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7306:23:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7296:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7181:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7192:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7204:6:77",
                        "type": ""
                      }
                    ],
                    "src": "7145:190:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7421:113:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7467:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7476:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "7484:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7469:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7469:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7469:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7442:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7451:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7438:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7438:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7463:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7434:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7434:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "7431:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7502:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7518:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7512:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7512:16:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7502:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7387:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7398:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7410:6:77",
                        "type": ""
                      }
                    ],
                    "src": "7340:194:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7846:1437:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7893:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "7902:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "7910:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7895:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7895:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7895:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7867:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7876:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7863:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7863:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7888:3:77",
                                "type": "",
                                "value": "320"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7859:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7859:33:77"
                          },
                          "nodeType": "YulIf",
                          "src": "7856:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7928:38:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7956:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "7938:17:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7938:28:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "7928:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7975:46:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8006:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8017:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8002:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8002:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7989:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7989:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7979:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8030:28:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8040:18:77",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8034:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8085:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "8094:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "8102:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8087:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8087:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8087:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8073:6:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8081:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8070:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8070:14:77"
                          },
                          "nodeType": "YulIf",
                          "src": "8067:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8120:59:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8151:9:77"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8162:6:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8147:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8147:22:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8171:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8130:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8130:49:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8120:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8188:48:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8221:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8232:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8217:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8217:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8204:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8204:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "8192:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8265:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "8274:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "8282:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8267:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8267:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8267:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "8251:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8261:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8248:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8248:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "8245:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8300:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8331:9:77"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8342:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8327:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8327:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8353:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8310:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8310:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8300:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8370:47:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8402:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8413:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8398:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8398:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "8380:17:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8380:37:77"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "8370:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8426:43:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8453:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8464:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8449:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8449:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8436:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8436:33:77"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "8426:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8478:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8511:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8522:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8507:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8507:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8494:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8494:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "8482:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8556:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "8565:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "8573:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8558:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8558:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8558:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "8542:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8552:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8539:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8539:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "8536:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8591:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8622:9:77"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8633:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8618:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8618:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8644:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8601:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8601:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "8591:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8661:43:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8688:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8699:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8684:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8684:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8671:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8671:33:77"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "8661:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8713:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8746:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8757:3:77",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8742:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8742:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8729:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8729:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "8717:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8791:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value7",
                                      "nodeType": "YulIdentifier",
                                      "src": "8800:6:77"
                                    },
                                    {
                                      "name": "value7",
                                      "nodeType": "YulIdentifier",
                                      "src": "8808:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8793:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8793:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8793:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "8777:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8787:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8774:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8774:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "8771:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8826:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8857:9:77"
                                  },
                                  {
                                    "name": "offset_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8868:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8853:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8853:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8879:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8836:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8836:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "8826:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8896:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8929:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8940:3:77",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8925:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8925:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8912:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8912:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_4",
                              "nodeType": "YulTypedName",
                              "src": "8900:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8974:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value8",
                                      "nodeType": "YulIdentifier",
                                      "src": "8983:6:77"
                                    },
                                    {
                                      "name": "value8",
                                      "nodeType": "YulIdentifier",
                                      "src": "8991:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8976:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8976:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8976:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_4",
                                "nodeType": "YulIdentifier",
                                "src": "8960:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8970:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8957:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8957:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "8954:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9009:73:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9052:9:77"
                                  },
                                  {
                                    "name": "offset_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "9063:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9048:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9048:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9074:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "9019:28:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9019:63:77"
                          },
                          "variableNames": [
                            {
                              "name": "value8",
                              "nodeType": "YulIdentifier",
                              "src": "9009:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9091:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9124:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9135:3:77",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9120:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9120:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9107:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9107:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_5",
                              "nodeType": "YulTypedName",
                              "src": "9095:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9169:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value9",
                                      "nodeType": "YulIdentifier",
                                      "src": "9178:6:77"
                                    },
                                    {
                                      "name": "value9",
                                      "nodeType": "YulIdentifier",
                                      "src": "9186:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9171:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9171:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9171:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_5",
                                "nodeType": "YulIdentifier",
                                "src": "9155:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9165:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9152:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9152:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "9149:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9204:73:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9247:9:77"
                                  },
                                  {
                                    "name": "offset_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "9258:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9243:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9243:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9269:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "9214:28:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9214:63:77"
                          },
                          "variableNames": [
                            {
                              "name": "value9",
                              "nodeType": "YulIdentifier",
                              "src": "9204:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4t_bytes_memory_ptrt_bytes_memory_ptrt_bytes4t_uint256t_bytes_memory_ptrt_uint256t_bytes_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7740:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7751:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7763:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7771:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7779:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7787:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7795:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "7803:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "7811:6:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "7819:6:77",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "7827:6:77",
                        "type": ""
                      },
                      {
                        "name": "value9",
                        "nodeType": "YulTypedName",
                        "src": "7835:6:77",
                        "type": ""
                      }
                    ],
                    "src": "7539:1744:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9419:555:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9465:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "9474:6:77"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "9482:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9467:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9467:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9467:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9440:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9449:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9436:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9436:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9461:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9432:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9432:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "9429:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9500:37:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9527:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9514:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9514:23:77"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "9504:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9546:28:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9556:18:77",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "9550:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9601:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "9610:6:77"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "9618:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9603:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9603:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9603:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9589:6:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9597:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9586:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9586:14:77"
                          },
                          "nodeType": "YulIf",
                          "src": "9583:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9636:84:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9692:9:77"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "9703:6:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9688:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9688:22:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9712:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "9662:25:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9662:58:77"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "9640:8:77",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "9650:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9729:18:77",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "9739:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9729:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9756:18:77",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "9766:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9756:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9783:48:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9816:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9827:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9812:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9812:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9799:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9799:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "9787:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9860:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "9869:6:77"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "9877:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9862:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9862:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9862:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "9846:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9856:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9843:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9843:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "9840:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9895:73:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9938:9:77"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9949:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9934:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9934:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9960:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "9905:28:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9905:63:77"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "9895:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_calldata_ptrt_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9369:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9380:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9392:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9400:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9408:6:77",
                        "type": ""
                      }
                    ],
                    "src": "9288:686:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10312:1778:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10359:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10368:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10376:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10361:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10361:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10361:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10333:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10342:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10329:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10329:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10354:3:77",
                                "type": "",
                                "value": "288"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10325:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10325:33:77"
                          },
                          "nodeType": "YulIf",
                          "src": "10322:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10394:37:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10421:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10408:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10408:23:77"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10398:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10440:28:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10450:18:77",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10444:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10495:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10504:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10512:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10497:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10497:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10497:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10483:6:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10491:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10480:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10480:14:77"
                          },
                          "nodeType": "YulIf",
                          "src": "10477:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10530:59:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10561:9:77"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "10572:6:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10557:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10557:22:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10581:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "10540:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10540:49:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10530:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10598:48:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10631:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10642:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10627:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10627:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10614:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10614:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "10602:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10675:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10684:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10692:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10677:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10677:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10677:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "10661:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10671:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10658:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10658:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "10655:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10710:72:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10752:9:77"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10763:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10748:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10748:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10774:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_bytes4_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "10720:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10720:62:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10710:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10791:48:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10824:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10835:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10820:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10820:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10807:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10807:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "10795:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10868:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10877:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "10885:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10870:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10870:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10870:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "10854:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10864:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10851:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10851:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "10848:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10903:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10934:9:77"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "10945:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10930:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10930:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10956:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "10913:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10913:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "10903:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10973:48:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11006:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11017:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11002:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11002:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10989:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10989:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "10977:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11050:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11059:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11067:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11052:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11052:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11052:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "11036:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11046:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11033:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11033:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "11030:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11085:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11116:9:77"
                                  },
                                  {
                                    "name": "offset_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "11127:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11112:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11112:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11138:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "11095:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11095:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "11085:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11155:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11188:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11199:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11184:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11184:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11171:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11171:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_4",
                              "nodeType": "YulTypedName",
                              "src": "11159:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11233:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11242:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11250:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11235:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11235:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11235:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_4",
                                "nodeType": "YulIdentifier",
                                "src": "11219:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11229:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11216:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11216:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "11213:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11268:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11299:9:77"
                                  },
                                  {
                                    "name": "offset_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "11310:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11295:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11295:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11321:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "11278:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11278:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "11268:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11338:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11371:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11382:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11367:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11367:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11354:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11354:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_5",
                              "nodeType": "YulTypedName",
                              "src": "11342:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11416:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11425:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11433:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11418:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11418:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11418:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_5",
                                "nodeType": "YulIdentifier",
                                "src": "11402:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11412:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11399:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11399:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "11396:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11451:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11482:9:77"
                                  },
                                  {
                                    "name": "offset_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "11493:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11478:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11478:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11504:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "11461:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11461:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "11451:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11521:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11554:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11565:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11550:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11550:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11537:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11537:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_6",
                              "nodeType": "YulTypedName",
                              "src": "11525:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11599:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11608:6:77"
                                    },
                                    {
                                      "name": "value6",
                                      "nodeType": "YulIdentifier",
                                      "src": "11616:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11601:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11601:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11601:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_6",
                                "nodeType": "YulIdentifier",
                                "src": "11585:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11595:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11582:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11582:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "11579:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11634:72:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11676:9:77"
                                  },
                                  {
                                    "name": "offset_6",
                                    "nodeType": "YulIdentifier",
                                    "src": "11687:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11672:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11672:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11698:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_bytes4_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "11644:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11644:62:77"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "11634:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11715:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11748:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11759:3:77",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11744:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11744:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11731:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11731:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_7",
                              "nodeType": "YulTypedName",
                              "src": "11719:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11793:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value7",
                                      "nodeType": "YulIdentifier",
                                      "src": "11802:6:77"
                                    },
                                    {
                                      "name": "value7",
                                      "nodeType": "YulIdentifier",
                                      "src": "11810:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11795:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11795:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11795:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_7",
                                "nodeType": "YulIdentifier",
                                "src": "11779:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11789:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11776:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11776:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "11773:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11828:61:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11859:9:77"
                                  },
                                  {
                                    "name": "offset_7",
                                    "nodeType": "YulIdentifier",
                                    "src": "11870:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11855:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11855:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11881:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "11838:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11838:51:77"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "11828:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11898:49:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11931:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11942:3:77",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11927:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11927:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11914:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11914:33:77"
                          },
                          "variables": [
                            {
                              "name": "offset_8",
                              "nodeType": "YulTypedName",
                              "src": "11902:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11976:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value8",
                                      "nodeType": "YulIdentifier",
                                      "src": "11985:6:77"
                                    },
                                    {
                                      "name": "value8",
                                      "nodeType": "YulIdentifier",
                                      "src": "11993:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11978:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11978:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11978:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_8",
                                "nodeType": "YulIdentifier",
                                "src": "11962:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11972:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11959:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11959:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "11956:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12011:73:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12054:9:77"
                                  },
                                  {
                                    "name": "offset_8",
                                    "nodeType": "YulIdentifier",
                                    "src": "12065:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12050:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12050:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12076:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "12021:28:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12021:63:77"
                          },
                          "variableNames": [
                            {
                              "name": "value8",
                              "nodeType": "YulIdentifier",
                              "src": "12011:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptrt_array$_t_bytes4_$dyn_memory_ptrt_bytes_memory_ptrt_bytes_memory_ptrt_bytes_memory_ptrt_bytes_memory_ptrt_array$_t_bytes4_$dyn_memory_ptrt_bytes_memory_ptrt_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10214:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10225:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10237:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10245:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10253:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10261:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "10269:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "10277:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "10285:6:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "10293:6:77",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "10301:6:77",
                        "type": ""
                      }
                    ],
                    "src": "9979:2111:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12165:120:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12211:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "12220:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "12228:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12213:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12213:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12213:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12186:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12195:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12182:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12182:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12207:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12178:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12178:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "12175:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12246:33:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12269:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12256:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12256:23:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12246:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12131:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12142:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12154:6:77",
                        "type": ""
                      }
                    ],
                    "src": "12095:190:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12371:113:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12417:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "12426:6:77"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "12434:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12419:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12419:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12419:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12392:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12401:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12388:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12388:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12413:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12384:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12384:32:77"
                          },
                          "nodeType": "YulIf",
                          "src": "12381:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12452:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12468:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "12462:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12462:16:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12452:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12337:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12348:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12360:6:77",
                        "type": ""
                      }
                    ],
                    "src": "12290:194:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12655:661:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12702:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12711:6:77"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12719:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12704:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12704:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12704:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12676:7:77"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12685:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12672:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12672:23:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12697:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12668:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12668:33:77"
                          },
                          "nodeType": "YulIf",
                          "src": "12665:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12737:33:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12760:9:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12747:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12747:23:77"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12737:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12779:46:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12810:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12821:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12806:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12806:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12793:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12793:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "12783:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12834:28:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12844:18:77",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12838:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12889:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12898:6:77"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "12906:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12891:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12891:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12891:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12877:6:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12885:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12874:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12874:14:77"
                          },
                          "nodeType": "YulIf",
                          "src": "12871:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12924:59:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12955:9:77"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "12966:6:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12951:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12951:22:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12975:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "12934:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12934:49:77"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12924:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12992:57:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13034:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13045:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13030:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13030:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_enum_ScriptTypes",
                              "nodeType": "YulIdentifier",
                              "src": "13002:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13002:47:77"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12992:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13058:48:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13091:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13102:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13087:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13087:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13074:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13074:32:77"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "13062:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13135:26:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "13144:6:77"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "13152:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13137:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13137:22:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13137:22:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "13121:8:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "13131:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13118:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13118:16:77"
                          },
                          "nodeType": "YulIf",
                          "src": "13115:2:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13170:86:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13226:9:77"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "13237:8:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13222:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13222:24:77"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "13248:7:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "13196:25:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13196:60:77"
                          },
                          "variables": [
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "13174:8:77",
                              "type": ""
                            },
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "13184:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13265:18:77",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "13275:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "13265:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13292:18:77",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "13302:8:77"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "13292:6:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_bytes_memory_ptrt_enum$_ScriptTypes_$25205t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12589:9:77",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12600:7:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12612:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12620:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12628:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "12636:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "12644:6:77",
                        "type": ""
                      }
                    ],
                    "src": "12489:827:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13387:202:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13404:3:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13409:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13397:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13397:19:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13397:19:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13442:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13447:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13438:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13438:14:77"
                              },
                              {
                                "name": "start",
                                "nodeType": "YulIdentifier",
                                "src": "13454:5:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13461:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "13425:12:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13425:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13425:43:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "13492:3:77"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "13497:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13488:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13488:16:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13506:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13484:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13484:27:77"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "13513:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13477:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13477:40:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13477:40:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13526:57:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13541:3:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "13554:6:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13562:2:77",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "13550:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13550:15:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13571:2:77",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "13567:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13567:7:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "13546:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13546:29:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13537:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13537:39:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13578:4:77",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13533:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13533:50:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "13526:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "start",
                        "nodeType": "YulTypedName",
                        "src": "13356:5:77",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13363:6:77",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13371:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13379:3:77",
                        "type": ""
                      }
                    ],
                    "src": "13321:268:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13643:208:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13653:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13673:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13667:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13667:12:77"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "13657:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13695:3:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13700:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13688:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13688:19:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13688:19:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13742:5:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13749:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13738:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13738:16:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13760:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13765:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13756:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13756:14:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13772:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "13716:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13716:63:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13716:63:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13788:57:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "13803:3:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "13816:6:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13824:2:77",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "13812:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13812:15:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "13833:2:77",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "13829:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "13829:7:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "13808:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13808:29:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13799:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13799:39:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13840:4:77",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13795:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13795:50:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "13788:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13620:5:77",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13627:3:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "13635:3:77",
                        "type": ""
                      }
                    ],
                    "src": "13594:257:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13909:186:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13951:111:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13972:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13979:3:77",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13984:10:77",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "13975:3:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13975:20:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13965:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13965:31:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13965:31:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14016:1:77",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14019:4:77",
                                      "type": "",
                                      "value": "0x21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "14009:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14009:15:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14009:15:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14044:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14047:4:77",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14037:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14037:15:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14037:15:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13932:5:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13939:1:77",
                                    "type": "",
                                    "value": "5"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13929:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13929:12:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13922:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13922:20:77"
                          },
                          "nodeType": "YulIf",
                          "src": "13919:2:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14078:3:77"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14083:5:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14071:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14071:18:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14071:18:77"
                        }
                      ]
                    },
                    "name": "abi_encode_enum_ScriptTypes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13893:5:77",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13900:3:77",
                        "type": ""
                      }
                    ],
                    "src": "13856:239:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14143:75:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14160:3:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14173:3:77",
                                        "type": "",
                                        "value": "208"
                                      },
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "14178:5:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "14169:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14169:15:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14190:3:77",
                                        "type": "",
                                        "value": "208"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14195:14:77",
                                        "type": "",
                                        "value": "0xffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "14186:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14186:24:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14165:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14165:46:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14153:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14153:59:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14153:59:77"
                        }
                      ]
                    },
                    "name": "abi_encode_uint48",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14127:5:77",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14134:3:77",
                        "type": ""
                      }
                    ],
                    "src": "14100:118:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14342:110:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14359:3:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14372:2:77",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "14376:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "14368:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14368:15:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14389:26:77",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "14385:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14385:31:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14364:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14364:53:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14352:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14352:66:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14352:66:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14427:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14438:3:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14443:2:77",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14434:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14434:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "14427:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14318:3:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14323:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14334:3:77",
                        "type": ""
                      }
                    ],
                    "src": "14223:229:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14576:63:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14593:3:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "14598:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14586:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14586:19:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14586:19:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14614:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14625:3:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14630:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14621:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14621:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "14614:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14552:3:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14557:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14568:3:77",
                        "type": ""
                      }
                    ],
                    "src": "14457:182:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14879:439:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14889:30:77",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14903:3:77",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14908:10:77",
                                "type": "",
                                "value": "0xffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "14899:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14899:20:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14893:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14935:3:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14944:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14952:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14940:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14940:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14928:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14928:28:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14928:28:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14965:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "14985:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14979:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14979:13:77"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "14969:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15027:6:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15035:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15023:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15023:17:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "15046:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15051:1:77",
                                    "type": "",
                                    "value": "4"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15042:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15042:11:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15055:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "15001:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15001:61:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15001:61:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15071:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15085:3:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15090:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15081:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15081:16:77"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "15075:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15106:29:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "15128:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15122:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15122:13:77"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nodeType": "YulTypedName",
                              "src": "15110:8:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "15170:6:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15178:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15166:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15166:17:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "15189:2:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15193:1:77",
                                    "type": "",
                                    "value": "4"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15185:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15185:10:77"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "15197:8:77"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "15144:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15144:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15144:62:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15215:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "15229:2:77"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "15233:8:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15225:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15225:17:77"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "15219:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "15262:2:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15266:1:77",
                                    "type": "",
                                    "value": "4"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15258:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15258:10:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "15274:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15282:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15270:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15270:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15251:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15251:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15251:35:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15295:17:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "15306:2:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15310:1:77",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15302:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15302:10:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "15295:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__to_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14831:3:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "14836:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "14844:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14852:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14860:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14871:3:77",
                        "type": ""
                      }
                    ],
                    "src": "14644:674:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15460:137:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15470:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "15490:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "15484:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15484:13:77"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "15474:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "15532:6:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15540:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15528:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15528:17:77"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15547:3:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15552:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "15506:21:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15506:53:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15506:53:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15568:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15579:3:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "15584:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15575:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15575:16:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "15568:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "15436:3:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15441:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "15452:3:77",
                        "type": ""
                      }
                    ],
                    "src": "15323:274:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15947:297:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "15964:3:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15969:31:77",
                                "type": "",
                                "value": "Type assertion failed. Got 0x"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15957:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15957:44:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15957:44:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16010:42:77",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16024:3:77",
                                "type": "",
                                "value": "176"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16029:22:77",
                                "type": "",
                                "value": "0xffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "16020:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16020:32:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "16014:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "16072:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16077:2:77",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16068:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16068:12:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16090:3:77",
                                        "type": "",
                                        "value": "176"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "16095:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "16086:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16086:16:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "16104:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "16082:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16082:25:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16061:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16061:47:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16061:47:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "16128:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16133:2:77",
                                    "type": "",
                                    "value": "39"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16124:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16124:12:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16138:15:77",
                                "type": "",
                                "value": ". Expected 0x"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16117:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16117:37:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16117:37:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "16174:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16179:2:77",
                                    "type": "",
                                    "value": "52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16170:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16170:12:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16192:3:77",
                                        "type": "",
                                        "value": "176"
                                      },
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "16197:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "16188:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16188:16:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "16206:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "16184:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16184:25:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16163:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16163:47:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16163:47:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16219:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16230:3:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16235:2:77",
                                "type": "",
                                "value": "62"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16226:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16226:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "16219:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_2f02b416aa4f77f4220c3b6bf415b34f2494631d10ac20cd509c0fe0e4f80593_t_uint80_t_stringliteral_c0efbfebb65cadd8bb13aebc0ea085f1329fae1d7376b5e0aa452fe70b6d6b80_t_uint80__to_t_string_memory_ptr_t_uint80_t_string_memory_ptr_t_uint80__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "15915:3:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15920:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15928:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "15939:3:77",
                        "type": ""
                      }
                    ],
                    "src": "15602:642:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16469:175:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16486:3:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16491:29:77",
                                "type": "",
                                "value": "Non-minimal var int. Got 0x"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16479:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16479:42:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16479:42:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "16541:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16546:2:77",
                                    "type": "",
                                    "value": "27"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16537:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16537:12:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16559:3:77",
                                        "type": "",
                                        "value": "112"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "16564:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "16555:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16555:16:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16577:30:77",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "16573:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16573:35:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "16551:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16551:58:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16530:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16530:80:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16530:80:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16619:19:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "16630:3:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16635:2:77",
                                "type": "",
                                "value": "45"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16626:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16626:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "16619:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_f5ba01602309121b22768893a47c461cb54a96eb03f87159f6021963e1d5efb2_t_uint144__to_t_string_memory_ptr_t_uint144__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "16445:3:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16450:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "16461:3:77",
                        "type": ""
                      }
                    ],
                    "src": "16249:395:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17349:645:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17366:3:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17371:34:77",
                                "type": "",
                                "value": "TypedMemView/index - Overran the"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17359:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17359:47:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17359:47:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17426:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17431:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17422:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17422:12:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17436:23:77",
                                "type": "",
                                "value": " view. Slice is at 0x"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17415:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17415:45:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17415:45:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17469:34:77",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17483:3:77",
                                "type": "",
                                "value": "208"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17488:14:77",
                                "type": "",
                                "value": "0xffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "17479:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17479:24:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "17473:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17523:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17528:2:77",
                                    "type": "",
                                    "value": "53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17519:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17519:12:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17541:3:77",
                                        "type": "",
                                        "value": "208"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "17546:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "17537:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17537:16:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17555:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17533:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17533:25:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17512:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17512:47:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17512:47:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17568:27:77",
                          "value": {
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "17578:17:77",
                            "type": "",
                            "value": " with length 0x"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "17572:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17615:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17620:2:77",
                                    "type": "",
                                    "value": "59"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17611:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17611:12:77"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "17625:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17604:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17604:24:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17604:24:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17648:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17653:2:77",
                                    "type": "",
                                    "value": "74"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17644:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17644:12:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17666:3:77",
                                        "type": "",
                                        "value": "208"
                                      },
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "17671:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "17662:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17662:16:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17680:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17658:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17658:25:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17637:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17637:47:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17637:47:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17704:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17709:2:77",
                                    "type": "",
                                    "value": "80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17700:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17700:12:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17714:34:77",
                                "type": "",
                                "value": ". Attempted to index at offset 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17693:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17693:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17693:56:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17769:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17774:3:77",
                                    "type": "",
                                    "value": "112"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17765:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17765:13:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17780:3:77",
                                "type": "",
                                "value": "x"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17758:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17758:26:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17758:26:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17804:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17809:3:77",
                                    "type": "",
                                    "value": "113"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17800:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17800:13:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17823:3:77",
                                        "type": "",
                                        "value": "208"
                                      },
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "17828:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "17819:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17819:16:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17837:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17815:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17815:25:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17793:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17793:48:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17793:48:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17861:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17866:3:77",
                                    "type": "",
                                    "value": "119"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17857:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17857:13:77"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "17872:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17850:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17850:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17850:25:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "17902:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17914:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17919:3:77",
                                    "type": "",
                                    "value": "134"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17910:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17910:13:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint48",
                              "nodeType": "YulIdentifier",
                              "src": "17884:17:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17884:40:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17884:40:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17944:3:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17949:3:77",
                                    "type": "",
                                    "value": "140"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17940:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17940:13:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17955:3:77",
                                "type": "",
                                "value": "."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17933:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17933:26:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17933:26:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17968:20:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17979:3:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17984:3:77",
                                "type": "",
                                "value": "141"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17975:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17975:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17968:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_fb6c6ce939dcb005b895abe7a9570250d9c1c31a5440a6a6e28e0acc2d1c6af1_t_uint48_t_stringliteral_3e6849d566dba71a1ac686a5bd3af1bed003e25465c91471808028cdad9d144b_t_uint48_t_stringliteral_76d133faf43042eef7167f01d32e0891632a5651573db9fc8b6aa42fdbcaf509_t_uint48_t_stringliteral_3e6849d566dba71a1ac686a5bd3af1bed003e25465c91471808028cdad9d144b_t_uint48_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf__to_t_string_memory_ptr_t_uint48_t_string_memory_ptr_t_uint48_t_string_memory_ptr_t_uint48_t_string_memory_ptr_t_uint48_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17301:3:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "17306:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "17314:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17322:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17330:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17341:3:77",
                        "type": ""
                      }
                    ],
                    "src": "16649:1345:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18100:102:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18110:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18122:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18133:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18118:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18118:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18110:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18152:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18167:6:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18183:3:77",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18188:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "18179:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18179:11:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18192:1:77",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "18175:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18175:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18163:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18163:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18145:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18145:51:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18145:51:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18069:9:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18080:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18091:4:77",
                        "type": ""
                      }
                    ],
                    "src": "17999:203:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18336:175:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18346:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18358:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18369:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18354:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18354:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18346:4:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18381:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18399:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18404:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "18395:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18395:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18408:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "18391:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18391:19:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18385:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18426:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18441:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18449:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18437:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18437:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18419:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18419:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18419:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18473:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18484:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18469:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18469:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18493:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18501:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18489:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18489:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18462:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18462:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18462:43:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18297:9:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18308:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18316:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18327:4:77",
                        "type": ""
                      }
                    ],
                    "src": "18207:304:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18673:218:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18683:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18695:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18706:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18691:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18691:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18683:4:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18718:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18736:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18741:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "18732:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18732:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18745:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "18728:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18728:19:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18722:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18763:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18778:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18786:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18774:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18774:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18756:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18756:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18756:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18810:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18821:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18806:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18806:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18830:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18838:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18826:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18826:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18799:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18799:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18799:43:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18862:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18873:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18858:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18858:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "18878:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18851:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18851:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18851:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18626:9:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "18637:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18645:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18653:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18664:4:77",
                        "type": ""
                      }
                    ],
                    "src": "18516:375:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19135:299:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19152:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19167:6:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19183:3:77",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19188:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "19179:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "19179:11:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19192:1:77",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "19175:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19175:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19163:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19163:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19145:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19145:51:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19145:51:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19216:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19227:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19212:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19212:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19232:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19205:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19205:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19205:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19259:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19270:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19255:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19255:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "19275:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19248:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19248:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19248:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19302:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19313:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19298:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19298:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19318:3:77",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19291:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19291:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19291:31:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19331:53:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "19356:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19368:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19379:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19364:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19364:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19339:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19339:45:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19331:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19404:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19415:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19400:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19400:19:77"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "19421:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19393:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19393:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19393:35:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bytes32_t_uint256_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes32_t_uint256_t_bytes_memory_ptr_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19072:9:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "19083:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "19091:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19099:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19107:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19115:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19126:4:77",
                        "type": ""
                      }
                    ],
                    "src": "18896:538:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19670:299:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19687:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19702:6:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19718:3:77",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19723:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "19714:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "19714:11:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19727:1:77",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "19710:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19710:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19698:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19698:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19680:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19680:51:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19680:51:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19751:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19762:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19747:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19747:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19767:3:77",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19740:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19740:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19740:31:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19780:53:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "19805:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19817:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19828:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19813:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19813:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19788:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19788:45:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19780:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19853:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19864:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19849:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19849:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "19869:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19842:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19842:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19842:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19896:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19907:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19892:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19892:18:77"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "19912:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19885:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19885:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19885:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19939:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19950:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19935:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19935:19:77"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "19956:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19928:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19928:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19928:35:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256_t_bytes32_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256_t_bytes32_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19607:9:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "19618:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "19626:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19634:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19642:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19650:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19661:4:77",
                        "type": ""
                      }
                    ],
                    "src": "19439:530:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20103:145:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20113:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20125:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20136:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20121:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20121:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20113:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20155:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20170:6:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20186:3:77",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20191:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "20182:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20182:11:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20195:1:77",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "20178:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20178:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20166:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20166:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20148:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20148:51:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20148:51:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20219:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20230:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20215:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20215:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20235:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20208:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20208:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20208:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20064:9:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20075:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20083:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20094:4:77",
                        "type": ""
                      }
                    ],
                    "src": "19974:274:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20438:262:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20448:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20460:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20471:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20456:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20456:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20448:4:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20484:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20502:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20507:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "20498:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20498:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20511:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20494:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20494:19:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20488:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20529:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20544:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20552:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20540:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20540:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20522:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20522:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20522:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20576:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20587:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20572:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20572:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20592:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20565:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20565:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20565:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20619:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20630:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20615:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20615:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "20639:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20647:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20635:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20635:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20608:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20608:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20608:43:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20671:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20682:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20667:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20667:18:77"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "20687:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20660:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20660:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20660:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20383:9:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20394:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20402:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20410:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20418:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20429:4:77",
                        "type": ""
                      }
                    ],
                    "src": "20253:447:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20918:315:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20928:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20940:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20951:3:77",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20936:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20936:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20928:4:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20964:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20982:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20987:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "20978:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20978:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20991:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20974:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20974:19:77"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20968:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21009:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21024:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21032:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21020:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21020:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21002:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21002:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21002:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21056:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21067:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21052:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21052:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21072:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21045:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21045:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21045:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21099:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21110:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21095:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21095:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "21119:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21127:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21115:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21115:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21088:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21088:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21088:43:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21151:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21162:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21147:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21147:18:77"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21167:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21140:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21140:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21140:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21194:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21205:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21190:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21190:19:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "21215:6:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21223:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21211:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21211:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21183:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21183:44:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21183:44:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20855:9:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "20866:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20874:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20882:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20890:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20898:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20909:4:77",
                        "type": ""
                      }
                    ],
                    "src": "20705:528:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21333:92:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21343:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21355:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21366:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21351:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21351:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21343:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21385:9:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "21410:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "21403:6:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21403:14:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "21396:6:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21396:22:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21378:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21378:41:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21378:41:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21302:9:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21313:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21324:4:77",
                        "type": ""
                      }
                    ],
                    "src": "21238:187:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21559:115:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21576:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21587:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21569:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21569:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21569:21:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21599:69:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21633:6:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21641:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21653:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21664:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21649:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21649:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "21607:25:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21607:61:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21599:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21520:9:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21531:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21539:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21550:4:77",
                        "type": ""
                      }
                    ],
                    "src": "21430:244:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21836:158:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21853:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21864:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21846:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21846:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21846:21:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21876:69:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21910:6:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21918:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21930:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21941:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21926:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21926:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "21884:25:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21884:61:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21876:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21965:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21976:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21961:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21961:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21981:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21954:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21954:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21954:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_calldata_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21789:9:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21800:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21808:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21816:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21827:4:77",
                        "type": ""
                      }
                    ],
                    "src": "21679:315:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22118:98:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22135:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22146:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22128:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22128:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22128:21:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22158:52:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22183:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22195:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22206:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22191:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22191:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "22166:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22166:44:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22158:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22087:9:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22098:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22109:4:77",
                        "type": ""
                      }
                    ],
                    "src": "21999:217:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22559:502:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22569:13:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22579:3:77",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22573:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22598:9:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22609:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22591:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22591:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22591:21:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22621:52:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22646:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22658:9:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22669:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22654:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22654:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "22629:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22629:44:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22621:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22710:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22722:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22733:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22718:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22718:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_enum_ScriptTypes",
                              "nodeType": "YulIdentifier",
                              "src": "22682:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22682:55:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22682:55:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22757:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22768:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22753:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22753:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22773:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22746:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22746:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22746:34:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22789:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22807:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22812:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "22803:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22803:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22816:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "22799:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22799:19:77"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "22793:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22838:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22849:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22834:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22834:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "22858:6:77"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "22866:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22854:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22854:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22827:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22827:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22827:43:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22890:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22901:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22886:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22886:19:77"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "22907:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22879:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22879:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22879:35:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22934:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22945:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22930:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22930:19:77"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "22951:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22923:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22923:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22923:35:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22978:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22989:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22974:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22974:19:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "22999:6:77"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23007:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22995:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22995:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22967:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22967:44:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22967:44:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23031:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23042:3:77",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23027:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23027:19:77"
                              },
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "23048:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23020:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23020:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23020:35:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_enum$_ScriptTypes_$25205_t_rational_0_by_1_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint8_t_uint256_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22472:9:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "22483:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "22491:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "22499:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "22507:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22515:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22523:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22531:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22539:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22550:4:77",
                        "type": ""
                      }
                    ],
                    "src": "22221:840:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23396:502:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23406:13:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23416:3:77",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23410:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23435:9:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23446:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23428:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23428:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23428:21:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23458:52:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23483:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23495:9:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23506:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23491:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23491:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "23466:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23466:44:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23458:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23547:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23559:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23570:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23555:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23555:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_enum_ScriptTypes",
                              "nodeType": "YulIdentifier",
                              "src": "23519:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23519:55:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23519:55:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23594:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23605:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23590:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23590:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "23610:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23583:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23583:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23583:34:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23626:29:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23644:3:77",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23649:1:77",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "23640:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23640:11:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23653:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23636:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23636:19:77"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "23630:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23675:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23686:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23671:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23671:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "23695:6:77"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23703:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23691:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23691:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23664:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23664:43:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23664:43:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23727:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23738:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23723:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23723:19:77"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "23744:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23716:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23716:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23716:35:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23771:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23782:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23767:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23767:19:77"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "23788:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23760:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23760:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23760:35:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23815:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23826:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23811:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23811:19:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "23836:6:77"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23844:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23832:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23832:15:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23804:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23804:44:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23804:44:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23868:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23879:3:77",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23864:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23864:19:77"
                              },
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "23885:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23857:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23857:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23857:35:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_enum$_ScriptTypes_$25205_t_uint256_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint8_t_uint256_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23309:9:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "23320:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "23328:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "23336:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "23344:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "23352:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "23360:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23368:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23376:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23387:4:77",
                        "type": ""
                      }
                    ],
                    "src": "23066:832:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24024:98:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24041:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24052:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24034:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24034:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24034:21:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24064:52:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "24089:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24101:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24112:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24097:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24097:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "24072:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24072:44:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24064:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23993:9:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24004:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24015:4:77",
                        "type": ""
                      }
                    ],
                    "src": "23903:219:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24301:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24318:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24329:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24311:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24311:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24311:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24352:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24363:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24348:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24348:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24368:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24341:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24341:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24341:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24391:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24402:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24387:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24387:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24407:28:77",
                                "type": "",
                                "value": "CCBurnRouter: zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24380:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24380:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24380:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24445:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24457:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24468:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24453:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24453:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24445:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d51a1c1087121d0b0ced3a7488a6c8c12aa9960fbc2bff1b1f2e10d08944840__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24278:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24292:4:77",
                        "type": ""
                      }
                    ],
                    "src": "24127:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24656:177:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24673:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24684:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24666:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24666:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24666:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24707:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24718:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24703:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24703:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24723:2:77",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24696:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24696:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24696:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24746:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24757:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24742:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24742:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24762:29:77",
                                "type": "",
                                "value": "CCBurnRouter: not finalized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24735:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24735:57:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24735:57:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24801:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24813:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24824:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24809:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24809:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24801:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0f9bf6f690fdfb37b1ecb3fabe06387733350bc079e78c3174d06164198825ff__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24633:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24647:4:77",
                        "type": ""
                      }
                    ],
                    "src": "24482:351:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25012:178:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25029:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25040:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25022:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25022:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25022:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25063:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25074:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25059:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25059:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25079:2:77",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25052:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25052:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25052:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25102:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25113:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25098:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25098:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25118:30:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid script"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25091:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25091:58:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25091:58:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25158:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25170:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25181:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25166:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25166:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25158:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1f629c1bcff6b296eb6b48d4ece829adb7ce742a791b5de1a4b2cb9c83509d0c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24989:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25003:4:77",
                        "type": ""
                      }
                    ],
                    "src": "24838:352:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25369:177:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25386:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25397:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25379:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25379:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25379:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25420:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25431:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25416:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25416:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25436:2:77",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25409:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25409:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25409:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25459:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25470:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25455:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25455:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25475:29:77",
                                "type": "",
                                "value": "BitcoinHelper: vout is null"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25448:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25448:57:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25448:57:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25514:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25526:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25537:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25522:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25522:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25514:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_23122d08c22fbfe0710d3cd445171605b979920eaff286a26f3a74e2b5bb395d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25346:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25360:4:77",
                        "type": ""
                      }
                    ],
                    "src": "25195:351:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25725:177:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25742:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25753:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25735:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25735:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25735:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25776:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25787:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25772:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25772:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25792:2:77",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25765:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25765:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25765:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25815:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25826:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25811:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25811:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25831:29:77",
                                "type": "",
                                "value": "CCBurnRouter: wrong amounts"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25804:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25804:57:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25804:57:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25870:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25882:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25893:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25878:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25878:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25870:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_23f82c3b1f97c5facef59c7520e28fa8bbcf6df8ebb54db904e9ae1c9d5259fa__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25702:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25716:4:77",
                        "type": ""
                      }
                    ],
                    "src": "25551:351:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26081:228:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26098:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26109:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26091:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26091:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26091:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26132:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26143:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26128:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26128:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26148:2:77",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26121:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26121:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26121:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26171:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26182:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26167:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26167:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26187:34:77",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26160:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26160:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26160:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26242:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26253:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26238:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26238:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26258:8:77",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26231:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26231:36:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26231:36:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26276:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26288:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26299:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26284:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26284:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26276:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26058:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26072:4:77",
                        "type": ""
                      }
                    ],
                    "src": "25907:402:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26488:227:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26505:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26516:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26498:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26498:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26498:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26539:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26550:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26535:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26535:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26555:2:77",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26528:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26528:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26528:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26578:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26589:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26574:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26574:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26594:34:77",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 8"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26567:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26567:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26567:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26649:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26660:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26645:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26645:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "26665:7:77",
                                "type": "",
                                "value": " bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26638:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26638:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26638:35:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26682:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26694:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26705:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26690:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26690:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26682:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26465:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26479:4:77",
                        "type": ""
                      }
                    ],
                    "src": "26314:401:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26894:174:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26911:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26922:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26904:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26904:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26904:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26945:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26956:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26941:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26941:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26961:2:77",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26934:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26934:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26934:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26984:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26995:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26980:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26980:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27000:26:77",
                                "type": "",
                                "value": "CCBurnRouter: low amount"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26973:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26973:54:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26973:54:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27036:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27048:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27059:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27044:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27044:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27036:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2b8d6a2bcbf0bafbba736633fefae4ecdffeee6b278d75553138b0300e71fac1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26871:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26885:4:77",
                        "type": ""
                      }
                    ],
                    "src": "26720:348:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27247:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27264:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27275:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27257:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27257:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27257:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27298:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27309:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27294:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27294:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27314:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27287:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27287:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27287:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27337:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27348:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27333:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27333:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27353:28:77",
                                "type": "",
                                "value": "CCBurnRouter: low deadline"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27326:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27326:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27326:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27391:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27403:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27414:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27399:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27399:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27391:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2bb597245ff28b5b02e37cfcd82a8f8206b6656a92188202be220ba0d66c3994__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27224:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27238:4:77",
                        "type": ""
                      }
                    ],
                    "src": "27073:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27602:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27619:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27630:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27612:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27612:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27612:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27653:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27664:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27649:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27649:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27669:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27642:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27642:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27642:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27692:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27703:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27688:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27688:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27708:28:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid path"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27681:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27681:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27681:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27746:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27758:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27769:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27754:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27754:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27746:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2f584eeb1c3991b12d796e15d5432a66486495f3ead066fbe29c7756d2afb9ae__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27579:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27593:4:77",
                        "type": ""
                      }
                    ],
                    "src": "27428:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27957:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27974:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27985:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27967:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27967:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27967:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28008:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28019:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28004:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28004:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28024:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27997:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27997:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27997:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28047:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28058:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28043:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28043:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28063:28:77",
                                "type": "",
                                "value": "CCBurnRouter: wrong inputs"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28036:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28036:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28036:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28101:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28113:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28124:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28109:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28109:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28101:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3533357d8786e948da9a04213db1987798340c8a29c7391e27fb83bd2486cf6a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27934:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27948:4:77",
                        "type": ""
                      }
                    ],
                    "src": "27783:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28312:226:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28329:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28340:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28322:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28322:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28322:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28363:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28374:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28359:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28359:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28379:2:77",
                                "type": "",
                                "value": "36"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28352:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28352:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28352:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28402:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28413:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28398:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28398:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28418:34:77",
                                "type": "",
                                "value": "CCBurnRouter: un-sorted vout ind"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28391:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28391:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28391:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28473:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28484:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28469:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28469:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28489:6:77",
                                "type": "",
                                "value": "exes"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28462:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28462:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28462:34:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28505:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28517:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28528:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28513:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28513:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28505:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3ff75bf8a2220aa058c768cc0c362463d6be96ab44f7b74183d8e8fddd2c1427__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28289:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28303:4:77",
                        "type": ""
                      }
                    ],
                    "src": "28138:400:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28717:179:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28734:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28745:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28727:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28727:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28727:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28768:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28779:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28764:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28764:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28784:2:77",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28757:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28757:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28757:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28807:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28818:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28803:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28803:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28823:31:77",
                                "type": "",
                                "value": "CCBurnRouter: wrong output tx"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28796:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28796:59:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28796:59:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28864:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28876:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28887:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28872:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28872:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28864:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_485dacb5dde0995eff986efa13688766cf868eae54ba852361d9bc23cf54a553__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28694:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28708:4:77",
                        "type": ""
                      }
                    ],
                    "src": "28543:353:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29075:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29092:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29103:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29085:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29085:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29085:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29126:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29137:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29122:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29122:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29142:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29115:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29115:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29115:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29165:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29176:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29161:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29161:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29181:28:77",
                                "type": "",
                                "value": "CCBurnRouter: already paid"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29154:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29154:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29154:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29219:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29231:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29242:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29227:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29227:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29219:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_498f8a81ccf524df76cc000d94754c7bffb7e06432e6f7ce21a606840e88580b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29052:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29066:4:77",
                        "type": ""
                      }
                    ],
                    "src": "28901:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29430:178:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29447:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29458:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29440:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29440:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29440:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29481:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29492:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29477:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29477:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29497:2:77",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29470:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29470:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29470:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29520:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29531:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29516:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29516:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29536:30:77",
                                "type": "",
                                "value": "CCBurnRouter: not for locker"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29509:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29509:58:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29509:58:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29576:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29588:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29599:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29584:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29584:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29576:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_59c87edf66ea74f843bd2e25de9bd52548cdef4e3eff085359cb447f89e0c206__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29407:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29421:4:77",
                        "type": ""
                      }
                    ],
                    "src": "29256:352:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29787:179:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29804:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29815:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29797:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29797:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29797:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29838:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29849:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29834:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29834:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29854:2:77",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29827:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29827:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29827:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29877:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29888:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29873:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29873:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29893:31:77",
                                "type": "",
                                "value": "CCBurnRouter: exchange failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29866:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29866:59:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29866:59:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29934:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29946:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29957:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29942:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29942:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29934:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_64a628963df47de4336c08a12891d4268d65e5820f22dd2be6d03fdea0fe3327__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29764:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29778:4:77",
                        "type": ""
                      }
                    ],
                    "src": "29613:353:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30145:174:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30162:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30173:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30155:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30155:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30155:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30196:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30207:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30192:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30192:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30212:2:77",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30185:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30185:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30185:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30235:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30246:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30231:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30231:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30251:26:77",
                                "type": "",
                                "value": "CCBurnRouter: not locker"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30224:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30224:54:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30224:54:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30287:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30299:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30310:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30295:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30295:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30287:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_76feca81983b66de1dc7e2910233022674d0965d33b7dedd01f226e07b830c04__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30122:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30136:4:77",
                        "type": ""
                      }
                    ],
                    "src": "29971:348:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30498:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30515:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30526:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30508:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30508:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30508:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30549:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30560:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30545:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30545:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30565:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30538:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30538:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30538:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30588:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30599:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30584:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30584:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30604:28:77",
                                "type": "",
                                "value": "BitcoinHelper: vin is null"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30577:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30577:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30577:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30642:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30654:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30665:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30650:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30650:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30642:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7f642aaafc6103490c47359c3e1b75f87816d858ef90b46b5ee466a8478dd812__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30475:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30489:4:77",
                        "type": ""
                      }
                    ],
                    "src": "30324:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30853:179:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30870:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30881:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30863:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30863:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30863:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30904:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30915:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30900:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30900:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30920:2:77",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30893:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30893:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30893:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30943:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30954:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30939:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30939:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30959:31:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid btc fee"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30932:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30932:59:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30932:59:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31000:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31012:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31023:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31008:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31008:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31000:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_81c6996717fe749150fc854bb7f6786e6cd03398f0991f7c08bc43f80025aedc__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30830:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30844:4:77",
                        "type": ""
                      }
                    ],
                    "src": "30679:353:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31211:175:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31228:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31239:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31221:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31221:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31221:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31262:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31273:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31258:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31258:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31278:2:77",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31251:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31251:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31251:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31301:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31312:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31297:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31297:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "31317:27:77",
                                "type": "",
                                "value": "CCBurnRouter: old request"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31290:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31290:55:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31290:55:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31354:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31366:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31377:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31362:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31362:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31354:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8a14ca8dec454a18917c8ec83b85a1764d6eed87fccbd682e7fd5552942b81f3__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31188:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31202:4:77",
                        "type": ""
                      }
                    ],
                    "src": "31037:349:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31565:228:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31582:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31593:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31575:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31575:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31575:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31616:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31627:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31612:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31612:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31632:2:77",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31605:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31605:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31605:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31655:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31666:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31651:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31651:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "31671:34:77",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31644:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31644:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31644:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31726:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31737:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31722:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31722:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "31742:8:77",
                                "type": "",
                                "value": "4 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31715:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31715:36:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31715:36:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31760:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31772:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31783:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31768:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31768:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "31760:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31542:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31556:4:77",
                        "type": ""
                      }
                    ],
                    "src": "31391:402:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31972:182:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31989:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32000:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31982:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31982:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31982:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32023:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32034:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32019:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32019:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32039:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32012:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32012:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32012:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32062:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32073:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32058:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32058:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32078:34:77",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32051:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32051:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32051:62:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32122:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32134:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32145:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32130:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32130:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32122:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "31949:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31963:4:77",
                        "type": ""
                      }
                    ],
                    "src": "31798:356:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32333:166:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32350:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32361:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32343:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32343:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32343:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32384:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32395:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32380:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32380:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32400:2:77",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32373:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32373:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32373:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32423:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32434:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32419:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32419:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32439:18:77",
                                "type": "",
                                "value": "Vin read overrun"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32412:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32412:46:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32412:46:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32467:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32479:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32490:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32475:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32475:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32467:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a957e9d3071160b28fdf54b241ef5554d7ebf4457632e38cd7ec08cd05aece4f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32310:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32324:4:77",
                        "type": ""
                      }
                    ],
                    "src": "32159:340:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32678:248:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32695:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32706:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32688:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32688:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32688:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32729:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32740:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32725:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32725:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32745:2:77",
                                "type": "",
                                "value": "58"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32718:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32718:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32718:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32768:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32779:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32764:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32764:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32784:34:77",
                                "type": "",
                                "value": "TypedMemView/index - Attempted t"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32757:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32757:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32757:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32839:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32850:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32835:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32835:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32855:28:77",
                                "type": "",
                                "value": "o index more than 32 bytes"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32828:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32828:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32828:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32893:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32905:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32916:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32901:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32901:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32893:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b2c061d25dd4dec479f0720f15754fff58a1a4debc7353bd1d3f4b7b23876297__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32655:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32669:4:77",
                        "type": ""
                      }
                    ],
                    "src": "32504:422:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33105:228:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33122:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33133:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33115:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33115:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33115:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33156:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33167:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33152:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33152:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33172:2:77",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33145:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33145:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33145:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33195:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33206:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33191:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33191:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33211:34:77",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 3"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33184:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33184:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33184:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33266:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33277:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33262:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33262:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33282:8:77",
                                "type": "",
                                "value": "2 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33255:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33255:36:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33255:36:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33300:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33312:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33323:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33308:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33308:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "33300:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33082:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "33096:4:77",
                        "type": ""
                      }
                    ],
                    "src": "32931:402:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33512:178:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33529:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33540:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33522:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33522:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33522:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33563:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33574:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33559:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33559:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33579:2:77",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33552:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33552:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33552:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33602:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33613:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33598:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33598:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33618:30:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid reward"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33591:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33591:58:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33591:58:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33658:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33670:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33681:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33666:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33666:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "33658:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ca02a5f8e28dff006ae98bf24a68419cbc701fa52ca60cda1d31f697659de0f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33489:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "33503:4:77",
                        "type": ""
                      }
                    ],
                    "src": "33338:352:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33869:177:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33886:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33897:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33879:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33879:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33879:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33920:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33931:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33916:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33916:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33936:2:77",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33909:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33909:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33909:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33959:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33970:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33955:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33955:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33975:29:77",
                                "type": "",
                                "value": "CCBurnRouter: wrong indexes"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33948:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33948:57:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33948:57:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34014:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34026:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34037:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34022:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34022:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "34014:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cba28824a01414a2de412de5a93e10b6710ad9cbb78984bfcd67f24eaed08ecc__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33846:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "33860:4:77",
                        "type": ""
                      }
                    ],
                    "src": "33695:351:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34225:176:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34242:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34253:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34235:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34235:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34235:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34276:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34287:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34272:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34272:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34292:2:77",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34265:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34265:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34265:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34315:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34326:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34311:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34311:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "34331:28:77",
                                "type": "",
                                "value": "CCBurnRouter: already used"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34304:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34304:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34304:56:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34369:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34381:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34392:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34377:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34377:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "34369:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d8f5345d552258db855668a79836faa6655961b56843e19073616b89b804c3c1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34202:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34216:4:77",
                        "type": ""
                      }
                    ],
                    "src": "34051:350:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34580:167:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34597:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34608:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34590:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34590:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34590:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34631:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34642:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34627:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34627:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34647:2:77",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34620:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34620:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34620:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34670:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34681:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34666:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34666:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "34686:19:77",
                                "type": "",
                                "value": "Vout read overrun"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34659:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34659:47:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34659:47:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34715:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34727:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34738:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34723:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34723:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "34715:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e068e1fd8aa77bf358e8fdf7376e327a6c370f4f6d3627d99c298841a0dd1ff4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34557:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34571:4:77",
                        "type": ""
                      }
                    ],
                    "src": "34406:341:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34926:223:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34943:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34954:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34936:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34936:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34936:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34977:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34988:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34973:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34973:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34993:2:77",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34966:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34966:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34966:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35016:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35027:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35012:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35012:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35032:34:77",
                                "type": "",
                                "value": "CCBurnRouter: deadline not passe"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35005:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35005:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35005:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35087:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35098:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35083:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35083:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35103:3:77",
                                "type": "",
                                "value": "d"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35076:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35076:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35076:31:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35116:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35128:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35139:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35124:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35124:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35116:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e67358fe6f864ed46569fda2352a0a239f48f7181fa18c39201bdea1a3227f70__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34903:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34917:4:77",
                        "type": ""
                      }
                    ],
                    "src": "34752:397:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35328:175:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35345:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35356:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35338:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35338:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35338:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35379:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35390:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35375:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35375:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35395:2:77",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35368:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35368:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35368:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35418:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35429:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35414:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35414:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35434:27:77",
                                "type": "",
                                "value": "CCBurnRouter: invalid fee"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35407:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35407:55:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35407:55:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35471:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35483:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35494:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35479:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35479:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35471:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_eb9b10f896edba34f7480c6937b74b82a142d56eda1e960f5163a38d5f0591cd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35305:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35319:4:77",
                        "type": ""
                      }
                    ],
                    "src": "35154:349:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35682:181:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35699:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35710:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35692:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35692:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35692:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35733:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35744:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35729:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35729:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35749:2:77",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35722:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35722:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35722:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35772:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35783:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35768:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35768:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35788:33:77",
                                "type": "",
                                "value": "ReentrancyGuard: reentrant call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35761:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35761:61:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35761:61:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35831:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35843:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35854:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35839:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35839:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35831:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35659:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35673:4:77",
                        "type": ""
                      }
                    ],
                    "src": "35508:355:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36042:230:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36059:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36070:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36052:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36052:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36052:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36093:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36104:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36089:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36089:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36109:2:77",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36082:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36082:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36082:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36132:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36143:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36128:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36128:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36148:34:77",
                                "type": "",
                                "value": "TypedMemView/copyTo - Null point"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36121:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36121:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36121:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36203:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36214:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36199:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36199:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36219:10:77",
                                "type": "",
                                "value": "er deref"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36192:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36192:38:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36192:38:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36239:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36251:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36262:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36247:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36247:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36239:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_efcd06dabd47a0a59b27bbaba0b6773eb50755e41c6b64a127af091bad45512c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "36019:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "36033:4:77",
                        "type": ""
                      }
                    ],
                    "src": "35868:404:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36451:182:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36468:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36479:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36461:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36461:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36461:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36502:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36513:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36498:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36498:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36518:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36491:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36491:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36491:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36541:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36552:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36537:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36537:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36557:34:77",
                                "type": "",
                                "value": "CCBurnRouter: non-zero lock time"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36530:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36530:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36530:62:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36601:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36613:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36624:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36609:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36609:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36601:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f322d90bb6c7c0a290ec906d91193c3056625e558ccb4e023b1d06c660b32ba1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "36428:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "36442:4:77",
                        "type": ""
                      }
                    ],
                    "src": "36277:356:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36812:233:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36829:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36840:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36822:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36822:21:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36822:21:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36863:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36874:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36859:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36859:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36879:2:77",
                                "type": "",
                                "value": "43"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36852:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36852:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36852:30:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36902:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36913:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36898:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36898:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36918:34:77",
                                "type": "",
                                "value": "TypedMemView/copyTo - Invalid po"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36891:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36891:62:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36891:62:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36973:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36984:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36969:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36969:18:77"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36989:13:77",
                                "type": "",
                                "value": "inter deref"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36962:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36962:41:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36962:41:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37012:27:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37024:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37035:3:77",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37020:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37020:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37012:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f41d5ca586b1d56a0f8933b774181f43461390a9a40414a5d943c157df755196__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "36789:9:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "36803:4:77",
                        "type": ""
                      }
                    ],
                    "src": "36638:407:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37151:76:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37161:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37173:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37184:2:77",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37169:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37169:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37161:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37203:9:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "37214:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37196:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37196:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37196:25:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "37120:9:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "37131:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "37142:4:77",
                        "type": ""
                      }
                    ],
                    "src": "37050:177:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37389:162:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37399:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37411:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37422:2:77",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37407:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37407:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37399:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37441:9:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "37452:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37434:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37434:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37434:25:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37479:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37490:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37475:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37475:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "37495:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37468:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37468:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37468:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37522:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37533:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37518:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37518:18:77"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "37538:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37511:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37511:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37511:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_bytes32_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "37342:9:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "37353:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "37361:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "37369:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "37380:4:77",
                        "type": ""
                      }
                    ],
                    "src": "37232:319:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37685:119:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37695:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37707:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37718:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37703:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37703:18:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37695:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37737:9:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "37748:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37730:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37730:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37730:25:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37775:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37786:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37771:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37771:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "37791:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37764:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37764:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37764:34:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "37646:9:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "37657:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "37665:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "37676:4:77",
                        "type": ""
                      }
                    ],
                    "src": "37556:248:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38133:488:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "38143:13:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "38153:3:77",
                            "type": "",
                            "value": "256"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "38147:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38172:9:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "38183:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38165:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38165:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38165:25:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38210:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38221:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38206:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38206:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "38226:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38199:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38199:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38199:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38253:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38264:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38249:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38249:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "38273:6:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "38289:3:77",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "38294:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "38285:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "38285:11:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "38298:1:77",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "38281:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "38281:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "38269:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38269:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38242:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38242:60:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38242:60:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38322:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38333:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38318:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38318:18:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "38338:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38311:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38311:30:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38311:30:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "38350:52:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "38375:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38387:9:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "38398:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38383:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38383:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "38358:16:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38358:44:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "38350:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38422:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38433:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38418:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38418:19:77"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "38439:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38411:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38411:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38411:35:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38466:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38477:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38462:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38462:19:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value5",
                                        "nodeType": "YulIdentifier",
                                        "src": "38497:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "38490:6:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "38490:14:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "38483:6:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38483:22:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38455:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38455:51:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38455:51:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value6",
                                "nodeType": "YulIdentifier",
                                "src": "38543:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38555:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38566:3:77",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38551:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38551:19:77"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_enum_ScriptTypes",
                              "nodeType": "YulIdentifier",
                              "src": "38515:27:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38515:56:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38515:56:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38591:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38602:3:77",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38587:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38587:19:77"
                              },
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "38608:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38580:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38580:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38580:35:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_address_t_bytes_memory_ptr_t_uint256_t_bool_t_enum$_ScriptTypes_$25205_t_uint256__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr_t_uint256_t_bool_t_uint8_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "38046:9:77",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "38057:6:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "38065:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "38073:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "38081:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "38089:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "38097:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "38105:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "38113:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "38124:4:77",
                        "type": ""
                      }
                    ],
                    "src": "37809:812:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38921:809:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "38931:33:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38949:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38960:3:77",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38945:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38945:19:77"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "38935:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38980:9:77"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "38991:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38973:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38973:25:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38973:25:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39007:12:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "39017:2:77",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "39011:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "39039:9:77"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "39050:2:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39035:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39035:18:77"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "39055:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39028:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39028:34:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39028:34:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "39082:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39093:2:77",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39078:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39078:18:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39098:3:77",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39071:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39071:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39071:31:77"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39111:17:77",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "39122:6:77"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "39115:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "39144:6:77"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "39152:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39137:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39137:22:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39137:22:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "39168:26:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "39179:9:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39190:3:77",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39175:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39175:19:77"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "39168:3:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39203:20:77",
                          "value": {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "39217:6:77"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "39207:6:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39232:13:77",
                          "value": {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "39241:4:77"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "39236:1:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "39303:228:77",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "39317:33:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "39343:6:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "39330:12:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39330:20:77"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "39321:5:77",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "39388:5:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "39363:24:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39363:31:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "39363:31:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "39414:3:77"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "39423:5:77"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "39438:3:77",
                                                  "type": "",
                                                  "value": "160"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "39443:1:77",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "39434:3:77"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "39434:11:77"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "39447:1:77",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "39430:3:77"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "39430:19:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "39419:3:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "39419:31:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "39407:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39407:44:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "39407:44:77"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "39464:19:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "39475:3:77"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "39480:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "39471:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39471:12:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "39464:3:77"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "39496:25:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "39510:6:77"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "39518:2:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "39506:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39506:15:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39496:6:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "39265:1:77"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "39268:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "39262:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39262:13:77"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "39276:18:77",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "39278:14:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "39287:1:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "39290:1:77",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "39283:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39283:9:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "39278:1:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "39258:3:77",
                            "statements": []
                          },
                          "src": "39254:277:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "39540:11:77",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "39548:3:77"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "39540:4:77"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "39571:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39582:2:77",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39567:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39567:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "39591:6:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "39607:3:77",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "39612:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "39603:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "39603:11:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "39616:1:77",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "39599:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "39599:19:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "39587:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39587:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39560:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39560:60:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39560:60:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "39640:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39651:3:77",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39636:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39636:19:77"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "39657:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39629:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39629:35:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39629:35:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "39684:9:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39695:3:77",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "39680:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39680:19:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value6",
                                        "nodeType": "YulIdentifier",
                                        "src": "39715:6:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "39708:6:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "39708:14:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "39701:6:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39701:22:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39673:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39673:51:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39673:51:77"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_array$_t_address_$dyn_calldata_ptr_t_address_t_uint256_t_bool__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "38842:9:77",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "38853:6:77",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "38861:6:77",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "38869:6:77",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "38877:6:77",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "38885:6:77",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "38893:6:77",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "38901:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "38912:4:77",
                        "type": ""
                      }
                    ],
                    "src": "38626:1104:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39780:230:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "39790:19:77",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39806:2:77",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "39800:5:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39800:9:77"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "39790:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39818:58:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "39840:6:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "39856:4:77"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "39862:2:77",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "39852:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "39852:13:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "39871:2:77",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "39867:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "39867:7:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "39848:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39848:27:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39836:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39836:40:77"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "39822:10:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "39951:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "39953:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39953:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "39953:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39894:10:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39906:18:77",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "39891:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39891:34:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39930:10:77"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39942:6:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "39927:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39927:22:77"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "39888:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39888:62:77"
                          },
                          "nodeType": "YulIf",
                          "src": "39885:2:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39989:2:77",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "39993:10:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39982:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39982:22:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39982:22:77"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "39760:4:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39769:6:77",
                        "type": ""
                      }
                    ],
                    "src": "39735:275:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40083:117:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40127:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "40129:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40129:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40129:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "40099:6:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40107:18:77",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "40096:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40096:30:77"
                          },
                          "nodeType": "YulIf",
                          "src": "40093:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "40158:36:77",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "40174:6:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40182:4:77",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "40170:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40170:17:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40189:4:77",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "40166:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40166:28:77"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "40158:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_bytes4_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "40063:6:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "40074:4:77",
                        "type": ""
                      }
                    ],
                    "src": "40015:185:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40253:80:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40280:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "40282:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40282:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40282:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "40269:1:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "40276:1:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "40272:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40272:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "40266:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40266:13:77"
                          },
                          "nodeType": "YulIf",
                          "src": "40263:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "40311:16:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "40322:1:77"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "40325:1:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "40318:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40318:9:77"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "40311:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "40236:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "40239:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "40245:3:77",
                        "type": ""
                      }
                    ],
                    "src": "40205:128:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40385:189:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40395:28:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "40405:18:77",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "40399:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40432:21:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "40447:1:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "40450:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40443:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40443:10:77"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "40436:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40462:21:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "40477:1:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "40480:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40473:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40473:10:77"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "40466:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40517:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "40519:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40519:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40519:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "40498:3:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "40507:2:77"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "40511:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "40503:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40503:12:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "40495:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40495:21:77"
                          },
                          "nodeType": "YulIf",
                          "src": "40492:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "40548:20:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "40559:3:77"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "40564:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "40555:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40555:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "40548:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "40368:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "40371:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "40377:3:77",
                        "type": ""
                      }
                    ],
                    "src": "40338:236:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40625:158:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40635:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "40650:1:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40653:4:77",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40646:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40646:12:77"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "40639:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40667:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "40682:1:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40685:4:77",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40678:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40678:12:77"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "40671:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40726:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "40728:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40728:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40728:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "40705:3:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40714:4:77",
                                    "type": "",
                                    "value": "0xff"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "40720:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "40710:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40710:14:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "40702:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40702:23:77"
                          },
                          "nodeType": "YulIf",
                          "src": "40699:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "40757:20:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "40768:3:77"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "40773:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "40764:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40764:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "40757:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "40608:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "40611:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "40617:3:77",
                        "type": ""
                      }
                    ],
                    "src": "40579:204:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40835:197:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40845:36:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "40855:26:77",
                            "type": "",
                            "value": "0xffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "40849:2:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40890:21:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "40905:1:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "40908:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40901:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40901:10:77"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "40894:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40920:21:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "40935:1:77"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "40938:2:77"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "40931:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40931:10:77"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "40924:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40975:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "40977:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40977:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40977:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "40956:3:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "40965:2:77"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "40969:3:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "40961:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40961:12:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "40953:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40953:21:77"
                          },
                          "nodeType": "YulIf",
                          "src": "40950:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41006:20:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "41017:3:77"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "41022:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "41013:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41013:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "41006:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint96",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "40818:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "40821:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "40827:3:77",
                        "type": ""
                      }
                    ],
                    "src": "40788:244:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41083:171:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "41114:111:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "41135:1:77"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "41142:3:77",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "41147:10:77",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "41138:3:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "41138:20:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "41128:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41128:31:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41128:31:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "41179:1:77",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "41182:4:77",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "41172:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41172:15:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41172:15:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "41207:1:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "41210:4:77",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "41200:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41200:15:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41200:15:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41103:1:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "41096:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41096:9:77"
                          },
                          "nodeType": "YulIf",
                          "src": "41093:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41234:14:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "41243:1:77"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41246:1:77"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "41239:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41239:9:77"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "41234:1:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "41068:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "41071:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "41077:1:77",
                        "type": ""
                      }
                    ],
                    "src": "41037:217:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41311:116:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "41370:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "41372:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41372:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41372:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "41342:1:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "41335:6:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "41335:9:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "41328:6:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41328:17:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "41350:1:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "41361:1:77",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "41357:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "41357:6:77"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "41365:1:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "41353:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "41353:14:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "41347:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41347:21:77"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "41324:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41324:45:77"
                          },
                          "nodeType": "YulIf",
                          "src": "41321:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41401:20:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "41416:1:77"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41419:1:77"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "41412:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41412:9:77"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "41401:7:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "41290:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "41293:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "41299:7:77",
                        "type": ""
                      }
                    ],
                    "src": "41259:168:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41482:188:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "41492:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "41507:1:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41510:4:77",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "41503:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41503:12:77"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "41496:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "41524:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41539:1:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41542:4:77",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "41535:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41535:12:77"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "41528:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "41609:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "41611:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41611:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41611:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "41577:3:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "41570:6:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "41570:11:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "41563:6:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41563:19:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "41587:3:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "41596:4:77",
                                        "type": "",
                                        "value": "0xff"
                                      },
                                      {
                                        "name": "x_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "41602:3:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "41592:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "41592:14:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "41584:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41584:23:77"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "41559:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41559:49:77"
                          },
                          "nodeType": "YulIf",
                          "src": "41556:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41640:24:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "41655:3:77"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "41660:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "41651:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41651:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "41640:7:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "41461:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "41464:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "41470:7:77",
                        "type": ""
                      }
                    ],
                    "src": "41432:238:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41724:76:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "41746:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "41748:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41748:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41748:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "41740:1:77"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41743:1:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "41737:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41737:8:77"
                          },
                          "nodeType": "YulIf",
                          "src": "41734:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41777:17:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "41789:1:77"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41792:1:77"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "41785:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41785:9:77"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "41777:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "41706:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "41709:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "41715:4:77",
                        "type": ""
                      }
                    ],
                    "src": "41675:125:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41852:148:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "41862:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "41877:1:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41880:4:77",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "41873:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41873:12:77"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "41866:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "41894:23:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "41909:1:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41912:4:77",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "41905:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41905:12:77"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "41898:3:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "41942:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "41944:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41944:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41944:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "41932:3:77"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "41937:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "41929:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41929:12:77"
                          },
                          "nodeType": "YulIf",
                          "src": "41926:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41973:21:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "41985:3:77"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "41990:3:77"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "41981:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41981:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "41973:4:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "41834:1:77",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "41837:1:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "41843:4:77",
                        "type": ""
                      }
                    ],
                    "src": "41805:195:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42058:205:77",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "42068:10:77",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "42077:1:77",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "42072:1:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "42137:63:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "42162:3:77"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "42167:1:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "42158:3:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "42158:11:77"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "42181:3:77"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "42186:1:77"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "42177:3:77"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "42177:11:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "42171:5:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "42171:18:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "42151:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42151:39:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "42151:39:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "42098:1:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "42101:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "42095:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42095:13:77"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "42109:19:77",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "42111:15:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "42120:1:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42123:2:77",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "42116:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42116:10:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "42111:1:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "42091:3:77",
                            "statements": []
                          },
                          "src": "42087:113:77"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "42226:31:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "42239:3:77"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "42244:6:77"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "42235:3:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "42235:16:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42253:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "42228:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42228:27:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "42228:27:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "42215:1:77"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "42218:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "42212:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42212:13:77"
                          },
                          "nodeType": "YulIf",
                          "src": "42209:2:77"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "42036:3:77",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "42041:3:77",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "42046:6:77",
                        "type": ""
                      }
                    ],
                    "src": "42005:258:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42323:325:77",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "42333:22:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "42347:4:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42353:1:77",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "42343:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42343:12:77"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "42333:6:77"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "42364:38:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "42394:4:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42400:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "42390:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42390:12:77"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "42368:18:77",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "42441:31:77",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "42443:27:77",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "42457:6:77"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42465:4:77",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "42453:3:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42453:17:77"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "42443:6:77"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "42421:18:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "42414:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42414:26:77"
                          },
                          "nodeType": "YulIf",
                          "src": "42411:2:77"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "42531:111:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42552:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "42559:3:77",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "42564:10:77",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "42555:3:77"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "42555:20:77"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "42545:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42545:31:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "42545:31:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42596:1:77",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42599:4:77",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "42589:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42589:15:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "42589:15:77"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42624:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "42627:4:77",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "42617:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42617:15:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "42617:15:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "42487:18:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "42510:6:77"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42518:2:77",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "42507:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42507:14:77"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "42484:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42484:38:77"
                          },
                          "nodeType": "YulIf",
                          "src": "42481:2:77"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "42303:4:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "42312:6:77",
                        "type": ""
                      }
                    ],
                    "src": "42268:380:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42700:88:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "42731:22:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "42733:16:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "42733:18:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "42733:18:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "42716:5:77"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42727:1:77",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "42723:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42723:6:77"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "42713:2:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42713:17:77"
                          },
                          "nodeType": "YulIf",
                          "src": "42710:2:77"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "42762:20:77",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "42773:5:77"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42780:1:77",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "42769:3:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42769:13:77"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "42762:3:77"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "42682:5:77",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "42692:3:77",
                        "type": ""
                      }
                    ],
                    "src": "42653:135:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42825:95:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42842:1:77",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42849:3:77",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42854:10:77",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "42845:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42845:20:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42835:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42835:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42835:31:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42882:1:77",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42885:4:77",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42875:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42875:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42875:15:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42906:1:77",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42909:4:77",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "42899:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42899:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42899:15:77"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "42793:127:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42957:95:77",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42974:1:77",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42981:3:77",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42986:10:77",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "42977:3:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42977:20:77"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42967:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42967:31:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42967:31:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43014:1:77",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43017:4:77",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "43007:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43007:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43007:15:77"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43038:1:77",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43041:4:77",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "43031:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43031:15:77"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43031:15:77"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "42925:127:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43102:86:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "43166:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43175:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43178:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "43168:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "43168:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "43168:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "43125:5:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "43136:5:77"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "43151:3:77",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "43156:1:77",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "43147:3:77"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "43147:11:77"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "43160:1:77",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "43143:3:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "43143:19:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "43132:3:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "43132:31:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "43122:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43122:42:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "43115:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43115:50:77"
                          },
                          "nodeType": "YulIf",
                          "src": "43112:2:77"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "43091:5:77",
                        "type": ""
                      }
                    ],
                    "src": "43057:131:77"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43235:76:77",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "43289:16:77",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43298:1:77",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "43301:1:77",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "43291:6:77"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "43291:12:77"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "43291:12:77"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "43258:5:77"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "43279:5:77"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "43272:6:77"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "43272:13:77"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "43265:6:77"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "43265:21:77"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "43255:2:77"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43255:32:77"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "43248:6:77"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43248:40:77"
                          },
                          "nodeType": "YulIf",
                          "src": "43245:2:77"
                        }
                      ]
                    },
                    "name": "validator_revert_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "43224:5:77",
                        "type": ""
                      }
                    ],
                    "src": "43193:118:77"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, mul(length, 0x20)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_array_bytes4_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes4_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let src := add(offset, _2)\n        if gt(add(add(offset, mul(_1, _2)), _2), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            mstore(dst, abi_decode_bytes4(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_bytes4_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let src := add(offset, _2)\n        if gt(add(add(offset, mul(_1, _2)), _2), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, 1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n            src := add(src, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_bool(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_bool(value)\n    }\n    function abi_decode_bytes4(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        if gt(_1, 0xffffffffffffffff) { panic_error_0x41() }\n        let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), 0x20))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), array)\n        array := array_1\n    }\n    function abi_decode_enum_ScriptTypes(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 5)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_boolt_array$_t_address_$dyn_calldata_ptrt_uint256t_bytes_memory_ptrt_enum$_ScriptTypes_$25205t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value4, value4) }\n        value0 := abi_decode_address(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(calldataload(add(headStart, 32)), _1) { revert(value4, value4) }\n        let value1_1, value2_1 := abi_decode_array_address_dyn_calldata(add(headStart, calldataload(add(headStart, 32))), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := abi_decode_bool(add(headStart, 64))\n        if gt(calldataload(add(headStart, 96)), _1) { revert(value4, value4) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, calldataload(add(headStart, 96))), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        value6 := calldataload(add(headStart, 128))\n        if gt(calldataload(add(headStart, 160)), _1) { revert(value7, value7) }\n        value7 := abi_decode_bytes(add(headStart, calldataload(add(headStart, 160))), dataEnd)\n        value8 := abi_decode_enum_ScriptTypes(add(headStart, 192))\n        if gt(calldataload(add(headStart, 224)), _1) { revert(value9, value9) }\n        let value9_1, value10_1 := abi_decode_bytes_calldata(add(headStart, calldataload(add(headStart, 224))), dataEnd)\n        value9 := value9_1\n        value10 := value10_1\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_boolt_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n        let _1 := 32\n        let offset := mload(add(headStart, _1))\n        if gt(offset, 0xffffffffffffffff) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value1, value1) }\n        let _3 := mload(_2)\n        let dst := allocate_memory(array_allocation_size_array_bytes4_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let src := add(_2, _1)\n        if gt(add(add(_2, mul(_3, _1)), _1), dataEnd) { revert(value1, value1) }\n        let i := value1\n        for { } lt(i, _3) { i := add(i, 1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value1 := dst_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_bytes4t_bytes_memory_ptrt_bytes_memory_ptrt_bytes4t_uint256t_bytes_memory_ptrt_uint256t_bytes_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(value6, value6) }\n        value0 := abi_decode_bytes4(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value6, value6) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(value6, value6) }\n        value2 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value3 := abi_decode_bytes4(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        let offset_2 := calldataload(add(headStart, 160))\n        if gt(offset_2, _1) { revert(value6, value6) }\n        value5 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n        value6 := calldataload(add(headStart, 192))\n        let offset_3 := calldataload(add(headStart, 224))\n        if gt(offset_3, _1) { revert(value7, value7) }\n        value7 := abi_decode_bytes(add(headStart, offset_3), dataEnd)\n        let offset_4 := calldataload(add(headStart, 256))\n        if gt(offset_4, _1) { revert(value8, value8) }\n        value8 := abi_decode_array_uint256_dyn(add(headStart, offset_4), dataEnd)\n        let offset_5 := calldataload(add(headStart, 288))\n        if gt(offset_5, _1) { revert(value9, value9) }\n        value9 := abi_decode_array_uint256_dyn(add(headStart, offset_5), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value2, value2) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value2, value2) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_array$_t_bytes4_$dyn_memory_ptrt_bytes_memory_ptrt_bytes_memory_ptrt_bytes_memory_ptrt_bytes_memory_ptrt_array$_t_bytes4_$dyn_memory_ptrt_bytes_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(value6, value6) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value6, value6) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value6, value6) }\n        value1 := abi_decode_array_bytes4_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(value6, value6) }\n        value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(value6, value6) }\n        value3 := abi_decode_bytes(add(headStart, offset_3), dataEnd)\n        let offset_4 := calldataload(add(headStart, 128))\n        if gt(offset_4, _1) { revert(value6, value6) }\n        value4 := abi_decode_bytes(add(headStart, offset_4), dataEnd)\n        let offset_5 := calldataload(add(headStart, 160))\n        if gt(offset_5, _1) { revert(value6, value6) }\n        value5 := abi_decode_bytes(add(headStart, offset_5), dataEnd)\n        let offset_6 := calldataload(add(headStart, 192))\n        if gt(offset_6, _1) { revert(value6, value6) }\n        value6 := abi_decode_array_bytes4_dyn(add(headStart, offset_6), dataEnd)\n        let offset_7 := calldataload(add(headStart, 224))\n        if gt(offset_7, _1) { revert(value7, value7) }\n        value7 := abi_decode_bytes(add(headStart, offset_7), dataEnd)\n        let offset_8 := calldataload(add(headStart, 256))\n        if gt(offset_8, _1) { revert(value8, value8) }\n        value8 := abi_decode_array_uint256_dyn(add(headStart, offset_8), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_bytes_memory_ptrt_enum$_ScriptTypes_$25205t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value2, value2) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        value2 := abi_decode_enum_ScriptTypes(add(headStart, 64))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(value4, value4) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), end)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_enum_ScriptTypes(value, pos)\n    {\n        if iszero(lt(value, 5))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(pos, value)\n    }\n    function abi_encode_uint48(value, pos)\n    {\n        mstore(pos, and(shl(208, value), shl(208, 0xffffffffffff)))\n    }\n    function abi_encode_tuple_packed_t_address__to_t_address__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        end := add(pos, 20)\n    }\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_packed_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__to_t_bytes4_t_bytes_memory_ptr_t_bytes_memory_ptr_t_bytes4__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        let _1 := shl(224, 0xffffffff)\n        mstore(pos, and(value0, _1))\n        let length := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(pos, 4), length)\n        let _2 := add(pos, length)\n        let length_1 := mload(value2)\n        copy_memory_to_memory(add(value2, 0x20), add(_2, 4), length_1)\n        let _3 := add(_2, length_1)\n        mstore(add(_3, 4), and(value3, _1))\n        end := add(_3, 8)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_2f02b416aa4f77f4220c3b6bf415b34f2494631d10ac20cd509c0fe0e4f80593_t_uint80_t_stringliteral_c0efbfebb65cadd8bb13aebc0ea085f1329fae1d7376b5e0aa452fe70b6d6b80_t_uint80__to_t_string_memory_ptr_t_uint80_t_string_memory_ptr_t_uint80__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Type assertion failed. Got 0x\")\n        let _1 := shl(176, 0xffffffffffffffffffff)\n        mstore(add(pos, 29), and(shl(176, value0), _1))\n        mstore(add(pos, 39), \". Expected 0x\")\n        mstore(add(pos, 52), and(shl(176, value1), _1))\n        end := add(pos, 62)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_f5ba01602309121b22768893a47c461cb54a96eb03f87159f6021963e1d5efb2_t_uint144__to_t_string_memory_ptr_t_uint144__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Non-minimal var int. Got 0x\")\n        mstore(add(pos, 27), and(shl(112, value0), not(0xffffffffffffffffffffffffffff)))\n        end := add(pos, 45)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_fb6c6ce939dcb005b895abe7a9570250d9c1c31a5440a6a6e28e0acc2d1c6af1_t_uint48_t_stringliteral_3e6849d566dba71a1ac686a5bd3af1bed003e25465c91471808028cdad9d144b_t_uint48_t_stringliteral_76d133faf43042eef7167f01d32e0891632a5651573db9fc8b6aa42fdbcaf509_t_uint48_t_stringliteral_3e6849d566dba71a1ac686a5bd3af1bed003e25465c91471808028cdad9d144b_t_uint48_t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf__to_t_string_memory_ptr_t_uint48_t_string_memory_ptr_t_uint48_t_string_memory_ptr_t_uint48_t_string_memory_ptr_t_uint48_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, \"TypedMemView/index - Overran the\")\n        mstore(add(pos, 32), \" view. Slice is at 0x\")\n        let _1 := shl(208, 0xffffffffffff)\n        mstore(add(pos, 53), and(shl(208, value0), _1))\n        let _2 := \" with length 0x\"\n        mstore(add(pos, 59), _2)\n        mstore(add(pos, 74), and(shl(208, value1), _1))\n        mstore(add(pos, 80), \". Attempted to index at offset 0\")\n        mstore(add(pos, 112), \"x\")\n        mstore(add(pos, 113), and(shl(208, value2), _1))\n        mstore(add(pos, 119), _2)\n        abi_encode_uint48(value3, add(pos, 134))\n        mstore(add(pos, 140), \".\")\n        end := add(pos, 141)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_bytes32_t_uint256_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes32_t_uint256_t_bytes_memory_ptr_t_uint256__fromStack_library_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 160)\n        tail := abi_encode_bytes(value3, add(headStart, 160))\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256_t_bytes32_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 160)\n        tail := abi_encode_bytes(value1, add(headStart, 160))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_uint256__to_t_address_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, _1))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 64))\n        mstore(add(headStart, 32), value2)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_enum$_ScriptTypes_$25205_t_rational_0_by_1_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint8_t_uint256_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        mstore(headStart, _1)\n        tail := abi_encode_bytes(value0, add(headStart, _1))\n        abi_encode_enum_ScriptTypes(value1, add(headStart, 32))\n        mstore(add(headStart, 64), value2)\n        let _2 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), and(value6, _2))\n        mstore(add(headStart, 224), value7)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_enum$_ScriptTypes_$25205_t_uint256_t_address_t_uint256_t_uint256_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint8_t_uint256_t_address_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        mstore(headStart, _1)\n        tail := abi_encode_bytes(value0, add(headStart, _1))\n        abi_encode_enum_ScriptTypes(value1, add(headStart, 32))\n        mstore(add(headStart, 64), value2)\n        let _2 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), and(value6, _2))\n        mstore(add(headStart, 224), value7)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_0d51a1c1087121d0b0ced3a7488a6c8c12aa9960fbc2bff1b1f2e10d08944840__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0f9bf6f690fdfb37b1ecb3fabe06387733350bc079e78c3174d06164198825ff__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"CCBurnRouter: not finalized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1f629c1bcff6b296eb6b48d4ece829adb7ce742a791b5de1a4b2cb9c83509d0c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid script\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_23122d08c22fbfe0710d3cd445171605b979920eaff286a26f3a74e2b5bb395d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"BitcoinHelper: vout is null\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_23f82c3b1f97c5facef59c7520e28fa8bbcf6df8ebb54db904e9ae1c9d5259fa__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"CCBurnRouter: wrong amounts\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 8\")\n        mstore(add(headStart, 96), \" bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2b8d6a2bcbf0bafbba736633fefae4ecdffeee6b278d75553138b0300e71fac1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"CCBurnRouter: low amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2bb597245ff28b5b02e37cfcd82a8f8206b6656a92188202be220ba0d66c3994__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: low deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2f584eeb1c3991b12d796e15d5432a66486495f3ead066fbe29c7756d2afb9ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid path\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3533357d8786e948da9a04213db1987798340c8a29c7391e27fb83bd2486cf6a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: wrong inputs\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3ff75bf8a2220aa058c768cc0c362463d6be96ab44f7b74183d8e8fddd2c1427__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"CCBurnRouter: un-sorted vout ind\")\n        mstore(add(headStart, 96), \"exes\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_485dacb5dde0995eff986efa13688766cf868eae54ba852361d9bc23cf54a553__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"CCBurnRouter: wrong output tx\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_498f8a81ccf524df76cc000d94754c7bffb7e06432e6f7ce21a606840e88580b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: already paid\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_59c87edf66ea74f843bd2e25de9bd52548cdef4e3eff085359cb447f89e0c206__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"CCBurnRouter: not for locker\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_64a628963df47de4336c08a12891d4268d65e5820f22dd2be6d03fdea0fe3327__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"CCBurnRouter: exchange failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_76feca81983b66de1dc7e2910233022674d0965d33b7dedd01f226e07b830c04__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"CCBurnRouter: not locker\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7f642aaafc6103490c47359c3e1b75f87816d858ef90b46b5ee466a8478dd812__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"BitcoinHelper: vin is null\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_81c6996717fe749150fc854bb7f6786e6cd03398f0991f7c08bc43f80025aedc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid btc fee\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8a14ca8dec454a18917c8ec83b85a1764d6eed87fccbd682e7fd5552942b81f3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"CCBurnRouter: old request\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 6\")\n        mstore(add(headStart, 96), \"4 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a957e9d3071160b28fdf54b241ef5554d7ebf4457632e38cd7ec08cd05aece4f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Vin read overrun\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b2c061d25dd4dec479f0720f15754fff58a1a4debc7353bd1d3f4b7b23876297__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"TypedMemView/index - Attempted t\")\n        mstore(add(headStart, 96), \"o index more than 32 bytes\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ca02a5f8e28dff006ae98bf24a68419cbc701fa52ca60cda1d31f697659de0f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid reward\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cba28824a01414a2de412de5a93e10b6710ad9cbb78984bfcd67f24eaed08ecc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"CCBurnRouter: wrong indexes\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d8f5345d552258db855668a79836faa6655961b56843e19073616b89b804c3c1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"CCBurnRouter: already used\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e068e1fd8aa77bf358e8fdf7376e327a6c370f4f6d3627d99c298841a0dd1ff4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Vout read overrun\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e67358fe6f864ed46569fda2352a0a239f48f7181fa18c39201bdea1a3227f70__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"CCBurnRouter: deadline not passe\")\n        mstore(add(headStart, 96), \"d\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_eb9b10f896edba34f7480c6937b74b82a142d56eda1e960f5163a38d5f0591cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"CCBurnRouter: invalid fee\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_efcd06dabd47a0a59b27bbaba0b6773eb50755e41c6b64a127af091bad45512c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"TypedMemView/copyTo - Null point\")\n        mstore(add(headStart, 96), \"er deref\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f322d90bb6c7c0a290ec906d91193c3056625e558ccb4e023b1d06c660b32ba1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"CCBurnRouter: non-zero lock time\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f41d5ca586b1d56a0f8933b774181f43461390a9a40414a5d943c157df755196__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"TypedMemView/copyTo - Invalid po\")\n        mstore(add(headStart, 96), \"inter deref\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_bytes32_t_uint256__to_t_uint256_t_bytes32_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_address_t_bytes_memory_ptr_t_uint256_t_bool_t_enum$_ScriptTypes_$25205_t_uint256__to_t_uint256_t_uint256_t_address_t_bytes_memory_ptr_t_uint256_t_bool_t_uint8_t_uint256__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), _1)\n        tail := abi_encode_bytes(value3, add(headStart, _1))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n        abi_encode_enum_ScriptTypes(value6, add(headStart, 192))\n        mstore(add(headStart, 224), value7)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_array$_t_address_$dyn_calldata_ptr_t_address_t_uint256_t_bool__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256_t_bool__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := 32\n        mstore(add(headStart, _1), value1)\n        mstore(add(headStart, 64), 192)\n        let pos := tail_1\n        mstore(tail_1, value3)\n        pos := add(headStart, 224)\n        let srcPtr := value2\n        let i := tail\n        for { } lt(i, value3) { i := add(i, 1) }\n        {\n            let value := calldataload(srcPtr)\n            validator_revert_address(value)\n            mstore(pos, and(value, sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n        mstore(add(headStart, 96), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 128), value5)\n        mstore(add(headStart, 160), iszero(iszero(value6)))\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_bytes4_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(mul(length, 0x20), 0x20)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_add_t_uint64(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if gt(x_1, sub(0xff, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_add_t_uint96(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_mul_t_uint8(x, y) -> product\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if and(iszero(iszero(x_1)), gt(y_1, div(0xff, x_1))) { panic_error_0x11() }\n        product := mul(x_1, y_1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        let x_1 := and(x, 0xff)\n        let y_1 := and(y, 0xff)\n        if lt(x_1, y_1) { panic_error_0x11() }\n        diff := sub(x_1, y_1)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n}",
              "id": 77,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {
            "contracts/libraries/RelayHelper.sol": {
              "RelayHelper": [
                {
                  "length": 20,
                  "start": 5157
                },
                {
                  "length": 20,
                  "start": 6914
                }
              ]
            }
          },
          "object": "6080604052600436106101d15760003560e01c80638d3d78cd116100f7578063bed6a60211610095578063ea73263711610064578063ea73263714610520578063f0f4426014610533578063f2fde38b14610553578063f47e224014610573576101d8565b8063bed6a602146104b7578063c780c03f146104cd578063c805f68b146104e0578063cdbe374114610500576101d8565b8063930a60e8116100d1578063930a60e814610434578063b14d353214610461578063b59589d114610481578063b74d0d35146104a1576101d8565b80638d3d78cd146103d65780638d774f8e146103f65780638da5cb5b14610416576101d8565b80635c4f5f3e1161016f57806373532b2a1161013e57806373532b2a146103565780637ed55748146103765780637f0f1817146103965780637ffe9a92146103b6576101d8565b80635c4f5f3e146102eb57806361d027b31461030b57806370872aa51461032b578063715018a614610341576101d8565b80631e236168116101ab5780631e23616814610255578063419cba7f1461029557806343149dba146102ab5780634782bc36146102cb576101d8565b80630e5811a8146101dd5780631812adb6146101f45780631876dec41461021d576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b506101f26105a7565b005b34801561020057600080fd5b5061020a60085481565b6040519081526020015b60405180910390f35b34801561022957600080fd5b5060045461023d906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b34801561026157600080fd5b5061028561027036600461558a565b600d6020526000908152604090205460ff1681565b6040519015158152602001610214565b3480156102a157600080fd5b5061020a60095481565b3480156102b757600080fd5b506101f26102c636600461589e565b6106a4565b3480156102d757600080fd5b506101f26102e636600461558a565b61088f565b3480156102f757600080fd5b506101f261030636600461558a565b6108c5565b34801561031757600080fd5b5060065461023d906001600160a01b031681565b34801561033757600080fd5b5061020a60025481565b34801561034d57600080fd5b506101f26108f8565b34801561036257600080fd5b506102856103713660046156df565b610924565b34801561038257600080fd5b506101f261039136600461558a565b611074565b3480156103a257600080fd5b506101f26103b1366004615369565b6110a7565b3480156103c257600080fd5b506102856103d136600461549d565b6110da565b3480156103e257600080fd5b5060055461023d906001600160a01b031681565b34801561040257600080fd5b506101f26104113660046153a1565b611132565b34801561042257600080fd5b506000546001600160a01b031661023d565b34801561044057600080fd5b5061020a61044f366004615369565b600c6020526000908152604090205481565b34801561046d57600080fd5b506101f261047c366004615369565b6111ea565b34801561048d57600080fd5b5060035461023d906001600160a01b031681565b3480156104ad57600080fd5b5061020a600a5481565b3480156104c357600080fd5b5061020a60075481565b6102856104db366004615744565b61121d565b3480156104ec57600080fd5b506101f26104fb366004615369565b611839565b34801561050c57600080fd5b506101f261051b36600461558a565b61186c565b61028561052e3660046155ba565b61189f565b34801561053f57600080fd5b506101f261054e366004615369565b611c0d565b34801561055f57600080fd5b506101f261056e366004615369565b611c40565b34801561057f57600080fd5b5061059361058e36600461549d565b611cd8565b604051610214989796959493929190615c81565b60035460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062491906155a2565b905060075481111561067d5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a206c6f7720646561646c696e6500000000000060448201526064015b60405180910390fd5b600061068a826002615e60565b610695906001615db6565b90506106a081611dd5565b5050565b600260015414156106c75760405162461bcd60e51b815260040161067490615c4a565b60026001556005546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101889052606401602060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906154c8565b506000806107758787878787611ee5565b6001600160a01b0381166000908152600b602052604090208054929450909250906107a290600190615ea8565b815481106107c057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600401546107d93390565b6001600160a01b038381166000908152600b60205260408120805493909216927fc19dabf19fdfd8c6124bed2178a4564d0c5d5812bfb916777cc90d1b53ed5a5a928b928b92909182918f918b918b919061083690600190615ea8565b8154811061085457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161087a989796959493929190615ad1565b60405180910390a35050600180555050505050565b6000546001600160a01b031633146108b95760405162461bcd60e51b815260040161067490615bd4565b6108c2816121f4565b50565b6000546001600160a01b031633146108ef5760405162461bcd60e51b815260040161067490615bd4565b6108c281611dd5565b6000546001600160a01b031633146109225760405162461bcd60e51b815260040161067490615bd4565b565b6000600260015414156109495760405162461bcd60e51b815260040161067490615c4a565b60026001556004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa39161097f918891889101615a86565b60206040518083038186803b15801561099757600080fd5b505afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906154c8565b6109eb5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526000926001600160a01b039092169163c4d10b6a91610a1f918991899101615a86565b60206040518083038186803b158015610a3757600080fd5b505afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f9190615385565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015610ac157600080fd5b505afa158015610ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af991906155a2565b905060005b8451811015611064576001600160a01b0383166000908152600b602052604090208551869083908110610b4157634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610b6757634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615610bcb5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20616c726561647920706169640000000000006044820152606401610674565b6001600160a01b0383166000908152600b602052604090208551839190879084908110610c0857634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610c2e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410610c5d5760405162461bcd60e51b815260040161067490615c09565b6001600160a01b0383166000908152600b60205260409020855160019190879084908110610c9b57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610cc157634e487b7160e01b600052603260045260246000fd5b60009182526020808320600792909202909101600501805460ff1916931515939093179092556004546009546001600160a01b038781168452600b909452604090922088519390911692631697565b928792612710928b9088908110610d3757634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610d5d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154610d799190615e60565b610d839190615e40565b336001600160a01b0388166000908152600b602052604090208a518b9088908110610dbe57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610de457634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154600b60008a6001600160a01b03166001600160a01b031681526020019081526020016000208b8881518110610e3b57634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610e6157634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c91906154c8565b506001600160a01b0383166000818152600b602052604090208651879084908110610f4757634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610f6d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160020160009054906101000a90046001600160a01b03166001600160a01b03167f58c23b4ae0617be275628875bcfd65759a441263099a256eeb27899fb5dd846d8989600b6000896001600160a01b03166001600160a01b031681526020019081526020016000208a878151811061100357634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061102957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161104a93929190615a9a565b60405180910390a38061105c81615f47565b915050610afe565b5050600180805595945050505050565b6000546001600160a01b0316331461109e5760405162461bcd60e51b815260040161067490615bd4565b6108c281612287565b6000546001600160a01b031633146110d15760405162461bcd60e51b815260040161067490615bd4565b6108c28161231a565b6001600160a01b0382166000908152600b6020526040812080548390811061111257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1690505b92915050565b600260015414156111555760405162461bcd60e51b815260040161067490615c4a565b6002600155600061116b8c8c8c8c8c8c8c6123ab565b90506111d88b8b600081811061119157634e487b7160e01b600052603260045260246000fd5b90506020020135898960008181106111b957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906111ce9190615369565b83888888886127f8565b50506001805550505050505050505050565b6000546001600160a01b031633146112145760405162461bcd60e51b815260040161067490615bd4565b6108c28161291f565b6000600260015414156112425760405162461bcd60e51b815260040161067490615c4a565b600260018190558951148015611259575083516002145b8015611266575081516003145b6112b25760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a2077726f6e6720696e707574730000000000006044820152606401610674565b600254826002815181106112d657634e487b7160e01b600052603260045260246000fd5b602002602001015110156113285760405162461bcd60e51b815260206004820152601960248201527810d0d09d5c9b949bdd5d195c8e881bdb19081c995c5d595cdd603a1b6044820152606401610674565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa391611357918e9101615abe565b60206040518083038186803b15801561136f57600080fd5b505afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a791906154c8565b6113c35760405162461bcd60e51b815260040161067490615b9d565b60006114218a6000815181106113e957634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8860008151811061141457634e487b7160e01b600052603260045260246000fd5b60200260200101516129b0565b905073__$f78472418b29d5d2fb49b19dc055a858ae$__637ebc2327600360009054906101000a90046001600160a01b0316838660028151811061147557634e487b7160e01b600052603260045260246000fd5b6020026020010151888860018151811061149f57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518663ffffffff1660e01b81526004016114c7959493929190615a06565b60206040518083038186803b1580156114df57600080fd5b505af41580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151791906154c8565b6115635760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a206e6f742066696e616c697a656400000000006044820152606401610674565b6000818152600d602052604090205460ff16156115c25760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20616c726561647920757365640000000000006044820152606401610674565b6000818152600d60205260408120805460ff1916600117905583518190611610908c908790849061160357634e487b7160e01b600052603260045260246000fd5b6020026020010151612aa6565b915091506116638c60018151811061163857634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a60018151811061141457634e487b7160e01b600052603260045260246000fd5b82146116b15760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a2077726f6e67206f75747075742074780000006044820152606401610674565b8c5160208e01206116c28983612b55565b80519060200120146117165760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a206e6f7420666f72206c6f636b6572000000006044820152606401610674565b8460028151811061173757634e487b7160e01b600052603260045260246000fd5b602002602001015160075461174c9190615db6565b600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561179a57600080fd5b505afa1580156117ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d291906155a2565b116117ef5760405162461bcd60e51b815260040161067490615c09565b6118238a8e858860028151811061181657634e487b7160e01b600052603260045260246000fd5b6020026020010151612bc9565b505060018080559b9a5050505050505050505050565b6000546001600160a01b031633146118635760405162461bcd60e51b815260040161067490615bd4565b6108c281612d94565b6000546001600160a01b031633146118965760405162461bcd60e51b815260040161067490615bd4565b6108c281612e25565b6000600260015414156118c45760405162461bcd60e51b815260040161067490615c4a565b60026001819055548710156119175760405162461bcd60e51b815260206004820152601960248201527810d0d09d5c9b949bdd5d195c8e881bdb19081c995c5d595cdd603a1b6044820152606401610674565b6001600160e01b031988161561196f5760405162461bcd60e51b815260206004820181905260248201527f43434275726e526f757465723a206e6f6e2d7a65726f206c6f636b2074696d656044820152606401610674565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa39161199e91889101615abe565b60206040518083038186803b1580156119b657600080fd5b505afa1580156119ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ee91906154c8565b611a0a5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526000926001600160a01b039092169163c4d10b6a91611a3c91899101615abe565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190615385565b90508251845114611adf5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720696e646578657300000000006044820152606401610674565b6000611aed8d8d8d8d6129b0565b600354604051637ebc232760e01b815291925073__$f78472418b29d5d2fb49b19dc055a858ae$__91637ebc232791611b3c916001600160a01b039091169085908e908e908e90600401615a06565b60206040518083038186803b158015611b5457600080fd5b505af4158015611b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8c91906154c8565b611bd85760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a206e6f742066696e616c697a656400000000006044820152606401610674565b6000611be8828b858f8a8a612eb8565b9050611bf6818d89856133e7565b505060018080559c9b505050505050505050505050565b6000546001600160a01b03163314611c375760405162461bcd60e51b815260040161067490615bd4565b6108c281613470565b6000546001600160a01b03163314611c6a5760405162461bcd60e51b815260040161067490615bd4565b6001600160a01b038116611ccf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610674565b6108c281613501565b600b6020528160005260406000208181548110611cf457600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611d3090615f12565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5c90615f12565b8015611da95780601f10611d7e57610100808354040283529160200191611da9565b820191906000526020600020905b815481529060010190602001808311611d8c57829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b60035460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b158015611e1a57600080fd5b505afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5291906155a2565b9050808211611ea35760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a206c6f7720646561646c696e650000000000006044820152606401610674565b60075460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600755565b600080611ef28686613551565b6004805460405163aff2faa360e01b81526001600160a01b039091169163aff2faa391611f23918891889101615a86565b60206040518083038186803b158015611f3b57600080fd5b505afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7391906154c8565b611f8f5760405162461bcd60e51b815260040161067490615b9d565b6004805460405163626885b560e11b81526001600160a01b039091169163c4d10b6a91611fc0918891889101615a86565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190615385565b9050600061201d8861364a565b6005546004805460405163095ea7b360e01b81526001600160a01b03918216928101929092526024820184905292935091169063095ea7b390604401602060405180830381600087803b15801561207357600080fd5b505af1158015612087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ab91906154c8565b5080600a54826120bb9190615ea8565b600480546040516338463cff60e01b81526001600160a01b03909116916338463cff916120ee918b918b91899101615a9a565b602060405180830381600087803b15801561210857600080fd5b505af115801561211c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214091906155a2565b61214a9190615e60565b6121549190615e40565b92506121e988848989600360009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ab57600080fd5b505afa1580156121bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e391906155a2565b87613771565b509550959350505050565b8061271010156122465760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420726577617264000000006044820152606401610674565b60095460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600955565b8061271010156122d95760405162461bcd60e51b815260206004820152601960248201527f43434275726e526f757465723a20696e76616c696420666565000000000000006044820152606401610674565b60085460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600855565b806001600160a01b0381166123415760405162461bcd60e51b815260040161067490615b2f565b600554604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546000906001600160a01b031684846123c7600182615ea8565b8181106123e457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123f99190615369565b6001600160a01b03161461244f5760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a20696e76616c696420706174680000000000006044820152606401610674565b6002861461249f5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720616d6f756e747300000000006044820152606401610674565b838360008181106124c057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906124d59190615369565b6001600160a01b03166323b872dd33308a8a600081811061250657634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401602060405180830381600087803b15801561255d57600080fd5b505af1158015612571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259591906154c8565b50838360008181106125b757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906125cc9190615369565b6001600160a01b031663095ea7b389898960008181106125fc57634e487b7160e01b600052603260045260246000fd5b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401602060405180830381600087803b15801561264b57600080fd5b505af115801561265f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268391906154c8565b50600080896001600160a01b031663b0bbcd888a8a60008181106126b757634e487b7160e01b600052603260045260246000fd5b905060200201358b8b60018181106126df57634e487b7160e01b600052603260045260246000fd5b905060200201358989308a8e6040518863ffffffff1660e01b815260040161270d9796959493929190615ce4565b600060405180830381600087803b15801561272757600080fd5b505af115801561273b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261276391908101906154e4565b91509150816127b45760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a2065786368616e6765206661696c65640000006044820152606401610674565b80600182516127c39190615ea8565b815181106127e157634e487b7160e01b600052603260045260246000fd5b602002602001015192505050979650505050505050565b6000806128088787878787611ee5565b6001600160a01b0381166000908152600b6020526040902080549294509092509061283590600190615ea8565b8154811061285357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015461286c3390565b6001600160a01b038381166000908152600b60205260409020805492909116917fc19dabf19fdfd8c6124bed2178a4564d0c5d5812bfb916777cc90d1b53ed5a5a918a918a918f918f918f918b918b916128c890600190615ea8565b815481106128e657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161290c989796959493929190615ad1565b60405180910390a3505050505050505050565b806001600160a01b0381166129465760405162461bcd60e51b815260040161067490615b2f565b600454604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000806002868686866040516020016129cc9493929190615997565b60408051601f19818403018152908290526129e6916159ea565b602060405180830381855afa158015612a03573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a2691906155a2565b90506000600282604051602001612a3f91815260200190565b60408051601f1981840301815290829052612a59916159ea565b602060405180830381855afa158015612a76573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a9991906155a2565b925050505b949350505050565b60008080612abc612ab78683613939565b61395d565b905062ffffff198082161415612b145760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610674565b6000612b208286613a93565b90506000612b2d82613bb1565b9050612b3881613bd5565b9450612b4381613bf7565b63ffffffff1693505050509250929050565b60606000612b6d612b68825b8690613939565b613c21565b905062ffffff198082161415612b955760405162461bcd60e51b815260040161067490615b66565b6000612ba18285613d12565b90506000612bae82613e0c565b9050612bbf62ffffff198216613e5d565b9695505050505050565b6000612bd485613ead565b6004805460405163626885b560e11b81526001600160401b039390931693506000926001600160a01b039091169163c4d10b6a91612c1491899101615abe565b60206040518083038186803b158015612c2c57600080fd5b505afa158015612c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c649190615385565b6004546009549192506001600160a01b03169063b734de2690839061271090612c8d9087615e60565b612c979190615e40565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612cf057600080fd5b505af1158015612d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2891906154c8565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060095488612d5f9190615e60565b612d699190615e40565b612d739088615db6565b604051612d84959493929190615a45565b60405180910390a1505050505050565b806001600160a01b038116612dbb5760405162461bcd60e51b815260040161067490615b2f565b600354604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b600a5460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a1806127101015612eb35760405162461bcd60e51b815260206004820152601d60248201527f43434275726e526f757465723a20696e76616c696420627463206665650000006044820152606401610674565b600a55565b60008080805b85518110156133da5780612efb57848181518110612eec57634e487b7160e01b600052603260045260246000fd5b60200260200101519150612fa8565b81858281518110612f1c57634e487b7160e01b600052603260045260246000fd5b602002602001015111612f7d5760405162461bcd60e51b8152602060048201526024808201527f43434275726e526f757465723a20756e2d736f7274656420766f757420696e646044820152636578657360e01b6064820152608401610674565b848181518110612f9d57634e487b7160e01b600052603260045260246000fd5b602002602001015191505b6000868281518110612fca57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600b60008a6001600160a01b03166001600160a01b03168152602001908152602001600020818154811061301857634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615801561308757506001600160a01b0389166000908152600b6020526040902080548b91908390811061307257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b156133c757613232888784815181106130b057634e487b7160e01b600052603260045260246000fd5b6020026020010151600b60008d6001600160a01b03166001600160a01b0316815260200190815260200160002084815481106130fc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600301805461311890615f12565b80601f016020809104026020016040519081016040528092919081815260200182805461314490615f12565b80156131915780601f1061316657610100808354040283529160200191613191565b820191906000526020600020905b81548152906001019060200180831161317457829003601f168201915b5050506001600160a01b038f166000908152600b60205260409020805490925087915081106131d057634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff16600481111561320e57634e487b7160e01b600052602160045260246000fd5b600481111561322d57634e487b7160e01b600052602160045260246000fd5b613f47565b6001600160401b0316935083600b60008b6001600160a01b03166001600160a01b03168152602001908152602001600020828154811061328257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016001015414156133c7576001600160a01b0389166000908152600b60205260409020805460019190839081106132d657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055613303856001615db6565b6001600160a01b038a166000818152600b60205260409020805492975090917f1b46655c2f394f2191cb246d5982dbe00ad671f0b590e75e97c90ee97f1f782a91908490811061336357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548d89868151811061339657634e487b7160e01b600052603260045260246000fd5b60200260200101516040516133be939291909283526020830191909152604082015260600190565b60405180910390a25b50806133d281615f47565b915050612ebe565b5050509695505050505050565b60006133f38484614182565b6001600160401b03169050600061340985614285565b90508115801590613423575080613421876001615db6565b145b15613446576000838152600d60205260409020805460ff19166001179055613468565b80861415613468576000838152600d60205260409020805460ff191660011790555b505050505050565b806001600160a01b0381166134975760405162461bcd60e51b815260040161067490615b2f565b600654604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081600481111561357357634e487b7160e01b600052602160045260246000fd5b148061359e5750600481600481111561359c57634e487b7160e01b600052602160045260246000fd5b145b156135f95781516020146135f45760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420736372697074000000006044820152606401610674565b6106a0565b81516014146106a05760405162461bcd60e51b815260206004820152601c60248201527f43434275726e526f757465723a20696e76616c696420736372697074000000006044820152606401610674565b6000806127106008548461365e9190615e60565b6136689190615e40565b9050600a5460026136799190615e60565b6136839082615db6565b83116136d15760405162461bcd60e51b815260206004820152601860248201527f43434275726e526f757465723a206c6f7720616d6f756e7400000000000000006044820152606401610674565b60006136dd8285615ea8565b60055460065460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb90604401602060405180830381600087803b15801561372f57600080fd5b505af1158015613743573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376791906154c8565b509150505b919050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e083019190915288825260208201889052339282019290925260608101869052908460048111156137d557634e487b7160e01b600052602160045260246000fd5b908160048111156137f657634e487b7160e01b600052602160045260246000fd5b9052506007546138069084615db6565b6080820152600060a082018190526001600160a01b038316808252600c6020818152604084205460e0860181905292909352909152613846906001615db6565b6001600160a01b038381166000908152600c6020908152604080832094909455600b81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b03191691909316179091556060830151805184936138c69260038501929101906150de565b50608082015160048281019190915560a083015160058301805460ff19169115159190911780825560c08501519261ff00199091169061010090849081111561391f57634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b81516000906020840161395464ffffffffff851682846142b1565b95945050505050565b60008181613973815b62ffffff198416906142f8565b50601884901c6001600160601b03166139935762ffffff195b9250613a8c565b60006139a08560006143d2565b9050601885901c6001600160601b03166001600160401b0382166139cd5762ffffff195b94505050613a8c565b60006139d883614519565b60ff16905060005b836001600160401b0316811015613a5457828210613a095762ffffff195b965050505050613a8c565b6000613a29613a188486615ea8565b60055b62ffffff198c169190614572565b9050613a34816145a6565b613a3e9084615db6565b9250508080613a4c90615f47565b9150506139e0565b50818114613a6c5762ffffff195b9550505050613a8c565b613a8660065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b6000826006613aa181613966565b506000613aaf8660006143d2565b6001600160401b03169050601886901c6001600160601b0316818610613b0a5760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610674565b6000613b1583614519565b60ff1690506000805b88811015613b6d57613b44613b338486615ea8565b60055b62ffffff198d169190614572565b9150613b4f826145a6565b613b599084615db6565b9250613b66600182615db6565b9050613b1e565b50613b7b613a188385615ea8565b90506000613b88826145a6565b9050613ba1838260045b62ffffff198e169291906145fa565b975050505050505b505092915050565b6000816004613bbf81613966565b50612a9e62ffffff1985166000602460036145fa565b6000816003613be381613966565b50612a9e62ffffff1985166000602061466a565b6000816003613c0581613966565b50612a9e613c1c62ffffff198616602060046147c3565b61490d565b60008181613c2e81613966565b50601884901c6001600160601b0316613c4b5762ffffff1961398c565b6000613c588560006143d2565b9050601885901c6001600160601b03166001600160401b038216613c805762ffffff196139c4565b6000613c8b83614519565b60ff16905060005b836001600160401b0316811015613cf657828210613cb55762ffffff196139fe565b6000613ccb613cc48486615ea8565b600e613a1b565b9050613cd681614976565b613ce09084615db6565b9250508080613cee90615f47565b915050613c93565b50818114613d085762ffffff19613a62565b613a86600f613a72565b600082600f613d2081613966565b506000613d2e8660006143d2565b6001600160401b03169050601886901c6001600160601b0316818610613d8a5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610674565b6000613d9583614519565b60ff1690506000805b88811015613de357613dba613db38486615ea8565b600e613b36565b9150613dc582614976565b613dcf9084615db6565b9250613ddc600182615db6565b9050613d9e565b50613df1613cc48385615ea8565b90506000613dfe82614976565b9050613ba18382600d613b92565b600081600d613e1a81613966565b506000613e288560086143d2565b9050613954613e3682614519565b613e41906008615df9565b62ffffff1987169060ff166001600160401b03841660076145fa565b6060600080613e758460181c6001600160601b031690565b60405193508392506001600160601b03169050613e9c84613e97846020615db6565b6149bf565b508181016020016040529052919050565b600080613ebf612b68825b8590613939565b905062ffffff198082161415613ee75760405162461bcd60e51b815260040161067490615b66565b600080613ef58360006143d2565b6001600160401b0316905060005b81811015613f3e57613f158482613d12565b9250613f2083614b17565b613f2a9086615dce565b945080613f3681615f47565b915050613f03565b50505050919050565b600080613f57612b688783613939565b905062ffffff198082161415613f7f5760405162461bcd60e51b815260040161067490615b66565b6000613f8b8287613d12565b90506000613f9882613e0c565b90506000856004811115613fbc57634e487b7160e01b600052602160045260246000fd5b141561402157613fd562ffffff1982166001602061466a565b604051602001613fe791815260200190565b6040516020818303038152906040528051906020012086805190602001201461401157600061401a565b61401a82614b17565b9350614177565b600185600481111561404357634e487b7160e01b600052602160045260246000fd5b14156140825761405a62ffffff1982166003614b3c565b604051602001613fe7919060609190911b6bffffffffffffffffffffffff1916815260140190565b60028560048111156140a457634e487b7160e01b600052602160045260246000fd5b14156140bb5761405a62ffffff1982166002614b3c565b60038560048111156140dd57634e487b7160e01b600052602160045260246000fd5b14156140f45761405a62ffffff1982166002614b3c565b600485600481111561411657634e487b7160e01b600052602160045260246000fd5b14156141775761412f62ffffff1982166002602061466a565b60405160200161414191815260200190565b6040516020818303038152906040528051906020012086805190602001201461416b576000614174565b61417482614b17565b93505b505050949350505050565b600080614191612b6882612b61565b905062ffffff1980821614156141b95760405162461bcd60e51b815260040161067490615b66565b60008060006141c98460006143d2565b6001600160401b0316905060005b8181101561427a576141e98582613d12565b93506141f484613e0c565b92508660405160200161420791906159ea565b6040516020818303038152906040528051906020012061422c8462ffffff1916613e5d565b60405160200161423c91906159ea565b6040516020818303038152906040528051906020012014156142685761426184614b17565b955061427a565b8061427281615f47565b9150506141d7565b505050505092915050565b600080614294612b6882613eb8565b90506142a18160006143d2565b6001600160401b03169392505050565b6000806142be8385615db6565b90506040518111156142ce575060005b806142e05762ffffff199150506142f1565b5050606083811b8317901b811760181b5b9392505050565b60006143048383614b4a565b6143cb5760006143236143178560d81c90565b64ffffffffff16614b6d565b91505060006143388464ffffffffff16614b6d565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016106749190615abe565b5090919050565b6000806143e762ffffff198516846001614c19565b905060fc8111614402576143fa81614c49565b91505061112c565b8060fd14156144685761443061442b61441c856001615db6565b62ffffff1987169060026147c3565b614c49565b915061443b82614519565b60ff166003146144635761446161445c62ffffff19861685600360006145fa565b614cb1565b505b614512565b8060fe14156144bd5761449161442b614482856001615db6565b62ffffff1987169060046147c3565b915061449c82614519565b60ff166005146144635761446161445c62ffffff19861685600560006145fa565b8060ff1415614512576144e661442b6144d7856001615db6565b62ffffff1987169060086147c3565b91506144f182614519565b60ff1660091461451257613ba961445c62ffffff19861685600960006145fa565b5092915050565b600060fc826001600160401b0316116145345750600161376c565b61ffff826001600160401b03161161454e5750600361376c565b63ffffffff826001600160401b03161161456a5750600561376c565b50600961376c565b6000612a9e848461458c8760181c6001600160601b031690565b6001600160601b031661459f9190615ea8565b85856145fa565b60008160056145b481613966565b5060006145c28560246143d2565b9050806001600160401b03166145d782614519565b60ff166145e49190615db6565b6145ef906024615db6565b613954906004615db6565b6000806146108660781c6001600160601b031690565b6001600160601b0316905061462486614d38565b8461462f8784615db6565b6146399190615db6565b111561464c5762ffffff19915050612a9e565b6146568582615db6565b9050612bbf8364ffffffffff1682866142b1565b600060ff821661467c575060006142f1565b61468f8460181c6001600160601b031690565b6001600160601b03166146a560ff841685615db6565b1115614709576146f06146c18560781c6001600160601b031690565b6001600160601b03166146dd8660181c6001600160601b031690565b6001600160601b0316858560ff16614d79565b60405162461bcd60e51b81526004016106749190615abe565b60208260ff1611156147835760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610674565b60088202600061479c8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000612a9e6147d385858561466a565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b600063ffffffff8211156149725760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610674565b5090565b600081600e61498481613966565b5060006149928560086143d2565b9050806001600160401b03166149a782614519565b60ff166149b49190615db6565b613954906008615db6565b600062ffffff198084161415614a285760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610674565b614a3183614ea3565b614a915760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610674565b6000614aa68460181c6001600160601b031690565b6001600160601b031690506000614ac68560781c6001600160601b031690565b6001600160601b031690506000604051905084811115614ae65760206060fd5b8285848460045afa50612bbf614afc8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600d614b2581613966565b50612a9e61442b62ffffff198616600060086147c3565b60006142f183836014614c19565b60008164ffffffffff16614b5e8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff161115614bcb576000614b8c826008615e7f565b60ff1685901c9050614b9d81614ee1565b61ffff16841793508160ff16601014614bb857601084901b93505b50614bc4600182615ebf565b9050614b73565b50600f5b60ff8160ff161015614c135760ff600882021684901c614bee81614ee1565b61ffff16831792508160ff16600014614c0957601083901b92505b5060001901614bcf565b50915091565b6000614c26826020615ebf565b614c31906008615e7f565b60ff16614c3f85858561466a565b901c949350505050565b60006001600160401b038211156149725760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610674565b60606000614ce5614ce082614cd2601887901c6001600160601b0316614f11565b62ffffff1987169190614c19565b614b6d565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d016143a0565b6000614d4d8260181c6001600160601b031690565b614d608360781c6001600160601b031690565b614d6a9190615e1e565b6001600160601b031692915050565b60606000614d8686614b6d565b9150506000614d9486614b6d565b9150506000614da286614b6d565b9150506000614db086614b6d565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000614eaf8260d81c90565b64ffffffffff1664ffffffffff1415614eca5750600061376c565b6000614ed583614d38565b60405110199392505050565b6000614ef360048360ff16901c614f72565b60ff161760081b62ffff0016614f0882614f72565b60ff1617919050565b600060ff8211156149725760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610674565b600060f08083179060ff82161415614f8e57603091505061376c565b8060ff1660f11415614fa457603191505061376c565b8060ff1660f21415614fba57603291505061376c565b8060ff1660f31415614fd057603391505061376c565b8060ff1660f41415614fe657603491505061376c565b8060ff1660f51415614ffc57603591505061376c565b8060ff1660f6141561501257603691505061376c565b8060ff1660f7141561502857603791505061376c565b8060ff1660f8141561503e57603891505061376c565b8060ff1660f9141561505457603991505061376c565b8060ff1660fa141561506a57606191505061376c565b8060ff1660fb141561508057606291505061376c565b8060ff1660fc141561509657606391505061376c565b8060ff1660fd14156150ac57606491505061376c565b8060ff1660fe14156150c257606591505061376c565b8060ff1660ff14156150d857606691505061376c565b50919050565b8280546150ea90615f12565b90600052602060002090601f01602090048101928261510c5760008555615152565b82601f1061512557805160ff1916838001178555615152565b82800160010185558215615152579182015b82811115615152578251825591602001919060010190615137565b506149729291505b80821115614972576000815560010161515a565b803561376c81615f8e565b60008083601f84011261518a578182fd5b5081356001600160401b038111156151a0578182fd5b60208301915083602080830285010111156151ba57600080fd5b9250929050565b600082601f8301126151d1578081fd5b813560206151e66151e183615d93565b615d63565b8281528181019085830183850287018401881015615202578586fd5b855b858110156152275761521582615299565b84529284019290840190600101615204565b5090979650505050505050565b600082601f830112615244578081fd5b813560206152546151e183615d93565b8281528181019085830183850287018401881015615270578586fd5b855b8581101561522757813584529284019290840190600101615272565b803561376c81615fa3565b80356001600160e01b03198116811461376c57600080fd5b60008083601f8401126152c2578182fd5b5081356001600160401b038111156152d8578182fd5b6020830191508360208285010111156151ba57600080fd5b600082601f830112615300578081fd5b81356001600160401b0381111561531957615319615f78565b61532c601f8201601f1916602001615d63565b818152846020838601011115615340578283fd5b816020850160208301379081016020019190915292915050565b80356005811061376c57600080fd5b60006020828403121561537a578081fd5b81356142f181615f8e565b600060208284031215615396578081fd5b81516142f181615f8e565b60008060008060008060008060008060006101008c8e0312156153c2578687fd5b6153cb8c61516e565b9a506001600160401b038060208e013511156153e5578788fd5b6153f58e60208f01358f01615179565b909b50995061540660408e0161528e565b98508060608e01351115615418578788fd5b6154288e60608f01358f01615179565b909850965060808d0135955060a08d0135811015615444578485fd5b6154548e60a08f01358f016152f0565b945061546260c08e0161535a565b93508060e08e01351115615474578283fd5b506154858d60e08e01358e016152b1565b81935080925050509295989b509295989b9093969950565b600080604083850312156154af578182fd5b82356154ba81615f8e565b946020939093013593505050565b6000602082840312156154d9578081fd5b81516142f181615fa3565b600080604083850312156154f6578182fd5b825161550181615fa3565b809250506020808401516001600160401b0381111561551e578283fd5b8401601f8101861361552e578283fd5b805161553c6151e182615d93565b81815283810190838501858402850186018a1015615558578687fd5b8694505b8385101561557a57805183526001949094019391850191850161555c565b5080955050505050509250929050565b60006020828403121561559b578081fd5b5035919050565b6000602082840312156155b3578081fd5b5051919050565b6000806000806000806000806000806101408b8d0312156155d9578384fd5b6155e28b615299565b995060208b01356001600160401b03808211156155fd578586fd5b6156098e838f016152f0565b9a5060408d013591508082111561561e578586fd5b61562a8e838f016152f0565b995061563860608e01615299565b985060808d0135975060a08d0135915080821115615654578586fd5b6156608e838f016152f0565b965060c08d0135955060e08d013591508082111561567c578485fd5b6156888e838f016152f0565b94506101008d013591508082111561569e578384fd5b6156aa8e838f01615234565b93506101208d01359150808211156156c0578283fd5b506156cd8d828e01615234565b9150509295989b9194979a5092959850565b6000806000604084860312156156f3578081fd5b83356001600160401b0380821115615709578283fd5b615715878388016152b1565b9095509350602086013591508082111561572d578283fd5b5061573a86828701615234565b9150509250925092565b60008060008060008060008060006101208a8c031215615762578283fd5b89356001600160401b0380821115615778578485fd5b6157848d838e016152f0565b9a5060208c0135915080821115615799578485fd5b6157a58d838e016151c1565b995060408c01359150808211156157ba578485fd5b6157c68d838e016152f0565b985060608c01359150808211156157db578485fd5b6157e78d838e016152f0565b975060808c01359150808211156157fc578485fd5b6158088d838e016152f0565b965060a08c013591508082111561581d578485fd5b6158298d838e016152f0565b955060c08c013591508082111561583e578485fd5b61584a8d838e016151c1565b945060e08c013591508082111561585f578384fd5b61586b8d838e016152f0565b93506101008c0135915080821115615881578283fd5b5061588e8c828d01615234565b9150509295985092959850929598565b6000806000806000608086880312156158b5578283fd5b8535945060208601356001600160401b03808211156158d2578485fd5b6158de89838a016152f0565b95506158ec6040890161535a565b94506060880135915080821115615901578283fd5b5061590e888289016152b1565b969995985093965092949392505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452615961816020860160208601615ee2565b601f01601f19169290920160200192915050565b6005811061599357634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b808716835285516159b9816004860160208a01615ee2565b8551908401906159d0816004840160208a01615ee2565b919094169301600481019390935250506008019392505050565b600082516159fc818460208701615ee2565b9190910192915050565b600060018060a01b038716825285602083015284604083015260a06060830152615a3360a0830185615949565b90508260808301529695505050505050565b6001600160a01b038616815260a060208201819052600090615a6990830187615949565b604083019590955250606081019290925260809091015292915050565b600060208252612a9e60208301848661591f565b600060408252615aae60408301858761591f565b9050826020830152949350505050565b6000602082526142f16020830184615949565b6000610100808352615ae58184018c615949565b915050615af5602083018a615975565b60408201979097526001600160a01b039586166060820152608081019490945260a084019290925290921660c082015260e0015292915050565b6020808252601a908201527f43434275726e526f757465723a207a65726f2061646472657373000000000000604082015260600190565b6020808252601b908201527f426974636f696e48656c7065723a20766f7574206973206e756c6c0000000000604082015260600190565b60208082526018908201527f43434275726e526f757465723a206e6f74206c6f636b65720000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f43434275726e526f757465723a20646561646c696e65206e6f742070617373656040820152601960fa1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b888152602081018890526001600160a01b038716604082015261010060608201819052600090615cb383820189615949565b91505085608083015284151560a0830152615cd160c0830185615975565b8260e08301529998505050505050505050565b878152602080820188905260c0604083018190528201869052600090879060e08401835b89811015615d36578335615d1b81615f8e565b6001600160a01b031682529282019290820190600101615d08565b506001600160a01b039790971660608501525050506080810192909252151560a090910152949350505050565b604051601f8201601f191681016001600160401b0381118282101715615d8b57615d8b615f78565b604052919050565b60006001600160401b03821115615dac57615dac615f78565b5060209081020190565b60008219821115615dc957615dc9615f62565b500190565b60006001600160401b03808316818516808303821115615df057615df0615f62565b01949350505050565b600060ff821660ff84168060ff03821115615e1657615e16615f62565b019392505050565b60006001600160601b03808316818516808303821115615df057615df0615f62565b600082615e5b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615e7a57615e7a615f62565b500290565b600060ff821660ff84168160ff0481118215151615615ea057615ea0615f62565b029392505050565b600082821015615eba57615eba615f62565b500390565b600060ff821660ff841680821015615ed957615ed9615f62565b90039392505050565b60005b83811015615efd578181015183820152602001615ee5565b83811115615f0c576000848401525b50505050565b600281046001821680615f2657607f821691505b602082108114156150d857634e487b7160e01b600052602260045260246000fd5b6000600019821415615f5b57615f5b615f62565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108c257600080fd5b80151581146108c257600080fdfea2646970667358221220f4e06622dd52fa7dbab4fc74fca75673ca437c4bfe932375e439f3c05dc5852964736f6c63430008020033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8D3D78CD GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xBED6A602 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEA732637 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEA732637 EQ PUSH2 0x520 JUMPI DUP1 PUSH4 0xF0F44260 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0xF47E2240 EQ PUSH2 0x573 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0xBED6A602 EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0xC780C03F EQ PUSH2 0x4CD JUMPI DUP1 PUSH4 0xC805F68B EQ PUSH2 0x4E0 JUMPI DUP1 PUSH4 0xCDBE3741 EQ PUSH2 0x500 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x930A60E8 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x930A60E8 EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0xB14D3532 EQ PUSH2 0x461 JUMPI DUP1 PUSH4 0xB59589D1 EQ PUSH2 0x481 JUMPI DUP1 PUSH4 0xB74D0D35 EQ PUSH2 0x4A1 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x8D3D78CD EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x8D774F8E EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x416 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x5C4F5F3E GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x73532B2A GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x73532B2A EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0x7ED55748 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x7F0F1817 EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x7FFE9A92 EQ PUSH2 0x3B6 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x5C4F5F3E EQ PUSH2 0x2EB JUMPI DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x70872AA5 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x341 JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0x1E236168 GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x1E236168 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x419CBA7F EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x43149DBA EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0x4782BC36 EQ PUSH2 0x2CB JUMPI PUSH2 0x1D8 JUMP JUMPDEST DUP1 PUSH4 0xE5811A8 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x1812ADB6 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x1876DEC4 EQ PUSH2 0x21D JUMPI PUSH2 0x1D8 JUMP JUMPDEST CALLDATASIZE PUSH2 0x1D8 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x5A7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x589E JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x88F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x8C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x8F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x371 CALLDATASIZE PUSH1 0x4 PUSH2 0x56DF JUMP JUMPDEST PUSH2 0x924 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x391 CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x1074 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x3B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x10A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x549D JUMP JUMPDEST PUSH2 0x10DA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x53A1 JUMP JUMPDEST PUSH2 0x1132 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH2 0x44F CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x47C CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x11EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x23D SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x285 PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x5744 JUMP JUMPDEST PUSH2 0x121D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x4FB CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x1839 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x51B CALLDATASIZE PUSH1 0x4 PUSH2 0x558A JUMP JUMPDEST PUSH2 0x186C JUMP JUMPDEST PUSH2 0x285 PUSH2 0x52E CALLDATASIZE PUSH1 0x4 PUSH2 0x55BA JUMP JUMPDEST PUSH2 0x189F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x1C0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F2 PUSH2 0x56E CALLDATASIZE PUSH1 0x4 PUSH2 0x5369 JUMP JUMPDEST PUSH2 0x1C40 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x593 PUSH2 0x58E CALLDATASIZE PUSH1 0x4 PUSH2 0x549D JUMP JUMPDEST PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x214 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5C81 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA072BC5 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA072BC50 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x600 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x624 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x7 SLOAD DUP2 GT ISZERO PUSH2 0x67D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720646561646C696E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x68A DUP3 PUSH1 0x2 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x695 SWAP1 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x6A0 DUP2 PUSH2 0x1DD5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x740 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x764 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x775 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EE5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP5 POP SWAP1 SWAP3 POP SWAP1 PUSH2 0x7A2 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x7C0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD PUSH2 0x7D9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP4 SWAP1 SWAP3 AND SWAP3 PUSH32 0xC19DABF19FDFD8C6124BED2178A4564D0C5D5812BFB916777CC90D1B53ED5A5A SWAP3 DUP12 SWAP3 DUP12 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 DUP16 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 PUSH2 0x836 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x854 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x87A SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x21F4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x1DD5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x922 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x949 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x97F SWAP2 DUP9 SWAP2 DUP9 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9CF SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x9EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0xA1F SWAP2 DUP10 SWAP2 DUP10 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA4B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA6F SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F796D90 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAF9 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1064 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD DUP7 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xB41 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xB67 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 PUSH1 0x7 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBCB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20616C72656164792070616964000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD DUP4 SWAP2 SWAP1 DUP8 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xC08 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xC2E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD LT PUSH2 0xC5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C09 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP6 MLOAD PUSH1 0x1 SWAP2 SWAP1 DUP8 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xC9B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xCC1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x7 SWAP3 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD PUSH1 0x5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x4 SLOAD PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP5 MSTORE PUSH1 0xB SWAP1 SWAP5 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 DUP9 MLOAD SWAP4 SWAP1 SWAP2 AND SWAP3 PUSH4 0x1697565B SWAP3 DUP8 SWAP3 PUSH2 0x2710 SWAP3 DUP12 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0xD37 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xD5D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0xD79 SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0xD83 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP11 MLOAD DUP12 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0xDBE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xDE4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x0 ADD SLOAD PUSH1 0xB PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xE3B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xE61 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0xE0 DUP8 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x64 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xED4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEE8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF0C SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP7 MLOAD DUP8 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0xF47 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0xF6D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x58C23B4AE0617BE275628875BCFD65759A441263099A256EEB27899FB5DD846D DUP10 DUP10 PUSH1 0xB PUSH1 0x0 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP11 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1003 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 SLOAD DUP2 LT PUSH2 0x1029 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x104A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH2 0x105C DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAFE JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP1 SSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x109E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x2287 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x231A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x1112 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 PUSH1 0x7 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1155 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x0 PUSH2 0x116B DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH2 0x23AB JUMP JUMPDEST SWAP1 POP PUSH2 0x11D8 DUP12 DUP12 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x1191 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x11B9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x11CE SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST DUP4 DUP9 DUP9 DUP9 DUP9 PUSH2 0x27F8 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1214 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x291F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1242 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE DUP10 MLOAD EQ DUP1 ISZERO PUSH2 0x1259 JUMPI POP DUP4 MLOAD PUSH1 0x2 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1266 JUMPI POP DUP2 MLOAD PUSH1 0x3 EQ JUMPDEST PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E6720696E70757473000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP3 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x12D6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO PUSH2 0x1328 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x10D0D09D5C9B949BDD5D195C8E881BDB19081C995C5D595CDD PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x1357 SWAP2 DUP15 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x136F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1383 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13A7 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x13C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1421 DUP11 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x13E9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP11 DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1414 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x29B0 JUMP JUMPDEST SWAP1 POP PUSH20 0x0 PUSH4 0x7EBC2327 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP7 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1475 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP9 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x149F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A06 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1517 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F742066696E616C697A65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x15C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20616C72656164792075736564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP4 MLOAD DUP2 SWAP1 PUSH2 0x1610 SWAP1 DUP13 SWAP1 DUP8 SWAP1 DUP5 SWAP1 PUSH2 0x1603 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2AA6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1663 DUP13 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1638 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP11 DUP11 DUP11 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1414 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP3 EQ PUSH2 0x16B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E67206F7574707574207478000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP13 MLOAD PUSH1 0x20 DUP15 ADD KECCAK256 PUSH2 0x16C2 DUP10 DUP4 PUSH2 0x2B55 JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x1716 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F7420666F72206C6F636B657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP5 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1737 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x7 SLOAD PUSH2 0x174C SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F796D90 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x179A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17D2 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST GT PUSH2 0x17EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C09 JUMP JUMPDEST PUSH2 0x1823 DUP11 DUP15 DUP6 DUP9 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1816 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2BC9 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP1 SSTORE SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1863 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1896 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x2E25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x18C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5C4A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE SLOAD DUP8 LT ISZERO PUSH2 0x1917 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH25 0x10D0D09D5C9B949BDD5D195C8E881BDB19081C995C5D595CDD PUSH1 0x3A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP9 AND ISZERO PUSH2 0x196F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F6E2D7A65726F206C6F636B2074696D65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x199E SWAP2 DUP9 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19EE SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1A0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0x1A3C SWAP2 DUP10 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A8C SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST SWAP1 POP DUP3 MLOAD DUP5 MLOAD EQ PUSH2 0x1ADF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E6720696E64657865730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AED DUP14 DUP14 DUP14 DUP14 PUSH2 0x29B0 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7EBC2327 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0x0 SWAP2 PUSH4 0x7EBC2327 SWAP2 PUSH2 0x1B3C SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 DUP15 SWAP1 DUP15 SWAP1 DUP15 SWAP1 PUSH1 0x4 ADD PUSH2 0x5A06 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1B68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B8C SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1BD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F742066696E616C697A65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BE8 DUP3 DUP12 DUP6 DUP16 DUP11 DUP11 PUSH2 0x2EB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x1BF6 DUP2 DUP14 DUP10 DUP6 PUSH2 0x33E7 JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP1 SSTORE SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x3470 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1C6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5BD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1CCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH2 0x8C2 DUP2 PUSH2 0x3501 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1CF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD SWAP4 SWAP7 POP SWAP2 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 PUSH2 0x1D30 SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D5C SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DA9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D7E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DA9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D8C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP5 SWAP1 SWAP4 PUSH1 0xFF DUP1 DUP4 AND SWAP5 POP PUSH2 0x100 SWAP1 SWAP3 DIV SWAP1 SWAP2 AND SWAP2 POP DUP9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xA072BC5 PUSH1 0xE4 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xA072BC50 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E2E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E52 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT PUSH2 0x1EA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720646561646C696E65000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP5 SWAP1 MSTORE PUSH32 0x92C10A242CA42973030420E2EE32B3BA7818CC643F896958F620C606CF300416 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1EF2 DUP7 DUP7 PUSH2 0x3551 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xAFF2FAA3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xAFF2FAA3 SWAP2 PUSH2 0x1F23 SWAP2 DUP9 SWAP2 DUP9 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F4F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F73 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST PUSH2 0x1F8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B9D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0x1FC0 SWAP2 DUP9 SWAP2 DUP9 SWAP2 ADD PUSH2 0x5A86 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2010 SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x201D DUP9 PUSH2 0x364A JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2073 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2087 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20AB SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP DUP1 PUSH1 0xA SLOAD DUP3 PUSH2 0x20BB SWAP2 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x38463CFF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x38463CFF SWAP2 PUSH2 0x20EE SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP10 SWAP2 ADD PUSH2 0x5A9A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2108 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x211C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2140 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST PUSH2 0x214A SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x2154 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST SWAP3 POP PUSH2 0x21E9 DUP9 DUP5 DUP10 DUP10 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F796D90 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21E3 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST DUP8 PUSH2 0x3771 JUMP JUMPDEST POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x2710 LT ISZERO PUSH2 0x2246 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642072657761726400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xAA50B3683E42A13535A5B9C2C32780CCCF956FB546B523A3542AC4AD8B544F67 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x9 SSTORE JUMP JUMPDEST DUP1 PUSH2 0x2710 LT ISZERO PUSH2 0x22D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642066656500000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7D205F60891F60851C61CD244BA387D72B6589E7C0AC41B9D909AB0CE2C2A53B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x8 SSTORE JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2341 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x36A4C08A38B736DCECB6C328DBA61238529620E83CCB23DB2CC43CD34EC26096 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP5 PUSH2 0x23C7 PUSH1 0x1 DUP3 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x23E4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x23F9 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x244F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642070617468000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x2 DUP7 EQ PUSH2 0x249F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2077726F6E6720616D6F756E74730000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x24C0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x24D5 SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD CALLER ADDRESS DUP11 DUP11 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x2506 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x255D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2571 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2595 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP DUP4 DUP4 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x25B7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x25CC SWAP2 SWAP1 PUSH2 0x5369 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95EA7B3 DUP10 DUP10 DUP10 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x25FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x264B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x265F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2683 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH1 0x0 DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xB0BBCD88 DUP11 DUP11 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0x26B7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP12 DUP12 PUSH1 0x1 DUP2 DUP2 LT PUSH2 0x26DF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 ADDRESS DUP11 DUP15 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x270D SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5CE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x273B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2763 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x54E4 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x27B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A2065786368616E6765206661696C6564000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP3 MLOAD PUSH2 0x27C3 SWAP2 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x27E1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2808 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x1EE5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP5 POP SWAP1 SWAP3 POP SWAP1 PUSH2 0x2835 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x2853 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD PUSH2 0x286C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0xC19DABF19FDFD8C6124BED2178A4564D0C5D5812BFB916777CC90D1B53ED5A5A SWAP2 DUP11 SWAP2 DUP11 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP12 SWAP2 DUP12 SWAP2 PUSH2 0x28C8 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x28E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x290C SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5AD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2946 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xFA021C2EC0F46429A53E7F88B88065E40001F50C9D38B2E8B713BEAF9828D4C3 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x29CC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5997 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x29E6 SWAP2 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A03 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A26 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A3F SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x2A59 SWAP2 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A76 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A99 SWAP2 SWAP1 PUSH2 0x55A2 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2ABC PUSH2 0x2AB7 DUP7 DUP4 PUSH2 0x3939 JUMP JUMPDEST PUSH2 0x395D JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x2B14 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E48656C7065723A2076696E206973206E756C6C000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B20 DUP3 DUP7 PUSH2 0x3A93 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B2D DUP3 PUSH2 0x3BB1 JUMP JUMPDEST SWAP1 POP PUSH2 0x2B38 DUP2 PUSH2 0x3BD5 JUMP JUMPDEST SWAP5 POP PUSH2 0x2B43 DUP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2B6D PUSH2 0x2B68 DUP3 JUMPDEST DUP7 SWAP1 PUSH2 0x3939 JUMP JUMPDEST PUSH2 0x3C21 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x2B95 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BA1 DUP3 DUP6 PUSH2 0x3D12 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2BAE DUP3 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP PUSH2 0x2BBF PUSH3 0xFFFFFF NOT DUP3 AND PUSH2 0x3E5D JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BD4 DUP6 PUSH2 0x3EAD JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x626885B5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP4 POP PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xC4D10B6A SWAP2 PUSH2 0x2C14 SWAP2 DUP10 SWAP2 ADD PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C40 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C64 SWAP2 SWAP1 PUSH2 0x5385 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x9 SLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB734DE26 SWAP1 DUP4 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x2C8D SWAP1 DUP8 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x2C97 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD PUSH1 0xE0 DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D04 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D28 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP PUSH32 0x7FF138134E34CCAB071315C38E38EEC079F54726B890304AB46E2C5AB6F722BB DUP2 DUP7 DUP6 DUP8 PUSH2 0x2710 PUSH1 0x9 SLOAD DUP9 PUSH2 0x2D5F SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x2D69 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST PUSH2 0x2D73 SWAP1 DUP9 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D84 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5A45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2DBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x4C28A3F61A715259C4DC930C23E7423B8FA52E13232C061A6E488729C66184F4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x47C5F9C13C35EBB166F6A8D8C56AF73F8B323AC0FEE7AEC4A5E0490BBF67A4FE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP1 PUSH2 0x2710 LT ISZERO PUSH2 0x2EB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642062746320666565000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x33DA JUMPI DUP1 PUSH2 0x2EFB JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2EEC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP PUSH2 0x2FA8 JUMP JUMPDEST DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F1C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x2F7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20756E2D736F7274656420766F757420696E64 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x65786573 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2F9D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP JUMPDEST PUSH1 0x0 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2FCA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0xB PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3018 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 PUSH1 0x7 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x3087 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP12 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x3072 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x4 ADD SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x33C7 JUMPI PUSH2 0x3232 DUP9 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x30B0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xB PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x30FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x3118 SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3144 SWAP1 PUSH2 0x5F12 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3191 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3166 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3191 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3174 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP16 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 POP DUP8 SWAP2 POP DUP2 LT PUSH2 0x31D0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x5 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x320E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x322D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3F47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 POP DUP4 PUSH1 0xB PUSH1 0x0 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3282 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x1 ADD SLOAD EQ ISZERO PUSH2 0x33C7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x32D6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x7 SWAP1 SWAP2 MUL ADD PUSH1 0x5 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x3303 DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 SWAP8 POP SWAP1 SWAP2 PUSH32 0x1B46655C2F394F2191CB246D5982DBE00AD671F0B590E75E97C90EE97F1F782A SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x3363 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x7 MUL ADD PUSH1 0x6 ADD SLOAD DUP14 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3396 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x33BE SWAP4 SWAP3 SWAP2 SWAP1 SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP DUP1 PUSH2 0x33D2 DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2EBE JUMP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F3 DUP5 DUP5 PUSH2 0x4182 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH2 0x3409 DUP6 PUSH2 0x4285 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x3423 JUMPI POP DUP1 PUSH2 0x3421 DUP8 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x3446 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x3468 JUMP JUMPDEST DUP1 DUP7 EQ ISZERO PUSH2 0x3468 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3497 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B2F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x567657FA3F286518B318F4A29870674F433F622FDFC819691ACB13105B228225 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3573 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ DUP1 PUSH2 0x359E JUMPI POP PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x359C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x35F9 JUMPI DUP2 MLOAD PUSH1 0x20 EQ PUSH2 0x35F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642073637269707400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH2 0x6A0 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x14 EQ PUSH2 0x6A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20696E76616C69642073637269707400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2710 PUSH1 0x8 SLOAD DUP5 PUSH2 0x365E SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x3668 SWAP2 SWAP1 PUSH2 0x5E40 JUMP JUMPDEST SWAP1 POP PUSH1 0xA SLOAD PUSH1 0x2 PUSH2 0x3679 SWAP2 SWAP1 PUSH2 0x5E60 JUMP JUMPDEST PUSH2 0x3683 SWAP1 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST DUP4 GT PUSH2 0x36D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206C6F7720616D6F756E740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36DD DUP3 DUP6 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP3 SWAP4 POP AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x372F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3743 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3767 SWAP2 SWAP1 PUSH2 0x54C8 JUMP JUMPDEST POP SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0xE0 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP9 SWAP1 MSTORE CALLER SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP5 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x37D5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x37F6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE POP PUSH1 0x7 SLOAD PUSH2 0x3806 SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP1 DUP3 MSTORE PUSH1 0xC PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD PUSH1 0xE0 DUP7 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP1 SWAP4 MSTORE SWAP1 SWAP2 MSTORE PUSH2 0x3846 SWAP1 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0xB DUP2 MSTORE DUP4 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE SWAP3 DUP3 SWAP1 KECCAK256 DUP7 MLOAD PUSH1 0x7 SWAP1 SWAP5 MUL ADD SWAP3 DUP4 SSTORE DUP6 DUP3 ADD MLOAD SWAP1 DUP4 ADD SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP1 MLOAD DUP5 SWAP4 PUSH2 0x38C6 SWAP3 PUSH1 0x3 DUP6 ADD SWAP3 SWAP2 ADD SWAP1 PUSH2 0x50DE JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR DUP1 DUP3 SSTORE PUSH1 0xC0 DUP6 ADD MLOAD SWAP3 PUSH2 0xFF00 NOT SWAP1 SWAP2 AND SWAP1 PUSH2 0x100 SWAP1 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x391F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD PUSH2 0x3954 PUSH5 0xFFFFFFFFFF DUP6 AND DUP3 DUP5 PUSH2 0x42B1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 PUSH2 0x3973 DUP2 JUMPDEST PUSH3 0xFFFFFF NOT DUP5 AND SWAP1 PUSH2 0x42F8 JUMP JUMPDEST POP PUSH1 0x18 DUP5 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x3993 JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP3 POP PUSH2 0x3A8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39A0 DUP6 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x18 DUP6 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH2 0x39CD JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP5 POP POP POP PUSH2 0x3A8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39D8 DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 LT ISZERO PUSH2 0x3A54 JUMPI DUP3 DUP3 LT PUSH2 0x3A09 JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP7 POP POP POP POP POP PUSH2 0x3A8C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A29 PUSH2 0x3A18 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x5 JUMPDEST PUSH3 0xFFFFFF NOT DUP13 AND SWAP2 SWAP1 PUSH2 0x4572 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A34 DUP2 PUSH2 0x45A6 JUMP JUMPDEST PUSH2 0x3A3E SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x3A4C SWAP1 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x39E0 JUMP JUMPDEST POP DUP2 DUP2 EQ PUSH2 0x3A6C JUMPI PUSH3 0xFFFFFF NOT JUMPDEST SWAP6 POP POP POP POP PUSH2 0x3A8C JUMP JUMPDEST PUSH2 0x3A86 PUSH1 0x6 JUMPDEST PUSH1 0xD8 SHL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xD8 SHL SUB DUP10 AND OR SWAP1 JUMP JUMPDEST SWAP6 POP POP POP POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x6 PUSH2 0x3AA1 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3AAF DUP7 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x18 DUP7 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 DUP7 LT PUSH2 0x3B0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x2B34B7103932B0B21037BB32B9393AB7 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B15 DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x3B6D JUMPI PUSH2 0x3B44 PUSH2 0x3B33 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0x5 JUMPDEST PUSH3 0xFFFFFF NOT DUP14 AND SWAP2 SWAP1 PUSH2 0x4572 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B4F DUP3 PUSH2 0x45A6 JUMP JUMPDEST PUSH2 0x3B59 SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP PUSH2 0x3B66 PUSH1 0x1 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B1E JUMP JUMPDEST POP PUSH2 0x3B7B PUSH2 0x3A18 DUP4 DUP6 PUSH2 0x5EA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3B88 DUP3 PUSH2 0x45A6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BA1 DUP4 DUP3 PUSH1 0x4 JUMPDEST PUSH3 0xFFFFFF NOT DUP15 AND SWAP3 SWAP2 SWAP1 PUSH2 0x45FA JUMP JUMPDEST SWAP8 POP POP POP POP POP POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 PUSH2 0x3BBF DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH3 0xFFFFFF NOT DUP6 AND PUSH1 0x0 PUSH1 0x24 PUSH1 0x3 PUSH2 0x45FA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 PUSH2 0x3BE3 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH3 0xFFFFFF NOT DUP6 AND PUSH1 0x0 PUSH1 0x20 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 PUSH2 0x3C05 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH2 0x3C1C PUSH3 0xFFFFFF NOT DUP7 AND PUSH1 0x20 PUSH1 0x4 PUSH2 0x47C3 JUMP JUMPDEST PUSH2 0x490D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 PUSH2 0x3C2E DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x18 DUP5 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x3C4B JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x398C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C58 DUP6 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x18 DUP6 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND PUSH2 0x3C80 JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x39C4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C8B DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 LT ISZERO PUSH2 0x3CF6 JUMPI DUP3 DUP3 LT PUSH2 0x3CB5 JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x39FE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CCB PUSH2 0x3CC4 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0xE PUSH2 0x3A1B JUMP JUMPDEST SWAP1 POP PUSH2 0x3CD6 DUP2 PUSH2 0x4976 JUMP JUMPDEST PUSH2 0x3CE0 SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP POP DUP1 DUP1 PUSH2 0x3CEE SWAP1 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3C93 JUMP JUMPDEST POP DUP2 DUP2 EQ PUSH2 0x3D08 JUMPI PUSH3 0xFFFFFF NOT PUSH2 0x3A62 JUMP JUMPDEST PUSH2 0x3A86 PUSH1 0xF PUSH2 0x3A72 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0xF PUSH2 0x3D20 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3D2E DUP7 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x18 DUP7 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 DUP7 LT PUSH2 0x3D8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2B37BABA103932B0B21037BB32B9393AB7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D95 DUP4 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x3DE3 JUMPI PUSH2 0x3DBA PUSH2 0x3DB3 DUP5 DUP7 PUSH2 0x5EA8 JUMP JUMPDEST PUSH1 0xE PUSH2 0x3B36 JUMP JUMPDEST SWAP2 POP PUSH2 0x3DC5 DUP3 PUSH2 0x4976 JUMP JUMPDEST PUSH2 0x3DCF SWAP1 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST SWAP3 POP PUSH2 0x3DDC PUSH1 0x1 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x3D9E JUMP JUMPDEST POP PUSH2 0x3DF1 PUSH2 0x3CC4 DUP4 DUP6 PUSH2 0x5EA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3DFE DUP3 PUSH2 0x4976 JUMP JUMPDEST SWAP1 POP PUSH2 0x3BA1 DUP4 DUP3 PUSH1 0xD PUSH2 0x3B92 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xD PUSH2 0x3E1A DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x3E28 DUP6 PUSH1 0x8 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP PUSH2 0x3954 PUSH2 0x3E36 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH2 0x3E41 SWAP1 PUSH1 0x8 PUSH2 0x5DF9 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0xFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND PUSH1 0x7 PUSH2 0x45FA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x3E75 DUP5 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 POP DUP4 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH2 0x3E9C DUP5 PUSH2 0x3E97 DUP5 PUSH1 0x20 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x49BF JUMP JUMPDEST POP DUP2 DUP2 ADD PUSH1 0x20 ADD PUSH1 0x40 MSTORE SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EBF PUSH2 0x2B68 DUP3 JUMPDEST DUP6 SWAP1 PUSH2 0x3939 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x3EE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EF5 DUP4 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F3E JUMPI PUSH2 0x3F15 DUP5 DUP3 PUSH2 0x3D12 JUMP JUMPDEST SWAP3 POP PUSH2 0x3F20 DUP4 PUSH2 0x4B17 JUMP JUMPDEST PUSH2 0x3F2A SWAP1 DUP7 PUSH2 0x5DCE JUMP JUMPDEST SWAP5 POP DUP1 PUSH2 0x3F36 DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F03 JUMP JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3F57 PUSH2 0x2B68 DUP8 DUP4 PUSH2 0x3939 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x3F7F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8B DUP3 DUP8 PUSH2 0x3D12 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3F98 DUP3 PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x3FBC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x4021 JUMPI PUSH2 0x3FD5 PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x1 PUSH1 0x20 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3FE7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x4011 JUMPI PUSH1 0x0 PUSH2 0x401A JUMP JUMPDEST PUSH2 0x401A DUP3 PUSH2 0x4B17 JUMP JUMPDEST SWAP4 POP PUSH2 0x4177 JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4043 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x4082 JUMPI PUSH2 0x405A PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x3 PUSH2 0x4B3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3FE7 SWAP2 SWAP1 PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x40A4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x40BB JUMPI PUSH2 0x405A PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x2 PUSH2 0x4B3C JUMP JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x40DD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x40F4 JUMPI PUSH2 0x405A PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x2 PUSH2 0x4B3C JUMP JUMPDEST PUSH1 0x4 DUP6 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4116 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST EQ ISZERO PUSH2 0x4177 JUMPI PUSH2 0x412F PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x2 PUSH1 0x20 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4141 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x416B JUMPI PUSH1 0x0 PUSH2 0x4174 JUMP JUMPDEST PUSH2 0x4174 DUP3 PUSH2 0x4B17 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4191 PUSH2 0x2B68 DUP3 PUSH2 0x2B61 JUMP JUMPDEST SWAP1 POP PUSH3 0xFFFFFF NOT DUP1 DUP3 AND EQ ISZERO PUSH2 0x41B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP1 PUSH2 0x5B66 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x41C9 DUP5 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x427A JUMPI PUSH2 0x41E9 DUP6 DUP3 PUSH2 0x3D12 JUMP JUMPDEST SWAP4 POP PUSH2 0x41F4 DUP5 PUSH2 0x3E0C JUMP JUMPDEST SWAP3 POP DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4207 SWAP2 SWAP1 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x422C DUP5 PUSH3 0xFFFFFF NOT AND PUSH2 0x3E5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x423C SWAP2 SWAP1 PUSH2 0x59EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ ISZERO PUSH2 0x4268 JUMPI PUSH2 0x4261 DUP5 PUSH2 0x4B17 JUMP JUMPDEST SWAP6 POP PUSH2 0x427A JUMP JUMPDEST DUP1 PUSH2 0x4272 DUP2 PUSH2 0x5F47 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x41D7 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4294 PUSH2 0x2B68 DUP3 PUSH2 0x3EB8 JUMP JUMPDEST SWAP1 POP PUSH2 0x42A1 DUP2 PUSH1 0x0 PUSH2 0x43D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42BE DUP4 DUP6 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP2 GT ISZERO PUSH2 0x42CE JUMPI POP PUSH1 0x0 JUMPDEST DUP1 PUSH2 0x42E0 JUMPI PUSH3 0xFFFFFF NOT SWAP2 POP POP PUSH2 0x42F1 JUMP JUMPDEST POP POP PUSH1 0x60 DUP4 DUP2 SHL DUP4 OR SWAP1 SHL DUP2 OR PUSH1 0x18 SHL JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4304 DUP4 DUP4 PUSH2 0x4B4A JUMP JUMPDEST PUSH2 0x43CB JUMPI PUSH1 0x0 PUSH2 0x4323 PUSH2 0x4317 DUP6 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4338 DUP5 PUSH5 0xFFFFFFFFFF AND PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5479706520617373657274696F6E206661696C65642E20476F74203078000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xB0 SHL SUB NOT PUSH1 0xB0 DUP7 DUP2 SHL DUP3 AND PUSH1 0x3D DUP5 ADD MSTORE PUSH13 0x5C408AF0E0CAC6E8CAC84060F PUSH1 0x9B SHL PUSH1 0x47 DUP5 ADD MSTORE DUP4 SWAP1 SHL AND PUSH1 0x54 DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH1 0x5E ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP2 SWAP1 PUSH2 0x5ABE JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x43E7 PUSH3 0xFFFFFF NOT DUP6 AND DUP5 PUSH1 0x1 PUSH2 0x4C19 JUMP JUMPDEST SWAP1 POP PUSH1 0xFC DUP2 GT PUSH2 0x4402 JUMPI PUSH2 0x43FA DUP2 PUSH2 0x4C49 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x112C JUMP JUMPDEST DUP1 PUSH1 0xFD EQ ISZERO PUSH2 0x4468 JUMPI PUSH2 0x4430 PUSH2 0x442B PUSH2 0x441C DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x2 PUSH2 0x47C3 JUMP JUMPDEST PUSH2 0x4C49 JUMP JUMPDEST SWAP2 POP PUSH2 0x443B DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x3 EQ PUSH2 0x4463 JUMPI PUSH2 0x4461 PUSH2 0x445C PUSH3 0xFFFFFF NOT DUP7 AND DUP6 PUSH1 0x3 PUSH1 0x0 PUSH2 0x45FA JUMP JUMPDEST PUSH2 0x4CB1 JUMP JUMPDEST POP JUMPDEST PUSH2 0x4512 JUMP JUMPDEST DUP1 PUSH1 0xFE EQ ISZERO PUSH2 0x44BD JUMPI PUSH2 0x4491 PUSH2 0x442B PUSH2 0x4482 DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 PUSH2 0x47C3 JUMP JUMPDEST SWAP2 POP PUSH2 0x449C DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x5 EQ PUSH2 0x4463 JUMPI PUSH2 0x4461 PUSH2 0x445C PUSH3 0xFFFFFF NOT DUP7 AND DUP6 PUSH1 0x5 PUSH1 0x0 PUSH2 0x45FA JUMP JUMPDEST DUP1 PUSH1 0xFF EQ ISZERO PUSH2 0x4512 JUMPI PUSH2 0x44E6 PUSH2 0x442B PUSH2 0x44D7 DUP6 PUSH1 0x1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x8 PUSH2 0x47C3 JUMP JUMPDEST SWAP2 POP PUSH2 0x44F1 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x9 EQ PUSH2 0x4512 JUMPI PUSH2 0x3BA9 PUSH2 0x445C PUSH3 0xFFFFFF NOT DUP7 AND DUP6 PUSH1 0x9 PUSH1 0x0 PUSH2 0x45FA JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFC DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x4534 JUMPI POP PUSH1 0x1 PUSH2 0x376C JUMP JUMPDEST PUSH2 0xFFFF DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x454E JUMPI POP PUSH1 0x3 PUSH2 0x376C JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x456A JUMPI POP PUSH1 0x5 PUSH2 0x376C JUMP JUMPDEST POP PUSH1 0x9 PUSH2 0x376C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9E DUP5 DUP5 PUSH2 0x458C DUP8 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x459F SWAP2 SWAP1 PUSH2 0x5EA8 JUMP JUMPDEST DUP6 DUP6 PUSH2 0x45FA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 PUSH2 0x45B4 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x45C2 DUP6 PUSH1 0x24 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x45D7 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x45E4 SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x45EF SWAP1 PUSH1 0x24 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x3954 SWAP1 PUSH1 0x4 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4610 DUP7 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH2 0x4624 DUP7 PUSH2 0x4D38 JUMP JUMPDEST DUP5 PUSH2 0x462F DUP8 DUP5 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x4639 SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST GT ISZERO PUSH2 0x464C JUMPI PUSH3 0xFFFFFF NOT SWAP2 POP POP PUSH2 0x2A9E JUMP JUMPDEST PUSH2 0x4656 DUP6 DUP3 PUSH2 0x5DB6 JUMP JUMPDEST SWAP1 POP PUSH2 0x2BBF DUP4 PUSH5 0xFFFFFFFFFF AND DUP3 DUP7 PUSH2 0x42B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH2 0x467C JUMPI POP PUSH1 0x0 PUSH2 0x42F1 JUMP JUMPDEST PUSH2 0x468F DUP5 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x46A5 PUSH1 0xFF DUP5 AND DUP6 PUSH2 0x5DB6 JUMP JUMPDEST GT ISZERO PUSH2 0x4709 JUMPI PUSH2 0x46F0 PUSH2 0x46C1 DUP6 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x46DD DUP7 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP6 DUP6 PUSH1 0xFF AND PUSH2 0x4D79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x674 SWAP2 SWAP1 PUSH2 0x5ABE JUMP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND GT ISZERO PUSH2 0x4783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54797065644D656D566965772F696E646578202D20417474656D707465642074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F20696E646578206D6F7265207468616E203332206279746573000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x8 DUP3 MUL PUSH1 0x0 PUSH2 0x479C DUP7 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xFF SHL PUSH1 0x0 NOT DUP5 ADD SAR SWAP2 SWAP1 SWAP6 ADD MLOAD AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9E PUSH2 0x47D3 DUP6 DUP6 DUP6 PUSH2 0x466A JUMP JUMPDEST PUSH1 0x8 DUP2 DUP2 SHR PUSH31 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF AND PUSH32 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x10 DUP2 DUP2 SHR PUSH30 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF AND PUSH32 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x20 DUP2 DUP2 SHR PUSH28 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF AND PUSH32 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x40 DUP2 DUP2 SHR PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF NOT SWAP3 SWAP1 SWAP2 SHL SWAP2 SWAP1 SWAP2 AND OR PUSH1 0x80 DUP2 DUP2 SHR SWAP2 SWAP1 SHL OR SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xE PUSH2 0x4984 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x4992 DUP6 PUSH1 0x8 PUSH2 0x43D2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH2 0x49A7 DUP3 PUSH2 0x4519 JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x49B4 SWAP2 SWAP1 PUSH2 0x5DB6 JUMP JUMPDEST PUSH2 0x3954 SWAP1 PUSH1 0x8 PUSH2 0x5DB6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF NOT DUP1 DUP5 AND EQ ISZERO PUSH2 0x4A28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54797065644D656D566965772F636F7079546F202D204E756C6C20706F696E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x32B9103232B932B3 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH2 0x4A31 DUP4 PUSH2 0x4EA3 JUMP JUMPDEST PUSH2 0x4A91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54797065644D656D566965772F636F7079546F202D20496E76616C696420706F PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x34B73A32B9103232B932B3 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AA6 DUP5 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH2 0x4AC6 DUP6 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x4AE6 JUMPI PUSH1 0x20 PUSH1 0x60 REVERT JUMPDEST DUP3 DUP6 DUP5 DUP5 PUSH1 0x4 GAS STATICCALL POP PUSH2 0x2BBF PUSH2 0x4AFC DUP8 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF PUSH1 0x60 SHL PUSH1 0x60 SWAP2 DUP3 SHL AND DUP8 OR SWAP1 SHL DUP5 OR PUSH1 0x18 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xD PUSH2 0x4B25 DUP2 PUSH2 0x3966 JUMP JUMPDEST POP PUSH2 0x2A9E PUSH2 0x442B PUSH3 0xFFFFFF NOT DUP7 AND PUSH1 0x0 PUSH1 0x8 PUSH2 0x47C3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F1 DUP4 DUP4 PUSH1 0x14 PUSH2 0x4C19 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH5 0xFFFFFFFFFF AND PUSH2 0x4B5E DUP5 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1F JUMPDEST PUSH1 0xF DUP2 PUSH1 0xFF AND GT ISZERO PUSH2 0x4BCB JUMPI PUSH1 0x0 PUSH2 0x4B8C DUP3 PUSH1 0x8 PUSH2 0x5E7F JUMP JUMPDEST PUSH1 0xFF AND DUP6 SWAP1 SHR SWAP1 POP PUSH2 0x4B9D DUP2 PUSH2 0x4EE1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP5 OR SWAP4 POP DUP2 PUSH1 0xFF AND PUSH1 0x10 EQ PUSH2 0x4BB8 JUMPI PUSH1 0x10 DUP5 SWAP1 SHL SWAP4 POP JUMPDEST POP PUSH2 0x4BC4 PUSH1 0x1 DUP3 PUSH2 0x5EBF JUMP JUMPDEST SWAP1 POP PUSH2 0x4B73 JUMP JUMPDEST POP PUSH1 0xF JUMPDEST PUSH1 0xFF DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x4C13 JUMPI PUSH1 0xFF PUSH1 0x8 DUP3 MUL AND DUP5 SWAP1 SHR PUSH2 0x4BEE DUP2 PUSH2 0x4EE1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP4 OR SWAP3 POP DUP2 PUSH1 0xFF AND PUSH1 0x0 EQ PUSH2 0x4C09 JUMPI PUSH1 0x10 DUP4 SWAP1 SHL SWAP3 POP JUMPDEST POP PUSH1 0x0 NOT ADD PUSH2 0x4BCF JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C26 DUP3 PUSH1 0x20 PUSH2 0x5EBF JUMP JUMPDEST PUSH2 0x4C31 SWAP1 PUSH1 0x8 PUSH2 0x5E7F JUMP JUMPDEST PUSH1 0xFF AND PUSH2 0x4C3F DUP6 DUP6 DUP6 PUSH2 0x466A JUMP JUMPDEST SWAP1 SHR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2036 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x342062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x4CE5 PUSH2 0x4CE0 DUP3 PUSH2 0x4CD2 PUSH1 0x18 DUP8 SWAP1 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND PUSH2 0x4F11 JUMP JUMPDEST PUSH3 0xFFFFFF NOT DUP8 AND SWAP2 SWAP1 PUSH2 0x4C19 JUMP JUMPDEST PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x4E6F6E2D6D696E696D616C2076617220696E742E20476F742030780000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x70 DUP4 SWAP1 SHL AND PUSH1 0x3B DUP3 ADD MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH1 0x4D ADD PUSH2 0x43A0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D4D DUP3 PUSH1 0x18 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x4D60 DUP4 PUSH1 0x78 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x4D6A SWAP2 SWAP1 PUSH2 0x5E1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x4D86 DUP7 PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4D94 DUP7 PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4DA2 DUP7 PUSH2 0x4B6D JUMP JUMPDEST SWAP2 POP POP PUSH1 0x0 PUSH2 0x4DB0 DUP7 PUSH2 0x4B6D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x54797065644D656D566965772F696E646578202D204F76657272616E20746865 PUSH1 0x20 DUP3 ADD MSTORE PUSH21 0x40ECD2CAEE5C40A6D8D2C6CA40D2E640C2E84060F PUSH1 0x5B SHL DUP2 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB NOT PUSH1 0xD0 SWAP9 DUP10 SHL DUP2 AND PUSH1 0x55 DUP4 ADD MSTORE PUSH15 0x40EED2E8D040D8CADCCEE8D04060F PUSH1 0x8B SHL PUSH1 0x5B DUP4 ADD DUP2 SWAP1 MSTORE SWAP8 DUP10 SHL DUP2 AND PUSH1 0x6A DUP4 ADD MSTORE PUSH32 0x2E20417474656D7074656420746F20696E646578206174206F66667365742030 PUSH1 0x70 DUP4 ADD MSTORE PUSH1 0xF PUSH1 0xFB SHL PUSH1 0x90 DUP4 ADD MSTORE SWAP6 DUP9 SHL DUP7 AND PUSH1 0x91 DUP3 ADD MSTORE PUSH1 0x97 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP6 SHL SWAP1 SWAP3 AND PUSH1 0xA6 DUP5 ADD MSTORE POP POP PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0xAC DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP3 SUB PUSH1 0x8D ADD DUP2 MSTORE PUSH1 0xAD SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EAF DUP3 PUSH1 0xD8 SHR SWAP1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF AND PUSH5 0xFFFFFFFFFF EQ ISZERO PUSH2 0x4ECA JUMPI POP PUSH1 0x0 PUSH2 0x376C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4ED5 DUP4 PUSH2 0x4D38 JUMP JUMPDEST PUSH1 0x40 MLOAD LT NOT SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EF3 PUSH1 0x4 DUP4 PUSH1 0xFF AND SWAP1 SHR PUSH2 0x4F72 JUMP JUMPDEST PUSH1 0xFF AND OR PUSH1 0x8 SHL PUSH3 0xFFFF00 AND PUSH2 0x4F08 DUP3 PUSH2 0x4F72 JUMP JUMPDEST PUSH1 0xFF AND OR SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2038 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x2062697473 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x674 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xF0 DUP1 DUP4 OR SWAP1 PUSH1 0xFF DUP3 AND EQ ISZERO PUSH2 0x4F8E JUMPI PUSH1 0x30 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF1 EQ ISZERO PUSH2 0x4FA4 JUMPI PUSH1 0x31 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF2 EQ ISZERO PUSH2 0x4FBA JUMPI PUSH1 0x32 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF3 EQ ISZERO PUSH2 0x4FD0 JUMPI PUSH1 0x33 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF4 EQ ISZERO PUSH2 0x4FE6 JUMPI PUSH1 0x34 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF5 EQ ISZERO PUSH2 0x4FFC JUMPI PUSH1 0x35 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF6 EQ ISZERO PUSH2 0x5012 JUMPI PUSH1 0x36 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF7 EQ ISZERO PUSH2 0x5028 JUMPI PUSH1 0x37 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF8 EQ ISZERO PUSH2 0x503E JUMPI PUSH1 0x38 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xF9 EQ ISZERO PUSH2 0x5054 JUMPI PUSH1 0x39 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFA EQ ISZERO PUSH2 0x506A JUMPI PUSH1 0x61 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFB EQ ISZERO PUSH2 0x5080 JUMPI PUSH1 0x62 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFC EQ ISZERO PUSH2 0x5096 JUMPI PUSH1 0x63 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFD EQ ISZERO PUSH2 0x50AC JUMPI PUSH1 0x64 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFE EQ ISZERO PUSH2 0x50C2 JUMPI PUSH1 0x65 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST DUP1 PUSH1 0xFF AND PUSH1 0xFF EQ ISZERO PUSH2 0x50D8 JUMPI PUSH1 0x66 SWAP2 POP POP PUSH2 0x376C JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x50EA SWAP1 PUSH2 0x5F12 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x510C JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x5152 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x5125 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x5152 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x5152 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x5152 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5137 JUMP JUMPDEST POP PUSH2 0x4972 SWAP3 SWAP2 POP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x4972 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x515A JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x376C DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x518A JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x51A0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x51BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x51D1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x51E6 PUSH2 0x51E1 DUP4 PUSH2 0x5D93 JUMP JUMPDEST PUSH2 0x5D63 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0x5202 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5227 JUMPI PUSH2 0x5215 DUP3 PUSH2 0x5299 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5204 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5244 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x5254 PUSH2 0x51E1 DUP4 PUSH2 0x5D93 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP4 DUP6 MUL DUP8 ADD DUP5 ADD DUP9 LT ISZERO PUSH2 0x5270 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x5227 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5272 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x376C DUP2 PUSH2 0x5FA3 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x376C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x52C2 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x52D8 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x51BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5300 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x5319 JUMPI PUSH2 0x5319 PUSH2 0x5F78 JUMP JUMPDEST PUSH2 0x532C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x5D63 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x5340 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP1 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x5 DUP2 LT PUSH2 0x376C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x537A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x42F1 DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5396 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x42F1 DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP13 DUP15 SUB SLT ISZERO PUSH2 0x53C2 JUMPI DUP7 DUP8 REVERT JUMPDEST PUSH2 0x53CB DUP13 PUSH2 0x516E JUMP JUMPDEST SWAP11 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 PUSH1 0x20 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x53E5 JUMPI DUP8 DUP9 REVERT JUMPDEST PUSH2 0x53F5 DUP15 PUSH1 0x20 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x5179 JUMP JUMPDEST SWAP1 SWAP12 POP SWAP10 POP PUSH2 0x5406 PUSH1 0x40 DUP15 ADD PUSH2 0x528E JUMP JUMPDEST SWAP9 POP DUP1 PUSH1 0x60 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x5418 JUMPI DUP8 DUP9 REVERT JUMPDEST PUSH2 0x5428 DUP15 PUSH1 0x60 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x5179 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD SWAP6 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD DUP2 LT ISZERO PUSH2 0x5444 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5454 DUP15 PUSH1 0xA0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP5 POP PUSH2 0x5462 PUSH1 0xC0 DUP15 ADD PUSH2 0x535A JUMP JUMPDEST SWAP4 POP DUP1 PUSH1 0xE0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x5474 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x5485 DUP14 PUSH1 0xE0 DUP15 ADD CALLDATALOAD DUP15 ADD PUSH2 0x52B1 JUMP JUMPDEST DUP2 SWAP4 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP1 SWAP4 SWAP7 SWAP10 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x54AF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x54BA DUP2 PUSH2 0x5F8E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54D9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x42F1 DUP2 PUSH2 0x5FA3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x54F6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x5501 DUP2 PUSH2 0x5FA3 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x551E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x552E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x553C PUSH2 0x51E1 DUP3 PUSH2 0x5D93 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP11 LT ISZERO PUSH2 0x5558 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x557A JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x555C JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x559B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x55B3 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x55D9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x55E2 DUP12 PUSH2 0x5299 JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x55FD JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x5609 DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP11 POP PUSH1 0x40 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x561E JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x562A DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP10 POP PUSH2 0x5638 PUSH1 0x60 DUP15 ADD PUSH2 0x5299 JUMP JUMPDEST SWAP9 POP PUSH1 0x80 DUP14 ADD CALLDATALOAD SWAP8 POP PUSH1 0xA0 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5654 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x5660 DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP7 POP PUSH1 0xC0 DUP14 ADD CALLDATALOAD SWAP6 POP PUSH1 0xE0 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x567C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5688 DUP15 DUP4 DUP16 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP5 POP PUSH2 0x100 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x569E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x56AA DUP15 DUP4 DUP16 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP4 POP PUSH2 0x120 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x56C0 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x56CD DUP14 DUP3 DUP15 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x56F3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5709 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x5715 DUP8 DUP4 DUP9 ADD PUSH2 0x52B1 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x572D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x573A DUP7 DUP3 DUP8 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x5762 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x5778 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5784 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP11 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5799 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x57A5 DUP14 DUP4 DUP15 ADD PUSH2 0x51C1 JUMP JUMPDEST SWAP10 POP PUSH1 0x40 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x57BA JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x57C6 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP9 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x57DB JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x57E7 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP8 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x57FC JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5808 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP7 POP PUSH1 0xA0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x581D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x5829 DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP6 POP PUSH1 0xC0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x583E JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x584A DUP14 DUP4 DUP15 ADD PUSH2 0x51C1 JUMP JUMPDEST SWAP5 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x585F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x586B DUP14 DUP4 DUP15 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP4 POP PUSH2 0x100 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5881 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x588E DUP13 DUP3 DUP14 ADD PUSH2 0x5234 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x58B5 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x58D2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x58DE DUP10 DUP4 DUP11 ADD PUSH2 0x52F0 JUMP JUMPDEST SWAP6 POP PUSH2 0x58EC PUSH1 0x40 DUP10 ADD PUSH2 0x535A JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x5901 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x590E DUP9 DUP3 DUP10 ADD PUSH2 0x52B1 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x5961 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x5EE2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 DUP2 LT PUSH2 0x5993 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP1 DUP8 AND DUP4 MSTORE DUP6 MLOAD PUSH2 0x59B9 DUP2 PUSH1 0x4 DUP7 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x5EE2 JUMP JUMPDEST DUP6 MLOAD SWAP1 DUP5 ADD SWAP1 PUSH2 0x59D0 DUP2 PUSH1 0x4 DUP5 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x5EE2 JUMP JUMPDEST SWAP2 SWAP1 SWAP5 AND SWAP4 ADD PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x8 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x59FC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x5EE2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 MSTORE DUP6 PUSH1 0x20 DUP4 ADD MSTORE DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x5A33 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x5949 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5A69 SWAP1 DUP4 ADD DUP8 PUSH2 0x5949 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2A9E PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x591F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x5AAE PUSH1 0x40 DUP4 ADD DUP6 DUP8 PUSH2 0x591F JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x42F1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5949 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 MSTORE PUSH2 0x5AE5 DUP2 DUP5 ADD DUP13 PUSH2 0x5949 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5AF5 PUSH1 0x20 DUP4 ADD DUP11 PUSH2 0x5975 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xA0 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A207A65726F2061646472657373000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x426974636F696E48656C7065723A20766F7574206973206E756C6C0000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A206E6F74206C6F636B65720000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x43434275726E526F757465723A20646561646C696E65206E6F74207061737365 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5CB3 DUP4 DUP3 ADD DUP10 PUSH2 0x5949 JUMP JUMPDEST SWAP2 POP POP DUP6 PUSH1 0x80 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5CD1 PUSH1 0xC0 DUP4 ADD DUP6 PUSH2 0x5975 JUMP JUMPDEST DUP3 PUSH1 0xE0 DUP4 ADD MSTORE SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP8 SWAP1 PUSH1 0xE0 DUP5 ADD DUP4 JUMPDEST DUP10 DUP2 LT ISZERO PUSH2 0x5D36 JUMPI DUP4 CALLDATALOAD PUSH2 0x5D1B DUP2 PUSH2 0x5F8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5D08 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 SWAP1 SWAP8 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5D8B JUMPI PUSH2 0x5D8B PUSH2 0x5F78 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x5DAC JUMPI PUSH2 0x5DAC PUSH2 0x5F78 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x5DC9 JUMPI PUSH2 0x5DC9 PUSH2 0x5F62 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x5DF0 JUMPI PUSH2 0x5DF0 PUSH2 0x5F62 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x5E16 JUMPI PUSH2 0x5E16 PUSH2 0x5F62 JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x5DF0 JUMPI PUSH2 0x5DF0 PUSH2 0x5F62 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5E5B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5E7A JUMPI PUSH2 0x5E7A PUSH2 0x5F62 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP2 PUSH1 0xFF DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5EA0 JUMPI PUSH2 0x5EA0 PUSH2 0x5F62 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5EBA JUMPI PUSH2 0x5EBA PUSH2 0x5F62 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 DUP3 LT ISZERO PUSH2 0x5ED9 JUMPI PUSH2 0x5ED9 PUSH2 0x5F62 JUMP JUMPDEST SWAP1 SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5EFD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5EE5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5F0C JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x5F26 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x50D8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x5F5B JUMPI PUSH2 0x5F5B PUSH2 0x5F62 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL 0xE0 PUSH7 0x22DD52FA7DBAB4 0xFC PUSH21 0xFCA75673CA437C4BFE932375E439F3C05DC5852964 PUSH20 0x6F6C634300080200330000000000000000000000 ",
          "sourceMap": "497:32458:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5229:336;;;;;;;;;;;;;:::i;:::-;;1108:42;;;;;;;;;;;;;;;;;;;37196:25:77;;;37184:2;37169:18;1108:42:54;;;;;;;;953:31;;;;;;;;;;-1:-1:-1;953:31:54;;;;-1:-1:-1;;;;;953:31:54;;;;;;-1:-1:-1;;;;;18163:32:77;;;18145:51;;18133:2;18118:18;953:31:54;18100:102:77;1509:58:54;;;;;;;;;;-1:-1:-1;1509:58:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;21403:14:77;;21396:22;21378:41;;21366:2;21351:18;1509:58:54;21333:92:77;1179:44:54;;;;;;;;;;;;;;;;9498:1002;;;;;;;;;;-1:-1:-1;9498:1002:54;;;;;:::i;:::-;;:::i;6093:165::-;;;;;;;;;;-1:-1:-1;6093:165:54;;;;;:::i;:::-;;:::i;4858:137::-;;;;;;;;;;-1:-1:-1;4858:137:54;;;;;:::i;:::-;;:::i;1027:32::-;;;;;;;;;;-1:-1:-1;1027:32:54;;;;-1:-1:-1;;;;;1027:32:54;;;872:40;;;;;;;;;;;;;;;;3165:65;;;;;;;;;;;;;:::i;14943:2196::-;;;;;;;;;;-1:-1:-1;14943:2196:54;;;;;:::i;:::-;;:::i;5746:157::-;;;;;;;;;;-1:-1:-1;5746:157:54;;;;;:::i;:::-;;:::i;4265:104::-;;;;;;;;;;-1:-1:-1;4265:104:54;;;;;:::i;:::-;;:::i;3415:206::-;;;;;;;;;;-1:-1:-1;3415:206:54;;;;;:::i;:::-;;:::i;990:31::-;;;;;;;;;;-1:-1:-1;990:31:54;;;;-1:-1:-1;;;;;990:31:54;;;10936:721;;;;;;;;;;-1:-1:-1;10936:721:54;;;;;:::i;:::-;;:::i;973:85:7:-;;;;;;;;;;-1:-1:-1;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;973:85;;1453:50:54;;;;;;;;;;-1:-1:-1;1453:50:54;;;;;:::i;:::-;;;;;;;;;;;;;;4011:104;;;;;;;;;;-1:-1:-1;4011:104:54;;;;;:::i;:::-;;:::i;918:29::-;;;;;;;;;;-1:-1:-1;918:29:54;;;;-1:-1:-1;;;;;918:29:54;;;1249:31;;;;;;;;;;;;;;;;1065:37;;;;;;;;;;;;;;;;18172:3318;;;;;;:::i;:::-;;:::i;3765:96::-;;;;;;;;;;-1:-1:-1;3765:96:54;;;;;:::i;:::-;;:::i;6409:113::-;;;;;;;;;;-1:-1:-1;6409:113:54;;;;;:::i;:::-;;:::i;12554:2081::-;;;;;;:::i;:::-;;:::i;4513:108::-;;;;;;;;;;-1:-1:-1;4513:108:54;;;;;:::i;:::-;;:::i;1846:189:7:-;;;;;;;;;;-1:-1:-1;1846:189:7;;;;;:::i;:::-;;:::i;1323:53:54:-;;;;;;;;;;-1:-1:-1;1323:53:54;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;:::i;5229:336::-;5323:5;;5309:44;;;-1:-1:-1;;;5309:44:54;;;;5279:27;;-1:-1:-1;;;;;5323:5:54;;5309:42;;:44;;;;;;;;;;;;;;5323:5;5309:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5279:74;;5397:16;;5371:22;:42;;5363:81;;;;-1:-1:-1;;;5363:81:54;;27275:2:77;5363:81:54;;;27257:21:77;27314:2;27294:18;;;27287:30;27353:28;27333:18;;;27326:56;27399:18;;5363:81:54;;;;;;;;;5454:22;5479:26;5483:22;5479:1;:26;:::i;:::-;:30;;5508:1;5479:30;:::i;:::-;5454:55;;5519:39;5540:17;5519:20;:39::i;:::-;5229:336;;:::o;9498:1002::-;1680:1:14;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:14;;;;;;;:::i;:::-;1680:1;2389:7;:18;9752:7:54::1;::::0;-1:-1:-1;;;;;9752:7:54::1;9743:30;666:10:20::0;9743:68:54::1;::::0;-1:-1:-1;;;;;;9743:68:54::1;::::0;;;;;;-1:-1:-1;;;;;18774:15:77;;;9743:68:54::1;::::0;::::1;18756:34:77::0;9796:4:54::1;18806:18:77::0;;;18799:43;18858:18;;;18851:34;;;18691:18;;9743:68:54::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9823:16;9841:27:::0;9872:125:::1;9893:7;9915:11;9941;9967:20;;9872:7;:125::i;:::-;-1:-1:-1::0;;;;;10394:33:54;::::1;;::::0;;;:12:::1;:33;::::0;;;;10428:40;;9822:175;;-1:-1:-1;9822:175:54;;-1:-1:-1;10394:33:54;10428:44:::1;::::0;10471:1:::1;::::0;10428:44:::1;:::i;:::-;10394:79;;;;;;-1:-1:-1::0;;;10394:79:54::1;;;;;;;;;;;;;;;;;;;:88;;;10033:12;666:10:20::0;587:96;;10033:12:54::1;-1:-1:-1::0;;;;;10263:33:54;;::::1;10109:1;10263:33:::0;;;:12:::1;:33;::::0;;;;10297:40;;10013:479;;;::::1;::::0;::::1;::::0;10059:11;;10084;;10109:1;;;;10184:7;;10205:11;;10230:19;;10263:33;10297:44:::1;::::0;10340:1:::1;::::0;10297:44:::1;:::i;:::-;10263:79;;;;;;-1:-1:-1::0;;;10263:79:54::1;;;;;;;;;;;;;;;;;;;:97;;;10013:479;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1::0;;1637:1:14;2562:22;;-1:-1:-1;;;;;9498:1002:54:o;6093:165::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;6198:53:54::1;6226:24;6198:27;:53::i;:::-;6093:165:::0;:::o;4858:137::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;4949:39:54::1;4970:17;4949:20;:39::i;3165:65::-:0;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;3165:65:54:o;14943:2196::-;15087:4;1680:1:14;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:14;;;;;;;:::i;:::-;1680:1;2389:7;:18;15182:7:54::1;::::0;;15173:48:::1;::::0;-1:-1:-1;;;15173:48:54;;-1:-1:-1;;;;;15182:7:54;;::::1;::::0;15173:26:::1;::::0;:48:::1;::::0;15200:20;;;;15173:48:::1;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15152:119;;;;-1:-1:-1::0;;;15152:119:54::1;;;;;;;:::i;:::-;15394:7;::::0;;15385:71:::1;::::0;-1:-1:-1;;;15385:71:54;;15354:28:::1;::::0;-1:-1:-1;;;;;15394:7:54;;::::1;::::0;15385:49:::1;::::0;:71:::1;::::0;15435:20;;;;15385:71:::1;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15354:102;;15467:25;15509:5;;;;;;;;;-1:-1:-1::0;;;;;15509:5:54::1;-1:-1:-1::0;;;;;15495:40:54::1;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;15467:70;;15646:6;15641:1470;15662:8;:15;15658:1;:19;15641:1470;;;-1:-1:-1::0;;;;;15786:34:54;::::1;;::::0;;;:12:::1;:34;::::0;;;;15821:11;;:8;;15830:1;;15821:11;::::1;;;-1:-1:-1::0;;;15821:11:54::1;;;;;;;;;;;;;;;15786:47;;;;;;-1:-1:-1::0;;;15786:47:54::1;;;;;;;;;;::::0;;;::::1;::::0;;;:61:::1;:47;::::0;;::::1;;:61;::::0;::::1;;15785:62;15760:147;;;::::0;-1:-1:-1;;;15760:147:54;;29103:2:77;15760:147:54::1;::::0;::::1;29085:21:77::0;29142:2;29122:18;;;29115:30;29181:28;29161:18;;;29154:56;29227:18;;15760:147:54::1;29075:176:77::0;15760:147:54::1;-1:-1:-1::0;;;;;16002:34:54;::::1;;::::0;;;:12:::1;:34;::::0;;;;16037:11;;16061:20;;16002:34;16037:8;;16046:1;;16037:11;::::1;;;-1:-1:-1::0;;;16037:11:54::1;;;;;;;;;;;;;;;16002:47;;;;;;-1:-1:-1::0;;;16002:47:54::1;;;;;;;;;;;;;;;;;;;:56;;;:79;15977:171;;;;-1:-1:-1::0;;;15977:171:54::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;16243:34:54;::::1;;::::0;;;:12:::1;:34;::::0;;;;16278:11;;16307:4:::1;::::0;16243:34;16278:8;;16287:1;;16278:11;::::1;;;-1:-1:-1::0;;;16278:11:54::1;;;;;;;;;;;;;;;16243:47;;;;;;-1:-1:-1::0;;;16243:47:54::1;;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;:61;;:68:::0;;-1:-1:-1;;16243:68:54::1;::::0;::::1;;::::0;;;::::1;::::0;;;16406:7:::1;::::0;16541:23:::1;::::0;-1:-1:-1;;;;;16486:34:54;;::::1;::::0;;:12:::1;:34:::0;;;;;;;16521:11;;16406:7;;;::::1;::::0;16397:33:::1;::::0;16486:34;;836:5:::1;::::0;16521:11;;16530:1;;16521:11;::::1;;;-1:-1:-1::0;;;16521:11:54::1;;;;;;;;;;;;;;;16486:47;;;;;;-1:-1:-1::0;;;16486:47:54::1;;;;;;;;;;;;;;;;;;;:54;;;:78;;;;:::i;:::-;:97;;;;:::i;:::-;666:10:20::0;-1:-1:-1;;;;;16668:34:54;::::1;;::::0;;;:12:::1;:34;::::0;;;;16703:11;;:8;;16712:1;;16703:11;::::1;;;-1:-1:-1::0;;;16703:11:54::1;;;;;;;;;;;;;;;16668:47;;;;;;-1:-1:-1::0;;;16668:47:54::1;;;;;;;;;;;;;;;;;;;:54;;;16740:12;:34;16753:20;-1:-1:-1::0;;;;;16740:34:54::1;-1:-1:-1::0;;;;;16740:34:54::1;;;;;;;;;;;;16775:8;16784:1;16775:11;;;;;;-1:-1:-1::0;;;16775:11:54::1;;;;;;;;;;;;;;;16740:47;;;;;;-1:-1:-1::0;;;16740:47:54::1;;;;;;;;;;::::0;;;::::1;::::0;;;::::1;::::0;;::::1;;:54;;::::0;16397:427:::1;::::0;::::1;::::0;;;-1:-1:-1;;;;;;16397:427:54;;;-1:-1:-1;;;;;21020:15:77;;;16397:427:54::1;::::0;::::1;21002:34:77::0;21052:18;;;21045:34;;;;21115:15;;;21095:18;;;21088:43;21147:18;;;21140:34;16740:54:54;;;::::1;21190:19:77::0;;;21183:44;20936:19;;16397:427:54::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;;16844:256:54;::::1;16873:34;::::0;;;:12:::1;:34;::::0;;;;16908:11;;:8;;16917:1;;16908:11;::::1;;;-1:-1:-1::0;;;16908:11:54::1;;;;;;;;;;;;;;;16873:47;;;;;;-1:-1:-1::0;;;16873:47:54::1;;;;;;;;;;;;;;;;;;;:54;;;;;;;;;;-1:-1:-1::0;;;;;16873:54:54::1;-1:-1:-1::0;;;;;16844:256:54::1;;16983:20;;17021:12;:34;17034:20;-1:-1:-1::0;;;;;17021:34:54::1;-1:-1:-1::0;;;;;17021:34:54::1;;;;;;;;;;;;17056:8;17065:1;17056:11;;;;;;-1:-1:-1::0;;;17056:11:54::1;;;;;;;;;;;;;;;17021:47;;;;;;-1:-1:-1::0;;;17021:47:54::1;;;;;;;;;;;;;;;;;;;:65;;;16844:256;;;;;;;;:::i;:::-;;;;;;;;15679:3:::0;::::1;::::0;::::1;:::i;:::-;;;;15641:1470;;;-1:-1:-1::0;;17128:4:54::1;2562:22:14::0;;;17128:4:54;14943:2196;-1:-1:-1;;;;;14943:2196:54:o;5746:157::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;5847:49:54::1;5873:22;5847:25;:49::i;4265:104::-:0;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;4341:21:54::1;4353:8;4341:11;:21::i;3415:206::-:0;-1:-1:-1;;;;;3558:34:54;;3535:4;3558:34;;;:12;:34;;;;;:42;;3593:6;;3558:42;;;;-1:-1:-1;;;3558:42:54;;;;;;;;;;;;;;;;;:56;:42;;;;;:56;;;;;-1:-1:-1;3415:206:54;;;;;:::o;10936:721::-;1680:1:14;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:14;;;;;;;:::i;:::-;1680:1;2389:7;:18;11282:22:54::1;11307:142;11330:18:::0;11362:8;;11384:13;11411:5;;11430:9;11307::::1;:142::i;:::-;11282:167;;11460:190;11492:8;;11501:1;11492:11;;;;;-1:-1:-1::0;;;11492:11:54::1;;;;;;;;;;;;;;;11517:5;;11523:1;11517:8;;;;;-1:-1:-1::0;;;11517:8:54::1;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11539:17;11570:11;11595;11620:20;;11460:18;:190::i;:::-;-1:-1:-1::0;;1637:1:14;2562:22;;-1:-1:-1;;;;;;;;;;10936:721:54:o;4011:104::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;4087:21:54::1;4099:8;4087:11;:21::i;18172:3318::-:0;18714:4;1680:1:14;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:14;;;;;;;:::i;:::-;1680:1;2389:7;:18;;;18788:16:54;;:21:::1;:59:::0;::::1;;;;18825:10;:17;18846:1;18825:22;18788:59;:110;;;;;18863:23;:30;18897:1;18863:35;18788:110;18767:183;;;::::0;-1:-1:-1;;;18767:183:54;;27985:2:77;18767:183:54::1;::::0;::::1;27967:21:77::0;28024:2;28004:18;;;27997:30;28063:28;28043:18;;;28036:56;28109:18;;18767:183:54::1;27957:176:77::0;18767:183:54::1;19000:19;;18969:23;18993:1;18969:26;;;;;;-1:-1:-1::0;;;18969:26:54::1;;;;;;;;;;;;;;;:50;;18961:88;;;::::0;-1:-1:-1;;;18961:88:54;;31239:2:77;18961:88:54::1;::::0;::::1;31221:21:77::0;31278:2;31258:18;;;31251:30;-1:-1:-1;;;31297:18:77;;;31290:55;31362:18;;18961:88:54::1;31211:175:77::0;18961:88:54::1;19139:7;::::0;;19130:48:::1;::::0;-1:-1:-1;;;19130:48:54;;-1:-1:-1;;;;;19139:7:54;;::::1;::::0;19130:26:::1;::::0;:48:::1;::::0;19157:20;;19130:48:::1;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19109:119;;;;-1:-1:-1::0;;;19109:119:54::1;;;;;;;:::i;:::-;19293:18;19314:79;19342:9;19352:1;19342:12;;;;;;-1:-1:-1::0;;;19342:12:54::1;;;;;;;;;;;;;;;19356:9;19367:10;19379;19390:1;19379:13;;;;;;-1:-1:-1::0;;;19379:13:54::1;;;;;;;;;;;;;;;19314:27;:79::i;:::-;19293:100;;19424:11;:23;19465:5;;;;;;;;;-1:-1:-1::0;;;;;19465:5:54::1;19488:10;19516:23;19540:1;19516:26;;;;;;-1:-1:-1::0;;;19516:26:54::1;;;;;;;;;;;;;;;19576:23;19617;19641:1;19617:26;;;;;;-1:-1:-1::0;;;19617:26:54::1;;;;;;;;;;;;;;;19424:267;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19403:341;;;::::0;-1:-1:-1;;;19403:341:54;;24684:2:77;19403:341:54::1;::::0;::::1;24666:21:77::0;24723:2;24703:18;;;24696:30;24762:29;24742:18;;;24735:57;24809:18;;19403:341:54::1;24656:177:77::0;19403:341:54::1;20033:29;::::0;;;:17:::1;:29;::::0;;;;;::::1;;20032:30;20011:103;;;::::0;-1:-1:-1;;;20011:103:54;;34253:2:77;20011:103:54::1;::::0;::::1;34235:21:77::0;34292:2;34272:18;;;34265:30;34331:28;34311:18;;;34304:56;34377:18;;20011:103:54::1;34225:176:77::0;20011:103:54::1;20173:29;::::0;;;:17:::1;:29;::::0;;;;:36;;-1:-1:-1;;20173:36:54::1;20205:4;20173:36;::::0;;20395:26;;20173:29;;20329:142:::1;::::0;20372:9;;20395:23;;20173:29;;20395:26:::1;;-1:-1:-1::0;;;20395:26:54::1;;;;;;;;;;;;;;;20329:29;:142::i;:::-;20284:187;;;;20574:81;20602:9;20612:1;20602:12;;;;;;-1:-1:-1::0;;;20602:12:54::1;;;;;;;;;;;;;;;20616:10;20628:11;20641:10;20652:1;20641:13;;;;;;-1:-1:-1::0;;;20641:13:54::1;;;;;;;;20574:81;20559:11;:96;20538:172;;;::::0;-1:-1:-1;;;20538:172:54;;28745:2:77;20538:172:54::1;::::0;::::1;28727:21:77::0;28784:2;28764:18;;;28757:30;28823:31;28803:18;;;28796:59;28872:18;;20538:172:54::1;28717:179:77::0;20538:172:54::1;20914:31:::0;;::::1;::::0;::::1;::::0;20838:59:::1;20869:11:::0;20882:14;20838:30:::1;:59::i;:::-;20828:70;;;;;;:117;20807:192;;;::::0;-1:-1:-1;;;20807:192:54;;29458:2:77;20807:192:54::1;::::0;::::1;29440:21:77::0;29497:2;29477:18;;;29470:30;29536;29516:18;;;29509:58;29584:18;;20807:192:54::1;29430:178:77::0;20807:192:54::1;21169:23;21193:1;21169:26;;;;;;-1:-1:-1::0;;;21169:26:54::1;;;;;;;;;;;;;;;21150:16;;:45;;;;:::i;:::-;21119:5;;;;;;;;;-1:-1:-1::0;;;;;21119:5:54::1;-1:-1:-1::0;;;;;21105:40:54::1;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:90;21084:170;;;;-1:-1:-1::0;;;21084:170:54::1;;;;;;;:::i;:::-;21291;21327:10;21351:20;21385:10;21409:23;21433:1;21409:26;;;;;;-1:-1:-1::0;;;21409:26:54::1;;;;;;;;;;;;;;;21291:22;:170::i;:::-;-1:-1:-1::0;;21479:4:54::1;2562:22:14::0;;;21479:4:54;18172:3318;-1:-1:-1;;;;;;;;;;;18172:3318:54:o;3765:96::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;3837:17:54::1;3847:6;3837:9;:17::i;6409:113::-:0;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;6488:27:54::1;6503:11;6488:14;:27::i;12554:2081::-:0;12943:4;1680:1:14;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:14;;;;;;;:::i;:::-;1680:1;2389:7;:18;;;12983:19:54;12967:35;::::1;;12959:73;;;::::0;-1:-1:-1;;;12959:73:54;;31239:2:77;12959:73:54::1;::::0;::::1;31221:21:77::0;31278:2;31258:18;;;31251:30;-1:-1:-1;;;31297:18:77;;;31290:55;31362:18;;12959:73:54::1;31211:175:77::0;12959:73:54::1;-1:-1:-1::0;;;;;;13111:22:54;::::1;::::0;13103:67:::1;;;::::0;-1:-1:-1;;;13103:67:54;;36479:2:77;13103:67:54::1;::::0;::::1;36461:21:77::0;;;36498:18;;;36491:30;36557:34;36537:18;;;36530:62;36609:18;;13103:67:54::1;36451:182:77::0;13103:67:54::1;13260:7;::::0;;13251:48:::1;::::0;-1:-1:-1;;;13251:48:54;;-1:-1:-1;;;;;13260:7:54;;::::1;::::0;13251:26:::1;::::0;:48:::1;::::0;13278:20;;13251:48:::1;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13230:119;;;;-1:-1:-1::0;;;13230:119:54::1;;;;;;;:::i;:::-;13472:7;::::0;;13463:71:::1;::::0;-1:-1:-1;;;13463:71:54;;13432:28:::1;::::0;-1:-1:-1;;;;;13472:7:54;;::::1;::::0;13463:49:::1;::::0;:71:::1;::::0;13513:20;;13463:71:::1;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13432:102;;13592:12;:19;13566:15;:22;:45;13545:119;;;::::0;-1:-1:-1;;;13545:119:54;;33897:2:77;13545:119:54::1;::::0;::::1;33879:21:77::0;33936:2;33916:18;;;33909:30;33975:29;33955:18;;;33948:57;34022:18;;13545:119:54::1;33869:177:77::0;13545:119:54::1;13718:12;13733:61;13761:8;13771:4;13777:5;13784:9;13733:27;:61::i;:::-;13866:5;::::0;13825:172:::1;::::0;-1:-1:-1;;;13825:172:54;;13718:76;;-1:-1:-1;13825:11:54::1;::::0;:23:::1;::::0;:172:::1;::::0;-1:-1:-1;;;;;13866:5:54;;::::1;::::0;13718:76;;13911:12;;13941:18;;13977:6;;13825:172:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13804:246;;;::::0;-1:-1:-1;;;13804:246:54;;24684:2:77;13804:246:54::1;::::0;::::1;24666:21:77::0;24723:2;24703:18;;;24696:30;24762:29;24742:18;;;24735:57;24809:18;;13804:246:54::1;24656:177:77::0;13804:246:54::1;14102:22;14127:184;14163:4;14181:12;14207:20;14241:5;14260:15;14289:12;14127:22;:184::i;:::-;14102:209;;14528:78;14553:17;14572:5;14579:20;14601:4;14528:24;:78::i;:::-;-1:-1:-1::0;;14624:4:54::1;2562:22:14::0;;;14624:4:54;12554:2081;-1:-1:-1;;;;;;;;;;;;12554:2081:54:o;4513:108::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;4591:23:54::1;4604:9;4591:12;:23::i;1846:189:7:-:0;1019:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:20;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:7;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:7;;26109:2:77;1926:73:7::1;::::0;::::1;26091:21:77::0;26148:2;26128:18;;;26121:30;26187:34;26167:18;;;26160:62;-1:-1:-1;;;26238:18:77;;;26231:36;26284:19;;1926:73:7::1;26081:228:77::0;1926:73:7::1;2009:19;2019:8;2009:9;:19::i;1323:53:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1323:53:54;;-1:-1:-1;;;;;;1323:53:54;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1323:53:54;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1323:53:54;;;;;;;;-1:-1:-1;1323:53:54;:::o;7568:422::-;7684:5;;7670:44;;;-1:-1:-1;;;7670:44:54;;;;7640:27;;-1:-1:-1;;;;;7684:5:54;;7670:42;;:44;;;;;;;;;;;;;;7684:5;7670:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7640:74;;7813:22;7793:17;:42;7785:81;;;;-1:-1:-1;;;7785:81:54;;27275:2:77;7785:81:54;;;27257:21:77;27314:2;27294:18;;;27287:30;27353:28;27333:18;;;27326:56;27399:18;;7785:81:54;27247:176:77;7785:81:54;7901:16;;7881:56;;;37730:25:77;;;37786:2;37771:18;;37764:34;;;7881:56:54;;37703:18:77;7881:56:54;;;;;;;-1:-1:-1;7947:16:54;:36;7568:422::o;22678:1269::-;22852:17;22871:28;22953:42;22970:11;22983;22953:16;:42::i;:::-;23092:7;;;23083:48;;-1:-1:-1;;;23083:48:54;;-1:-1:-1;;;;;23092:7:54;;;;23083:26;;:48;;23110:20;;;;23083:48;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;23062:119;;;;-1:-1:-1;;;23062:119:54;;;;;;;:::i;:::-;23269:7;;;23260:62;;-1:-1:-1;;;23260:62:54;;-1:-1:-1;;;;;23269:7:54;;;;23260:40;;:62;;23301:20;;;;23260:62;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;23237:85;;23333:20;23356:17;23365:7;23356:8;:17::i;:::-;23427:7;;23444;;;23418:51;;-1:-1:-1;;;23418:51:54;;-1:-1:-1;;;;;23444:7:54;;;23418:51;;;20148::77;;;;20215:18;;;20208:34;;;23333:40:54;;-1:-1:-1;23427:7:54;;;23418:25;;20121:18:77;;23418:51:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;23701:15;23687:10;;23669:15;:28;;;;:::i;:::-;23599:7;;;23590:61;;-1:-1:-1;;;23590:61:54;;-1:-1:-1;;;;;23599:7:54;;;;23590:22;;:61;;23613:20;;;;23635:15;;23590:61;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;23589:109;;;;:::i;:::-;:127;;;;:::i;:::-;23574:142;;23727:213;23757:7;23778:12;23804:11;23829;23868:5;;;;;;;;;-1:-1:-1;;;;;23868:5:54;-1:-1:-1;;;;;23854:40:54;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;23910:20;23727:16;:213::i;:::-;22678:1269;;;;;;;;;:::o;8476:329::-;8592:24;836:5;8570:46;;8562:87;;;;-1:-1:-1;;;8562:87:54;;33540:2:77;8562:87:54;;;33522:21:77;33579:2;33559:18;;;33552:30;33618;33598:18;;;33591:58;33666:18;;8562:87:54;33512:178:77;8562:87:54;8688:23;;8664:74;;;37730:25:77;;;37786:2;37771:18;;37764:34;;;8664:74:54;;37703:18:77;8664:74:54;;;;;;;8748:23;:50;8476:329::o;8075:311::-;8185:22;790:5;8165:42;;8157:80;;;;-1:-1:-1;;;8157:80:54;;35356:2:77;8157:80:54;;;35338:21:77;35395:2;35375:18;;;35368:30;35434:27;35414:18;;;35407:55;35479:18;;8157:80:54;35328:175:77;8157:80:54;8277:21;;8252:71;;;37730:25:77;;;37786:2;37771:18;;37764:34;;;8252:71:54;;37703:18:77;8252:71:54;;;;;;;8333:21;:46;8075:311::o;7112:151::-;7174:8;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;;;;;;:::i;:::-;7210:7:::1;::::0;7199:29:::1;::::0;;-1:-1:-1;;;;;7210:7:54;;::::1;18419:34:77::0;;18489:15;;;18484:2;18469:18;;18462:43;7199:29:54::1;::::0;18354:18:77;7199:29:54::1;;;;;;;-1:-1:-1::0;7238:7:54::1;:18:::0;;-1:-1:-1;;;;;;7238:18:54::1;-1:-1:-1::0;;;;;7238:18:54;;;::::1;::::0;;;::::1;::::0;;7112:151::o;24087:983::-;24339:7;;24288:4;;-1:-1:-1;;;;;24339:7:54;24312:5;;24318:16;24339:7;24312:5;24318:16;:::i;:::-;24312:23;;;;;-1:-1:-1;;;24312:23:54;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;24312:34:54;;24304:73;;;;-1:-1:-1;;;24304:73:54;;27630:2:77;24304:73:54;;;27612:21:77;27669:2;27649:18;;;27642:30;27708:28;27688:18;;;27681:56;27754:18;;24304:73:54;27602:176:77;24304:73:54;24414:1;24395:20;;24387:60;;;;-1:-1:-1;;;24387:60:54;;25753:2:77;24387:60:54;;;25735:21:77;25792:2;25772:18;;;25765:30;25831:29;25811:18;;;25804:57;25878:18;;24387:60:54;25725:177:77;24387:60:54;24505:5;;24511:1;24505:8;;;;;-1:-1:-1;;;24505:8:54;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;24498:29:54;;666:10:20;24550:4:54;24557:8;;24566:1;24557:11;;;;;-1:-1:-1;;;24557:11:54;;;;;;;;;24498:71;;-1:-1:-1;;;;;;24498:71:54;;;;;;;-1:-1:-1;;;;;18774:15:77;;;24498:71:54;;;18756:34:77;18826:15;;;;18806:18;;;18799:43;-1:-1:-1;24557:11:54;;;;;;18858:18:77;;;18851:34;18691:18;;24498:71:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;24586:5;;24592:1;24586:8;;;;;-1:-1:-1;;;24586:8:54;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;24579:24:54;;24604:18;24624:8;;24633:1;24624:11;;;;;-1:-1:-1;;;24624:11:54;;;;;;;;;24579:57;;-1:-1:-1;;;;;;24579:57:54;;;;;;;-1:-1:-1;;;;;20166:32:77;;;24579:57:54;;;20148:51:77;24624:11:54;;;;;;;20215:18:77;;;20208:34;-1:-1:-1;20121:18:77;;24579:57:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;24687:11;24700:21;24744:18;-1:-1:-1;;;;;24725:43:54;;24782:8;;24791:1;24782:11;;;;;-1:-1:-1;;;24782:11:54;;;;;;;;;;;;;;;24808:8;;24817:1;24808:11;;;;;-1:-1:-1;;;24808:11:54;;;;;;;;;;;;;;;24834:5;;24862:4;24882:9;24906:13;24725:204;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;24725:204:54;;;;;;;;;;;;:::i;:::-;24686:243;;;;24948:6;24940:48;;;;-1:-1:-1;;;24940:48:54;;29815:2:77;24940:48:54;;;29797:21:77;29854:2;29834:18;;;29827:30;29893:31;29873:18;;;29866:59;29942:18;;24940:48:54;29787:179:77;24940:48:54;25005:7;25030:1;25013:7;:14;:18;;;;:::i;:::-;25005:27;;;;;;-1:-1:-1;;;25005:27:54;;;;;;;;;;;;;;;24998:34;;;;24087:983;;;;;;;;;:::o;21540:926::-;21794:16;21812:27;21843:135;21864:17;21896:11;21922;21948:20;;21843:7;:135::i;:::-;-1:-1:-1;;;;;22361:33:54;;;;;;:12;:33;;;;;22395:40;;21793:185;;-1:-1:-1;21793:185:54;;-1:-1:-1;22361:33:54;22395:44;;22438:1;;22395:44;:::i;:::-;22361:79;;;;;;-1:-1:-1;;;22361:79:54;;;;;;;;;;;;;;;;;;;:88;;;22014:12;666:10:20;587:96;;22014:12:54;-1:-1:-1;;;;;22230:33:54;;;;;;;:12;:33;;;;;22264:40;;21994:465;;;;;;;22040:11;;22065;;22090:12;;22116:11;;22141:17;;22172:11;;22197:19;;22264:44;;22307:1;;22264:44;:::i;:::-;22230:79;;;;;;-1:-1:-1;;;22230:79:54;;;;;;;;;;;;;;;;;;;:97;;;21994:465;;;;;;;;;;;;;:::i;:::-;;;;;;;;21540:926;;;;;;;;;:::o;6894:151::-;6956:8;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;;;;;;:::i;:::-;6992:7:::1;::::0;6981:29:::1;::::0;;-1:-1:-1;;;;;6992:7:54;;::::1;18419:34:77::0;;18489:15;;;18484:2;18469:18;;18462:43;6981:29:54::1;::::0;18354:18:77;6981:29:54::1;;;;;;;-1:-1:-1::0;7020:7:54::1;:18:::0;;-1:-1:-1;;;;;;7020:18:54::1;-1:-1:-1::0;;;;;7020:18:54;;;::::1;::::0;;;::::1;::::0;;6894:151::o;4975:357:33:-;5133:7;5152:18;5173:58;5197:8;5207:4;5213:5;5220:9;5180:50;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5180:50:33;;;;;;;;;;5173:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5152:79;;5241:18;5262:36;5286:10;5269:28;;;;;;14586:19:77;;14630:2;14621:12;;14576:63;5269:28:33;;;;-1:-1:-1;;5269:28:33;;;;;;;;;;5262:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5241:57;-1:-1:-1;;;4975:357:33;;;;;;;:::o;6278:448::-;6381:13;;;6439:44;6448:34;:4;6381:13;6448:8;:34::i;:::-;6439:8;:44::i;:::-;6425:58;-1:-1:-1;;;6502:10:33;;;7992:15:37;6501:13:33;6493:52;;;;-1:-1:-1;;;6493:52:33;;30526:2:77;6493:52:33;;;30508:21:77;30565:2;30545:18;;;30538:30;30604:28;30584:18;;;30577:56;30650:18;;6493:52:33;30498:176:77;6493:52:33;6555:13;6571:21;6580:3;6585:6;6571:8;:21::i;:::-;6555:37;;6602:17;6622:15;6631:5;6622:8;:15::i;:::-;6602:35;;6655:17;6662:9;6655:6;:17::i;:::-;6647:25;;6697:22;6709:9;6697:11;:22::i;:::-;6682:37;;;;6278:448;;;;;;;;:::o;20076:444::-;20181:27;20220:12;20235:46;20245:35;20220:12;20255:24;20245:5;;:9;:35::i;:::-;20235:9;:46::i;:::-;20220:61;-1:-1:-1;;;20300:11:33;;;7992:15:37;20299:14:33;20291:54;;;;-1:-1:-1;;;20291:54:33;;;;;;;:::i;:::-;20355:14;20372:23;20382:4;20388:6;20372:9;:23::i;:::-;20355:40;;20405:29;20437:20;20450:6;20437:12;:20::i;:::-;20405:52;-1:-1:-1;20484:29:33;-1:-1:-1;;20484:27:33;;;:29::i;:::-;20467:46;20076:444;-1:-1:-1;;;;;;20076:444:33:o;25389:1019:54:-;25636:15;25654:48;25691:10;25654:36;:48::i;:::-;25827:7;;;25818:71;;-1:-1:-1;;;25818:71:54;;-1:-1:-1;;;;;25636:66:54;;;;;-1:-1:-1;25787:28:54;;-1:-1:-1;;;;;25827:7:54;;;;25818:49;;:71;;25868:20;;25818:71;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25909:7;;25993:23;;25787:102;;-1:-1:-1;;;;;;25909:7:54;;25900:34;;25787:102;;836:5;;25982:34;;:10;:34;:::i;:::-;:53;;;;:::i;:::-;666:10:20;25900:232:54;;;;;;-1:-1:-1;;;;;;25900:232:54;;;-1:-1:-1;;;;;20540:15:77;;;25900:232:54;;;20522:34:77;20572:18;;;20565:34;;;;20635:15;;;20615:18;;;20608:43;20667:18;;;20660:34;;;20456:19;;25900:232:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;26175:226;26202:20;26236;26270:17;26301:10;836:5;26349:23;;26338:10;:34;;;;:::i;:::-;:53;;;;:::i;:::-;26325:66;;:10;:66;:::i;:::-;26175:226;;;;;;;;;;:::i;:::-;;;;;;;;25389:1019;;;;;;:::o;6587:135::-;6645:6;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;;;;;;:::i;:::-;6677:5:::1;::::0;6668:23:::1;::::0;;-1:-1:-1;;;;;6677:5:54;;::::1;18419:34:77::0;;18489:15;;;18484:2;18469:18;;18462:43;6668:23:54::1;::::0;18354:18:77;6668:23:54::1;;;;;;;-1:-1:-1::0;6701:5:54::1;:14:::0;;-1:-1:-1;;;;;;6701:14:54::1;-1:-1:-1::0;;;;;6701:14:54;;;::::1;::::0;;;::::1;::::0;;6587:135::o;8871:227::-;8950:10;;8936:38;;;37730:25:77;;;37786:2;37771:18;;37764:34;;;8936:38:54;;37703:18:77;8936:38:54;;;;;;;9012:11;790:5;8992:31;;8984:73;;;;-1:-1:-1;;;8984:73:54;;30881:2:77;8984:73:54;;;30863:21:77;30920:2;30900:18;;;30893:30;30959:31;30939:18;;;30932:59;31008:18;;8984:73:54;30853:179:77;8984:73:54;9067:10;:24;8871:227::o;26933:2371::-;27182:22;;;;27529:1769;27550:15;:22;27546:1;:26;27529:1769;;;27656:6;27652:303;;27698:12;27711:1;27698:15;;;;;;-1:-1:-1;;;27698:15:54;;;;;;;;;;;;;;;27682:31;;27652:303;;;27799:13;27781:12;27794:1;27781:15;;;;;;-1:-1:-1;;;27781:15:54;;;;;;;;;;;;;;;:31;27752:138;;;;-1:-1:-1;;;27752:138:54;;28340:2:77;27752:138:54;;;28322:21:77;28379:2;28359:18;;;28352:30;28418:34;28398:18;;;28391:62;-1:-1:-1;;;28469:18:77;;;28462:34;28513:19;;27752:138:54;28312:226:77;27752:138:54;27925:12;27938:1;27925:15;;;;;;-1:-1:-1;;;27925:15:54;;;;;;;;;;;;;;;27909:31;;27652:303;27969:18;27990:15;28006:1;27990:18;;;;;;-1:-1:-1;;;27990:18:54;;;;;;;;;;;;;;;27969:39;;28133:12;:34;28146:20;-1:-1:-1;;;;;28133:34:54;-1:-1:-1;;;;;28133:34:54;;;;;;;;;;;;28168:13;28133:49;;;;;;-1:-1:-1;;;28133:49:54;;;;;;;;;;;;;;;;;:63;:49;;;;;:63;;;;28132:64;:158;;;;-1:-1:-1;;;;;;28212:34:54;;;;;;:12;:34;;;;;:49;;28274:16;;28212:34;28247:13;;28212:49;;;;-1:-1:-1;;;28212:49:54;;;;;;;;;;;;;;;;;;;:58;;;:78;;28132:158;28111:1177;;;28339:319;28415:5;28442:12;28455:1;28442:15;;;;;;-1:-1:-1;;;28442:15:54;;;;;;;;;;;;;;;28479:12;:34;28492:20;-1:-1:-1;;;;;28479:34:54;-1:-1:-1;;;;;28479:34:54;;;;;;;;;;;;28514:13;28479:49;;;;;;-1:-1:-1;;;28479:49:54;;;;;;;;;;;;;;;;;;;:60;;28339:319;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;28578:34:54;;;;;;:12;:34;;;;;:49;;:34;;-1:-1:-1;28613:13:54;;-1:-1:-1;28578:49:54;;;;-1:-1:-1;;;28578:49:54;;;;;;;;;;;;;;;;;;;:60;;;;;;;;;;;;28573:66;;;;;;-1:-1:-1;;;28573:66:54;;;;;;;;;28561:79;;;;;;-1:-1:-1;;;28561:79:54;;;;;;;;;28339:54;:319::i;:::-;-1:-1:-1;;;;;28324:334:54;;;28817:12;28752;:34;28765:20;-1:-1:-1;;;;;28752:34:54;-1:-1:-1;;;;;28752:34:54;;;;;;;;;;;;28787:13;28752:49;;;;;;-1:-1:-1;;;28752:49:54;;;;;;;;;;;;;;;;;;;:61;;;:77;28748:526;;;-1:-1:-1;;;;;28853:34:54;;;;;;:12;:34;;;;;:49;;28919:4;;28853:34;28888:13;;28853:49;;;;-1:-1:-1;;;28853:49:54;;;;;;;;;;;;;;;;;;;;;;:63;;:70;;-1:-1:-1;;28853:70:54;;;;;;;;;;28965:21;:17;-1:-1:-1;28965:21:54;:::i;:::-;-1:-1:-1;;;;;29013:242:54;;29095:34;;;;:12;:34;;;;;:49;;28945:41;;-1:-1:-1;29013:242:54;;;;29095:34;29130:13;;29095:49;;;;-1:-1:-1;;;29095:49:54;;;;;;;;;;;;;;;;;;;:67;;;29188:4;29218:12;29231:1;29218:15;;;;;;-1:-1:-1;;;29218:15:54;;;;;;;;;;;;;;;29013:242;;;;;;;37434:25:77;;;37490:2;37475:18;;37468:34;;;;37533:2;37518:18;;37511:34;37422:2;37407:18;;37389:162;29013:242:54;;;;;;;;28748:526;-1:-1:-1;27574:3:54;;;;:::i;:::-;;;;27529:1769;;;;26933:2371;;;;;;;;;;:::o;29699:702::-;29884:17;29904:72;29948:5;29955:20;29904:43;:72::i;:::-;-1:-1:-1;;;;;29884:92:54;;;29986:20;30009:36;30039:5;30009:29;:36::i;:::-;29986:59;-1:-1:-1;30060:17:54;;;;;:62;;-1:-1:-1;30107:15:54;30081:22;:18;30102:1;30081:22;:::i;:::-;:41;30060:62;30056:339;;;30200:24;;;;:17;:24;;;;;:31;;-1:-1:-1;;30200:31:54;30227:4;30200:31;;;30056:339;;;30274:15;30252:18;:37;30248:147;;;30353:24;;;;:17;:24;;;;;:31;;-1:-1:-1;;30353:31:54;30380:4;30353:31;;;30248:147;29699:702;;;;;;:::o;7331:159::-;7395:9;-1:-1:-1;;;;;663:22:54;;655:61;;;;-1:-1:-1;;;655:61:54;;;;;;;:::i;:::-;7433:8:::1;::::0;7421:32:::1;::::0;;-1:-1:-1;;;;;7433:8:54;;::::1;18419:34:77::0;;18489:15;;;18484:2;18469:18;;18462:43;7421:32:54::1;::::0;18354:18:77;7421:32:54::1;;;;;;;-1:-1:-1::0;7463:8:54::1;:20:::0;;-1:-1:-1;;;;;;7463:20:54::1;-1:-1:-1::0;;;;;7463:20:54;;;::::1;::::0;;;::::1;::::0;;7331:159::o;2041:169:7:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:7;;;-1:-1:-1;;;;;;2131:17:7;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;30483:365:54:-;30602:16;30587:11;:31;;;;;;-1:-1:-1;;;30587:31:54;;;;;;;;;;:67;;;-1:-1:-1;30637:17:54;30622:11;:32;;;;;;-1:-1:-1;;;30622:32:54;;;;;;;;;;30587:67;30583:259;;;30678:11;:18;30700:2;30678:24;30670:65;;;;-1:-1:-1;;;30670:65:54;;25040:2:77;30670:65:54;;;25022:21:77;25079:2;25059:18;;;25052:30;25118;25098:18;;;25091:58;25166:18;;30670:65:54;25012:178:77;30670:65:54;30583:259;;;30774:11;:18;30796:2;30774:24;30766:65;;;;-1:-1:-1;;;30766:65:54;;25040:2:77;30766:65:54;;;25022:21:77;25079:2;25059:18;;;25052:30;25118;25098:18;;;25091:58;25166:18;;30766:65:54;25012:178:77;32406:546:54;32469:4;32520:16;790:5;32549:21;;32539:7;:31;;;;:::i;:::-;:50;;;;:::i;:::-;32520:69;;32724:10;;32720:1;:14;;;;:::i;:::-;32706:28;;:11;:28;:::i;:::-;32696:7;:38;32688:75;;;;-1:-1:-1;;;32688:75:54;;26922:2:77;32688:75:54;;;26904:21:77;26961:2;26941:18;;;26934:30;27000:26;26980:18;;;26973:54;27044:18;;32688:75:54;26894:174:77;32688:75:54;32774:20;32797:21;32807:11;32797:7;:21;:::i;:::-;32872:7;;32890:8;;32863:49;;-1:-1:-1;;;32863:49:54;;-1:-1:-1;;;;;32890:8:54;;;32863:49;;;20148:51:77;20215:18;;;20208:34;;;32774:44:54;;-1:-1:-1;32872:7:54;;32863:26;;20121:18:77;;32863:49:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;32930:15:54;-1:-1:-1;;32406:546:54;;;;:::o;31343:813::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31618:24:54;;;-1:-1:-1;;;31652:34:54;;;666:10:20;-1:-1:-1;;;31696:29:54;;;;-1:-1:-1;;;31735:32:54;;;-1:-1:-1;31798:11:54;31777:32;;;;;;-1:-1:-1;;;31777:32:54;;;;;;;;;;;;;;;;;-1:-1:-1;;;31777:32:54;;;;;;;;;;;-1:-1:-1;31861:16:54;;31838:39;;:20;:39;:::i;:::-;31819:16;;;:58;31911:5;31887:21;;;:29;;;-1:-1:-1;;;;;31954:40:54;;;;;:18;:40;;;;;;;;31926:25;;;:68;;;32047:40;;;;;;;:44;;31887:29;32047:44;:::i;:::-;-1:-1:-1;;;;;32004:40:54;;;;;;;:18;:40;;;;;;;;:87;;;;32101:12;:34;;;;;:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;32101:48:54;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;32101:48:54;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;32101:48:54;;;;;;;;;;;;;;;;-1:-1:-1;;32101:48:54;;;;;;;;;;;;;-1:-1:-1;;;32101:48:54;;;;;;;;;;;;;;;;;;;;;;;;31343:813;;;;;;;:::o;13607:364:37:-;13711:10;;13677:7;;13862:4;13853:14;;13938:26;;;;13853:14;13711:10;13938:5;:26::i;:::-;13931:33;13607:364;-1:-1:-1;;;;;13607:364:37:o;24287:943:33:-;24377:7;24344:4;24377:7;2048:29;24377:7;2067:9;-1:-1:-1;;2048:18:33;;;;:29::i;:::-;-1:-1:-1;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;24396:76:33::1;;-1:-1:-1::0;;24438:23:33::1;24431:30;;;;24396:76;24481:12;24496:24;24512:4;24518:1;24496:15;:24::i;:::-;24481:39:::0;-1:-1:-1;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;-1:-1:-1;;;;;24573:10:33;::::1;24569:71;;-1:-1:-1::0;;24606:23:33::1;24599:30;;;;;;24569:71;24650:15;24676:23;24693:5;24676:16;:23::i;:::-;24668:32;;24650:50;;24715:9;24710:375;24734:5;-1:-1:-1::0;;;;;24730:9:33::1;:1;:9;24710:375;;;24775:8;24764:7;:19;24760:164;;-1:-1:-1::0;;24886:23:33::1;24879:30;;;;;;;;24760:164;24937:18;24958:68;24971:18;24982:7:::0;24971:8;:18:::1;:::i;:::-;24998:26;24991:34;-1:-1:-1::0;;24958:12:33;::::1;::::0;:68;:12:::1;:68::i;:::-;24937:89;;25051:23;25063:10;25051:11;:23::i;:::-;25040:34;::::0;;::::1;:::i;:::-;;;24710:375;24741:3;;;;;:::i;:::-;;;;24710:375;;;;25109:8;25098:7;:19;25094:80;;-1:-1:-1::0;;25140:23:33::1;25133:30;;;;;;;25094:80;25190:33;25209:12;25202:20;11239:3:37::0;11235:18;-1:-1:-1;;;;;11173:25:37;;11223:31;;11031:233;25190:33:33::1;25183:40;;;;;2087:1;24287:943:::0;;;;;:::o;8497:777::-;8599:7;8570:4;8576:12;2048:29;8576:12;2067:9;;2048:29;;8618:13:::1;8642:24;8658:4;8664:1;8642:15;:24::i;:::-;-1:-1:-1::0;;;;;8634:33:33::1;::::0;-1:-1:-1;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;8724:14:33;;::::1;8716:43;;;::::0;-1:-1:-1;;;8716:43:33;;32361:2:77;8716:43:33::1;::::0;::::1;32343:21:77::0;32400:2;32380:18;;;32373:30;-1:-1:-1;;;32419:18:77;;;32412:46;32475:18;;8716:43:33::1;32333:166:77::0;8716:43:33::1;8770:15;8796:31;8820:5;8796:16;:31::i;:::-;8788:40;;::::0;-1:-1:-1;8838:18:33::1;::::0;8866:197:::1;8892:6;8887:2;:11;8866:197;;;8936:68;8949:18;8960:7:::0;8949:8;:18:::1;:::i;:::-;8976:26;8969:34;-1:-1:-1::0;;8936:12:33;::::1;::::0;:68;:12:::1;:68::i;:::-;8923:81;;9029:23;9041:10;9029:11;:23::i;:::-;9018:34;::::0;;::::1;:::i;:::-;::::0;-1:-1:-1;8900:7:33::1;8906:1;8900:7:::0;::::1;:::i;:::-;;;8866:197;;;-1:-1:-1::0;9086:68:33::1;9099:18;9110:7:::0;9099:8;:18:::1;:::i;9086:68::-;9073:81;;9164:12;9179:23;9191:10;9179:11;:23::i;:::-;9164:38:::0;-1:-1:-1;9219:48:33::1;9230:7:::0;9164:38;9252:13:::1;9245:21;-1:-1:-1::0;;9219:10:33;::::1;::::0;:48;;:10:::1;:48::i;:::-;9212:55;;;;;;;2087:1;8497:777:::0;;;;;;:::o;7223:170::-;7314:7;7282:6;7290:13;2048:29;7290:13;2067:9;;2048:29;-1:-1:-1;7340:46:33::1;-1:-1:-1::0;;7340:12:33;::::1;7353:1;7356:2;7367:17;7340:12;:46::i;4267:154::-:0;4366:7;4327:9;4338:17;2048:29;4338:17;2067:9;;2048:29;-1:-1:-1;4392:22:33::1;-1:-1:-1::0;;4392:15:33;::::1;4408:1;4411:2;4392:15;:22::i;6890:175::-:0;6994:6;6955:9;6966:17;2048:29;6966:17;2067:9;;2048:29;-1:-1:-1;7019:39:33::1;:28;-1:-1:-1::0;;7019:21:33;::::1;7041:2;7045:1;7019:21;:28::i;:::-;:37;:39::i;25456:959::-:0;25549:7;25515:5;25549:7;2048:29;25549:7;2067:9;;2048:29;-1:-1:-1;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;25568:77:33::1;;-1:-1:-1::0;;25611:23:33::1;7712:80:37::0;25568:77:33::1;25654:13;25670:25;25686:5;25693:1;25670:15;:25::i;:::-;25654:41:::0;-1:-1:-1;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;-1:-1:-1;;;;;25750:11:33;::::1;25746:72;;-1:-1:-1::0;;25784:23:33::1;7712:80:37::0;25746:72:33::1;25828:15;25854:24;25871:6;25854:16;:24::i;:::-;25846:33;;25828:51;;25894:9;25889:379;25913:6;-1:-1:-1::0;;;;;25909:10:33::1;:1;:10;25889:379;;;25955:8;25944:7;:19;25940:164;;-1:-1:-1::0;;26066:23:33::1;7712:80:37::0;25940:164:33::1;26117:18;26138:70;26152:18;26163:7:::0;26152:8;:18:::1;:::i;:::-;26179:27;26172:35;::::0;26138:70:::1;26117:91;;26233:24;26246:10;26233:12;:24::i;:::-;26222:35;::::0;;::::1;:::i;:::-;;;25889:379;25921:3;;;;;:::i;:::-;;;;25889:379;;;;26292:8;26281:7;:19;26277:80;;-1:-1:-1::0;;26323:23:33::1;7712:80:37::0;26277::33::1;26373:35;26393:13;26386:21;::::0;21597:795;21703:7;21672:5;21679:13;2048:29;21679:13;2067:9;;2048:29;;21722:14:::1;21747:25;21763:5;21770:1;21747:15;:25::i;:::-;-1:-1:-1::0;;;;;21739:34:33::1;::::0;-1:-1:-1;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;21831:15:33;;::::1;21823:45;;;::::0;-1:-1:-1;;;21823:45:33;;34608:2:77;21823:45:33::1;::::0;::::1;34590:21:77::0;34647:2;34627:18;;;34620:30;-1:-1:-1;;;34666:18:77;;;34659:47;34723:18;;21823:45:33::1;34580:167:77::0;21823:45:33::1;21879:15;21905:32;21929:6;21905:16;:32::i;:::-;21897:41;;::::0;-1:-1:-1;21948:18:33::1;::::0;21976:200:::1;22002:6;21997:2;:11;21976:200;;;22046:70;22060:18;22071:7:::0;22060:8;:18:::1;:::i;:::-;22087:27;22080:35;::::0;22046:70:::1;22033:83;;22141:24;22154:10;22141:12;:24::i;:::-;22130:35;::::0;;::::1;:::i;:::-;::::0;-1:-1:-1;22010:7:33::1;22016:1;22010:7:::0;::::1;:::i;:::-;;;21976:200;;;-1:-1:-1::0;22199:70:33::1;22213:18;22224:7:::0;22213:8;:18:::1;:::i;22199:70::-;22186:83;;22279:12;22294:24;22307:10;22294:12;:24::i;:::-;22279:39:::0;-1:-1:-1;22335:50:33::1;22347:7:::0;22279:39;22369:14:::1;22362:22;::::0;18963:284;19061:7;19027;19036:14;2048:29;19036:14;2067:9;;2048:29;;19080:19:::1;19102:27;19118:7;19127:1;19102:15;:27::i;:::-;19080:49;;19146:94;19164:30;19181:12;19164:16;:30::i;:::-;19160:34;::::0;:1:::1;:34;:::i;:::-;-1:-1:-1::0;;19146:13:33;::::1;::::0;:94:::1;;-1:-1:-1::0;;;;;19146:94:33;::::1;19217:21;19146:13;:94::i;28124:606:37:-:0;28179:16;28207:11;28228:12;28243;28247:7;16518:2;16514:16;-1:-1:-1;;;;;16510:28:37;;16420:128;28243:12;28369:4;28363:11;;-1:-1:-1;28363:11:37;;-1:-1:-1;;;;;;28228:27:37;;-1:-1:-1;28446:33:37;28459:7;28468:10;28363:11;28474:4;28468:10;:::i;:::-;28446:12;:33::i;:::-;-1:-1:-1;28597:14:37;;;28613:4;28593:25;28587:4;28580:39;28660:17;;28498:226;;-1:-1:-1;28498:226:37:o;9809:563:33:-;9884:18;;9933:46;9943:35;9884:18;9953:24;9943:5;;:9;:35::i;9933:46::-;9914:65;-1:-1:-1;;;9998:15:33;;;7992::37;9997:18:33;9989:58;;;;-1:-1:-1;;;9989:58:33;;;;;;;:::i;:::-;10057:14;10123:21;10155:28;10171:8;10181:1;10155:15;:28::i;:::-;-1:-1:-1;;;;;10147:37:33;10123:61;;10200:10;10195:171;10224:16;10216:5;:24;10195:171;;;10274:26;10284:8;10294:5;10274:9;:26::i;:::-;10265:35;;10342:13;10348:6;10342:5;:13::i;:::-;10328:27;;:11;:27;:::i;:::-;10314:41;-1:-1:-1;10242:7:33;;;;:::i;:::-;;;;10195:171;;;;9809:563;;;;;;:::o;10933:2087::-;11128:20;;11180:46;11190:35;:5;11128:20;11190:9;:35::i;11180:46::-;11161:65;-1:-1:-1;;;11245:15:33;;;7992::37;11244:18:33;11236:58;;;;-1:-1:-1;;;11236:58:33;;;;;;;:::i;:::-;11304:14;11321:31;11331:8;11341:10;11321:9;:31::i;:::-;11304:48;;11362:21;11386:20;11399:6;11386:12;:20::i;:::-;11362:44;-1:-1:-1;11436:16:33;11421:11;:31;;;;;;-1:-1:-1;;;11421:31:33;;;;;;;;;;11417:1588;;;11647:26;-1:-1:-1;;11647:19:33;;11667:1;11670:2;11647:19;:26::i;:::-;11630:44;;;;;;14586:19:77;;14630:2;14621:12;;14576:63;11630:44:33;;;;;;;;;;;;;11620:55;;;;;;11608:7;11598:18;;;;;;:77;:97;;11694:1;11598:97;;;11678:13;11684:6;11678:5;:13::i;:::-;11582:113;;11417:1588;;;11731:17;11716:11;:32;;;;;;-1:-1:-1;;;11716:32:33;;;;;;;;;;11712:1293;;;11975:29;-1:-1:-1;;11975:26:33;;12002:1;11975:26;:29::i;:::-;11958:47;;;;;;;14372:2:77;14368:15;;;;-1:-1:-1;;14364:53:77;14352:66;;14443:2;14434:12;;14342:110;11712:1293:33;12062:16;12047:11;:31;;;;;;-1:-1:-1;;;12047:31:33;;;;;;;;;;12043:962;;;12301:29;-1:-1:-1;;12301:26:33;;12328:1;12301:26;:29::i;12043:962::-;12388:18;12373:11;:33;;;;;;-1:-1:-1;;;12373:33:33;;;;;;;;;;12369:636;;;12628:29;-1:-1:-1;;12628:26:33;;12655:1;12628:26;:29::i;12369:636::-;12715:17;12700:11;:32;;;;;;-1:-1:-1;;;12700:32:33;;;;;;;;;;12696:309;;;12946:26;-1:-1:-1;;12946:19:33;;12966:1;12969:2;12946:19;:26::i;:::-;12929:44;;;;;;14586:19:77;;14630:2;14621:12;;14576:63;12929:44:33;;;;;;;;;;;;;12919:55;;;;;;12907:7;12897:18;;;;;;:77;:97;;12993:1;12897:97;;;12977:13;12983:6;12977:5;:13::i;:::-;12881:113;;12696:309;10933:2087;;;;;;;;;:::o;13538:1006::-;13671:20;;13762:46;13772:35;13671:20;13782:24;;13762:46;13743:65;-1:-1:-1;;;13827:15:33;;;7992::37;13826:18:33;13818:58;;;;-1:-1:-1;;;13818:58:33;;;;;;;:::i;:::-;13887:14;13911:21;13992;14024:28;14040:8;14050:1;14024:15;:28::i;:::-;-1:-1:-1;;;;;14016:37:33;13992:61;;14069:10;14064:474;14093:16;14085:5;:24;14064:474;;;14143:26;14153:8;14163:5;14143:9;:26::i;:::-;14134:35;;14199:20;14212:6;14199:12;:20::i;:::-;14183:36;;14336:14;14319:32;;;;;;;;:::i;:::-;;;;;;;;;;;;;14309:43;;;;;;14282:21;:13;:19;;;;:21::i;:::-;14265:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;14255:50;;;;;;:97;14234:294;;;14401:13;14407:6;14401:5;:13::i;:::-;14385:29;;14508:5;;14234:294;14111:7;;;;:::i;:::-;;;;14064:474;;;;13538:1006;;;;;;;;:::o;20675:239::-;20743:21;;20795:46;20805:35;20743:21;20815:24;;20795:46;20776:65;;20878:28;20894:8;20904:1;20878:15;:28::i;:::-;-1:-1:-1;;;;;20870:37:33;;20675:239;-1:-1:-1;;;20675:239:33:o;12774:436:37:-;12855:15;;12897:11;12904:4;12897;:11;:::i;:::-;12882:26;;13027:4;13021:11;13015:4;13012:21;13009:2;;;-1:-1:-1;13060:1:37;13009:2;13098:9;13094:51;;-1:-1:-1;;13123:11:37;;;;;13094:51;-1:-1:-1;;12041:2:37;12037:27;;;12111:17;;12103:26;;12176:17;;12172:2;12168:26;12774:436;;;;;;:::o;10075:578::-;10153:7;10177:26;10184:7;10193:9;10177:6;:26::i;:::-;10172:451;;10222:9;10235:35;10253:15;10260:7;14374:3;14370:17;;14252:184;10253:15;10245:24;;10235:9;:35::i;:::-;10219:51;;;10287:9;10300:29;10318:9;10310:18;;10300:9;:29::i;:::-;10387:186;;15969:31:77;10387:186:37;;;15957:44:77;-1:-1:-1;;;;;;16024:3:77;16086:16;;;16082:25;;16068:12;;;16061:47;-1:-1:-1;;;16124:12:77;;;16117:37;16188:16;;;16184:25;16170:12;;;16163:47;10284:45:37;;-1:-1:-1;10343:17:37;;-1:-1:-1;16226:12:77;;10387:186:37;;;;;;;;;;;;;10343:244;;10608:3;10601:11;;-1:-1:-1;;;10601:11:37;;;;;;;;:::i;10172:451::-;-1:-1:-1;10639:7:37;;10075:578;-1:-1:-1;10075:578:37:o;2783:827:33:-;2864:13;;2904:28;-1:-1:-1;;2904:17:33;;2922:6;2930:1;2904:17;:28::i;:::-;2889:43;;2954:4;2946;:12;2942:662;;2981:15;:4;:13;:15::i;:::-;2974:22;;;;;2942:662;3017:4;3025;3017:12;3013:591;;;3054:45;:34;3074:10;:6;3083:1;3074:10;:::i;:::-;-1:-1:-1;;3054:19:33;;;3086:1;3054:19;:34::i;:::-;:43;:45::i;:::-;3045:54;;3117:24;3134:6;3117:16;:24::i;:::-;:29;;3145:1;3117:29;3113:83;;3149:45;3166:27;-1:-1:-1;;3166:13:33;;3180:6;3188:1;3191;3166:13;:27::i;:::-;3149:16;:45::i;:::-;;3113:83;3013:591;;;3216:4;3224;3216:12;3212:392;;;3253:45;:34;3273:10;:6;3282:1;3273:10;:::i;:::-;-1:-1:-1;;3253:19:33;;;3285:1;3253:19;:34::i;:45::-;3244:54;;3316:24;3333:6;3316:16;:24::i;:::-;:29;;3344:1;3316:29;3312:83;;3348:45;3365:27;-1:-1:-1;;3365:13:33;;3379:6;3387:1;3390;3365:13;:27::i;3212:392::-;3415:4;3423;3415:12;3411:193;;;3452:45;:34;3472:10;:6;3481:1;3472:10;:::i;:::-;-1:-1:-1;;3452:19:33;;;3484:1;3452:19;:34::i;:45::-;3443:54;;3515:24;3532:6;3515:16;:24::i;:::-;:29;;3543:1;3515:29;3511:83;;3547:45;3564:27;-1:-1:-1;;3564:13:33;;3578:6;3586:1;3589;3564:13;:27::i;3511:83::-;2783:827;;;;;:::o;3810:304::-;3873:5;3904:4;3894:6;-1:-1:-1;;;;;3894:14:33;;3890:218;;-1:-1:-1;3931:1:33;3924:8;;3890:218;3963:6;3953;-1:-1:-1;;;;;3953:16:33;;3949:159;;-1:-1:-1;3992:1:33;3985:8;;3949:159;4024:10;4014:6;-1:-1:-1;;;;;4014:20:33;;4010:98;;-1:-1:-1;4057:1:33;4050:8;;4010:98;-1:-1:-1;4096:1:33;4089:8;;18168:179:37;18255:7;18281:59;18287:7;18320:4;18304:12;18308:7;16518:2;16514:16;-1:-1:-1;;;;;16510:28:37;;16420:128;18304:12;-1:-1:-1;;;;;18296:21:37;:28;;;;:::i;:::-;18326:4;18332:7;18281:5;:59::i;8025:273:33:-;8133:7;8087;8096:26;2048:29;8096:26;2067:9;;2048:29;;8152:19:::1;8174:28;8190:7;8199:2;8174:15;:28::i;:::-;8152:50;;8269:12;-1:-1:-1::0;;;;;8261:21:33::1;8227:30;8244:12;8227:16;:30::i;:::-;8219:39;;:63;;;;:::i;:::-;:68;::::0;8285:2:::1;8219:68;:::i;:::-;:72;::::0;8290:1:::1;8219:72;:::i;17121:361:37:-:0;17222:7;17241:12;17256;17260:7;15407:3;15403:17;-1:-1:-1;;;;;15399:29:37;;15232:206;17256:12;-1:-1:-1;;;;;17241:27:37;;;17352:12;17356:7;17352:3;:12::i;:::-;17345:4;17329:13;17336:6;17329:4;:13;:::i;:::-;:20;;;;:::i;:::-;:35;17325:77;;;-1:-1:-1;;17380:11:37;;;;;17325:77;17419:13;17426:6;17419:4;:13;:::i;:::-;17412:20;;17449:26;17455:7;17449:26;;17464:4;17470;17449:5;:26::i;19906:736::-;19991:14;20021:11;;;20017:37;;-1:-1:-1;20050:1:37;20035:17;;20017:37;20085:12;20089:7;16518:2;16514:16;-1:-1:-1;;;;;16510:28:37;;16420:128;20085:12;-1:-1:-1;;;;;20067:30:37;:15;;;;:6;:15;:::i;:::-;:30;20063:137;;;20120:68;20136:12;20140:7;15407:3;15403:17;-1:-1:-1;;;;;15399:29:37;;15232:206;20136:12;-1:-1:-1;;;;;20120:68:37;20150:12;20154:7;16518:2;16514:16;-1:-1:-1;;;;;16510:28:37;;16420:128;20150:12;-1:-1:-1;;;;;20120:68:37;20164:6;20180;20172:15;;20120;:68::i;:::-;20113:76;;-1:-1:-1;;;20113:76:37;;;;;;;;:::i;20063:137::-;20227:2;20217:6;:12;;;;20209:83;;;;-1:-1:-1;;;20209:83:37;;32706:2:77;20209:83:37;;;32688:21:77;32745:2;32725:18;;;32718:30;32784:34;32764:18;;;32757:62;32855:28;32835:18;;;32828:56;32901:19;;20209:83:37;32678:248:77;20209:83:37;20354:1;20345:10;;20327:15;20384:12;20388:7;15407:3;15403:17;-1:-1:-1;;;;;15399:29:37;;15232:206;20384:12;-1:-1:-1;;;;;20369:27:37;;-1:-1:-1;20410:13:37;-1:-1:-1;;;;;7482:12:37;;7465:123;20582:17;;;;20576:24;20572:36;;;-1:-1:-1;;;;;20468:154:37:o;21434:186::-;21525:14;21558:55;21581:30;21587:7;21596:6;21604;21581:5;:30::i;:::-;6395:1;6230:6;;;6324:66;6229:77;6319;;;;;;;;;6228:169;6613:2;6447:7;;;6542:66;6446:78;6537;;;;;;;;;6445:171;6832:2;6666:7;;;6761:66;6665:78;6756;;;;;;;;;6664:171;7051:2;6885:7;;;6980:66;6884:78;-1:-1:-1;;6975:78:37;;;;;;;;6883:171;7122:3;7104:8;;;7117;;;7103:23;;6105:1028;2986:187:22;3042:6;3077:16;3068:25;;;3060:76;;;;-1:-1:-1;;;3060:76:22;;33133:2:77;3060:76:22;;;33115:21:77;33172:2;33152:18;;;33145:30;33211:34;33191:18;;;33184:62;-1:-1:-1;;;33262:18:77;;;33255:36;33308:19;;3060:76:22;33105:228:77;3060:76:22;-1:-1:-1;3160:5:22;2986:187::o;21122:272:33:-;21234:7;21186:8;21196:27;2048:29;21196:27;2067:9;;2048:29;;21253:19:::1;21275:28;21291:8;21301:1;21275:15;:28::i;:::-;21253:50;;21370:12;-1:-1:-1::0;;;;;21362:21:33::1;21328:30;21345:12;21328:16;:30::i;:::-;21320:39;;:63;;;;:::i;:::-;:67;::::0;21386:1:::1;21320:67;:::i;26860:894:37:-:0;26938:15;-1:-1:-1;;7992:15:37;;;;8223:16;26965:69;;;;-1:-1:-1;;;26965:69:37;;36070:2:77;26965:69:37;;;36052:21:77;36109:2;36089:18;;;36082:30;36148:34;36128:18;;;36121:62;-1:-1:-1;;;36199:18:77;;;36192:38;36247:19;;26965:69:37;36042:230:77;26965:69:37;27052:16;27060:7;27052;:16::i;:::-;27044:72;;;;-1:-1:-1;;;27044:72:37;;36840:2:77;27044:72:37;;;36822:21:77;36879:2;36859:18;;;36852:30;36918:34;36898:18;;;36891:62;-1:-1:-1;;;36969:18:77;;;36962:41;37020:19;;27044:72:37;36812:233:77;27044:72:37;27126:12;27141;27145:7;16518:2;16514:16;-1:-1:-1;;;;;16510:28:37;;16420:128;27141:12;-1:-1:-1;;;;;27126:27:37;;;27163:15;27181:12;27185:7;15407:3;15403:17;-1:-1:-1;;;;;15399:29:37;;15232:206;27181:12;-1:-1:-1;;;;;27163:30:37;;;27204:11;27329:4;27323:11;27316:18;;27412:7;27407:3;27404:16;27401:2;;;27452:4;27446;27439:18;27401:2;27659:4;27650:7;27644:4;27635:7;27632:1;27625:5;27614:50;27610:55;27695:52;27716:15;27723:7;14374:3;14370:17;;14252:184;27716:15;-1:-1:-1;;;12041:2:37;12037:27;;;;12111:17;;12103:26;;12176:17;;12172:2;12168:26;;11944:285;9407:159:33;9498:6;9464:7;9473:14;2048:29;9473:14;2067:9;;2048:29;-1:-1:-1;9523:36:33::1;:25;-1:-1:-1::0;;9523:19:33;::::1;9543:1;9546;9523:19;:25::i;21909:159:37:-:0;21987:7;22029:30;22039:7;22048:6;22056:2;22029:9;:30::i;9645:132::-;9719:4;9761:9;9742:28;;:15;9749:7;14374:3;14370:17;;14252:184;9742:15;:28;;;;9645:132;-1:-1:-1;;;9645:132:37:o;5199:627::-;5253:13;;5309:2;5294:202;5317:2;5313:1;:6;;;5294:202;;;5343:11;5370:5;:1;5374;5370:5;:::i;:::-;5363:13;;:2;:13;;5343:34;;5400:14;5408:5;5400:7;:14::i;:::-;5391:23;;;;;;5432:1;:7;;5437:2;5432:7;5428:58;;5469:2;5459:12;;;;;5428:58;-1:-1:-1;5321:6:37;5326:1;5321:6;;:::i;:::-;;;5294:202;;;-1:-1:-1;5587:2:37;5572:229;5595:3;5591:1;:7;;;5572:229;;;5647:13;5658:1;5654:5;;5647:13;;;;5689:14;5647:13;5689:7;:14::i;:::-;5679:24;;;;;;5725:1;:6;;5730:1;5725:6;5721:66;;5766:2;5755:13;;;;;5721:66;-1:-1:-1;;;5601:6:37;5572:229;;;;5199:627;;;:::o;20994:191::-;21083:14;21161:11;21166:6;21161:2;:11;:::i;:::-;21160:17;;21176:1;21160:17;:::i;:::-;21116:62;;21124:30;21130:7;21139:6;21147;21124:5;:30::i;:::-;21116:62;;;20994:191;-1:-1:-1;;;;20994:191:37:o;2512:187:22:-;2568:6;-1:-1:-1;;;;;2594:25:22;;;2586:76;;;;-1:-1:-1;;;2586:76:22;;31593:2:77;2586:76:22;;;31575:21:77;31632:2;31612:18;;;31605:30;31671:34;31651:18;;;31644:62;-1:-1:-1;;;31722:18:77;;;31715:36;31768:19;;2586:76:22;31565:228:77;2161:356:33;2222:13;2250:9;2263:61;2286:37;2250:9;2303:19;16518:2:37;16514:16;;;-1:-1:-1;;;;;16510:28:37;2303:17:33;:19::i;:::-;-1:-1:-1;;2286:13:33;;;:37;:13;:37::i;:::-;2263:22;:61::i;:::-;2374:105;;16491:29:77;2374:105:33;;;16479:42:77;-1:-1:-1;;16559:3:77;16555:16;;;16551:58;16537:12;;;16530:80;2247:77:33;;-1:-1:-1;2334:17:33;;-1:-1:-1;16626:12:77;;2374:105:33;16469:175:77;16728:113:37;16781:7;16822:12;16826:7;16518:2;16514:16;-1:-1:-1;;;;;16510:28:37;;16420:128;16822:12;16807;16811:7;15407:3;15403:17;-1:-1:-1;;;;;15399:29:37;;15232:206;16807:12;:27;;;;:::i;:::-;-1:-1:-1;;;;;16800:34:37;;16728:113;-1:-1:-1;;16728:113:37:o;18656:741::-;18802:17;18834:9;18847:15;18857:4;18847:9;:15::i;:::-;18831:31;;;18875:9;18888:15;18898:4;18888:9;:15::i;:::-;18872:31;;;18916:9;18929:17;18939:6;18929:9;:17::i;:::-;18913:33;;;18959:9;18972:17;18982:6;18972:9;:17::i;:::-;19025:355;;;17371:34:77;19025:355:37;;;17359:47:77;-1:-1:-1;;;17422:12:77;;;17415:45;-1:-1:-1;;;;;;17483:3:77;17537:16;;;17533:25;;17519:12;;;17512:47;-1:-1:-1;;;17611:12:77;;;17604:24;;;17662:16;;;17658:25;;17644:12;;;17637:47;17714:34;17700:12;;;17693:56;-1:-1:-1;;;17765:13:77;;;17758:26;17819:16;;;17815:25;;17800:13;;;17793:48;17857:13;;;17850:25;;;;14169:15;;14165:46;;;17910:13;;;14153:59;-1:-1:-1;;;;;17940:13:77;;;17933:26;19025:355:37;;;;;;;;;17975:13:77;;;;19025:355:37;;;;;-1:-1:-1;;;;;18656:741:37:o;8665:315::-;8722:8;8746:15;8753:7;14374:3;14370:17;;14252:184;8746:15;:31;;8765:12;8746:31;8742:52;;;-1:-1:-1;8787:5:37;8780:12;;8742:52;8803:12;8818;8822:7;8818:3;:12::i;:::-;8957:4;8951:11;-1:-1:-1;8938:26:37;;8849:125;-1:-1:-1;;;8849:125:37:o;4676:199::-;4726:14;4763:18;4779:1;4773:2;:7;;;;4763:9;:18::i;:::-;4752:29;;;4817:1;4805:13;;;4839;4849:2;4839:9;:13::i;:::-;4828:24;;;;4676:199;-1:-1:-1;4676:199:37:o;3931:182:22:-;3986:5;4020:15;4011:24;;;4003:74;;;;-1:-1:-1;;;4003:74:22;;26516:2:77;4003:74:22;;;26498:21:77;26555:2;26535:18;;;26528:30;26594:34;26574:18;;;26567:62;-1:-1:-1;;;26645:18:77;;;26638:35;26690:19;;4003:74:22;26488:227:77;3286:1041:37;3338:10;3504:4;3499:9;;;;3550:15;;;;3546:35;;;3575:4;3568:11;;;;;3546:35;3599:7;:15;;3610:4;3599:15;3595:35;;;3624:4;3617:11;;;;;3595:35;3648:7;:15;;3659:4;3648:15;3644:35;;;3673:4;3666:11;;;;;3644:35;3697:7;:15;;3708:4;3697:15;3693:35;;;3722:4;3715:11;;;;;3693:35;3746:7;:15;;3757:4;3746:15;3742:35;;;3771:4;3764:11;;;;;3742:35;3795:7;:15;;3806:4;3795:15;3791:35;;;3820:4;3813:11;;;;;3791:35;3844:7;:15;;3855:4;3844:15;3840:35;;;3869:4;3862:11;;;;;3840:35;3893:7;:15;;3904:4;3893:15;3889:35;;;3918:4;3911:11;;;;;3889:35;3942:7;:15;;3953:4;3942:15;3938:35;;;3967:4;3960:11;;;;;3938:35;3991:7;:15;;4002:4;3991:15;3987:35;;;4016:4;4009:11;;;;;3987:35;4040:7;:15;;4051:4;4040:15;4036:35;;;4065:4;4058:11;;;;;4036:35;4089:7;:15;;4100:4;4089:15;4085:35;;;4114:4;4107:11;;;;;4085:35;4138:7;:15;;4149:4;4138:15;4134:35;;;4163:4;4156:11;;;;;4134:35;4187:7;:15;;4198:4;4187:15;4183:35;;;4212:4;4205:11;;;;;4183:35;4236:7;:15;;4247:4;4236:15;4232:35;;;4261:4;4254:11;;;;;4232:35;4285:7;:15;;4296:4;4285:15;4281:35;;;4310:4;4303:11;;;;;4281:35;3286:1041;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:134:77;82:20;;111:31;82:20;111:31;:::i;153:398::-;;;280:3;273:4;265:6;261:17;257:27;247:2;;305:8;295;288:26;247:2;-1:-1:-1;335:20:77;;-1:-1:-1;;;;;367:30:77;;364:2;;;417:8;407;400:26;364:2;461:4;453:6;449:17;437:29;;524:3;517:4;509;501:6;497:17;489:6;485:30;481:41;478:50;475:2;;;541:1;538;531:12;475:2;237:314;;;;;:::o;556:697::-;;662:3;655:4;647:6;643:17;639:27;629:2;;684:5;677;670:20;629:2;724:6;711:20;750:4;774:59;790:42;829:2;790:42;:::i;:::-;774:59;:::i;:::-;867:15;;;898:12;;;;930:15;;;976:11;;;964:24;;960:33;;957:42;-1:-1:-1;954:2:77;;;1016:5;1009;1002:20;954:2;1042:5;1056:168;1070:2;1067:1;1064:9;1056:168;;;1127:22;1145:3;1127:22;:::i;:::-;1115:35;;1170:12;;;;1202;;;;1088:1;1081:9;1056:168;;;-1:-1:-1;1242:5:77;;619:634;-1:-1:-1;;;;;;;619:634:77:o;1258:693::-;;1365:3;1358:4;1350:6;1346:17;1342:27;1332:2;;1387:5;1380;1373:20;1332:2;1427:6;1414:20;1453:4;1477:59;1493:42;1532:2;1493:42;:::i;1477:59::-;1570:15;;;1601:12;;;;1633:15;;;1679:11;;;1667:24;;1663:33;;1660:42;-1:-1:-1;1657:2:77;;;1719:5;1712;1705:20;1657:2;1745:5;1759:163;1773:2;1770:1;1767:9;1759:163;;;1830:17;;1818:30;;1868:12;;;;1900;;;;1791:1;1784:9;1759:163;;1956:128;2021:20;;2050:28;2021:20;2050:28;:::i;2089:173::-;2156:20;;-1:-1:-1;;;;;;2205:32:77;;2195:43;;2185:2;;2252:1;2249;2242:12;2267:375;;;2382:3;2375:4;2367:6;2363:17;2359:27;2349:2;;2407:8;2397;2390:26;2349:2;-1:-1:-1;2437:20:77;;-1:-1:-1;;;;;2469:30:77;;2466:2;;;2519:8;2509;2502:26;2466:2;2563:4;2555:6;2551:17;2539:29;;2615:3;2608:4;2599:6;2591;2587:19;2583:30;2580:39;2577:2;;;2632:1;2629;2622:12;2647:550;;2742:3;2735:4;2727:6;2723:17;2719:27;2709:2;;2764:5;2757;2750:20;2709:2;2804:6;2791:20;-1:-1:-1;;;;;2826:2:77;2823:26;2820:2;;;2852:18;;:::i;:::-;2896:55;2939:2;2920:13;;-1:-1:-1;;2916:27:77;2945:4;2912:38;2896:55;:::i;:::-;2976:2;2967:7;2960:19;3022:3;3015:4;3010:2;3002:6;2998:15;2994:26;2991:35;2988:2;;;3043:5;3036;3029:20;2988:2;3112;3105:4;3097:6;3093:17;3086:4;3077:7;3073:18;3060:55;3135:16;;;3153:4;3131:27;3124:42;;;;3139:7;2699:498;-1:-1:-1;;2699:498:77:o;3202:152::-;3279:20;;3328:1;3318:12;;3308:2;;3344:1;3341;3334:12;3359:257;;3471:2;3459:9;3450:7;3446:23;3442:32;3439:2;;;3492:6;3484;3477:22;3439:2;3536:9;3523:23;3555:31;3580:5;3555:31;:::i;3621:261::-;;3744:2;3732:9;3723:7;3719:23;3715:32;3712:2;;;3765:6;3757;3750:22;3712:2;3802:9;3796:16;3821:31;3846:5;3821:31;:::i;3887:1599::-;;;;;;;;;;;;4231:3;4219:9;4210:7;4206:23;4202:33;4199:2;;;4253:6;4245;4238:22;4199:2;4281:29;4300:9;4281:29;:::i;:::-;4271:39;;-1:-1:-1;;;;;4396:2:77;4390;4379:9;4375:18;4362:32;4359:40;4356:2;;;4417:6;4409;4402:22;4356:2;4461:96;4549:7;4542:2;4531:9;4527:18;4514:32;4503:9;4499:48;4461:96;:::i;:::-;4576:8;;-1:-1:-1;4603:8:77;-1:-1:-1;4630:35:77;4661:2;4646:18;;4630:35;:::i;:::-;4620:45;;4714:2;4708;4697:9;4693:18;4680:32;4677:40;4674:2;;;4735:6;4727;4720:22;4674:2;4779:96;4867:7;4860:2;4849:9;4845:18;4832:32;4821:9;4817:48;4779:96;:::i;:::-;4894:8;;-1:-1:-1;4921:8:77;-1:-1:-1;4976:3:77;4961:19;;4948:33;;-1:-1:-1;5024:3:77;5009:19;;4996:33;4993:41;-1:-1:-1;4990:2:77;;;5052:6;5044;5037:22;4990:2;5080:76;5148:7;5140:3;5129:9;5125:19;5112:33;5101:9;5097:49;5080:76;:::i;:::-;5070:86;;5175:48;5218:3;5207:9;5203:19;5175:48;:::i;:::-;5165:58;;5273:2;5266:3;5255:9;5251:19;5238:33;5235:41;5232:2;;;5294:6;5286;5279:22;5232:2;;5339:85;5416:7;5408:3;5397:9;5393:19;5380:33;5369:9;5365:49;5339:85;:::i;:::-;5443:8;5433:18;;5471:9;5460:20;;;;4189:1297;;;;;;;;;;;;;;:::o;5491:325::-;;;5620:2;5608:9;5599:7;5595:23;5591:32;5588:2;;;5641:6;5633;5626:22;5588:2;5685:9;5672:23;5704:31;5729:5;5704:31;:::i;:::-;5754:5;5806:2;5791:18;;;;5778:32;;-1:-1:-1;;;5578:238:77:o;5821:255::-;;5941:2;5929:9;5920:7;5916:23;5912:32;5909:2;;;5962:6;5954;5947:22;5909:2;5999:9;5993:16;6018:28;6040:5;6018:28;:::i;6081:1059::-;;;6243:2;6231:9;6222:7;6218:23;6214:32;6211:2;;;6264:6;6256;6249:22;6211:2;6301:9;6295:16;6320:28;6342:5;6320:28;:::i;:::-;6367:5;6357:15;;;6391:2;6437;6426:9;6422:18;6416:25;-1:-1:-1;;;;;6456:6:77;6453:30;6450:2;;;6501:6;6493;6486:22;6450:2;6529:22;;6582:4;6574:13;;6570:27;-1:-1:-1;6560:2:77;;6616:6;6608;6601:22;6560:2;6650;6644:9;6673:59;6689:42;6728:2;6689:42;:::i;6673:59::-;6766:15;;;6797:12;;;;6829:11;;;6867;;;6859:20;;6855:29;;6852:42;-1:-1:-1;6849:2:77;;;6912:6;6904;6897:22;6849:2;6939:6;6930:15;;6954:156;6968:2;6965:1;6962:9;6954:156;;;7025:10;;7013:23;;6986:1;6979:9;;;;;7056:12;;;;7088;;6954:156;;;6958:3;7129:5;7119:15;;;;;;;6201:939;;;;;:::o;7145:190::-;;7257:2;7245:9;7236:7;7232:23;7228:32;7225:2;;;7278:6;7270;7263:22;7225:2;-1:-1:-1;7306:23:77;;7215:120;-1:-1:-1;7215:120:77:o;7340:194::-;;7463:2;7451:9;7442:7;7438:23;7434:32;7431:2;;;7484:6;7476;7469:22;7431:2;-1:-1:-1;7512:16:77;;7421:113;-1:-1:-1;7421:113:77:o;7539:1744::-;;;;;;;;;;;7888:3;7876:9;7867:7;7863:23;7859:33;7856:2;;;7910:6;7902;7895:22;7856:2;7938:28;7956:9;7938:28;:::i;:::-;7928:38;;8017:2;8006:9;8002:18;7989:32;-1:-1:-1;;;;;8081:2:77;8073:6;8070:14;8067:2;;;8102:6;8094;8087:22;8067:2;8130:49;8171:7;8162:6;8151:9;8147:22;8130:49;:::i;:::-;8120:59;;8232:2;8221:9;8217:18;8204:32;8188:48;;8261:2;8251:8;8248:16;8245:2;;;8282:6;8274;8267:22;8245:2;8310:51;8353:7;8342:8;8331:9;8327:24;8310:51;:::i;:::-;8300:61;;8380:37;8413:2;8402:9;8398:18;8380:37;:::i;:::-;8370:47;;8464:3;8453:9;8449:19;8436:33;8426:43;;8522:3;8511:9;8507:19;8494:33;8478:49;;8552:2;8542:8;8539:16;8536:2;;;8573:6;8565;8558:22;8536:2;8601:51;8644:7;8633:8;8622:9;8618:24;8601:51;:::i;:::-;8591:61;;8699:3;8688:9;8684:19;8671:33;8661:43;;8757:3;8746:9;8742:19;8729:33;8713:49;;8787:2;8777:8;8774:16;8771:2;;;8808:6;8800;8793:22;8771:2;8836:51;8879:7;8868:8;8857:9;8853:24;8836:51;:::i;:::-;8826:61;;8940:3;8929:9;8925:19;8912:33;8896:49;;8970:2;8960:8;8957:16;8954:2;;;8991:6;8983;8976:22;8954:2;9019:63;9074:7;9063:8;9052:9;9048:24;9019:63;:::i;:::-;9009:73;;9135:3;9124:9;9120:19;9107:33;9091:49;;9165:2;9155:8;9152:16;9149:2;;;9186:6;9178;9171:22;9149:2;;9214:63;9269:7;9258:8;9247:9;9243:24;9214:63;:::i;:::-;9204:73;;;7846:1437;;;;;;;;;;;;;:::o;9288:686::-;;;;9461:2;9449:9;9440:7;9436:23;9432:32;9429:2;;;9482:6;9474;9467:22;9429:2;9527:9;9514:23;-1:-1:-1;;;;;9597:2:77;9589:6;9586:14;9583:2;;;9618:6;9610;9603:22;9583:2;9662:58;9712:7;9703:6;9692:9;9688:22;9662:58;:::i;:::-;9739:8;;-1:-1:-1;9636:84:77;-1:-1:-1;9827:2:77;9812:18;;9799:32;;-1:-1:-1;9843:16:77;;;9840:2;;;9877:6;9869;9862:22;9840:2;;9905:63;9960:7;9949:8;9938:9;9934:24;9905:63;:::i;:::-;9895:73;;;9419:555;;;;;:::o;9979:2111::-;;;;;;;;;;10354:3;10342:9;10333:7;10329:23;10325:33;10322:2;;;10376:6;10368;10361:22;10322:2;10421:9;10408:23;-1:-1:-1;;;;;10491:2:77;10483:6;10480:14;10477:2;;;10512:6;10504;10497:22;10477:2;10540:49;10581:7;10572:6;10561:9;10557:22;10540:49;:::i;:::-;10530:59;;10642:2;10631:9;10627:18;10614:32;10598:48;;10671:2;10661:8;10658:16;10655:2;;;10692:6;10684;10677:22;10655:2;10720:62;10774:7;10763:8;10752:9;10748:24;10720:62;:::i;:::-;10710:72;;10835:2;10824:9;10820:18;10807:32;10791:48;;10864:2;10854:8;10851:16;10848:2;;;10885:6;10877;10870:22;10848:2;10913:51;10956:7;10945:8;10934:9;10930:24;10913:51;:::i;:::-;10903:61;;11017:2;11006:9;11002:18;10989:32;10973:48;;11046:2;11036:8;11033:16;11030:2;;;11067:6;11059;11052:22;11030:2;11095:51;11138:7;11127:8;11116:9;11112:24;11095:51;:::i;:::-;11085:61;;11199:3;11188:9;11184:19;11171:33;11155:49;;11229:2;11219:8;11216:16;11213:2;;;11250:6;11242;11235:22;11213:2;11278:51;11321:7;11310:8;11299:9;11295:24;11278:51;:::i;:::-;11268:61;;11382:3;11371:9;11367:19;11354:33;11338:49;;11412:2;11402:8;11399:16;11396:2;;;11433:6;11425;11418:22;11396:2;11461:51;11504:7;11493:8;11482:9;11478:24;11461:51;:::i;:::-;11451:61;;11565:3;11554:9;11550:19;11537:33;11521:49;;11595:2;11585:8;11582:16;11579:2;;;11616:6;11608;11601:22;11579:2;11644:62;11698:7;11687:8;11676:9;11672:24;11644:62;:::i;:::-;11634:72;;11759:3;11748:9;11744:19;11731:33;11715:49;;11789:2;11779:8;11776:16;11773:2;;;11810:6;11802;11795:22;11773:2;11838:51;11881:7;11870:8;11859:9;11855:24;11838:51;:::i;:::-;11828:61;;11942:3;11931:9;11927:19;11914:33;11898:49;;11972:2;11962:8;11959:16;11956:2;;;11993:6;11985;11978:22;11956:2;;12021:63;12076:7;12065:8;12054:9;12050:24;12021:63;:::i;:::-;12011:73;;;10312:1778;;;;;;;;;;;:::o;12489:827::-;;;;;;12697:3;12685:9;12676:7;12672:23;12668:33;12665:2;;;12719:6;12711;12704:22;12665:2;12760:9;12747:23;12737:33;;12821:2;12810:9;12806:18;12793:32;-1:-1:-1;;;;;12885:2:77;12877:6;12874:14;12871:2;;;12906:6;12898;12891:22;12871:2;12934:49;12975:7;12966:6;12955:9;12951:22;12934:49;:::i;:::-;12924:59;;13002:47;13045:2;13034:9;13030:18;13002:47;:::i;:::-;12992:57;;13102:2;13091:9;13087:18;13074:32;13058:48;;13131:2;13121:8;13118:16;13115:2;;;13152:6;13144;13137:22;13115:2;;13196:60;13248:7;13237:8;13226:9;13222:24;13196:60;:::i;:::-;12655:661;;;;-1:-1:-1;12655:661:77;;-1:-1:-1;13275:8:77;;13170:86;12655:661;-1:-1:-1;;;12655:661:77:o;13321:268::-;;13409:6;13404:3;13397:19;13461:6;13454:5;13447:4;13442:3;13438:14;13425:43;13513:3;13506:4;13497:6;13492:3;13488:16;13484:27;13477:40;13578:4;13571:2;13567:7;13562:2;13554:6;13550:15;13546:29;13541:3;13537:39;13533:50;13526:57;;13387:202;;;;;:::o;13594:257::-;;13673:5;13667:12;13700:6;13695:3;13688:19;13716:63;13772:6;13765:4;13760:3;13756:14;13749:4;13742:5;13738:16;13716:63;:::i;:::-;13833:2;13812:15;-1:-1:-1;;13808:29:77;13799:39;;;;13840:4;13795:50;;13643:208;-1:-1:-1;;13643:208:77:o;13856:239::-;13939:1;13932:5;13929:12;13919:2;;13984:10;13979:3;13975:20;13972:1;13965:31;14019:4;14016:1;14009:15;14047:4;14044:1;14037:15;13919:2;14071:18;;13909:186::o;14644:674::-;;14908:10;14903:3;14899:20;14952:2;14944:6;14940:15;14935:3;14928:28;14985:6;14979:13;15001:61;15055:6;15051:1;15046:3;15042:11;15035:4;15027:6;15023:17;15001:61;:::i;:::-;15122:13;;15081:16;;;;15144:62;15122:13;15193:1;15185:10;;15178:4;15166:17;;15144:62;:::i;:::-;15270:15;;;;15225:17;;15266:1;15258:10;;15251:35;;;;-1:-1:-1;;15310:1:77;15302:10;;;-1:-1:-1;;;14879:439:77:o;15323:274::-;;15490:6;15484:13;15506:53;15552:6;15547:3;15540:4;15532:6;15528:17;15506:53;:::i;:::-;15575:16;;;;;15460:137;-1:-1:-1;;15460:137:77:o;18896:538::-;;19192:1;19188;19183:3;19179:11;19175:19;19167:6;19163:32;19152:9;19145:51;19232:6;19227:2;19216:9;19212:18;19205:34;19275:6;19270:2;19259:9;19255:18;19248:34;19318:3;19313:2;19302:9;19298:18;19291:31;19339:45;19379:3;19368:9;19364:19;19356:6;19339:45;:::i;:::-;19331:53;;19421:6;19415:3;19404:9;19400:19;19393:35;19135:299;;;;;;;;:::o;19439:530::-;-1:-1:-1;;;;;19698:32:77;;19680:51;;19718:3;19762:2;19747:18;;19740:31;;;19439:530;;19788:45;;19813:19;;19805:6;19788:45;:::i;:::-;19864:2;19849:18;;19842:34;;;;-1:-1:-1;19907:2:77;19892:18;;19885:34;;;;19950:3;19935:19;;;19928:35;19780:53;19670:299;-1:-1:-1;;19670:299:77:o;21430:244::-;;21587:2;21576:9;21569:21;21607:61;21664:2;21653:9;21649:18;21641:6;21633;21607:61;:::i;21679:315::-;;21864:2;21853:9;21846:21;21884:61;21941:2;21930:9;21926:18;21918:6;21910;21884:61;:::i;:::-;21876:69;;21981:6;21976:2;21965:9;21961:18;21954:34;21836:158;;;;;;:::o;21999:217::-;;22146:2;22135:9;22128:21;22166:44;22206:2;22195:9;22191:18;22183:6;22166:44;:::i;22221:840::-;;22579:3;22609:2;22598:9;22591:21;22629:44;22669:2;22658:9;22654:18;22646:6;22629:44;:::i;:::-;22621:52;;;22682:55;22733:2;22722:9;22718:18;22710:6;22682:55;:::i;:::-;22768:2;22753:18;;22746:34;;;;-1:-1:-1;;;;;22854:15:77;;;22849:2;22834:18;;22827:43;22901:3;22886:19;;22879:35;;;;22807:3;22930:19;;22923:35;;;;22995:15;;;22989:3;22974:19;;22967:44;23042:3;23027:19;23020:35;22559:502;;-1:-1:-1;;22559:502:77:o;24127:350::-;24329:2;24311:21;;;24368:2;24348:18;;;24341:30;24407:28;24402:2;24387:18;;24380:56;24468:2;24453:18;;24301:176::o;25195:351::-;25397:2;25379:21;;;25436:2;25416:18;;;25409:30;25475:29;25470:2;25455:18;;25448:57;25537:2;25522:18;;25369:177::o;29971:348::-;30173:2;30155:21;;;30212:2;30192:18;;;30185:30;30251:26;30246:2;30231:18;;30224:54;30310:2;30295:18;;30145:174::o;31798:356::-;32000:2;31982:21;;;32019:18;;;32012:30;32078:34;32073:2;32058:18;;32051:62;32145:2;32130:18;;31972:182::o;34752:397::-;34954:2;34936:21;;;34993:2;34973:18;;;34966:30;35032:34;35027:2;35012:18;;35005:62;-1:-1:-1;;;35098:2:77;35083:18;;35076:31;35139:3;35124:19;;34926:223::o;35508:355::-;35710:2;35692:21;;;35749:2;35729:18;;;35722:30;35788:33;35783:2;35768:18;;35761:61;35854:2;35839:18;;35682:181::o;37809:812::-;38165:25;;;38221:2;38206:18;;38199:34;;;-1:-1:-1;;;;;38269:32:77;;38264:2;38249:18;;38242:60;38153:3;38333:2;38318:18;;38311:30;;;37809:812;;38358:44;38383:18;;;38375:6;38358:44;:::i;:::-;38350:52;;;38439:6;38433:3;38422:9;38418:19;38411:35;38497:6;38490:14;38483:22;38477:3;38466:9;38462:19;38455:51;38515:56;38566:3;38555:9;38551:19;38543:6;38515:56;:::i;:::-;38608:6;38602:3;38591:9;38587:19;38580:35;38133:488;;;;;;;;;;;:::o;38626:1104::-;38973:25;;;39017:2;39035:18;;;39028:34;;;38960:3;39093:2;39078:18;;39071:31;;;38945:19;;39137:22;;;38626:1104;;39217:6;;39190:3;39175:19;;38626:1104;39254:277;39268:6;39265:1;39262:13;39254:277;;;39343:6;39330:20;39363:31;39388:5;39363:31;:::i;:::-;-1:-1:-1;;;;;39419:31:77;39407:44;;39506:15;;;;39471:12;;;;39447:1;39283:9;39254:277;;;-1:-1:-1;;;;;;39587:32:77;;;;39582:2;39567:18;;39560:60;-1:-1:-1;;;39651:3:77;39636:19;;39629:35;;;;39708:14;39701:22;39607:3;39680:19;;;39673:51;39587:32;39548:3;-1:-1:-1;;;;38921:809:77:o;39735:275::-;39806:2;39800:9;39871:2;39852:13;;-1:-1:-1;;39848:27:77;39836:40;;-1:-1:-1;;;;;39891:34:77;;39927:22;;;39888:62;39885:2;;;39953:18;;:::i;:::-;39989:2;39982:22;39780:230;;-1:-1:-1;39780:230:77:o;40015:185::-;;-1:-1:-1;;;;;40099:6:77;40096:30;40093:2;;;40129:18;;:::i;:::-;-1:-1:-1;40189:4:77;40170:17;;;40166:28;;40083:117::o;40205:128::-;;40276:1;40272:6;40269:1;40266:13;40263:2;;;40282:18;;:::i;:::-;-1:-1:-1;40318:9:77;;40253:80::o;40338:236::-;;-1:-1:-1;;;;;40450:2:77;40447:1;40443:10;40480:2;40477:1;40473:10;40511:3;40507:2;40503:12;40498:3;40495:21;40492:2;;;40519:18;;:::i;:::-;40555:13;;40385:189;-1:-1:-1;;;;40385:189:77:o;40579:204::-;;40653:4;40650:1;40646:12;40685:4;40682:1;40678:12;40720:3;40714:4;40710:14;40705:3;40702:23;40699:2;;;40728:18;;:::i;:::-;40764:13;;40625:158;-1:-1:-1;;;40625:158:77:o;40788:244::-;;-1:-1:-1;;;;;40908:2:77;40905:1;40901:10;40938:2;40935:1;40931:10;40969:3;40965:2;40961:12;40956:3;40953:21;40950:2;;;40977:18;;:::i;41037:217::-;;41103:1;41093:2;;-1:-1:-1;;;41128:31:77;;41182:4;41179:1;41172:15;41210:4;41135:1;41200:15;41093:2;-1:-1:-1;41239:9:77;;41083:171::o;41259:168::-;;41365:1;41361;41357:6;41353:14;41350:1;41347:21;41342:1;41335:9;41328:17;41324:45;41321:2;;;41372:18;;:::i;:::-;-1:-1:-1;41412:9:77;;41311:116::o;41432:238::-;;41510:4;41507:1;41503:12;41542:4;41539:1;41535:12;41602:3;41596:4;41592:14;41587:3;41584:23;41577:3;41570:11;41563:19;41559:49;41556:2;;;41611:18;;:::i;:::-;41651:13;;41482:188;-1:-1:-1;;;41482:188:77:o;41675:125::-;;41743:1;41740;41737:8;41734:2;;;41748:18;;:::i;:::-;-1:-1:-1;41785:9:77;;41724:76::o;41805:195::-;;41880:4;41877:1;41873:12;41912:4;41909:1;41905:12;41937:3;41932;41929:12;41926:2;;;41944:18;;:::i;:::-;41981:13;;;41852:148;-1:-1:-1;;;41852:148:77:o;42005:258::-;42077:1;42087:113;42101:6;42098:1;42095:13;42087:113;;;42177:11;;;42171:18;42158:11;;;42151:39;42123:2;42116:10;42087:113;;;42218:6;42215:1;42212:13;42209:2;;;42253:1;42244:6;42239:3;42235:16;42228:27;42209:2;;42058:205;;;:::o;42268:380::-;42353:1;42343:12;;42400:1;42390:12;;;42411:2;;42465:4;42457:6;42453:17;42443:27;;42411:2;42518;42510:6;42507:14;42487:18;42484:38;42481:2;;;42564:10;42559:3;42555:20;42552:1;42545:31;42599:4;42596:1;42589:15;42627:4;42624:1;42617:15;42653:135;;-1:-1:-1;;42713:17:77;;42710:2;;;42733:18;;:::i;:::-;-1:-1:-1;42780:1:77;42769:13;;42700:88::o;42793:127::-;42854:10;42849:3;42845:20;42842:1;42835:31;42885:4;42882:1;42875:15;42909:4;42906:1;42899:15;42925:127;42986:10;42981:3;42977:20;42974:1;42967:31;43017:4;43014:1;43007:15;43041:4;43038:1;43031:15;43057:131;-1:-1:-1;;;;;43132:31:77;;43122:42;;43112:2;;43178:1;43175;43168:12;43193:118;43279:5;43272:13;43265:21;43258:5;43255:32;43245:2;;43301:1;43298;43291:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "4910200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "bitcoinFee()": "1095",
            "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": "infinite",
            "burnRequestCounter(address)": "1247",
            "burnRequests(address,uint256)": "infinite",
            "ccBurn(uint256,bytes,uint8,bytes)": "infinite",
            "ccExchangeAndBurn(address,uint256[],bool,address[],uint256,bytes,uint8,bytes)": "infinite",
            "disputeBurn(bytes,uint256[])": "infinite",
            "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": "infinite",
            "fixTransferDeadline()": "infinite",
            "isTransferred(address,uint256)": "2312",
            "isUsedAsBurnProof(bytes32)": "1196",
            "lockers()": "1128",
            "owner()": "1121",
            "protocolPercentageFee()": "1053",
            "relay()": "1126",
            "renounceOwnership()": "1221",
            "setBitcoinFee(uint256)": "23367",
            "setLockers(address)": "infinite",
            "setProtocolPercentageFee(uint256)": "23323",
            "setRelay(address)": "infinite",
            "setSlasherPercentageReward(uint256)": "23368",
            "setTeleBTC(address)": "infinite",
            "setTransferDeadline(uint256)": "infinite",
            "setTreasury(address)": "infinite",
            "slasherPercentageReward()": "1052",
            "startingBlockNumber()": "1074",
            "teleBTC()": "1083",
            "transferDeadline()": "1029",
            "transferOwnership(address)": "infinite",
            "treasury()": "1105"
          },
          "internal": {
            "_ccBurn(uint256,bytes memory,enum ScriptTypes,bytes calldata)": "infinite",
            "_ccExchangeAndBurn(uint256,address,uint256,bytes memory,enum ScriptTypes,bytes calldata)": "infinite",
            "_checkPaidBurnRequests(bytes32,uint256,address,bytes memory,uint256[] memory,uint256[] memory)": "infinite",
            "_checkScriptType(bytes memory,enum ScriptTypes)": "infinite",
            "_exchange(address,uint256[] calldata,bool,address[] calldata,uint256)": "infinite",
            "_getFees(uint256)": "infinite",
            "_saveBurnRequest(uint256,uint256,bytes memory,enum ScriptTypes,uint256,address)": "infinite",
            "_setBitcoinFee(uint256)": "infinite",
            "_setLockers(address)": "infinite",
            "_setProtocolPercentageFee(uint256)": "infinite",
            "_setRelay(address)": "infinite",
            "_setSlasherPercentageReward(uint256)": "infinite",
            "_setTeleBTC(address)": "infinite",
            "_setTransferDeadline(uint256)": "infinite",
            "_setTreasury(address)": "infinite",
            "_slashLockerForDispute(bytes memory,bytes memory,bytes32,uint256)": "infinite",
            "_updateIsUsedAsBurnProof(uint256,bytes memory,bytes memory,bytes32)": "infinite"
          }
        },
        "methodIdentifiers": {
          "bitcoinFee()": "b74d0d35",
          "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": "ea732637",
          "burnRequestCounter(address)": "930a60e8",
          "burnRequests(address,uint256)": "f47e2240",
          "ccBurn(uint256,bytes,uint8,bytes)": "43149dba",
          "ccExchangeAndBurn(address,uint256[],bool,address[],uint256,bytes,uint8,bytes)": "8d774f8e",
          "disputeBurn(bytes,uint256[])": "73532b2a",
          "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": "c780c03f",
          "fixTransferDeadline()": "0e5811a8",
          "isTransferred(address,uint256)": "7ffe9a92",
          "isUsedAsBurnProof(bytes32)": "1e236168",
          "lockers()": "1876dec4",
          "owner()": "8da5cb5b",
          "protocolPercentageFee()": "1812adb6",
          "relay()": "b59589d1",
          "renounceOwnership()": "715018a6",
          "setBitcoinFee(uint256)": "cdbe3741",
          "setLockers(address)": "b14d3532",
          "setProtocolPercentageFee(uint256)": "7ed55748",
          "setRelay(address)": "c805f68b",
          "setSlasherPercentageReward(uint256)": "4782bc36",
          "setTeleBTC(address)": "7f0f1817",
          "setTransferDeadline(uint256)": "5c4f5f3e",
          "setTreasury(address)": "f0f44260",
          "slasherPercentageReward()": "419cba7f",
          "startingBlockNumber()": "70872aa5",
          "teleBTC()": "8d3d78cd",
          "transferDeadline()": "bed6a602",
          "transferOwnership(address)": "f2fde38b",
          "treasury()": "61d027b3"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"name\":\"BurnDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"CCBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockerDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBitcoinFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBitcoinFee\",\"type\":\"uint256\"}],\"name\":\"NewBitcoinFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockers\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockers\",\"type\":\"address\"}],\"name\":\"NewLockers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"NewRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlasherPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlasherPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewSlasherPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBTC\",\"type\":\"address\"}],\"name\":\"NewTeleBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferDeadline\",\"type\":\"uint256\"}],\"name\":\"NewTransferDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitcoinTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bitcoinTxOutputIndex\",\"type\":\"uint256\"}],\"name\":\"PaidCCBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bitcoinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnReqIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_voutIndexes\",\"type\":\"uint256[]\"}],\"name\":\"burnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransferred\",\"type\":\"bool\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"ccBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"ccExchangeAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"disputeBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_versions\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_inputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_locktimes\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputIntermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexesAndBlockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"disputeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixTransferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isUsedAsBurnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"name\":\"setBitcoinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"}],\"name\":\"setTransferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"details\":\"Makes isTransferred flag true for the paid requests\",\"params\":{\"_blockNumber\":\"Height of the block containing the Bitcoin tx\",\"_burnReqIndexes\":\"Indexes of requests that locker wants to provide proof for them\",\"_index\":\"Index of the Bitcoin tx the block\",\"_intermediateNodes\":\"Merkle inclusion proof for the Bitcoin tx\",\"_lockerLockingScript\":\"Locker's locking script that this burn request belongs to\",\"_locktime\":\"Lock time of the Bitcoin tx\",\"_version\":\"Version of the Bitcoin tx\",\"_vin\":\"Inputs of the Bitcoin tx\",\"_vout\":\"Outputs of the Bitcoin tx\",\"_voutIndexes\":\"Indexes of outputs that were used to pay burn requests.                      _voutIndexes[i] belongs to _burnReqIndexes[i]\"}},\"ccBurn(uint256,bytes,uint8,bytes)\":{\"details\":\"After submitting the burn request, Locker has a limited time      to send BTC and provide burn proof\",\"params\":{\"_amount\":\"of teleBTC that user wants to burn\",\"_lockerLockingScript\":\"of locker that should execute the burn request\",\"_scriptType\":\"User script type\",\"_userScript\":\"User script hash\"}},\"ccExchangeAndBurn(address,uint256[],bool,address[],uint256,bytes,uint8,bytes)\":{\"details\":\"After exchanging, rest of the process is similar to ccBurn\",\"params\":{\"_amounts\":\"[inputTokenAmount, teleBTCAmount]\",\"_deadline\":\"of exchanging\",\"_exchangeConnector\":\"Address of exchange connector to be used\",\"_isFixedToken\":\"True if input token amount is fixed\",\"_path\":\"of exchanging inputToken to teleBTC\"}},\"constructor\":{\"params\":{\"_bitcoinFee\":\"Fee of submitting a transaction on Bitcoin\",\"_lockers\":\"Address of lockers contract\",\"_protocolPercentageFee\":\"Percentage of tokens that user pays to protocol for burning\",\"_relay\":\"Address of relay contract\",\"_slasherPercentageReward\":\"Percentage of tokens that slasher receives after slashing a locker\",\"_startingBlockNumber\":\"Requests that are included in a block older                              than _startingBlockNumber cannot be executed\",\"_teleBTC\":\"Address of teleBTC contract\",\"_transferDeadline\":\"of sending BTC to user (aster submitting a burn request)\",\"_treasury\":\"Address of the treasury of the protocol\"}},\"disputeBurn(bytes,uint256[])\":{\"params\":{\"_indices\":\"Indices of requests that their deadline has passed\",\"_lockerLockingScript\":\"Locker's locking script that the unpaid request belongs to\"},\"returns\":{\"_0\":\"True if dispute is successful\"}},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"details\":\"Input tx is a malicious tx which shows that locker spent BTC      Output tx is the tx that was spent by locker in input tx      Output tx shows money goes to locker      Input tx shows locker steals the funds\",\"params\":{\"_indexesAndBlockNumbers\":\"Indices of malicious input in input tx, input tx in block and block number of input tx\",\"_inputIntermediateNodes\":\"Merkle inclusion proof for the malicious transaction\",\"_inputVin\":\"Inputs of the malicious transaction\",\"_inputVout\":\"Outputs of the malicious transaction\",\"_lockerLockingScript\":\"Suspicious locker's locking script\",\"_locktimes\":\"Locktimes of input and output tx\",\"_outputVin\":\"Inputs of the spent transaction\",\"_outputVout\":\"Outputs of the spent transaction\",\"_versions\":\"Versions of input and output tx\"},\"returns\":{\"_0\":\"True if dispute is successful\"}},\"fixTransferDeadline()\":{\"details\":\"This func protects lockers in the case that finalization parameter was updated      so they can process burn requests\"},\"isTransferred(address,uint256)\":{\"params\":{\"_index\":\"the request for the locker\",\"_lockerTargetAddress\":\"Locker address on the target chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBitcoinFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_bitcoinFee\":\"The new Bitcoin transaction fee\"}},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"The new lockers contract address\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"The new protocol percentage fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"The new relay contract address\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher percentage reward\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new teleBTC contract address\"}},\"setTransferDeadline(uint256)\":{\"details\":\"Only owner can call this      Deadline should be greater than relay finalization parameter\",\"params\":{\"_transferDeadline\":\"The new transfer deadline\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"The new treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CCBurn(address,bytes,uint8,uint256,address,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Emits when a burn request gets submitted\"},\"LockerDispute(address,bytes,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a locker gets slashed for withdrawing BTC without proper reason\"},\"NewBitcoinFee(uint256,uint256)\":{\"notice\":\"Emits when bitcoin fee is updated\"},\"NewLockers(address,address)\":{\"notice\":\"Emits when lockers address is updated\"},\"NewProtocolPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when percentage fee is updated\"},\"NewRelay(address,address)\":{\"notice\":\"Emits when relay address is updated\"},\"NewSlasherPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when slasher percentage fee is updated\"},\"NewTeleBTC(address,address)\":{\"notice\":\"Emits when TeleBTC address is updated\"},\"NewTransferDeadline(uint256,uint256)\":{\"notice\":\"Emits when transfer deadline is updated\"},\"NewTreasury(address,address)\":{\"notice\":\"Emits when treasury address is updated\"},\"PaidCCBurn(address,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a burn proof is provided\"}},\"kind\":\"user\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"notice\":\"Checks the correctness of burn proof (which is a Bitcoin tx)\"},\"ccBurn(uint256,bytes,uint8,bytes)\":{\"notice\":\"Records users burn request\"},\"ccExchangeAndBurn(address,uint256[],bool,address[],uint256,bytes,uint8,bytes)\":{\"notice\":\"Exchanges input token for teleBTC then burns it\"},\"constructor\":{\"notice\":\"Handles cross-chain burn requests\"},\"disputeBurn(bytes,uint256[])\":{\"notice\":\"Slashes a locker if did not pay a cc burn request before its deadline\"},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"notice\":\"Slashes a locker if they issue a tx that doesn't match any burn request\"},\"fixTransferDeadline()\":{\"notice\":\"Updating payback deadline if it becomes less than finalization parameter\"},\"isTransferred(address,uint256)\":{\"notice\":\"Returns true is request has been processed\"},\"setBitcoinFee(uint256)\":{\"notice\":\"Updates Bitcoin transaction fee\"},\"setLockers(address)\":{\"notice\":\"Updates lockers contract address\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Updates protocol percentage fee for burning tokens\"},\"setRelay(address)\":{\"notice\":\"Updates relay contract address\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Updates slasher percentage reward for disputing lockers\"},\"setTeleBTC(address)\":{\"notice\":\"Updates teleBTC contract address\"},\"setTransferDeadline(uint256)\":{\"notice\":\"Updates deadline of executing burn requests\"},\"setTreasury(address)\":{\"notice\":\"Updates protocol treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/CCBurnRouter.sol\":\"CCBurnRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x12cc3b3424654cc48e9f0563ed027b953414fa142305c32dfc4e7d58bd39c2fa\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n}\",\"keccak256\":\"0x00105d2be25db30bf8e8d6f498976dd68827212efc1ea488bad28081672985e0\",\"license\":\"MIT\"},\"contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n\\n        if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_bodyLength > 77 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0xaa971daf5757b21dce5e3cbf68c8d113033e4e8f1ecd1101c7d314807f1e4dd9\",\"license\":\"MIT\"},\"contracts/libraries/RelayHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary RelayHelper {\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _relay Address of Relay contract\\n    /// @param _txId of the transaction\\n    /// @param _blockNumber Height of the block containing the transaction\\n    /// @param _intermediateNodes Merkle inclusion proof for the transaction\\n    /// @param _index Index of transaction in the block\\n    /// @return True if the transaction was included in the block\\n    function isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) public returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = getFinalizedBlockHeaderFee(_relay, _blockNumber);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: low fee\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    function getFinalizedBlockHeaderFee(address _relay, uint _blockNumber) public view returns (uint) {\\n        return IBitcoinRelay(_relay).getBlockHeaderFee(_blockNumber, 0);\\n    }\\n}\",\"keccak256\":\"0x020e3718eb606c7ce5ee3d2fe434e49ff67500848f62aa3308e942c53acd885b\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x51c24c7c86620e39b732ba1b0de62c314842541748905323df7600a2797a2bd4\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ILockersStorage.sol\\\";\\n\\ninterface ILockers is ILockersStorage {\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewExchangeConnector(\\n        address oldExchangeConnector,\\n        address newExchangeConnector\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTDTToken,\\n        address newTDTToken\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTeleportDAOToken(address _tdtTokenAddress) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0xfc302bbbce77ea58367f9f2ea169253ab03780bd5d396c9c2f02e86c45146cc1\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ILockersStorage {\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n  \\n}\\n\\n\\n\\n \",\"keccak256\":\"0xfbe29ee307724219396c389feb47b2a20199bdbd7fc3f99c9a225db15945d252\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x8f4b9c9ad505ba1184d4e2c6694d725eacaf19c42942075bae2b1608bdbd9ef5\",\"license\":\"MIT\"},\"contracts/routers/CCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../libraries/RelayHelper.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CCBurnRouter is ICCBurnRouter, Ownable, ReentrancyGuard {\\n\\n    using RelayHelper for *;\\n    \\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCBurnRouter: zero address\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n    /// @notice Handles cross-chain burn requests\\n    /// @param _startingBlockNumber Requests that are included in a block older \\n    ///                             than _startingBlockNumber cannot be executed\\n    /// @param _relay Address of relay contract\\n    /// @param _lockers Address of lockers contract\\n    /// @param _treasury Address of the treasury of the protocol\\n    /// @param _teleBTC Address of teleBTC contract\\n    /// @param _transferDeadline of sending BTC to user (aster submitting a burn request)\\n    /// @param _protocolPercentageFee Percentage of tokens that user pays to protocol for burning\\n    /// @param _slasherPercentageReward Percentage of tokens that slasher receives after slashing a locker\\n    /// @param _bitcoinFee Fee of submitting a transaction on Bitcoin\\n    constructor(\\n        uint _startingBlockNumber,\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        address _teleBTC,\\n        uint _transferDeadline,\\n        uint _protocolPercentageFee,\\n        uint _slasherPercentageReward,\\n        uint _bitcoinFee\\n    ) {\\n        startingBlockNumber = _startingBlockNumber;\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setTreasury(_treasury);\\n        _setTeleBTC(_teleBTC);\\n        _setTransferDeadline(_transferDeadline);\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n        _setBitcoinFee(_bitcoinFee);\\n    }\\n\\n    receive() external payable {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Returns true is request has been processed\\n    /// @param _lockerTargetAddress Locker address on the target chain\\n    /// @param _index the request for the locker\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint _index\\n    ) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice Updates relay contract address\\n    /// @dev Only owner can call this\\n    /// @param _relay The new relay contract address\\n    function setRelay(address _relay) external override onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice Updates lockers contract address\\n    /// @dev Only owner can call this\\n    /// @param _lockers The new lockers contract address\\n    function setLockers(address _lockers) external override onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice Updates teleBTC contract address\\n    /// @dev Only owner can call this\\n    /// @param _teleBTC The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice Updates protocol treasury address\\n    /// @dev Only owner can call this\\n    /// @param _treasury The new treasury address\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice Updates deadline of executing burn requests\\n    /// @dev Only owner can call this\\n    ///      Deadline should be greater than relay finalization parameter\\n    /// @param _transferDeadline The new transfer deadline\\n    function setTransferDeadline(uint _transferDeadline) external override onlyOwner {\\n        _setTransferDeadline(_transferDeadline);\\n    }\\n\\n    /// @notice Updating payback deadline if it becomes less than finalization parameter\\n    /// @dev This func protects lockers in the case that finalization parameter was updated\\n    ///      so they can process burn requests\\n    function fixTransferDeadline() external {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        require(_finalizationParameter <= transferDeadline, \\\"CCBurnRouter: low deadline\\\");\\n        uint _transferDeadline = 2 * _finalizationParameter + 1;\\n        _setTransferDeadline(_transferDeadline);\\n    }\\n\\n    /// @notice Updates protocol percentage fee for burning tokens\\n    /// @dev Only owner can call this\\n    /// @param _protocolPercentageFee The new protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice Updates slasher percentage reward for disputing lockers\\n    /// @dev Only owner can call this\\n    /// @param _slasherPercentageReward The new slasher percentage reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n    }\\n\\n    /// @notice Updates Bitcoin transaction fee\\n    /// @dev Only owner can call this\\n    /// @param _bitcoinFee The new Bitcoin transaction fee\\n    function setBitcoinFee(uint _bitcoinFee) external override onlyOwner {\\n        _setBitcoinFee(_bitcoinFee);\\n    }\\n\\n    /// @notice Internal setter for relay contract address\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Internal setter for lockers contract address\\n    /// @param _lockers                     The new lockers contract address\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice Internal setter for teleBTC contract address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice Internal setter for protocol treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice Internal setter for deadline of executing burn requests\\n    function _setTransferDeadline(uint _transferDeadline) private {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        // Gives lockers enough time to pay cc burn requests\\n        require(_transferDeadline > _finalizationParameter, \\\"CCBurnRouter: low deadline\\\");\\n        emit NewTransferDeadline(transferDeadline, _transferDeadline);\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice Internal setter for protocol percentage fee for burning tokens\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(MAX_PROTOCOL_FEE >= _protocolPercentageFee, \\\"CCBurnRouter: invalid fee\\\");\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice Internal setter for slasher percentage reward for disputing lockers\\n    function _setSlasherPercentageReward(uint _slasherPercentageReward) private {\\n        require(MAX_SLASHER_REWARD >= _slasherPercentageReward, \\\"CCBurnRouter: invalid reward\\\");\\n        emit NewSlasherPercentageFee(slasherPercentageReward, _slasherPercentageReward);\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice Internal setter for Bitcoin transaction fee\\n    function _setBitcoinFee(uint _bitcoinFee) private {\\n        emit NewBitcoinFee(bitcoinFee, _bitcoinFee);\\n        require(MAX_PROTOCOL_FEE >= _bitcoinFee, \\\"CCBurnRouter: invalid btc fee\\\");\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice Records users burn request\\n    /// @dev After submitting the burn request, Locker has a limited time\\n    ///      to send BTC and provide burn proof\\n    /// @param _amount of teleBTC that user wants to burn\\n    /// @param _userScript User script hash\\n    /// @param _scriptType User script type\\n    /// @param _lockerLockingScript\\tof locker that should execute the burn request\\n    function ccBurn(\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant override {\\n        // Transfers user's teleBTC to contract\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        (uint burntAmount, address lockerTargetAddress) = _ccBurn(\\n            _amount, \\n            _userScript, \\n            _scriptType, \\n            _lockerLockingScript\\n        );\\n\\n        emit CCBurn(\\n            _msgSender(),\\n            _userScript,\\n            _scriptType,\\n            0, // no input token\\n            address(0), // no input token\\n            _amount,\\n            burntAmount,\\n            lockerTargetAddress,\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].requestIdOfLocker, // index of request\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].deadline\\n        );\\n\\n    }\\n\\n    /// @notice Exchanges input token for teleBTC then burns it\\n    /// @dev After exchanging, rest of the process is similar to ccBurn\\n    /// @param _exchangeConnector Address of exchange connector to be used\\n    /// @param _amounts [inputTokenAmount, teleBTCAmount]\\n    /// @param _isFixedToken True if input token amount is fixed\\n    /// @param _path of exchanging inputToken to teleBTC\\n    /// @param _deadline of exchanging\\n    function ccExchangeAndBurn(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant override {\\n        uint _exchangedTeleBTC = _exchange(\\n            _exchangeConnector,\\n            _amounts,\\n            _isFixedToken,\\n            _path,\\n            _deadline\\n        );\\n\\n        _ccExchangeAndBurn(\\n            _amounts[0],\\n            _path[0],\\n            _exchangedTeleBTC,\\n            _userScript,\\n            _scriptType,\\n            _lockerLockingScript\\n        );\\n    }\\n\\n    /// @notice Checks the correctness of burn proof (which is a Bitcoin tx)\\n    /// @dev Makes isTransferred flag true for the paid requests\\n    /// @param _version Version of the Bitcoin tx\\n    /// @param _vin Inputs of the Bitcoin tx\\n    /// @param _vout Outputs of the Bitcoin tx\\n    /// @param _locktime Lock time of the Bitcoin tx\\n    /// @param _blockNumber Height of the block containing the Bitcoin tx\\n    /// @param _intermediateNodes Merkle inclusion proof for the Bitcoin tx\\n    /// @param _index Index of the Bitcoin tx the block\\n    /// @param _lockerLockingScript Locker's locking script that this burn request belongs to\\n    /// @param _burnReqIndexes Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes Indexes of outputs that were used to pay burn requests. \\n    ///                     _voutIndexes[i] belongs to _burnReqIndexes[i]\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        bytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) external payable nonReentrant override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCBurnRouter: old request\\\");\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"CCBurnRouter: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        require(\\n            _burnReqIndexes.length == _voutIndexes.length,\\n            \\\"CCBurnRouter: wrong indexes\\\"\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            RelayHelper.isConfirmed(\\n                relay,\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: not finalized\\\"\\n        );\\n\\n        // Checks the paid burn requests\\n        uint paidOutputCounter = _checkPaidBurnRequests(\\n            txId,\\n            _blockNumber,\\n            _lockerTargetAddress,\\n            _vout,\\n            _burnReqIndexes,\\n            _voutIndexes\\n        );\\n\\n        /*\\n            Checks if there is an output that goes back to the locker\\n            Sets isUsedAsBurnProof of txId true if all the outputs (except one) were used to pay cc burn requests\\n        */\\n        _updateIsUsedAsBurnProof(paidOutputCounter, _vout, _lockerLockingScript, txId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Slashes a locker if did not pay a cc burn request before its deadline\\n    /// @param _lockerLockingScript Locker's locking script that the unpaid request belongs to\\n    /// @param _indices Indices of requests that their deadline has passed\\n    /// @return True if dispute is successful\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint[] memory _indices\\n    ) external nonReentrant override returns (bool) {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        uint _lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint i = 0; i < _indices.length; i++) {\\n            // Checks that locker has not provided burn proof\\n            require(\\n                !burnRequests[_lockerTargetAddress][_indices[i]].isTransferred,\\n                \\\"CCBurnRouter: already paid\\\"\\n            );\\n\\n            // Checks that payback deadline has passed\\n            require(\\n                burnRequests[_lockerTargetAddress][_indices[i]].deadline < _lastSubmittedHeight,\\n                \\\"CCBurnRouter: deadline not passed\\\"\\n            );\\n\\n            // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n            burnRequests[_lockerTargetAddress][_indices[i]].isTransferred = true;\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockers(lockers).slashIdleLocker(\\n                _lockerTargetAddress,\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n                _msgSender(), // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender // User address\\n            );\\n\\n            emit BurnDispute(\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender,\\n                _lockerTargetAddress,\\n                _lockerLockingScript,\\n                burnRequests[_lockerTargetAddress][_indices[i]].requestIdOfLocker\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev Input tx is a malicious tx which shows that locker spent BTC\\n    ///      Output tx is the tx that was spent by locker in input tx\\n    ///      Output tx shows money goes to locker\\n    ///      Input tx shows locker steals the funds\\n    /// @param _lockerLockingScript Suspicious locker's locking script\\n    /// @param _versions Versions of input and output tx\\n    /// @param _inputVin Inputs of the malicious transaction\\n    /// @param _inputVout Outputs of the malicious transaction\\n    /// @param _outputVin Inputs of the spent transaction\\n    /// @param _outputVout Outputs of the spent transaction\\n    /// @param _locktimes Locktimes of input and output tx\\n    /// @param _inputIntermediateNodes Merkle inclusion proof for the malicious transaction\\n    /// @param _indexesAndBlockNumbers Indices of malicious input in input tx, input tx in block and block number of input tx\\n    /// @return True if dispute is successful\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external payable nonReentrant override returns (bool) {\\n\\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n            _locktimes.length == 2 &&\\n            _indexesAndBlockNumbers.length == 3,\\n            \\\"CCBurnRouter: wrong inputs\\\"\\n        );\\n\\n        require(_indexesAndBlockNumbers[2] >=  startingBlockNumber, \\\"CCBurnRouter: old request\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Finds input tx id and checks its inclusion\\n        bytes32 _inputTxId = BitcoinHelper.calculateTxId(_versions[0], _inputVin, _inputVout, _locktimes[0]);\\n        require(\\n            RelayHelper.isConfirmed(\\n                relay,\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"CCBurnRouter: not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !isUsedAsBurnProof[_inputTxId],\\n            \\\"CCBurnRouter: already used\\\"\\n        );\\n\\n        // prevents multiple slashing of locker\\n        isUsedAsBurnProof[_inputTxId] = true;        \\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint _outpointIndex) = BitcoinHelper.extractOutpoint(\\n            _inputVin,\\n            _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n        );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId == BitcoinHelper.calculateTxId(_versions[1], _outputVin, _outputVout, _locktimes[1]),\\n            \\\"CCBurnRouter: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(BitcoinHelper.getLockingScript(_outputVout, _outpointIndex)) ==\\n            keccak256(_lockerLockingScript),\\n            \\\"CCBurnRouter: not for locker\\\"\\n        );\\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            IBitcoinRelay(relay).lastSubmittedHeight() > transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"CCBurnRouter: deadline not passed\\\"\\n        );\\n\\n        // Slashes locker\\n        _slashLockerForDispute(\\n            _inputVout,\\n            _lockerLockingScript,\\n            _inputTxId,\\n            _indexesAndBlockNumbers[2] // Block number\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Burns the exchanged teleBTC\\n    function _ccExchangeAndBurn(\\n        uint _inputAmount,\\n        address _inputToken,\\n        uint _exchangedTeleBTC, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) private {\\n        (uint burntAmount, address lockerTargetAddress) = _ccBurn(\\n            _exchangedTeleBTC, \\n            _userScript, \\n            _scriptType, \\n            _lockerLockingScript\\n        );\\n\\n        emit CCBurn(\\n            _msgSender(),\\n            _userScript,\\n            _scriptType,\\n            _inputAmount,\\n            _inputToken,\\n            _exchangedTeleBTC,\\n            burntAmount,\\n            lockerTargetAddress,\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].requestIdOfLocker, // index of request\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].deadline\\n        );\\n    }\\n\\n    /// @notice Burns teleBTC and records the burn request\\n    /// @return _burntAmount Amount of BTC that user receives\\n    /// @return _lockerTargetAddress Address of locker that will execute the request\\n    function _ccBurn(\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) private returns (uint _burntAmount, address _lockerTargetAddress) {\\n        // Checks validity of user script\\n        _checkScriptType(_userScript, _scriptType);\\n\\n        // Checks if the given locking script is locker\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Gets the target address of locker\\n        _lockerTargetAddress = ILockers(lockers).getLockerTargetAddress(_lockerLockingScript);\\n\\n        uint remainingAmount = _getFees(_amount);\\n\\n        // Burns remained teleBTC\\n        ITeleBTC(teleBTC).approve(lockers, remainingAmount);\\n\\n        // Reduces the Bitcoin fee to find the amount that user receives (called burntAmount)\\n        _burntAmount = (ILockers(lockers).burn(_lockerLockingScript, remainingAmount)) \\n            * (remainingAmount - bitcoinFee) / remainingAmount;\\n\\n        _saveBurnRequest(\\n            _amount,\\n            _burntAmount,\\n            _userScript,\\n            _scriptType,\\n            IBitcoinRelay(relay).lastSubmittedHeight(),\\n            _lockerTargetAddress\\n        );\\n    }\\n\\n    /// @notice Exchanges input token for teleBTC\\n    /// @dev Reverts if exchange fails\\n    /// @return Amount of exchanged teleBTC \\n    function _exchange(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline\\n    ) private returns (uint) {\\n        require(_path[_path.length - 1] == teleBTC, \\\"CCBurnRouter: invalid path\\\");\\n        require(_amounts.length == 2, \\\"CCBurnRouter: wrong amounts\\\");\\n\\n        // Transfers user's input token\\n        IERC20(_path[0]).transferFrom(_msgSender(), address(this), _amounts[0]);\\n        IERC20(_path[0]).approve(_exchangeConnector, _amounts[0]); // Gives approval to exchange connector\\n        (bool result, uint[] memory amounts) = IExchangeConnector(_exchangeConnector).swap(\\n            _amounts[0], \\n            _amounts[1], \\n            _path, \\n            address(this), \\n            _deadline, \\n            _isFixedToken\\n        );\\n\\n        require(result, \\\"CCBurnRouter: exchange failed\\\");\\n        return amounts[amounts.length - 1]; // Amount of exchanged teleBTC\\n    }\\n\\n    /// @notice Slashes the malicious locker\\n    /// @param _inputVout Inputs of the malicious transaction\\n    /// @param _lockerLockingScript Malicious locker's locking script\\n    /// @param _inputTxId Tx id of the malicious transaction\\n    /// @param _inputBlockNumber Block number of the malicious transaction\\n    function _slashLockerForDispute(\\n        bytes memory _inputVout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _inputTxId,\\n        uint _inputBlockNumber\\n    ) private {\\n\\n        // Finds total value of malicious transaction\\n        uint totalValue = BitcoinHelper.parseOutputsTotalValue(_inputVout);\\n\\n        // Gets the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        ILockers(lockers).slashThiefLocker(\\n            _lockerTargetAddress,\\n            totalValue*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n            _msgSender(), // Slasher address\\n            totalValue\\n        );\\n\\n        // Emits the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _lockerLockingScript,\\n            _inputBlockNumber,\\n            _inputTxId,\\n            totalValue + totalValue*slasherPercentageReward/MAX_SLASHER_REWARD\\n        );\\n    }\\n\\n    /// @notice Checks the burn requests that get paid by this transaction\\n    /// @param _paidBlockNumber Block number in which locker paid the burn request\\n    /// @param _lockerTargetAddress Address of the locker on the target chain\\n    /// @param _vout Outputs of a transaction\\n    /// @param _burnReqIndexes Indexes of requests that locker provides proof for them\\n    /// @param _voutIndexes Indexes of outputs that were used to pay burn requests\\n    /// @return paidOutputCounter Number of executed burn requests\\n    function _checkPaidBurnRequests(\\n        bytes32 txId,\\n        uint _paidBlockNumber,\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) private returns (uint paidOutputCounter) {\\n        uint parsedAmount;\\n        /*\\n            Below variable is for checking that every output in vout (except one)\\n            is related to a cc burn request so that we can\\n            set \\\"isUsedAsBurnProof = true\\\" for the whole txId\\n        */\\n        paidOutputCounter = 0;\\n\\n        uint tempVoutIndex;\\n\\n        for (uint i = 0; i < _burnReqIndexes.length; i++) {\\n\\n            // prevent from sending repeated vout indexes\\n            if (i == 0) {\\n                tempVoutIndex = _voutIndexes[i];\\n            } else {\\n                require(\\n                    _voutIndexes[i] > tempVoutIndex,\\n                    \\\"CCBurnRouter: un-sorted vout indexes\\\"\\n                );\\n\\n                tempVoutIndex = _voutIndexes[i];\\n            }\\n\\n            uint _burnReqIndex = _burnReqIndexes[i];\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred &&\\n            burnRequests[_lockerTargetAddress][_burnReqIndex].deadline >= _paidBlockNumber\\n            ) {\\n\\n                parsedAmount = BitcoinHelper.parseValueFromSpecificOutputHavingScript(\\n                    _vout,\\n                    _voutIndexes[i],\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].userScript,\\n                    ScriptTypes(uint(burnRequests[_lockerTargetAddress][_burnReqIndex].scriptType))\\n                );\\n\\n                // Checks that locker has sent required teleBTC amount\\n                if (burnRequests[_lockerTargetAddress][_burnReqIndex].burntAmount == parsedAmount) {\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidCCBurn(\\n                        _lockerTargetAddress,\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex].requestIdOfLocker,\\n                        txId,\\n                        _voutIndexes[i]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev  One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter  Number of the tx outputs that pay a cc burn request\\n    /// @param _vout Outputs of a transaction\\n    /// @param _lockerLockingScript Locking script of locker\\n    /// @param _txId Transaction id\\n    function _updateIsUsedAsBurnProof(\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private {\\n        uint parsedAmount = BitcoinHelper.parseValueHavingLockingScript(_vout, _lockerLockingScript);\\n        uint numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs) {\\n            // One output sends the remaining value to locker\\n            isUsedAsBurnProof[_txId] = true;\\n        } else if (_paidOutputCounter == numberOfOutputs) {\\n            // All output pays cc burn requests\\n            isUsedAsBurnProof[_txId] = true;\\n        }\\n    }\\n\\n    /// @notice Checks the user hash script to be valid (based on its type)\\n    function _checkScriptType(bytes memory _userScript, ScriptTypes _scriptType) private pure {\\n        if (_scriptType == ScriptTypes.P2PK || _scriptType == ScriptTypes.P2WSH) {\\n            require(_userScript.length == 32, \\\"CCBurnRouter: invalid script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"CCBurnRouter: invalid script\\\");\\n        }\\n    }\\n\\n    /// @notice Records burn request of user\\n    /// @param _amount Amount of wrapped token that user wants to burn\\n    /// @param _burntAmount Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userScript User's Bitcoin script type\\n    /// @param _lastSubmittedHeight Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint _amount,\\n        uint _burntAmount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) private {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.burntAmount = _burntAmount;\\n        request.sender = _msgSender();\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        request.requestIdOfLocker = burnRequestCounter[_lockerTargetAddress];\\n        burnRequestCounter[_lockerTargetAddress] = burnRequestCounter[_lockerTargetAddress] + 1;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount The amount to be burnt\\n    /// @return Remaining amount after reducing fees\\n    function _getFees(\\n        uint _amount\\n    ) private returns (uint) {\\n        // Calculates protocol fee\\n        uint protocolFee = _amount * protocolPercentageFee / MAX_PROTOCOL_FEE;\\n\\n        // note: to avoid dust, we require _amount to be greater than (2  * bitcoinFee)\\n        require(_amount > protocolFee + 2 * bitcoinFee, \\\"CCBurnRouter: low amount\\\");\\n\\n        uint remainingAmount = _amount - protocolFee;\\n\\n        // Transfers protocol fee\\n        ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n\\n        return remainingAmount;\\n    }\\n\\n}\",\"keccak256\":\"0x4f190b963e22234a6b67a96e85b142e19a872b46e079a5a8c1c8ffebf50ad392\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userTargetAddress Address of the user\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n    /// @param inputAmount Amount of input token (0 if input token is teleBTC)\\n    /// @param inputToken Address of token that will be exchanged for teleBTC (address(0) if input token is teleBTC)\\n\\t/// @param teleBTCAmount amount of teleBTC that user sent OR Amount of teleBTC after exchanging\\n    /// @param burntAmount that user will receive (after reducing fees)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\tuint inputAmount,\\n\\t\\taddress inputToken,\\n\\t\\tuint teleBTCAmount, \\n\\t\\tuint burntAmount,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when bitcoin fee is updated\\n    event NewBitcoinFee(\\n        uint oldBitcoinFee, \\n        uint newBitcoinFee\\n    );\\n\\n\\t// Read-only functions\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external;\\n\\n    function ccExchangeAndBurn(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n\\t) external;\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0xe8fd0891297a33762b102cea271f6ac4868397c851d21d06a5a708359397c914\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n}\",\"keccak256\":\"0xba4cd1e2d23b3acfe09b797b01fd4e0430086ac9db9d5df75ad329fc37222cb2\",\"license\":\"MIT\"},\"contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH // 32 bytes               \\n    }\",\"keccak256\":\"0x0b00007c6dfa5422319f3a8d78dcf45f9dd44f9e4c61b7604dde673d8e7f96f9\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 880,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1707,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18382,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "startingBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18385,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "relay",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 18388,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "lockers",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 18391,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "teleBTC",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 18394,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "treasury",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 18397,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "transferDeadline",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 18400,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "protocolPercentageFee",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 18403,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "slasherPercentageReward",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 18406,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "bitcoinFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 18412,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "burnRequests",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_struct(burnRequest)24040_storage)dyn_storage)"
          },
          {
            "astId": 18416,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "burnRequestCounter",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 18421,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "isUsedAsBurnProof",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(burnRequest)24040_storage)dyn_storage": {
            "base": "t_struct(burnRequest)24040_storage",
            "encoding": "dynamic_array",
            "label": "struct ICCBurnRouter.burnRequest[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(ScriptTypes)25205": {
            "encoding": "inplace",
            "label": "enum ScriptTypes",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_array(t_struct(burnRequest)24040_storage)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct ICCBurnRouter.burnRequest[])",
            "numberOfBytes": "32",
            "value": "t_array(t_struct(burnRequest)24040_storage)dyn_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_struct(burnRequest)24040_storage": {
            "encoding": "inplace",
            "label": "struct ICCBurnRouter.burnRequest",
            "members": [
              {
                "astId": 24024,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "amount",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 24026,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "burntAmount",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 24028,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "sender",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
              },
              {
                "astId": 24030,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "userScript",
                "offset": 0,
                "slot": "3",
                "type": "t_bytes_storage"
              },
              {
                "astId": 24032,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "deadline",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              },
              {
                "astId": 24034,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "isTransferred",
                "offset": 0,
                "slot": "5",
                "type": "t_bool"
              },
              {
                "astId": 24037,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "scriptType",
                "offset": 1,
                "slot": "5",
                "type": "t_enum(ScriptTypes)25205"
              },
              {
                "astId": 24039,
                "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
                "label": "requestIdOfLocker",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "events": {
          "CCBurn(address,bytes,uint8,uint256,address,uint256,uint256,address,uint256,uint256)": {
            "notice": "Emits when a burn request gets submitted"
          },
          "LockerDispute(address,bytes,uint256,bytes32,uint256)": {
            "notice": "Emits when a locker gets slashed for withdrawing BTC without proper reason"
          },
          "NewBitcoinFee(uint256,uint256)": {
            "notice": "Emits when bitcoin fee is updated"
          },
          "NewLockers(address,address)": {
            "notice": "Emits when lockers address is updated"
          },
          "NewProtocolPercentageFee(uint256,uint256)": {
            "notice": "Emits when percentage fee is updated"
          },
          "NewRelay(address,address)": {
            "notice": "Emits when relay address is updated"
          },
          "NewSlasherPercentageFee(uint256,uint256)": {
            "notice": "Emits when slasher percentage fee is updated"
          },
          "NewTeleBTC(address,address)": {
            "notice": "Emits when TeleBTC address is updated"
          },
          "NewTransferDeadline(uint256,uint256)": {
            "notice": "Emits when transfer deadline is updated"
          },
          "NewTreasury(address,address)": {
            "notice": "Emits when treasury address is updated"
          },
          "PaidCCBurn(address,uint256,bytes32,uint256)": {
            "notice": "Emits when a burn proof is provided"
          }
        },
        "kind": "user",
        "methods": {
          "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
            "notice": "Checks the correctness of burn proof (which is a Bitcoin tx)"
          },
          "ccBurn(uint256,bytes,uint8,bytes)": {
            "notice": "Records users burn request"
          },
          "ccExchangeAndBurn(address,uint256[],bool,address[],uint256,bytes,uint8,bytes)": {
            "notice": "Exchanges input token for teleBTC then burns it"
          },
          "constructor": {
            "notice": "Handles cross-chain burn requests"
          },
          "disputeBurn(bytes,uint256[])": {
            "notice": "Slashes a locker if did not pay a cc burn request before its deadline"
          },
          "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
            "notice": "Slashes a locker if they issue a tx that doesn't match any burn request"
          },
          "fixTransferDeadline()": {
            "notice": "Updating payback deadline if it becomes less than finalization parameter"
          },
          "isTransferred(address,uint256)": {
            "notice": "Returns true is request has been processed"
          },
          "setBitcoinFee(uint256)": {
            "notice": "Updates Bitcoin transaction fee"
          },
          "setLockers(address)": {
            "notice": "Updates lockers contract address"
          },
          "setProtocolPercentageFee(uint256)": {
            "notice": "Updates protocol percentage fee for burning tokens"
          },
          "setRelay(address)": {
            "notice": "Updates relay contract address"
          },
          "setSlasherPercentageReward(uint256)": {
            "notice": "Updates slasher percentage reward for disputing lockers"
          },
          "setTeleBTC(address)": {
            "notice": "Updates teleBTC contract address"
          },
          "setTransferDeadline(uint256)": {
            "notice": "Updates deadline of executing burn requests"
          },
          "setTreasury(address)": {
            "notice": "Updates protocol treasury address"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"contracts/connectors/interfaces/IExchangeConnector.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\"\n    },\n    \"contracts/connectors/UniswapV2Connector.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../uniswap/v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract UniswapV2Connector is IExchangeConnector, Ownable, ReentrancyGuard {\\n\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"UniswapV2Connector: zero address\\\");\\n        _;\\n    }\\n\\n    string public override name;\\n    address public override exchangeRouter;\\n    address public override liquidityPoolFactory;\\n    address public override wrappedNativeToken;\\n\\n    /// @notice                          This contract is used for interacting with UniswapV2 contract\\n    /// @param _name                     Name of the underlying DEX\\n    /// @param _exchangeRouter           Address of the DEX router contract\\n    constructor(string memory _name, address _exchangeRouter) {\\n        name = _name;\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n        wrappedNativeToken = IUniswapV2Router02(exchangeRouter).WETH();\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                             Setter for exchange router\\n    /// @dev                                Gets address of liquidity pool factory from new exchange router\\n    /// @param _exchangeRouter              Address of the new exchange router contract\\n    function setExchangeRouter(address _exchangeRouter) external nonZeroAddress(_exchangeRouter) override onlyOwner {\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n        wrappedNativeToken = IUniswapV2Router02(exchangeRouter).WETH();\\n    }\\n\\n    /// @notice            Setter for liquidity pool factory\\n    /// @dev               Gets address from exchange router\\n    function setLiquidityPoolFactory() external override onlyOwner {\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n    }\\n\\n    /// @notice            Setter for wrapped native token\\n    /// @dev               Gets address from exchange router\\n    function setWrappedNativeToken() external override onlyOwner {\\n        wrappedNativeToken = IUniswapV2Router02(exchangeRouter).WETH();\\n    }\\n\\n    /// @notice                     Returns required input amount to get desired output amount\\n    /// @dev                        Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist\\n    ///                             Returns (false, 0) if desired output amount is greater than or equal to output reserve\\n    /// @param _outputAmount        Desired output amount\\n    /// @param _inputToken          Address of the input token\\n    /// @param _outputToken         Address of the output token\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (bool, uint) {\\n\\n        // Checks that the liquidity pool exists\\n        address liquidityPool = IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, _outputToken);\\n\\n        if (\\n            liquidityPool == address(0)\\n        ) {\\n            if (\\n                IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, wrappedNativeToken) == address(0) ||\\n                IUniswapV2Factory(liquidityPoolFactory).getPair(wrappedNativeToken, _outputToken) == address(0)\\n            ) {\\n                return (false, 0);\\n            } \\n\\n            address[] memory path = new address[](3);\\n            path[0] = _inputToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = _outputToken;\\n            uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsIn(_outputAmount, path);\\n\\n            return (true, result[0]);\\n\\n        } else {\\n\\n            address[] memory path = new address[](2);\\n            path[0] = _inputToken;\\n            path[1] = _outputToken;\\n            uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsIn(_outputAmount, path);\\n\\n            return (true, result[0]);\\n        }\\n        \\n    }\\n\\n    /// @notice                     Returns amount of output token that user receives \\n    /// @dev                        Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _inputToken          Address of the input token\\n    /// @param _outputToken         Address of the output token\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (bool, uint) {\\n\\n        // Checks that the liquidity pool exists\\n        address liquidityPool = IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, _outputToken);\\n\\n        if (\\n            liquidityPool == address(0)\\n        ) {\\n            if (\\n                IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, wrappedNativeToken) == address(0) ||\\n                IUniswapV2Factory(liquidityPoolFactory).getPair(wrappedNativeToken, _outputToken) == address(0)\\n            ) {\\n                return (false, 0);\\n            }\\n\\n            address[] memory path = new address[](3);\\n            path[0] = _inputToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = _outputToken;\\n            uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsOut(_inputAmount, path);\\n            return (true, result[2]);\\n            \\n        } else {\\n\\n            address[] memory path = new address[](2);\\n            path[0] = _inputToken;\\n            path[1] = _outputToken;\\n            uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsOut(_inputAmount, path);\\n\\n            return (true, result[1]);\\n        }\\n    }\\n\\n    /// @notice                     Exchanges input token for output token through exchange router\\n    /// @dev                        Checks exchange conditions before exchanging\\n    ///                             We assume that the input token is not WETH (it is teleBTC)\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _outputAmount        Amount of output token\\n    /// @param _path                List of tokens that are used for exchanging\\n    /// @param _to                  Receiver address\\n    /// @param _deadline            Deadline of exchanging tokens\\n    /// @param _isFixedToken        True if the input token amount is fixed\\n    /// @return _result             True if the exchange is successful\\n    /// @return _amounts            Amounts of tokens that are involved in exchanging\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external nonReentrant nonZeroAddress(_to) override returns (bool _result, uint[] memory _amounts) {\\n        \\n        if (_path.length == 2) {\\n            address liquidityPool = IUniswapV2Factory(liquidityPoolFactory).getPair(_path[0], _path[1]);\\n\\n            if (liquidityPool == address(0)) {\\n                address[] memory thePath = new address[](3);\\n\\n                thePath[0] = _path[0];\\n                thePath[1] = wrappedNativeToken;\\n                thePath[2] = _path[1];\\n\\n                _path = thePath;\\n            }\\n        }\\n\\n        uint neededInputAmount;\\n        (_result, neededInputAmount) = _checkExchangeConditions(\\n            _inputAmount,\\n            _outputAmount,\\n            _path,\\n            _deadline,\\n            _isFixedToken\\n        );\\n        \\n        if (_result) {\\n            // Gets tokens from user\\n            IERC20(_path[0]).transferFrom(_msgSender(), address(this), neededInputAmount);\\n\\n            // Gives allowance to exchange router\\n            IERC20(_path[0]).approve(exchangeRouter, neededInputAmount);\\n\\n            if (_isFixedToken == false && _path[_path.length-1] != wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapTokensForExactTokens(\\n                    _outputAmount,\\n                    _inputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == false && _path[_path.length-1] == wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapTokensForExactETH(\\n                    _outputAmount,\\n                    _inputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == true && _path[_path.length-1] != wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapExactTokensForTokens(\\n                    _inputAmount,\\n                    _outputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == true && _path[_path.length-1] == wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapExactTokensForETH(\\n                    _inputAmount,\\n                    _outputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n            emit Swap(_path, _amounts, _to);\\n        }\\n    }\\n\\n    /// @notice                     Returns true if the exchange path is valid\\n    /// @param _path                List of tokens that are used for exchanging\\n    function isPathValid(address[] memory _path) public view override returns (bool _result) {\\n        address liquidityPool;\\n\\n        // Checks that path length is greater than one\\n        if (_path.length < 2) {\\n            return false;\\n        }\\n\\n        for (uint i = 0; i < _path.length - 1; i++) {\\n            liquidityPool =\\n                IUniswapV2Factory(liquidityPoolFactory).getPair(_path[i], _path[i + 1]);\\n            if (liquidityPool == address(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                     Checks if exchanging can happen successfully\\n    /// @dev                        Avoids reverting the execution by exchange router\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _outputAmount        Amount of output token\\n    /// @param _path                List of tokens that are used for exchanging\\n    /// @param _deadline            Deadline of exchanging tokens\\n    /// @param _isFixedToken        True if the input token amount is fixed\\n    /// @return                     True if exchange conditions are satisfied\\n    /// @return                     Needed amount of input token\\n    function _checkExchangeConditions(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) private view returns (bool, uint) {\\n\\n        // Checks deadline has not passed\\n        if (_deadline < block.timestamp) {\\n            return (false, 0);\\n        }\\n\\n        // Checks that the liquidity pool exists\\n        if (!isPathValid(_path)) {\\n            return (false, 0);\\n        }\\n\\n        // Finds maximum output amount\\n        uint[] memory outputResult = IUniswapV2Router02(exchangeRouter).getAmountsOut(\\n            _inputAmount,\\n            _path\\n        );\\n\\n        // Checks that exchanging is possible or not\\n        if (_outputAmount > outputResult[_path.length - 1]) {\\n            return (false, 0);\\n        } else {\\n            if (_isFixedToken == true) {\\n                return (true, _inputAmount);\\n            } else {\\n                uint[] memory inputResult = IUniswapV2Router02(exchangeRouter).getAmountsIn(\\n                    _outputAmount, \\n                    _path\\n                );\\n                return (true, inputResult[0]);\\n            }\\n        }\\n    }\\n\\n}\"\n    },\n    \"contracts/erc20/erc20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract erc20 is ERC20 {\\n    constructor (\\n        string memory name_,\\n        string memory symbol_,\\n        uint initialMintedAmount\\n    ) ERC20(name_, symbol_) {\\n        _mint(_msgSender(), initialMintedAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/erc20/ERC20AsLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20AsLink is ERC20 {\\n    constructor (\\n        string memory name_,\\n        string memory symbol_,\\n        uint initialMintedAmount\\n    ) ERC20(name_, symbol_) {\\n        _mint(_msgSender(), initialMintedAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/erc20/interfaces/ITeleBTC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n}\"\n    },\n    \"contracts/erc20/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\"\n    },\n    \"contracts/erc20/TeleBTC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ITeleBTC.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract TeleBTC is ITeleBTC, ERC20, Ownable, ReentrancyGuard {\\n \\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"TeleBTC: only minters can mint\\\");\\n        _;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"TeleBTC: only burners can burn\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"TeleBTC: value is zero\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n\\n    uint public maxMintLimit;      // Maximum mint limit per epoch\\n    uint public lastMintLimit;          // Current mint limit in last epoch, decrease by minting in an epoch\\n    uint public epochLength;            // Number of blocks in every epoch\\n    uint public lastEpoch;              // Epoch number of last mint transaction\\n\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        maxMintLimit = 10 ** 8;\\n        lastMintLimit = 10 ** 8;\\n        epochLength = 2000;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    function decimals() public view virtual override(ERC20, ITeleBTC) returns (uint8) {\\n        return 8;\\n    }\\n\\n    /**\\n     * @dev change maximum mint limit per epoch.\\n     */\\n    function setMaxMintLimit(uint _mintLimit) public override onlyOwner {\\n        emit NewMintLimit(maxMintLimit, _mintLimit);\\n        maxMintLimit = _mintLimit;\\n    }\\n\\n    /**\\n     * @dev change blocks number per epoch.\\n     */\\n    function setEpochLength(uint _length) public override onlyOwner nonZeroValue(_length) {\\n        emit NewEpochLength(epochLength, _length);\\n        epochLength = _length;\\n    }\\n\\n    /**\\n     * @dev Check if an account is minter.\\n     * @return bool\\n     */\\n    function isMinter(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: account is the zero address\\\");\\n        return minters[account];\\n    }\\n\\n    /// @notice                Check if an account is burner    \\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isBurner(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: account is the zero address\\\");\\n        return burners[account];\\n    }\\n\\n    /// @notice                Adds a minter\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to minters\\n    function addMinter(address account) external override onlyOwner {\\n        require(!isMinter(account), \\\"TeleBTC: account already has role\\\");\\n        minters[account] = true;\\n        emit MinterAdded(account);\\n    }\\n\\n    /// @notice                Removes a minter\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from minters\\n    function removeMinter(address account) external override onlyOwner {\\n        require(isMinter(account), \\\"TeleBTC: account does not have role\\\");\\n        minters[account] = false;\\n        emit MinterRemoved(account);\\n    }\\n\\n    /// @notice                Adds a burner\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be added to burners\\n    function addBurner(address account) external override onlyOwner {\\n        require(!isBurner(account), \\\"TeleBTC: account already has role\\\");\\n        burners[account] = true;\\n        emit BurnerAdded(account);\\n    }\\n\\n    /// @notice                Removes a burner\\n    /// @dev                   Only owner can call this function\\n    /// @param  account        The account which intended to be removed from burners\\n    function removeBurner(address account) external override onlyOwner {\\n        require(isBurner(account), \\\"TeleBTC: account does not have role\\\");\\n        burners[account] = false;\\n        emit BurnerRemoved(account);\\n    }\\n\\n    /// @notice                Burns TeleBTC tokens of msg.sender\\n    /// @dev                   Only burners can call this\\n    /// @param _amount         Amount of burnt tokens\\n    function burn(uint _amount) external nonReentrant onlyBurner override returns (bool) {\\n        _burn(_msgSender(), _amount);\\n        emit Burn(_msgSender(), _msgSender(), _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Mints TeleBTC tokens for _receiver\\n    /// @dev                   Only minters can call this\\n    /// @param _receiver       Address of token's receiver\\n    /// @param _amount         Amount of minted tokens\\n    function mint(address _receiver, uint _amount) external nonReentrant onlyMinter override returns (bool) {\\n        require(_amount <= maxMintLimit, \\\"TeleBTC: mint amount is more than maximum mint limit\\\");\\n        require(checkAndReduceMintLimit(_amount), \\\"TeleBTC: reached maximum mint limit\\\");\\n\\n        _mint(_receiver, _amount);\\n        emit Mint(_msgSender(), _receiver, _amount);\\n        return true;\\n    }\\n\\n    /// @notice                Check if can mint new tokens and update mint limit\\n    /// @param _amount         Desired mint amount\\n    function checkAndReduceMintLimit(uint _amount) private returns (bool) {\\n        uint currentEpoch = block.number / epochLength;\\n        \\n        if (currentEpoch == lastEpoch) {\\n            if (_amount > lastMintLimit)\\n                return false;\\n            lastMintLimit -= _amount;\\n        } else {\\n            lastEpoch = currentEpoch;\\n            lastMintLimit = maxMintLimit - _amount;\\n        }\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/erc20/WETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract WETH is ERC20 {\\n\\n    constructor(string memory _name, string memory _symbol)\\n    ERC20(_name, _symbol) {}\\n\\n    function deposit() external payable {\\n        require(msg.value > 0);\\n        _mint(_msgSender(), msg.value);\\n    }\\n\\n    function withdraw(uint value) external {\\n        require(balanceOf(_msgSender()) >= value, \\\"Balance is not sufficient\\\");\\n        _burn(_msgSender(), value);\\n        address payable recipient = payable(_msgSender());\\n        recipient.transfer(value);\\n    }\\n}\"\n    },\n    \"contracts/libraries/BitcoinHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n\\n        if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_bodyLength > 77 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\"\n    },\n    \"contracts/libraries/LockersLib.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"../types/DataTypes.sol\\\";\\n\\nlibrary LockersLib {\\n\\n    function requestToBecomeLockerValidation(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        DataTypes.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount\\n    ) external {\\n\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isLocker,\\n            \\\"Lockers: is locker\\\"\\n        );\\n\\n        require(\\n            _lockedTDTAmount >= libParams.minRequiredTDTLockedAmount,\\n            \\\"Lockers: low TDT\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= libParams.minRequiredTNTLockedAmount && msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low TNT\\\"\\n        );\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n    }\\n\\n    function requestToBecomeLocker(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external {\\n\\n        DataTypes.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n\\n        lockersMapping[msg.sender] = locker_;\\n\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external returns (uint neededTeleBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedNativeTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        neededTeleBTC = theLocker.slashingTeleBTCAmount * _collateralAmount / theLocker.reservedNativeTokenForSlash;\\n\\n        if (neededTeleBTC < theLocker.slashingTeleBTCAmount) {\\n            // to avoid precision loss (so buyer cannot profit of it)\\n            neededTeleBTC = neededTeleBTC + 1;\\n        }\\n\\n        // Updates locker's slashing info \\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount - neededTeleBTC;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash - _collateralAmount;\\n\\n    }\\n\\n    function liquidateLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external view returns (uint neededTeleBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        // DataTypes.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libConstants,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.nativeTokenLockedAmount) {\\n            _maxBuyableCollateral = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of TeleBTC to buy collateralAmount\\n        neededTeleBTC = neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededTeleBTC = neededTeleBTC + 1; // to prevent precision loss\\n\\n    }\\n\\n    function slashThiefLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint rewardInNativeToken, uint neededNativeTokenForSlash) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentNativeToken = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _amount, // Total amount of TeleBTC that is slashed\\n            ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n            libConstants.NativeTokenDecimal, // Decimal of TNT\\n            libParams.teleBTC, // Input token\\n            libConstants.NativeToken // Output token\\n        );\\n\\n        rewardInNativeToken = equivalentNativeToken*_rewardAmount/_amount;\\n        neededNativeTokenForSlash = equivalentNativeToken*libParams.liquidationRatio/libConstants.OneHundredPercent;\\n\\n        if ((rewardInNativeToken + neededNativeTokenForSlash) > theLocker.nativeTokenLockedAmount) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInNativeToken = rewardInNativeToken*theLocker.nativeTokenLockedAmount/\\n                (rewardInNativeToken + neededNativeTokenForSlash);\\n            neededNativeTokenForSlash = theLocker.nativeTokenLockedAmount - rewardInNativeToken;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n            = theLocker.nativeTokenLockedAmount - (rewardInNativeToken + neededNativeTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n        \\n        theLocker.netMinted\\n            = theLocker.netMinted - _amount;\\n\\n        theLocker.slashingTeleBTCAmount\\n            = theLocker.slashingTeleBTCAmount + _amount; \\n\\n        theLocker.reservedNativeTokenForSlash\\n            = theLocker.reservedNativeTokenForSlash + neededNativeTokenForSlash;\\n    }\\n\\n    function slashIdleLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint equivalentNativeToken) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentNativeToken = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount, // Total amount of TeleBTC that is slashed\\n            ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n            libConstants.NativeTokenDecimal, // Decimal of TNT\\n            libParams.teleBTC, // Input token\\n            libConstants.NativeToken // Output token\\n        );\\n\\n        if (equivalentNativeToken > theLocker.nativeTokenLockedAmount) {\\n            equivalentNativeToken = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n        = theLocker.nativeTokenLockedAmount - equivalentNativeToken;\\n    }\\n\\n    function maximumBuyableCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint teleBTCDecimal = ERC20(libParams.teleBTC).decimals();\\n\\n        uint antecedent = (libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** libConstants.NativeTokenDecimal)) -\\n        (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        uint consequent = ((libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent) -\\n        (_priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        return antecedent/consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n        return (_priceOfOneUnitOfCollateral * theLocker.nativeTokenLockedAmount * \\n            (10 ** (1 + ERC20(libParams.teleBTC).decimals())))/\\n                (theLocker.netMinted * libParams.liquidationRatio * (10 ** (1 + libConstants.NativeTokenDecimal)));\\n    }\\n\\n    function neededTeleBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount,\\n        uint _priceOfCollateral\\n    ) public pure returns (uint) {\\n        return (_collateralAmount * _priceOfCollateral * libParams.priceWithDiscountRatio)/\\n            (libConstants.OneHundredPercent*(10 ** libConstants.NativeTokenDecimal));\\n    }\\n\\n    function addToCollateral(\\n        DataTypes.locker storage theLocker,\\n        uint _addingNativeTokenAmount\\n    ) external {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount + _addingNativeTokenAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral,\\n        uint _removingNativeTokenAmount\\n    ) internal {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: account is not a locker\\\"\\n        );\\n\\n        // Capacity of locker = (locker's collateral value in TeleBTC) * (collateral ratio) - (minted TeleBTC) \\n        uint lockerCapacity = (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * \\n            libConstants.OneHundredPercent)/\\n                (libParams.collateralRatio * (10 ** libConstants.NativeTokenDecimal)) - theLocker.netMinted;\\n\\n        uint maxRemovableCollateral = (lockerCapacity * (10 ** libConstants.NativeTokenDecimal))/_priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingNativeTokenAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount >= libParams.minRequiredTNTLockedAmount,\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            (10**libConstants.NativeTokenDecimal), // 1 Ether is 10^18 wei\\n            libConstants.NativeTokenDecimal,\\n            ITeleBTC(libParams.teleBTC).decimals(),\\n            libConstants.NativeToken,\\n            libParams.teleBTC\\n        );\\n\\n    }\\n\\n\\n    function lockerCollateralInTeleBTC(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            theLocker.nativeTokenLockedAmount,\\n            libConstants.NativeTokenDecimal,\\n            ITeleBTC(libParams.teleBTC).decimals(),\\n            libConstants.NativeToken,\\n            libParams.teleBTC\\n        );\\n    }\\n\\n}\"\n    },\n    \"contracts/libraries/RelayHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary RelayHelper {\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _relay Address of Relay contract\\n    /// @param _txId of the transaction\\n    /// @param _blockNumber Height of the block containing the transaction\\n    /// @param _intermediateNodes Merkle inclusion proof for the transaction\\n    /// @param _index Index of transaction in the block\\n    /// @return True if the transaction was included in the block\\n    function isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) public returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = getFinalizedBlockHeaderFee(_relay, _blockNumber);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: low fee\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    function getFinalizedBlockHeaderFee(address _relay, uint _blockNumber) public view returns (uint) {\\n        return IBitcoinRelay(_relay).getBlockHeaderFee(_blockNumber, 0);\\n    }\\n}\"\n    },\n    \"contracts/libraries/RequestHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n// A library for parsing cc transfer and cc exchange requests\\nlibrary RequestHelper {\\n\\n    /// @notice                     Returns chain id of the request\\n    /// @dev                        Determines the chain that request belongs to\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of chain id\\n    function parseChainId(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 0, 0);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice                     Returns app id of the request\\n    /// @dev                        Determines the app that request belongs to (e.g. cross-chain transfer app id is 0)\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of app id\\n    function parseAppId(bytes memory _arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 1, 2);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice                     Returns recipient address\\n    /// @dev                        Minted TeleBTC or exchanged tokens will be sent to this address\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of recipient address\\n    function parseRecipientAddress(bytes memory _arbitraryData) internal pure returns (address parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 3, 22);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice                     Returns percentage fee (from total minted TeleBTC)\\n    /// @dev                        This fee goes to Teleporter who submitted the request\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of percentage fee\\n    function parsePercentageFee(bytes memory _arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 23, 24);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    /// @notice                     Returns speed of request\\n    /// @dev                        0 for normal requests, 1 for instant requests\\n    ///                             Instant requests are used to pay back an instant loan\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of speed parameter\\n    function parseSpeed(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 25, 25);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice                     Returns address of exchange token\\n    /// @dev                        Minted TeleBTC will be exchanged to this token\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of exchange token\\n    function parseExchangeToken(bytes memory _arbitraryData) internal pure returns (address parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 26, 45);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    /// @notice                     Returns amount of output (exchange) token\\n    /// @dev                        If input token is fixed, outputAmount means the min expected output amount\\n    ///                             If output token is fixed, outputAmount is desired output amount\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of exchange output amount\\n    function parseExchangeOutputAmount(bytes memory _arbitraryData) internal pure returns (uint224 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 46, 73);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 28))\\n        }\\n    }\\n\\n    /// @notice                     Returns deadline of executing exchange request\\n    /// @dev                        This value is compared to block.timestamp\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of deadline\\n    function parseDeadline(bytes memory _arbitraryData) internal pure returns (uint32 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 74, 77);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 4))\\n        }\\n    }\\n\\n    /// @notice                     Returns true if input token is fixed\\n    /// @param _arbitraryData       Data written in Bitcoin tx\\n    /// @return parsedValue         The parsed value of is-fixed-token\\n    function parseIsFixedToken(bytes memory _arbitraryData) internal pure returns (uint8 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(_arbitraryData, 78, 78);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    /// @notice                 Returns a sliced bytes\\n    /// @param _data            Data that is sliced\\n    /// @param _start           Start index of slicing\\n    /// @param _end             End index of slicing\\n    /// @return _result         The result of slicing\\n    function sliceBytes(\\n        bytes memory _data,\\n        uint _start,\\n        uint _end\\n    ) internal pure returns (bytes memory _result) {\\n        bytes1 temp;\\n        for (uint i = _start; i < _end + 1; i++) {\\n            temp = _data[i];\\n            _result = abi.encodePacked(_result, temp);\\n        }\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/libraries/TypedMemView.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\"\n    },\n    \"contracts/lockers/interfaces/ILockers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ILockersStorage.sol\\\";\\n\\ninterface ILockers is ILockersStorage {\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewExchangeConnector(\\n        address oldExchangeConnector,\\n        address newExchangeConnector\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTDTToken,\\n        address newTDTToken\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isLockerActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTeleportDAOToken(address _tdtTokenAddress) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/lockers/interfaces/ILockersStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ILockersStorage {\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n  \\n}\\n\\n\\n\\n \"\n    },\n    \"contracts/lockers/LockersLogic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../routers/interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ILockers.sol\\\";\\nimport \\\"../libraries/LockersLib.sol\\\";\\nimport \\\"./LockersStorageStructure.sol\\\";\\n\\ncontract LockersLogic is LockersStorageStructure, ILockers, OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n\\n    using LockersLib for *;\\n    using SafeERC20 for IERC20;\\n   \\n    function initialize(\\n        address _teleBTC,\\n        address _TeleportDAOToken,\\n        address _exchangeConnector,\\n        address _priceOracle,\\n        address _ccBurnRouter,\\n        uint _minRequiredTDTLockedAmount,\\n        uint _minRequiredTNTLockedAmount,\\n        uint _collateralRatio,\\n        uint _liquidationRatio,\\n        uint _lockerPercentageFee,\\n        uint _priceWithDiscountRatio\\n    ) public initializer {\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        require(\\n            _minRequiredTNTLockedAmount != 0,\\n            \\\"Lockers: amount is zero\\\"\\n        );\\n\\n        _setTeleportDAOToken(_TeleportDAOToken);\\n        _setTeleBTC(_teleBTC);\\n        _setCCBurnRouter(_ccBurnRouter);\\n        _setExchangeConnector(_exchangeConnector);\\n        _setPriceOracle(_priceOracle);\\n        _setMinRequiredTDTLockedAmount(_minRequiredTDTLockedAmount);\\n        _setMinRequiredTNTLockedAmount(_minRequiredTNTLockedAmount);\\n        _setCollateralRatio(_collateralRatio);\\n        _setLiquidationRatio(_liquidationRatio);\\n        _setLockerPercentageFee(_lockerPercentageFee);\\n        _setPriceWithDiscountRatio(_priceWithDiscountRatio);\\n\\n        libConstants.OneHundredPercent = ONE_HUNDRED_PERCENT;\\n        libConstants.HealthFactor = HEALTH_FACTOR;\\n        libConstants.UpperHealthFactor = UPPER_HEALTH_FACTOR;\\n        libConstants.MaxLockerFee = MAX_LOCKER_FEE;\\n        libConstants.NativeTokenDecimal = NATIVE_TOKEN_DECIMAL;\\n        libConstants.NativeToken = NATIVE_TOKEN;\\n\\n    }\\n\\n    // *************** Modifiers ***************\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Lockers: address is zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"Lockers: value is zero\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"Lockers: only minters can mint\\\");\\n        _;\\n    }\\n\\n    // *************** External functions ***************\\n\\n    /**\\n     * @dev Give an account access to mint.\\n     */\\n    function addMinter(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(!isMinter(_account), \\\"Lockers: account already has role\\\");\\n        minters[_account] = true;\\n        emit MinterAdded(_account);\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to mint.\\n     */\\n    function removeMinter(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(isMinter(_account), \\\"Lockers: account does not have role\\\");\\n        minters[_account] = false;\\n        emit MinterRemoved(_account);\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"Lockers: only burners can burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to burn.\\n     */\\n    function addBurner(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(!isBurner(_account), \\\"Lockers: account already has role\\\");\\n        burners[_account] = true;\\n        emit BurnerAdded(_account);\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to burn.\\n     */\\n    function removeBurner(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(isBurner(_account), \\\"Lockers: account does not have role\\\");\\n        burners[_account] = false;\\n        emit BurnerRemoved(_account);\\n    }\\n\\n    /// @notice                 Pause the locker, so only the functions can be called which are whenPaused\\n    /// @dev                    Only owner can pause \\n    function pauseLocker() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                 Un-pause the locker, so only the functions can be called which are whenNotPaused\\n    /// @dev                    Only owner can pause\\n    function unPauseLocker() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getLockerTargetAddress(bytes calldata  _lockerLockingScript) external view override returns (address) {\\n        return lockerTargetAddress[_lockerLockingScript];\\n    }\\n\\n    /// @notice                           Checks whether a locking script is locker\\n    /// @param _lockerLockingScript       Locking script of locker on the target chain\\n    /// @return                           True if a locking script is locker\\n    function isLocker(bytes calldata _lockerLockingScript) external override view returns(bool) {\\n        return lockersMapping[lockerTargetAddress[_lockerLockingScript]].isLocker;\\n    }\\n\\n    /// @notice                           Give number of lockers\\n    /// @return                           Number of lockers\\n    function getNumberOfLockers() external override view returns (uint) {\\n        return totalNumberOfLockers;\\n    }\\n\\n    /// @notice                             Give Bitcoin public key of locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             Bitcoin public key of locker\\n    function getLockerLockingScript(\\n        address _lockerTargetAddress\\n    ) external override view nonZeroAddress(_lockerTargetAddress) returns (bytes memory) {\\n        return lockersMapping[_lockerTargetAddress].lockerLockingScript;\\n    }\\n\\n    /// @notice                       Changes teleportDAO token in lockers \\n    /// @dev                          Only current owner can call this\\n    /// @param _tdtTokenAddress       The new teleportDAO token address\\n    function setTeleportDAOToken(address _tdtTokenAddress) external override onlyOwner {\\n        _setTeleportDAOToken(_tdtTokenAddress);\\n    }\\n\\n    /// @notice                       Changes percentage fee of locker\\n    /// @dev                          Only current owner can call this\\n    /// @param _lockerPercentageFee   The new locker percentage fee\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external override onlyOwner {\\n        _setLockerPercentageFee(_lockerPercentageFee);\\n    }\\n\\n    /// @notice                          Changes price with discount ratio\\n    /// @dev                             Only current owner can call this\\n    /// @param _priceWithDiscountRatio   The new price with discount ratioo\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external override onlyOwner {\\n        _setPriceWithDiscountRatio(_priceWithDiscountRatio);\\n    }\\n\\n    /// @notice         Changes the required TDT token bond amount to become locker\\n    /// @dev            Only current owner can call this\\n    /// @param _minRequiredTDTLockedAmount   The new required TDT token bond amount\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external override onlyOwner {\\n        _setMinRequiredTDTLockedAmount(_minRequiredTDTLockedAmount);\\n    }\\n\\n    /// @notice         Changes the required native token bond amount to become locker\\n    /// @dev            Only current owner can call this\\n    ///                 It should be a non-zero value\\n    /// @param _minRequiredTNTLockedAmount   The new required native token bond amount\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external override onlyOwner {\\n        _setMinRequiredTNTLockedAmount(_minRequiredTNTLockedAmount);\\n    }\\n\\n    /// @notice                 Changes the price oracle\\n    /// @dev                    Only current owner can call this\\n    /// @param _priceOracle     The new price oracle\\n    function setPriceOracle(address _priceOracle) external override nonZeroAddress(_priceOracle) onlyOwner {\\n        _setPriceOracle(_priceOracle);\\n    }\\n\\n    /// @notice                Changes cc burn router contract\\n    /// @dev                   Only current owner can call this\\n    /// @param _ccBurnRouter   The new cc burn router contract address\\n    function setCCBurnRouter(address _ccBurnRouter) external override nonZeroAddress(_ccBurnRouter) onlyOwner {\\n        _setCCBurnRouter(_ccBurnRouter);\\n    }\\n\\n    /// @notice                    Changes exchange connector contract address\\n    /// @dev                       Only owner can call this\\n    /// @param _exchangeConnector  The new exchange router contract address\\n    function setExchangeConnector(address _exchangeConnector) external override nonZeroAddress(_exchangeConnector) onlyOwner {\\n        _setExchangeConnector(_exchangeConnector);\\n    }\\n\\n    /// @notice                 Changes wrapped token contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new wrapped token contract address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                     Changes collateral ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _collateralRatio     The new collateral ratio\\n    function setCollateralRatio(uint _collateralRatio) external override onlyOwner {\\n        _setCollateralRatio(_collateralRatio);\\n    }\\n\\n    /// @notice                     Changes liquidation ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _liquidationRatio    The new liquidation ratio\\n    function setLiquidationRatio(uint _liquidationRatio) external override onlyOwner { \\n        _setLiquidationRatio(_liquidationRatio);\\n    }\\n\\n    /// @notice                                 Adds user to candidates list\\n    /// @dev                                    Users mint TeleBTC by sending BTC to locker's locking script\\n    ///                                         In case of liqudation of locker's bond, the burn TeleBTC is sent to\\n    ///                                         locker's rescue script\\n    ///                                         A user should lock enough TDT and TNT to become candidate\\n    /// @param _candidateLockingScript          Locking script of the candidate\\n    /// @param _lockedTDTAmount                 Bond amount of locker in TDT\\n    /// @param _lockedNativeTokenAmount         Bond amount of locker in native token of the target chain\\n    /// @param _lockerRescueType                Type of locker's rescue script (e.g. P2SH)\\n    /// @param _lockerRescueScript              Rescue script of the locker\\n    /// @return                                 True if candidate is added successfully\\n    function requestToBecomeLocker(\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        LockersLib.requestToBecomeLockerValidation(\\n                lockersMapping,\\n                libParams,\\n                lockerTargetAddress[_candidateLockingScript],\\n                _lockedTDTAmount,\\n                _lockedNativeTokenAmount\\n            );\\n        \\n        IERC20(libParams.teleportDAOToken).safeTransferFrom(_msgSender(), address(this), _lockedTDTAmount);\\n\\n        totalNumberOfCandidates = totalNumberOfCandidates + 1;\\n\\n        LockersLib.requestToBecomeLocker(\\n                lockersMapping,\\n                _candidateLockingScript,\\n                _lockedTDTAmount,\\n                _lockedNativeTokenAmount,\\n                _lockerRescueType,\\n                _lockerRescueScript\\n            );\\n\\n        emit RequestAddLocker(\\n            _msgSender(),\\n            _candidateLockingScript,\\n            _lockedTDTAmount,\\n            _lockedNativeTokenAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a candidate from candidates list\\n    /// @dev                          A user who is still a candidate can revoke his/her request\\n    /// @return                       True if candidate is removed successfully\\n    function revokeRequest() external override nonReentrant returns (bool) {\\n\\n        require(\\n            lockersMapping[_msgSender()].isCandidate,\\n            \\\"Lockers: no req\\\"\\n        );\\n\\n        // Loads locker's information\\n        DataTypes.locker memory lockerRequest = lockersMapping[_msgSender()];\\n\\n        // Removes candidate from lockersMapping\\n        delete lockersMapping[_msgSender()];\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).safeTransfer(_msgSender(), lockerRequest.TDTLockedAmount);\\n        Address.sendValue(payable(_msgSender()), lockerRequest.nativeTokenLockedAmount);\\n\\n        emit RevokeAddLockerRequest(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                               Approves a candidate request to become locker\\n    /// @dev                                  Only owner can call this\\n    ///                                       When a candidate becomes locker, isCandidate is set to false\\n    /// @param _lockerTargetAddress           Locker's target chain address\\n    /// @return                               True if candidate is added successfully\\n    function addLocker(\\n        address _lockerTargetAddress\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonReentrant onlyOwner returns (bool) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isCandidate,\\n            \\\"Lockers: no request\\\"\\n        );\\n\\n        // Updates locker's status\\n        lockersMapping[_lockerTargetAddress].isCandidate = false;\\n        lockersMapping[_lockerTargetAddress].isLocker = true;\\n\\n        // Updates number of candidates and lockers\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n        totalNumberOfLockers = totalNumberOfLockers + 1;\\n\\n        lockerTargetAddress[lockersMapping[_lockerTargetAddress].lockerLockingScript] = _lockerTargetAddress;\\n\\n        emit LockerAdded(\\n            _lockerTargetAddress,\\n            lockersMapping[_lockerTargetAddress].lockerLockingScript,\\n            lockersMapping[_lockerTargetAddress].TDTLockedAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                Requests to inactivate a locker\\n    /// @dev                   Deactivates the locker so that no one can mint by this locker:\\n    ///                        1. Locker can be removed after inactivation\\n    ///                        2. Locker can withdraw extra collateral after inactivation\\n    /// @return                True if deactivated successfully\\n    function requestInactivation() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            lockerInactivationTimestamp[_msgSender()] == 0,\\n            \\\"Lockers: locker has already requested\\\"\\n        );\\n\\n        lockerInactivationTimestamp[_msgSender()] = block.timestamp + INACTIVATION_DELAY;\\n\\n        emit RequestInactivateLocker(\\n            _msgSender(),\\n            lockerInactivationTimestamp[_msgSender()],\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            lockersMapping[_msgSender()].netMinted\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                Requests to activate a locker\\n    /// @dev                   Activates the locker so users can mint by this locker\\n    ///                        note: lockerInactivationTimestamp == 0 means that the locker is active\\n    /// @return                True if activated successfully\\n    function requestActivation() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        lockerInactivationTimestamp[_msgSender()] = 0;\\n\\n        emit ActivateLocker(\\n            _msgSender(),\\n            lockersMapping[_msgSender()].lockerLockingScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            lockersMapping[_msgSender()].netMinted\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Only locker can call this function\\n    /// @return                       True if locker is removed successfully\\n    function selfRemoveLocker() external override nonReentrant returns (bool) {\\n        _removeLocker(_msgSender());\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes lockers for not executing a cc burn req\\n    /// @dev                              Only cc burn router can call this\\n    ///                                   Locker is slashed since doesn't provide burn proof\\n    ///                                   before a cc burn request deadline.\\n    ///                                   User who made the cc burn request will receive the slashed bond\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _rewardAmount              Amount of TeleBTC that slasher receives\\n    /// @param _rewardRecipient           Address of slasher who receives reward\\n    /// @param _amount                    Amount of TeleBTC that is slashed from lockers\\n    /// @param _recipient                 Address of user who receives the slashed amount\\n    /// @return                           True if the locker is slashed successfully\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        uint equivalentNativeToken = LockersLib.slashIdleLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _rewardAmount,\\n            _amount\\n        );\\n\\n        // Transfers TNT to user\\n        payable(_recipient).transfer(equivalentNativeToken*_amount/(_amount + _rewardAmount));\\n        // Transfers TNT to slasher\\n        uint rewardAmountInNativeToken = equivalentNativeToken - (equivalentNativeToken*_amount/(_amount + _rewardAmount));\\n        payable(_rewardRecipient).transfer(rewardAmountInNativeToken);\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardAmountInNativeToken,\\n            _rewardRecipient,\\n            _amount,\\n            _recipient,\\n            equivalentNativeToken,\\n            block.timestamp,\\n            true\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                           Slashes lockers for moving BTC without a good reason\\n    /// @dev                              Only cc burn router can call this\\n    ///                                   Locker is slashed because he/she moved BTC from \\n    ///                                   locker's Bitcoin address without any corresponding burn req\\n    ///                                   The slashed bond will be sold with discount\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _rewardAmount              Value of slashed reward (in TeleBTC)\\n    /// @param _rewardRecipient           Address of slasher who receives reward\\n    /// @param _amount                    Value of slashed collateral (in TeleBTC)\\n    /// @return                           True if the locker is slashed successfully\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        require(\\n            _msgSender() == ccBurnRouter,\\n            \\\"Lockers: message sender is not ccBurn\\\"\\n        );\\n\\n        (uint rewardInNativeToken, uint neededNativeTokenForSlash) = LockersLib.slashThiefLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _rewardAmount,\\n            _amount\\n        );\\n\\n        payable(_rewardRecipient).transfer(rewardInNativeToken);\\n\\n        emit LockerSlashed(\\n            _lockerTargetAddress,\\n            rewardInNativeToken,\\n            _rewardRecipient,\\n            _amount,\\n            address(this),\\n            neededNativeTokenForSlash + rewardInNativeToken,\\n            block.timestamp,\\n            false\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Liquidates the locker whose collateral is unhealthy\\n    /// @dev                              Anyone can liquidate a locker whose health factor\\n    ///                                   is less than 10000 (100%) by providing a sufficient amount of teleBTC\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral (TNT) that someone intends to buy with discount\\n    /// @return                           True if liquidation was successful\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonZeroValue(_collateralAmount)\\n    nonReentrant whenNotPaused returns (bool) {\\n\\n        uint neededTeleBTC = LockersLib.liquidateLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _collateralAmount\\n        );\\n\\n        DataTypes.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n\\n        // Updates TNT bond of locker\\n        lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount = \\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount - _collateralAmount;\\n\\n        // transfer teleBTC from user\\n        IERC20(teleBTC).safeTransferFrom(msg.sender, address(this), neededTeleBTC);\\n\\n        // Burns TeleBTC for locker rescue script\\n        IERC20(teleBTC).approve(ccBurnRouter, neededTeleBTC);\\n        ICCBurnRouter(ccBurnRouter).ccBurn(\\n            neededTeleBTC,\\n            theLiquidatingLocker.lockerRescueScript,\\n            theLiquidatingLocker.lockerRescueType,\\n            theLiquidatingLocker.lockerLockingScript\\n        );\\n\\n        Address.sendValue(payable(_msgSender()), _collateralAmount);\\n\\n        emit LockerLiquidated(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededTeleBTC,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Sells lockers slashed collateral\\n    /// @dev                              Users buy the slashed collateral using TeleBTC with discount\\n    ///                                   The paid TeleBTC will be burnt to keep the system safe\\n    ///                                   If all the needed TeleBTC is collected and burnt,\\n    ///                                   the rest of slashed collateral is sent back to locker \\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _collateralAmount          Amount of collateral (TNT) that someone intends to buy with discount\\n    /// @return                           True if buying was successful\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external nonZeroAddress(_lockerTargetAddress)\\n        nonReentrant whenNotPaused override returns (bool) {\\n\\n        uint neededTeleBTC = LockersLib.buySlashedCollateralOfLocker(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams,\\n            _collateralAmount\\n        );\\n\\n        // Burns user's TeleBTC\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), neededTeleBTC);\\n        ITeleBTC(teleBTC).burn(neededTeleBTC);\\n        \\n        // Sends bought collateral to user\\n        Address.sendValue(payable(_msgSender()), _collateralAmount);\\n\\n        emit LockerSlashedCollateralSold(\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            _collateralAmount,\\n            neededTeleBTC,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                                 Increases TNT collateral of the locker\\n    /// @param _lockerTargetAddress             Locker's target chain address\\n    /// @param _addingNativeTokenAmount         Amount of added collateral\\n    /// @return                                 True if collateral is added successfully\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        require(\\n            msg.value == _addingNativeTokenAmount,\\n            \\\"Lockers: msg value\\\"\\n        );\\n\\n        LockersLib.addToCollateral(\\n            lockersMapping[_lockerTargetAddress],\\n            _addingNativeTokenAmount\\n        );\\n\\n        emit CollateralAdded(\\n            _lockerTargetAddress,\\n            _addingNativeTokenAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Decreases TNT collateral of the locker\\n    /// @param _removingNativeTokenAmount       Amount of removed collateral\\n    /// @return                                 True if collateral is removed successfully\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external override payable nonReentrant returns (bool) {\\n\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            !isLockerActive(_msgSender()),\\n            \\\"Lockers: still active\\\"\\n        );\\n\\n        uint priceOfOnUnitOfCollateral = LockersLib.priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        LockersLib.removeFromCollateral(\\n            lockersMapping[_msgSender()],\\n            libConstants,\\n            libParams,\\n            priceOfOnUnitOfCollateral,\\n            _removingNativeTokenAmount\\n        );\\n\\n        Address.sendValue(payable(_msgSender()), _removingNativeTokenAmount);\\n\\n        emit CollateralRemoved(\\n            _msgSender(),\\n            _removingNativeTokenAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Mint teleBTC for an account\\n    /// @dev                          Mint teleBTC for an account and the locker fee as well\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _receiver              Address of the receiver of the minted teleBTCs\\n    /// @param _amount                Amount of the teleBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of teleBTC minted for the receiver\\n    function mint(\\n        bytes calldata _lockerLockingScript,\\n        address _receiver,\\n        uint _amount\\n    ) external override nonZeroAddress(_receiver)\\n    nonZeroValue(_amount) nonReentrant whenNotPaused onlyMinter returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerLockingScript];\\n\\n        uint theLockerCapacity = getLockerCapacity(_lockerTargetAddress);\\n\\n        require(\\n            theLockerCapacity >= _amount,\\n            \\\"Lockers: insufficient capacity\\\"\\n        );\\n\\n        require(\\n            isLockerActive(_lockerTargetAddress),\\n            \\\"Lockers: not active\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted = \\n            lockersMapping[_lockerTargetAddress].netMinted + _amount;\\n\\n        // Mints locker fee\\n        uint lockerFee = _amount*lockerPercentageFee/MAX_LOCKER_FEE;\\n        if (lockerFee > 0) {\\n            ITeleBTC(teleBTC).mint(_lockerTargetAddress, lockerFee);\\n        }\\n\\n        // Mints tokens for receiver\\n        ITeleBTC(teleBTC).mint(_receiver, _amount - lockerFee);\\n\\n        emit MintByLocker(\\n            _lockerTargetAddress,\\n            _receiver,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return _amount - lockerFee;\\n    }\\n\\n    /// @notice                       Burn teleBTC of an account\\n    /// @dev                          Burn teleBTC and also get the locker's fee\\n    /// @param _lockerLockingScript   Locking script of a locker\\n    /// @param _amount                Amount of the teleBTC which is minted, including the locker's fee\\n    /// @return uint                  The amount of teleBTC burnt\\n    function burn(\\n        bytes calldata _lockerLockingScript,\\n        uint _amount\\n    ) external override nonZeroValue(_amount)\\n    nonReentrant whenNotPaused onlyBurner returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerLockingScript];\\n\\n        // Transfers teleBTC from user\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        uint lockerFee = _amount*lockerPercentageFee/MAX_LOCKER_FEE;\\n        uint remainedAmount = _amount - lockerFee;\\n        uint netMinted = lockersMapping[_lockerTargetAddress].netMinted;\\n\\n        require(\\n            netMinted >= remainedAmount,\\n            \\\"Lockers: insufficient funds\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted = netMinted - remainedAmount;\\n\\n        // Burns teleBTC and sends rest of it to locker\\n        ITeleBTC(teleBTC).burn(remainedAmount);\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, lockerFee);\\n\\n        emit BurnByLocker(\\n            _lockerTargetAddress,\\n            _amount,\\n            lockerFee,\\n            block.timestamp\\n        );\\n\\n        return remainedAmount;\\n    }\\n\\n    // *************** Public functions ***************\\n    \\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                             Returns the Locker status\\n    /// @dev                                We check a locker status in below cases:\\n    ///                                     1. Minting TeleBTC\\n    ///                                     2. Removing locker's collateral\\n    ///                                     3. Removing locker \\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             True if the locker is active\\n    function isLockerActive(\\n        address _lockerTargetAddress\\n    ) public override view nonZeroAddress(_lockerTargetAddress) returns (bool) {\\n        if (lockerInactivationTimestamp[_lockerTargetAddress] == 0) {\\n            return true;\\n        } else if (lockerInactivationTimestamp[_lockerTargetAddress] > block.timestamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice                             Get how much the locker can mint\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The net minted of the locker\\n    function getLockerCapacity(\\n        address _lockerTargetAddress\\n    ) public override view nonZeroAddress(_lockerTargetAddress) returns (uint) {\\n        uint _lockerCollateralInTeleBTC = LockersLib.lockerCollateralInTeleBTC(\\n            lockersMapping[_lockerTargetAddress],\\n            libConstants,\\n            libParams\\n        )*ONE_HUNDRED_PERCENT/collateralRatio;\\n\\n        if (_lockerCollateralInTeleBTC > lockersMapping[_lockerTargetAddress].netMinted) {\\n            return _lockerCollateralInTeleBTC - lockersMapping[_lockerTargetAddress].netMinted;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev         Returns the price of one native token (1*10^18) in teleBTC\\n     * @return uint The price of one unit of collateral token (native token in teleBTC)\\n     */\\n    function priceOfOneUnitOfCollateralInBTC() public override view returns (uint) {\\n\\n        return LockersLib.priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n    }\\n\\n    /// @notice                Check if an account is minter    \\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isMinter(address account) public override view nonZeroAddress(account) returns (bool) {\\n        return minters[account];\\n    }\\n\\n    /// @notice                Check if an account is burner    \\n    /// @param  account        The account which intended to be checked\\n    /// @return bool\\n    function isBurner(address account) public override view nonZeroAddress(account) returns (bool) {\\n        return burners[account];\\n    }\\n\\n    // *************** Private functions ***************\\n\\n    /// @notice                       Removes a locker from lockers list\\n    /// @dev                          Checks that net minted TeleBTC of locker is zero\\n    ///                               Sends back available bond of locker (in TDT and TNT)\\n    /// @param _lockerTargetAddress   Target address of locker to be removed\\n    function _removeLocker(address _lockerTargetAddress) private {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        require(\\n            !isLockerActive(_lockerTargetAddress),\\n            \\\"Lockers: still active\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].netMinted == 0,\\n            \\\"Lockers: 0 net minted\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].slashingTeleBTCAmount == 0,\\n            \\\"Lockers: 0 slashing TBTC\\\"\\n        );\\n\\n        DataTypes.locker memory _removingLocker = lockersMapping[_lockerTargetAddress];\\n\\n        // Removes locker from lockersMapping\\n\\n        delete lockerTargetAddress[lockersMapping[_lockerTargetAddress].lockerLockingScript];\\n        delete lockersMapping[_lockerTargetAddress];\\n        totalNumberOfLockers = totalNumberOfLockers - 1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).safeTransfer(_lockerTargetAddress, _removingLocker.TDTLockedAmount);\\n        Address.sendValue(payable(_lockerTargetAddress), _removingLocker.nativeTokenLockedAmount);\\n\\n        emit LockerRemoved(\\n            _lockerTargetAddress,\\n            _removingLocker.lockerLockingScript,\\n            _removingLocker.TDTLockedAmount,\\n            _removingLocker.nativeTokenLockedAmount\\n        );\\n\\n    }\\n\\n    /// @notice                     Internal setter for teleportDAO token of lockers\\n    /// @param _tdtTokenAddress     The new teleportDAO token address\\n    function _setTeleportDAOToken(address _tdtTokenAddress) private nonZeroAddress(_tdtTokenAddress) {\\n        emit NewTeleportDAOToken(TeleportDAOToken, _tdtTokenAddress);\\n        TeleportDAOToken = _tdtTokenAddress;\\n        libParams.teleportDAOToken = TeleportDAOToken;\\n    }\\n\\n    /// @notice                       Internal setter for percentage fee of locker\\n    /// @param _lockerPercentageFee   The new locker percentage fee\\n    function _setLockerPercentageFee(uint _lockerPercentageFee) private {\\n        require(_lockerPercentageFee <= MAX_LOCKER_FEE, \\\"Lockers: invalid locker fee\\\");\\n        emit NewLockerPercentageFee(lockerPercentageFee, _lockerPercentageFee);\\n        lockerPercentageFee = _lockerPercentageFee;\\n        libParams.lockerPercentageFee = lockerPercentageFee;\\n    }\\n\\n    function _setPriceWithDiscountRatio(uint _priceWithDiscountRatio) private {\\n        require(\\n            _priceWithDiscountRatio <= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: less than 100%\\\"\\n        );\\n        emit NewPriceWithDiscountRatio(priceWithDiscountRatio, _priceWithDiscountRatio);\\n        \\n        priceWithDiscountRatio= _priceWithDiscountRatio;\\n        libParams.priceWithDiscountRatio = priceWithDiscountRatio;\\n    }\\n\\n    /// @notice         Internal setter for the required bond amount to become locker\\n    /// @param _minRequiredTDTLockedAmount   The new required bond amount\\n    function _setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) private {\\n        emit NewMinRequiredTDTLockedAmount(minRequiredTDTLockedAmount, _minRequiredTDTLockedAmount);\\n        minRequiredTDTLockedAmount = _minRequiredTDTLockedAmount;\\n        libParams.minRequiredTDTLockedAmount = minRequiredTDTLockedAmount;\\n    }\\n\\n    /// @notice         Internal setter for the required bond amount to become locker\\n    /// @param _minRequiredTNTLockedAmount   The new required bond amount\\n    function _setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) private {\\n        require(\\n            _minRequiredTNTLockedAmount != 0,\\n            \\\"Lockers: amount is zero\\\"\\n        );\\n        emit NewMinRequiredTNTLockedAmount(minRequiredTNTLockedAmount, _minRequiredTNTLockedAmount);\\n        minRequiredTNTLockedAmount = _minRequiredTNTLockedAmount;\\n        libParams.minRequiredTNTLockedAmount = minRequiredTNTLockedAmount;\\n    }\\n\\n    /// @notice                 Internal setter for the price oracle\\n    /// @param _priceOracle     The new price oracle\\n    function _setPriceOracle(address _priceOracle) private nonZeroAddress(_priceOracle) {\\n        emit NewPriceOracle(priceOracle, _priceOracle);\\n        priceOracle = _priceOracle;\\n        libParams.priceOracle = priceOracle;\\n    }\\n\\n    /// @notice                Internal setter for cc burn router contract\\n    /// @param _ccBurnRouter   The new cc burn router contract address\\n    function _setCCBurnRouter(address _ccBurnRouter) private nonZeroAddress(_ccBurnRouter) {\\n        emit NewCCBurnRouter(ccBurnRouter, _ccBurnRouter);\\n        emit BurnerRemoved(ccBurnRouter);\\n        burners[ccBurnRouter] = false;\\n        ccBurnRouter = _ccBurnRouter;\\n        libParams.ccBurnRouter = ccBurnRouter;\\n        emit BurnerAdded(ccBurnRouter);\\n        burners[ccBurnRouter] = true;\\n    }\\n\\n    /// @notice                 Internal setter for exchange router contract address and updates wrapped avax addresses\\n    /// @param _exchangeConnector  The new exchange router contract address\\n    function _setExchangeConnector(address _exchangeConnector) private nonZeroAddress(_exchangeConnector) {\\n        emit NewExchangeConnector(exchangeConnector, _exchangeConnector);\\n        exchangeConnector = _exchangeConnector;\\n        libParams.exchangeConnector = exchangeConnector;\\n    }\\n\\n    /// @notice                 Internal setter for wrapped token contract address\\n    /// @param _teleBTC         The new wrapped token contract address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n        libParams.teleBTC = teleBTC;\\n    }\\n\\n    /// @notice                     Internal setter for collateral ratio\\n    /// @param _collateralRatio     The new collateral ratio\\n    function _setCollateralRatio(uint _collateralRatio) private {\\n        require(_collateralRatio > liquidationRatio, \\\"Lockers: must CR > LR\\\");\\n        emit NewCollateralRatio(collateralRatio, _collateralRatio);\\n        collateralRatio = _collateralRatio;\\n        libParams.collateralRatio = collateralRatio;\\n    }\\n\\n    /// @notice                     Internal setter for liquidation ratio\\n    /// @param _liquidationRatio    The new liquidation ratio\\n    function _setLiquidationRatio(uint _liquidationRatio) private {\\n        require(\\n            _liquidationRatio >= ONE_HUNDRED_PERCENT,\\n            \\\"Lockers: problem in CR and LR\\\"\\n        );\\n        require(\\n            collateralRatio > _liquidationRatio,\\n            \\\"Lockers: must CR > LR\\\"\\n        );\\n        emit NewLiquidationRatio(liquidationRatio, _liquidationRatio);\\n        liquidationRatio = _liquidationRatio;\\n        libParams.liquidationRatio = liquidationRatio;\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/lockers/LockersProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract LockersProxy is TransparentUpgradeableProxy {\\n\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n}\"\n    },\n    \"contracts/lockers/LockersStorageStructure.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ILockersStorage.sol\\\";\\n\\ncontract LockersStorageStructure is ILockersStorage {\\n\\n    // Constants\\n    uint public constant ONE_HUNDRED_PERCENT = 10000;\\n    uint public constant HEALTH_FACTOR = 10000;\\n    uint public constant UPPER_HEALTH_FACTOR = 12500;\\n    uint public constant MAX_LOCKER_FEE = 10000;\\n    uint public constant INACTIVATION_DELAY = 345600; // 4 days (it should be greater than MAX_FINALIZATION_PARAMETER)\\n    uint public constant NATIVE_TOKEN_DECIMAL = 18;\\n    address public constant NATIVE_TOKEN = address(1);\\n\\n    // Public variables\\n    address public override TeleportDAOToken;\\n    address public override teleBTC;\\n    address public override ccBurnRouter;\\n    address public override exchangeConnector;\\n    address public override priceOracle;\\n\\n    uint public override minRequiredTDTLockedAmount;\\n    uint public override minRequiredTNTLockedAmount;\\n    uint public override lockerPercentageFee;\\n    uint public override collateralRatio;\\n    uint public override liquidationRatio;\\n    uint public override priceWithDiscountRatio;\\n    uint public override totalNumberOfCandidates;\\n    uint public override totalNumberOfLockers;\\n\\n    mapping(address => DataTypes.locker) public lockersMapping; // locker's target address -> locker structure\\n    mapping(address => uint) public lockerInactivationTimestamp;\\n    mapping(address => bool) public lockerLeavingAcceptance;\\n    mapping(bytes => address) public lockerTargetAddress; // locker's locking script -> locker's target address\\n    mapping(address => bool) minters;\\n    mapping(address => bool) burners;\\n\\n    DataTypes.lockersLibConstants public libConstants;\\n    DataTypes.lockersLibParam public libParams;\\n\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/IPriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address indexed exchangeRouter, address indexed exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address indexed exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _token               Address of the token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address indexed _token, address indexed _priceProxyAddress);\\n\\n    /// @notice                     Emits when changes made to acceptable delay\\n\\tevent NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    /// @notice                     Emits when changes made to oracle native token\\n\\tevent NewOracleNativeToken(address indexed oldOracleNativeToken, address indexed newOracleNativeToken);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives USD price proxy address for a token\\n    /// @param _token          Address of the token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _token) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmountByAverage(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _token, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\"\n    },\n    \"contracts/oracle/PriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n\\ncontract PriceOracle is IPriceOracle, Ownable {\\n\\n    using SafeCast for uint;\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"PriceOracle: zero address\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping (address => address) public override ChainlinkPriceProxy; // Given two token addresses returns related Chainlink price proxy\\n    mapping(address => address) public override exchangeConnector; // Mapping from exchange router to exchange connector\\n    address[] public override exchangeRoutersList; // List of available exchange routers\\n    uint public override acceptableDelay;\\n    address public constant NATIVE_TOKEN = address(1); // ONE_ADDRESS is used for getting price of blockchain native token \\n    address public override oracleNativeToken;\\n\\n    /// @notice                         This contract is used to get relative price of two assets from Chainlink and available exchanges \\n    /// @param _acceptableDelay         Maximum acceptable delay for data given from Chainlink\\n    /// @param _oracleNativeToken       The address of the chainlink oracle for the native token\\n    constructor(uint _acceptableDelay,address _oracleNativeToken) {\\n        _setAcceptableDelay(_acceptableDelay);\\n        _setOracleNativeToken(_oracleNativeToken);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                 Getter for the length of exchange router list\\n    function getExchangeRoutersListLength() public view override returns (uint) {\\n        return exchangeRoutersList.length;\\n    }\\n\\n    /// @notice                         Finds amount of output token that has same value as the input amount of the input token\\n    /// @dev                            First we try to get the output amount from Chain Link\\n    ///                                 Only if the price is not available or out-of-date we will \\n    ///                                 reach to exchange routers\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return                         Amount of the output token\\n    function equivalentOutputAmountByAverage(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint) {\\n        // Gets output amount from oracle\\n        (bool result, uint outputAmount, uint timestamp) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n\\n        // Checks timestamp of the oracle result\\n        if (result == true && _abs(timestamp.toInt256() - block.timestamp.toInt256()) <= acceptableDelay) {\\n            return outputAmount;\\n        } else {\\n            uint _totalAmount;\\n            uint _totalNumber;\\n\\n            // If Chainlink price is available but out-of-date, we still use it\\n            if (result == true) {\\n                _totalAmount = outputAmount;\\n                _totalNumber = 1;\\n            }\\n\\n            // Gets output amounts from exchange routers\\n            // note: we assume that the decimal of exchange returned result is _outputDecimals.\\n            for (uint i = 0; i < getExchangeRoutersListLength(); i++) {\\n                (result, outputAmount) = _equivalentOutputAmountFromExchange(\\n                    exchangeRoutersList[i],\\n                    _inputAmount,\\n                    _inputToken,\\n                    _outputToken\\n                );\\n\\n                if (result == true) {\\n                    _totalNumber = _totalNumber + 1;\\n                    _totalAmount = _totalAmount + outputAmount;\\n                }\\n            }\\n\\n            require(_totalNumber > 0, \\\"PriceOracle: no price feed is available\\\");\\n\\n            // Returns average of results from different sources\\n            return _totalAmount/_totalNumber;\\n        }\\n    }\\n\\n    /// @notice                         Finds amount of output token that has equal value\\n    ///                                 as the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _outputAmount           Amount of the output token\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint _outputAmount) {\\n        bool result;\\n        (result, _outputAmount, /*timestamp*/) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: oracle not exist or up to date\\\");\\n    }\\n\\n    /// @notice                         Finds amount of output token that has equal value\\n    ///                                 as the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _outputAmount           Amount of the output token\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint _outputAmount) {\\n        bool result;\\n        (result, _outputAmount, /*timestamp*/) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: oracle not exist or up to date\\\");\\n    }\\n\\n    /// @notice                         Finds amount of output token that has same value \\n    ///                                 as the input amount of the input token\\n    /// @dev                            Input amount should have the same decimal as input token\\n    ///                                 Output amount has the same decimal as output token\\n    /// @param _exchangeRouter          Address of the exchange router we are reading the price from\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return                         Amount of the output token\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint) {\\n        (bool result, uint outputAmount) = _equivalentOutputAmountFromExchange(\\n            _exchangeRouter,\\n            _inputAmount,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: Pair does not exist on exchange\\\");\\n        return outputAmount;\\n    }\\n\\n    /// @notice                    Adds an exchange connector\\n    /// @dev                       Only owner can call this\\n    /// @param _exchangeRouter     Exchange router contract address\\n    /// @param _exchangeConnector  New exchange connector contract address\\n    function addExchangeConnector(\\n        address _exchangeRouter, \\n        address _exchangeConnector\\n    ) external nonZeroAddress(_exchangeRouter) nonZeroAddress(_exchangeConnector) override onlyOwner {\\n        require(exchangeConnector[_exchangeRouter] == address(0), \\\"PriceOracle: exchange router already exists\\\");\\n        exchangeRoutersList.push(_exchangeRouter);\\n        exchangeConnector[_exchangeRouter] = _exchangeConnector;\\n        emit ExchangeConnectorAdded(_exchangeRouter, _exchangeConnector);\\n    }\\n\\n    /// @notice                       Removes an exchange connector\\n    /// @dev                          Only owner can call this\\n    /// @param _exchangeRouterIndex   The exchange router index in the list\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external override onlyOwner {\\n        require(_exchangeRouterIndex < exchangeRoutersList.length, \\\"PriceOracle: Index is out of bound\\\");\\n        address exchangeRouterAddress = exchangeRoutersList[_exchangeRouterIndex];\\n        _removeElementFromExchangeRoutersList(_exchangeRouterIndex);\\n        exchangeConnector[exchangeRouterAddress] = address(0);\\n        emit ExchangeConnectorRemoved(exchangeRouterAddress);\\n    }\\n\\n    /// @notice                     Sets a USD price proxy for a token\\n    /// @dev                        Only owner can call this\\n    ///                             This price proxy gives exchange rate of _token/USD\\n    ///                             Setting price proxy address to zero means that we remove it\\n    /// @param _token               Address of the token\\n    /// @param _priceProxyAddress   The address of the proxy price\\n    function setPriceProxy(\\n        address _token, \\n        address _priceProxyAddress\\n    ) external nonZeroAddress(_token) override onlyOwner {\\n        ChainlinkPriceProxy[_token] = _priceProxyAddress;\\n        emit SetPriceProxy(_token, _priceProxyAddress);\\n    }\\n\\n    /// @notice                     Sets acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while, \\n    ///                             we will get data from exchange routers\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function setAcceptableDelay(uint _acceptableDelay) external override onlyOwner {\\n        _setAcceptableDelay(_acceptableDelay);\\n    }\\n\\n    /// @notice                     Sets oracle native token address\\n    function setOracleNativeToken(address _oracleNativeToken) external override onlyOwner {\\n       _setOracleNativeToken(_oracleNativeToken);\\n    }\\n\\n    /// @notice                     Internal setter for acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while, \\n    ///                             we will get data from exchange routers\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function _setAcceptableDelay(uint _acceptableDelay) private {\\n        emit NewAcceptableDelay(acceptableDelay, _acceptableDelay);\\n        require(\\n            _acceptableDelay > 0,\\n            \\\"PriceOracle: zero amount\\\"\\n        );\\n        acceptableDelay = _acceptableDelay;\\n    }\\n\\n    /// @notice                     Internal setter for oracle native token address\\n    function _setOracleNativeToken(address _oracleNativeToken) private nonZeroAddress(_oracleNativeToken) {\\n        emit NewOracleNativeToken(oracleNativeToken, _oracleNativeToken);\\n        oracleNativeToken = _oracleNativeToken;\\n    }\\n\\n    /// @notice                         Finds amount of output token that has same value \\n    ///                                 as the input amount of the input token\\n    /// @param _exchangeRouter          Address of the exchange we are reading the price from\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    function _equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) private view returns (bool _result, uint _outputAmount) {\\n        if (_inputToken == NATIVE_TOKEN) {\\n            // note: different exchanges may use different wrapped native token versions\\n            address wrappedNativeToken = IExchangeConnector(exchangeConnector[_exchangeRouter]).wrappedNativeToken();\\n\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                wrappedNativeToken,\\n                _outputToken\\n            );\\n        } else if (_outputToken == NATIVE_TOKEN) {\\n            // note: different exchanges may use different wrapped native token versions\\n            address wrappedNativeToken = IExchangeConnector(exchangeConnector[_exchangeRouter]).wrappedNativeToken();\\n\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                _inputToken,\\n                wrappedNativeToken\\n            );\\n        } else {\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                _inputToken,\\n                _outputToken\\n            );\\n        }\\n\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal as the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    /// @return _timestamp              Timestamp of the result\\n    function _equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) private view returns (bool, uint _outputAmount, uint _timestamp) {\\n        uint decimals0;\\n        uint decimals1;\\n        int price0;\\n        int price1;\\n\\n        if (_inputToken == NATIVE_TOKEN) {\\n            _inputToken = oracleNativeToken;\\n        }\\n\\n        if (_outputToken == NATIVE_TOKEN) {\\n            _outputToken = oracleNativeToken;\\n        }\\n\\n        if (ChainlinkPriceProxy[_inputToken] != address(0) && ChainlinkPriceProxy[_outputToken] != address(0)) {\\n            uint[2] memory _timestamps;\\n\\n            // Gets price of _inputToken/USD\\n            (\\n            /*uint80 roundID*/,\\n            price0,\\n            /*uint startedAt*/,\\n            _timestamps[0],\\n            /*uint80 answeredInRound*/\\n            ) = AggregatorV3Interface(ChainlinkPriceProxy[_inputToken]).latestRoundData();\\n\\n            require(price0 != 0, \\\"PriceOracle: zero price for input token\\\");\\n\\n            // Gets number of decimals\\n            decimals0 = AggregatorV3Interface(ChainlinkPriceProxy[_inputToken]).decimals();\\n\\n\\n            // Gets price of _outputToken/USD\\n            (\\n            /*uint80 roundID*/,\\n            price1,\\n            /*uint startedAt*/,\\n            _timestamps[1],\\n            /*uint80 answeredInRound*/\\n            ) = AggregatorV3Interface(ChainlinkPriceProxy[_outputToken]).latestRoundData();\\n\\n            require(price1 != 0, \\\"PriceOracle: zero price for output token\\\");\\n\\n            // Gets number of decimals\\n            decimals1 = AggregatorV3Interface(ChainlinkPriceProxy[_outputToken]).decimals();\\n\\n            // uint price = (uint(price0) * 10**(decimals1)) / (uint(price1) * 10**(decimals0));\\n\\n            // // note: to make inside of power parentheses greater than zero, we add them with one\\n            // _outputAmount = price*_inputAmount*(10**(_outputDecimals + 1))/(10**(_inputDecimals + 1));\\n\\n            // convert the above calculation to the below one to eliminate precision loss\\n            _outputAmount = (uint(price0) * 10**(decimals1))*_inputAmount*(10**(_outputDecimals + 1));\\n            _outputAmount = _outputAmount/((10**(_inputDecimals + 1))*(uint(price1) * 10**(decimals0)));\\n\\n            if (_abs(block.timestamp.toInt256() - _timestamps[0].toInt256()) > acceptableDelay) {\\n                return (false, _outputAmount, _timestamps[0]);\\n            }\\n\\n            if (_abs(block.timestamp.toInt256() - _timestamps[1].toInt256()) > acceptableDelay) {\\n                return (false, _outputAmount, _timestamps[1]);\\n            }\\n\\n            _timestamp = _timestamps[0] > _timestamps[1] ? _timestamps[1] : _timestamps[0];\\n\\n            return (true, _outputAmount, _timestamp);\\n            \\n        } else {\\n            return (false, 0, 0);\\n        }\\n    }\\n\\n    /// @notice             Removes an element of excahngeRouterList\\n    /// @dev                Deletes and shifts the array\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElementFromExchangeRoutersList(uint _index) private {\\n        exchangeRoutersList[_index] = exchangeRoutersList[exchangeRoutersList.length - 1];\\n        exchangeRoutersList.pop();\\n    }\\n\\n    /// @notice             Returns absolute value\\n    function _abs(int _value) private pure returns (uint) {\\n        return _value >= 0 ? uint(_value) : uint(-_value);\\n    }\\n\\n}\"\n    },\n    \"contracts/pools/CollateralPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ICollateralPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract CollateralPool is ICollateralPool, ERC20, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CollateralPool: zero address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"CollateralPool: zero value\\\");\\n        _;\\n    }\\n    \\n    // Public variables\\n    address public override collateralToken;\\n    uint public override collateralizationRatio; // Multiplied by 100\\n\\n    // private vars\\n    uint8 private decimals_;\\n    \\n    /// @notice                          This contract is a vault for collateral token\\n    /// @dev                             Users deposit collateral to use TeleportDAO instant feature\\n    ///                                  Collateral pool factory creates collateral pool contract\\n    /// @param _name                     Name of collateral pool\\n    /// @param _symbol                   Symbol of collateral pool\\n    /// @param _collateralToken          Address of underlying collateral token\\n    /// @param _collateralizationRatio   Over-collateralization ratio of collateral token (e.g. 120 means 1.2) \\n    /// @param _decimals                  decimal of collateral pool token (same as the collateral token)\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _collateralToken,\\n        uint _collateralizationRatio,\\n        uint8 _decimals\\n    ) ERC20(_name, _symbol) {\\n        collateralToken = _collateralToken;\\n        _setCollateralizationRatio(_collateralizationRatio);\\n        decimals_ = _decimals;\\n    }\\n\\n    function decimals() override public view returns (uint8) {\\n        return decimals_;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @return                 Amount of total added collateral\\n    function totalAddedCollateral() public view override returns (uint) {\\n        return IERC20(collateralToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice                          Changes the collateralization ratio\\n    /// @dev                             Only owner can call this\\n    /// @param _collateralizationRatio   The new collateralization ratio\\n    function setCollateralizationRatio(\\n        uint _collateralizationRatio\\n    ) external override onlyOwner {\\n        _setCollateralizationRatio(_collateralizationRatio);\\n    }\\n\\n    /// @notice                          Internal setter for collateralization ratio\\n    /// @param _collateralizationRatio   The new collateralization ratio\\n    function _setCollateralizationRatio(\\n        uint _collateralizationRatio\\n    ) private nonZeroValue(_collateralizationRatio)  {\\n        emit NewCollateralizationRatio(collateralizationRatio, _collateralizationRatio);\\n        require(\\n            _collateralizationRatio >= 10000,\\n            \\\"CollateralPool: CR is low\\\"\\n        );\\n        collateralizationRatio = _collateralizationRatio;\\n    }\\n\\n    /// @notice                             Converts collateral pool token to collateral token \\n    /// @param _collateralPoolTokenAmount   Amount of collateral pool token\\n    /// @return                             Amount of collateral token\\n    function equivalentCollateralToken(uint _collateralPoolTokenAmount) external view override returns (uint) {\\n        require(totalSupply() > 0, \\\"CollateralPool: collateral pool is empty\\\");\\n        require(totalSupply() >= _collateralPoolTokenAmount, \\\"CollateralPool: liquidity is not sufficient\\\");\\n        return _collateralPoolTokenAmount*totalAddedCollateral()/totalSupply();\\n    }\\n\\n    /// @notice                         Converts collateral token to collateral pool token \\n    /// @param _collateralTokenAmount   Amount of collateral token\\n    /// @return                         Amount of collateral pool token\\n    function equivalentCollateralPoolToken(uint _collateralTokenAmount) external view override returns (uint) {\\n        require(totalAddedCollateral() > 0, \\\"CollateralPool: collateral pool is empty\\\");\\n        require(totalAddedCollateral() >= _collateralTokenAmount, \\\"CollateralPool: liquidity is not sufficient\\\");\\n        return _collateralTokenAmount*totalSupply()/totalAddedCollateral();\\n    }\\n\\n    /// @notice                 Adds collateral to collateral pool \\n    /// @dev                    Mints collateral pool token for user\\n    /// @param _user            Address of user whose collateral balance is increased\\n    /// @param _amount          Amount of added collateral\\n    /// @return                 True if collateral is added successfully\\n    function addCollateral(\\n        address _user, \\n        uint _amount\\n    ) external nonZeroAddress(_user) nonZeroValue(_amount) nonReentrant override returns (bool) {\\n        // Calculates collateral pool token amount\\n        uint collateralPoolTokenAmount;\\n        if (totalSupply() == 0) {\\n            collateralPoolTokenAmount = _amount;\\n        } else {\\n            collateralPoolTokenAmount = _amount*totalSupply()/totalAddedCollateral();\\n        }\\n\\n        // Transfers collateral tokens from message sender to contract\\n        IERC20(collateralToken).safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n        // Mints collateral pool token for _user\\n        _mint(_user, collateralPoolTokenAmount);\\n        emit AddCollateral(_msgSender(), _user, _amount, collateralPoolTokenAmount);\\n\\n        return true;\\n    }\\n\\n    /// @notice                               Removes collateral from collateral pool\\n    /// @dev                                  Burns collateral pool token of message sender\\n    /// @param _collateralPoolTokenAmount     Amount of burnt collateral pool token\\n    /// @return                               True if collateral is removed successfully\\n    function removeCollateral(\\n        uint _collateralPoolTokenAmount\\n    ) external nonZeroValue(_collateralPoolTokenAmount) nonReentrant override returns (bool) {\\n        // Checks basic requirements\\n        require(\\n            balanceOf(_msgSender()) >= _collateralPoolTokenAmount, \\n            \\\"CollateralPool: balance is not enough\\\"\\n        );\\n\\n        // Finds equivalent collateral token amount\\n        uint collateralTokenAmount = _collateralPoolTokenAmount*totalAddedCollateral()/totalSupply();\\n\\n        // Burns collateral pool token of user\\n        _burn(_msgSender(), _collateralPoolTokenAmount);\\n\\n        // Sends collateral token to user\\n        IERC20(collateralToken).safeTransfer(_msgSender(), collateralTokenAmount);\\n        emit RemoveCollateral(_msgSender(), _msgSender(), collateralTokenAmount, _collateralPoolTokenAmount);\\n\\n        return true;\\n    }\\n\\n}\"\n    },\n    \"contracts/pools/CollateralPoolFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ICollateralPoolFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./CollateralPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CollateralPoolFactory is ICollateralPoolFactory, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CollateralPoolFactory: zero address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"CollateralPoolFactory: zero value\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping(address => address) public override getCollateralPoolByToken; // collateral token => collateral pool\\n    address[] public override allCollateralPools; // List of all collateral pools\\n\\n    /// @notice         This contract creates collateral pool for tokens\\n    constructor() {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @return         Total number of collateral pools\\n    function allCollateralPoolsLength() public override view returns (uint) {\\n        return allCollateralPools.length;\\n    }\\n\\n    /// @notice                   Checks whether the token is accepted as collateral or not\\n    /// @param _collateralToken   Address of collateral token\\n    /// @return                   True if the corresponding collateral pool exists\\n    function isCollateral(address _collateralToken) external override view returns (bool) {\\n        return getCollateralPoolByToken[_collateralToken] == address(0) ? false : true;\\n    }\\n\\n    /// @notice                          Creates a new collateral pool\\n    /// @dev                             Only owner can call this\\n    /// @param _collateralToken          Address of underlying collateral token\\n    /// @param _collateralizationRatio   The ratio of over collateralization\\n    /// @return                          Address of newly created collateral pool\\n    function createCollateralPool(\\n        address _collateralToken, \\n        uint _collateralizationRatio\\n    ) external nonZeroAddress(_collateralToken) nonZeroValue(_collateralizationRatio) \\n        nonReentrant onlyOwner override returns (address) {\\n        // Checks that collateral pool for the token doesn't exist\\n        require(\\n            getCollateralPoolByToken[_collateralToken] == address(0), \\n            \\\"CollateralPoolFactory: collateral pool already exists\\\"\\n        );\\n\\n        require(\\n            _collateralizationRatio >= 10000, \\n            \\\"CollateralPoolFactory: low amount\\\"\\n        );\\n        \\n        // Creates collateral pool\\n        CollateralPool pool;\\n        string memory name;\\n        string memory symbol;\\n        uint8 decimals;\\n\\n        name = string(abi.encodePacked(ERC20(_collateralToken).name(), \\\"-\\\", \\\"Collateral-Pool\\\"));\\n        symbol = string(abi.encodePacked(ERC20(_collateralToken).symbol(), \\\"CP\\\"));\\n        decimals = ERC20(_collateralToken).decimals();\\n        pool = new CollateralPool(name, symbol, _collateralToken, _collateralizationRatio, decimals);\\n\\n        // Transfers ownership of collateral pool to owner of this contract\\n        CollateralPool(address(pool)).transferOwnership(_msgSender());\\n\\n        // Stores collateral pool address\\n        getCollateralPoolByToken[_collateralToken] = address(pool);\\n        allCollateralPools.push(address(pool));\\n        emit CreateCollateralPool(name, _collateralToken, _collateralizationRatio, address(pool));\\n\\n        return address(pool);\\n    }\\n\\n    /// @notice                          Removes an existing collateral pool\\n    /// @dev                             Only owner can call this\\n    /// @param _collateralToken          Address of underlying collateral token\\n    /// @param _index                    Index of collateral pool in allCollateralPools\\n    /// @return                          True if collateral pool is removed successfully\\n    function removeCollateralPool(\\n        address _collateralToken, \\n        uint _index\\n    ) external nonReentrant nonZeroAddress(_collateralToken) onlyOwner override returns (bool) {\\n        // Checks that collateral pool exists\\n        address collateralPool = getCollateralPoolByToken[_collateralToken];\\n        require(collateralPool != address(0), \\\"CollateralPoolFactory: collateral pool does not exist\\\");\\n\\n        // Removes collateral pool address\\n        require(_index < allCollateralPoolsLength(), \\\"CollateralPoolFactory: index is out of range\\\");\\n        require(collateralPool == allCollateralPools[_index], \\\"CollateralPoolFactory: index is not correct\\\");\\n        getCollateralPoolByToken[_collateralToken] = address(0);\\n        _removeElement(_index);\\n        emit RemoveCollateralPool(_collateralToken, collateralPool);\\n\\n        return true;\\n    }\\n\\n    /// @notice             Removes an element of allCollateralPools\\n    /// @dev                Deletes and shifts the array  \\n    /// @param _index       Index of the element that is deleted\\n    function _removeElement(uint _index) private {\\n        allCollateralPools[_index] = allCollateralPools[allCollateralPoolsLength() - 1];\\n        allCollateralPools.pop();\\n    }\\n}\"\n    },\n    \"contracts/pools/InstantPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IInstantPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract InstantPool is IInstantPool, ERC20, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"InstantPool: zero address\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_INSTANT_PERCENTAGE_FEE = 10000;\\n\\n    address public override teleBTC;\\n    uint public override instantPercentageFee; // a number between 0-10000 to show %0.01\\n    uint public override totalAddedTeleBTC;\\n    address public override instantRouter;\\n\\n    constructor(\\n        address _teleBTC,\\n        address _instantRouter,\\n        uint _instantPercentageFee,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        _setTeleBTC(_teleBTC);\\n        _setInstantRouter(_instantRouter);\\n        _setInstantPercentageFee(_instantPercentageFee);\\n\\n        emit CreatedInstantPool(_teleBTC);\\n    }\\n\\n    function decimals() override public view returns (uint8) {\\n        return 8;\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                               Gives available teleBTC amount\\n    /// @return                               Available amount of teleBTC that can be borrowed\\n    function availableTeleBTC() override public view returns (uint) {\\n        return IERC20(teleBTC).balanceOf(address(this));\\n    }\\n\\n    /// @notice                               Gives the unpaid loans amount\\n    /// @return                               Amount of teleBTC that has been borrowed but has not been paid back\\n    function totalUnpaidLoan() override external view returns (uint) {\\n        uint _availableTeleBTC = availableTeleBTC();\\n        return totalAddedTeleBTC >= _availableTeleBTC ? totalAddedTeleBTC - _availableTeleBTC : 0;\\n    }\\n\\n    /// @notice                 Changes instant router contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _instantRouter   The new instant router contract address\\n    function setInstantRouter(address _instantRouter) external override onlyOwner {\\n        _setInstantRouter(_instantRouter);\\n    }\\n\\n    /// @notice                        Changes instant loan fee\\n    /// @dev                           Only current owner can call this\\n    /// @param _instantPercentageFee   The new percentage fee\\n    function setInstantPercentageFee(uint _instantPercentageFee) external override onlyOwner {\\n        _setInstantPercentageFee(_instantPercentageFee);\\n    }\\n\\n    /// @notice                 Changes teleBTC contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                 Internal setter for instant router contract address\\n    /// @param _instantRouter   The new instant router contract address\\n    function _setInstantRouter(address _instantRouter) nonZeroAddress(_instantRouter) private {\\n        emit NewInstantRouter(instantRouter, _instantRouter);\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                         Internal setter for instant loan fee\\n    /// @param _instantPercentageFee    The new percentage fee\\n    function _setInstantPercentageFee(uint _instantPercentageFee) private {\\n        emit NewInstantPercentageFee(instantPercentageFee, _instantPercentageFee);\\n        require(\\n            _instantPercentageFee <= MAX_INSTANT_PERCENTAGE_FEE,\\n            \\\"InstantPool: amount more than max\\\"\\n        );\\n        instantPercentageFee = _instantPercentageFee;\\n    }\\n\\n    /// @notice                 Internal setter for teleBTC contract address\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function _setTeleBTC(address _teleBTC) nonZeroAddress(_teleBTC) private {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    function getFee(uint _loanAmount) external view override returns (uint) {\\n        return _loanAmount*instantPercentageFee/MAX_INSTANT_PERCENTAGE_FEE;\\n    }\\n\\n    /// @notice               Adds liquidity to instant pool\\n    /// @dev\\n    /// @param _user          Address of user who receives instant pool token\\n    /// @param _amount        Amount of liquidity that user wants to add\\n    /// @return               Amount of instant pool token that user receives\\n    function addLiquidity(address _user, uint _amount) external nonReentrant override returns (uint) {\\n        require(_amount > 0, \\\"InstantPool: input amount is zero\\\");\\n        uint instantPoolTokenAmount;\\n        // Transfers teleBTC from user\\n        IERC20(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n        if (totalAddedTeleBTC == 0 || totalSupply() == 0) {\\n            instantPoolTokenAmount = _amount;\\n        } else {\\n            instantPoolTokenAmount = _amount*totalSupply()/totalAddedTeleBTC;\\n        }\\n        totalAddedTeleBTC = totalAddedTeleBTC + _amount;\\n        // Mints instant pool token for user\\n        _mint(_user, instantPoolTokenAmount);\\n        emit AddLiquidity(_user, _amount, instantPoolTokenAmount);\\n        return instantPoolTokenAmount;\\n    }\\n\\n    /// @notice               Adds liquidity to instant pool without minting instant pool tokens\\n    /// @dev                  Updates totalAddedTeleBTC (transferring teleBTC directly does not update it)\\n    /// @param _amount        Amount of liquidity that user wants to add\\n    /// @return               True if liquidity is added successfully\\n    function addLiquidityWithoutMint(uint _amount) external nonReentrant override returns (bool) {\\n        require(_amount > 0, \\\"InstantPool: input amount is zero\\\");\\n        // Transfers teleBTC from user\\n        IERC20(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n        totalAddedTeleBTC = totalAddedTeleBTC + _amount;\\n        emit AddLiquidity(_msgSender(), _amount, 0);\\n        return true;\\n    }\\n\\n    /// @notice                               Removes liquidity from instant pool\\n    /// @dev\\n    /// @param _user                          Address of user who receives teleBTC\\n    /// @param _instantPoolTokenAmount        Amount of instant pool token that is burnt\\n    /// @return                               Amount of teleBTC that user receives\\n    function removeLiquidity(address _user, uint _instantPoolTokenAmount) external nonReentrant override returns (uint) {\\n        require(_instantPoolTokenAmount > 0, \\\"InstantPool: input amount is zero\\\");\\n        require(balanceOf(_msgSender()) >= _instantPoolTokenAmount, \\\"InstantPool: balance is not sufficient\\\");\\n        uint teleBTCAmount = _instantPoolTokenAmount*totalAddedTeleBTC/totalSupply();\\n        totalAddedTeleBTC = totalAddedTeleBTC - teleBTCAmount;\\n        _burn(_msgSender(), _instantPoolTokenAmount);\\n        IERC20(teleBTC).transfer(_user, teleBTCAmount);\\n        emit RemoveLiquidity(_msgSender(), teleBTCAmount, _instantPoolTokenAmount);\\n        return teleBTCAmount;\\n    }\\n\\n    /// @notice                               Gives loan to user\\n    /// @dev                                  Only instant router contract can call this\\n    /// @param _user                          Address of user who wants loan\\n    /// @param _amount                        Amount of requested loan\\n    /// @return                               Amount of given loan after reducing the fee\\n    function getLoan(address _user, uint _amount) nonReentrant override external returns (bool) {\\n        require(_msgSender() == instantRouter, \\\"InstantPool: sender is not allowed\\\");\\n        require(availableTeleBTC() >= _amount, \\\"InstantPool: liquidity is not sufficient\\\");\\n        // Instant fee increases the total teleBTC amount\\n        uint instantFee = _amount*instantPercentageFee/MAX_INSTANT_PERCENTAGE_FEE;\\n        IERC20(teleBTC).transfer(_user, _amount);\\n        emit InstantLoan(_user, _amount, instantFee);\\n        return true;\\n    }\\n\\n}\"\n    },\n    \"contracts/pools/interfaces/ICollateralPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICollateralPool is IERC20 {\\n\\n\\t// Events\\n\\n\\tevent AddCollateral(address indexed doer, address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\tevent RemoveCollateral(address indexed doer, address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\tevent NewCollateralizationRatio(uint oldCollateralizationRatio, uint newCollateralizationRatio);\\n\\n\\t// Read-only functions\\n\\n\\tfunction collateralToken() external view returns (address);\\n\\n\\tfunction collateralizationRatio() external view returns(uint);\\n\\n\\tfunction totalAddedCollateral() external view returns (uint);\\n\\n\\tfunction equivalentCollateralToken(uint _collateralPoolTokenAmount) external view returns (uint);\\n\\n\\tfunction equivalentCollateralPoolToken(uint _collateralTokenAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setCollateralizationRatio(uint _collateralizationRatio) external;\\n\\n\\tfunction addCollateral(address _user, uint _amount) external returns (bool);\\n\\n\\tfunction removeCollateral(uint _collateralPoolTokenAmount) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/pools/interfaces/ICollateralPoolFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface ICollateralPoolFactory {\\n\\n    // Events\\n\\n    /// @notice                             Emits when a collateral pool is created\\n    /// @param name                         Name of the collateral token\\n    /// @param collateralToken              Collateral token address\\n    /// @param collateralizationRatio       At most (collateral value)/(collateralization ratio) can be moved instantly by the user\\n    /// @param collateralPool               Collateral pool contract address\\n    event CreateCollateralPool(\\n        string name,\\n        address indexed collateralToken,\\n        uint collateralizationRatio,\\n        address indexed collateralPool\\n    );\\n\\n    /// @notice                 Emits when a collateral pool is removed\\n    /// @param collateralToken  Collateral token address\\n    /// @param collateralPool   Collateral pool contract address\\n    event RemoveCollateralPool(\\n        address indexed collateralToken,\\n        address indexed collateralPool\\n    );\\n\\n    // Read-only functions\\n\\n    function getCollateralPoolByToken(address _collateralToken) external view returns (address);\\n\\n    function allCollateralPools(uint _index) external view returns (address);\\n\\n    function allCollateralPoolsLength() external view returns (uint);\\n\\n    function isCollateral(address _collateralToken) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function createCollateralPool(address _collateralToken, uint _collateralizationRatio) external returns (address);\\n\\n    function removeCollateralPool(address _collateralToken, uint _index) external returns (bool);\\n}\"\n    },\n    \"contracts/pools/interfaces/IInstantPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IInstantPool is IERC20 {\\n\\n\\t// Events\\n\\n\\t/// @notice \\t\\t\\t\\t\\t\\t\\temits when an instant pool is created \\n\\t/// @param instantToken \\t\\t\\t\\tThe instant token of this instant pool\\n\\tevent CreatedInstantPool(address indexed instantToken);\\n\\n\\t/// @notice                             emits when some liquidity gets added to the pool               \\n\\t/// @param user                         User who added the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC added to the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent AddLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount); \\n\\n\\t/// @notice                             Emits when some liquidity gets removed from the pool\\n\\t/// @param user                         User who removed the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC removed from the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent RemoveLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount);\\n\\n\\t/// @notice                       \\t\\tGets an instant loan from the contract\\n\\t/// @param user                   \\t\\tUser who wants to get the loan\\n\\t/// @param requestedAmount        \\t\\tAmount of loan requested and sent to the user\\n\\t/// @param instantFee             \\t\\tAmount of fee that the user should pay back later with the loan\\n\\tevent InstantLoan(address indexed user, uint256 requestedAmount, uint instantFee);\\n\\n\\t/// @notice                       \\t\\tEmits when changes made to instant router address\\n\\tevent NewInstantRouter(address oldInstantRouter, address newInstaneRouter);\\n\\n\\t/// @notice                       \\t\\tEmits when changes made to instant percentage fee\\n\\tevent NewInstantPercentageFee(uint oldInstantPercentageFee, uint newInstantPercentageFee);\\n\\n\\t/// @notice                       \\t\\tEmits when changes made to TeleBTC address\\n\\tevent NewTeleBTC(address oldTeleBTC, address newTeleBTC);\\n\\n\\t// Read-only functions\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction totalAddedTeleBTC() external view returns (uint);\\n\\n\\tfunction availableTeleBTC() external view returns (uint);\\n\\n\\tfunction totalUnpaidLoan() external view returns (uint);\\n\\n\\tfunction instantPercentageFee() external view returns (uint);\\n\\n\\tfunction getFee(uint _loanAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setInstantPercentageFee(uint _instantPercentageFee) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction addLiquidity(address _user, uint _amount) external returns (uint);\\n\\n\\tfunction addLiquidityWithoutMint(uint _amount) external returns (bool);\\n\\n\\tfunction removeLiquidity(address _user, uint _instantPoolTokenAmount) external returns (uint);\\n\\n\\tfunction getLoan(address _user, uint _amount) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/relay/BitcoinRelay.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../libraries/TypedMemView.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"./interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract BitcoinRelay is IBitcoinRelay, Ownable, ReentrancyGuard, Pausable {\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using BitcoinHelper for bytes29;\\n    using SafeERC20 for IERC20;\\n\\n    // Public variables\\n    uint constant ONE_HUNDRED_PERCENT = 10000;\\n    uint constant MAX_FINALIZATION_PARAMETER = 432; // roughly 3 days\\n    uint constant MAX_ALLOWED_GAP = 90 minutes;\\n    // ^ This is to prevent the submission of a Bitcoin block header with a timestamp \\n    // that is more than 90 minutes ahead of the network's timestamp. Without this check,\\n    // the attacker could manipulate the difficulty target of a new epoch\\n\\n    uint public override initialHeight;\\n    uint public override lastSubmittedHeight;\\n    uint public override finalizationParameter;\\n    uint public override rewardAmountInTDT;\\n    uint public override relayerPercentageFee; // A number between [0, 10000)\\n    uint public override submissionGasUsed; // Gas used for submitting a block header\\n    uint public override epochLength;\\n    uint public override baseQueries;\\n    uint public override currentEpochQueries;\\n    uint public override lastEpochQueries;\\n    address public override TeleportDAOToken;\\n    bytes32 public override relayGenesisHash; // Initial block header of relay\\n\\n    // Private and internal variables\\n    mapping(uint => blockHeader[]) private chain; // height => list of block headers\\n    mapping(bytes32 => bytes32) internal previousBlock; // block header hash => parent header hash\\n    mapping(bytes32 => uint256) internal blockHeight; // block header hash => block height\\n\\n    /// @notice Gives a starting point for the relay\\n    /// @param  _genesisHeader The starting header\\n    /// @param  _height The starting height\\n    /// @param  _periodStart The hash of the first header in the genesis epoch\\n    /// @param  _TeleportDAOToken The address of the TeleportDAO ERC20 token contract\\n    constructor(\\n        bytes memory _genesisHeader,\\n        uint256 _height,\\n        bytes32 _periodStart,\\n        address _TeleportDAOToken\\n    ) {\\n        // Adds the initial block header to the chain\\n        bytes29 _genesisView = _genesisHeader.ref(0).tryAsHeader();\\n        require(_genesisView.notNull(), \\\"BitcoinRelay: null block\\\");\\n        // Genesis header and period start can be same\\n        bytes32 _genesisHash = _genesisView.hash256();\\n        relayGenesisHash = _genesisHash;\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _genesisHash;\\n        newBlockHeader.parentHash = _genesisView.parent();\\n        newBlockHeader.merkleRoot = _genesisView.merkleRoot();\\n        newBlockHeader.relayer = _msgSender();\\n        newBlockHeader.gasPrice = 0;\\n        chain[_height].push(newBlockHeader);\\n        blockHeight[_genesisHash] = _height;\\n        blockHeight[_periodStart] = _height - (_height % BitcoinHelper.RETARGET_PERIOD_BLOCKS);\\n\\n        // Relay parameters\\n        _setFinalizationParameter(3);\\n        initialHeight = _height;\\n        lastSubmittedHeight = _height;\\n        \\n        _setTeleportDAOToken(_TeleportDAOToken);\\n        _setRelayerPercentageFee(500);\\n        _setEpochLength(BitcoinHelper.RETARGET_PERIOD_BLOCKS);\\n        _setBaseQueries(epochLength);\\n        lastEpochQueries = baseQueries;\\n        currentEpochQueries = 0;\\n        _setSubmissionGasUsed(300000); // in wei\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Pauses the Relay\\n    /// @dev Only functions with whenPaused modifier can be called\\n    function pauseRelay() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the relay\\n    /// @dev Only functions with whenNotPaused modifier can be called\\n    function unpauseRelay() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Getter for a specific block header's hash in the stored chain\\n    /// @dev It cannot be called by other contracts\\n    /// @param  _height of the desired block header\\n    /// @param  _index of the desired block header in that height\\n    /// @return Block header's hash\\n    function getBlockHeaderHash(uint _height, uint _index) external view override returns (bytes32) {\\n        require(\\n            !Address.isContract(msg.sender), \\n            \\\"BitcoinRelay: addr is contract\\\"\\n        );\\n        return chain[_height][_index].selfHash;\\n    }\\n\\n    /// @notice Getter for a specific block header submission gas price\\n    /// @param  _height of the desired block header\\n    /// @param  _index of the desired block header in that height\\n    /// @return Block header submission gas price\\n    function getBlockHeaderFee(uint _height, uint _index) external view override returns (uint) {\\n        return _calculateFee(chain[_height][_index].gasPrice);\\n    }\\n\\n    /// @notice Getter for the number of submitted block headers in a height\\n    /// @dev This shows the number of temporary forks in that specific height\\n    /// @param  _height The desired height of the blockchain\\n    /// @return Number of block headers stored in a height\\n    function getNumberOfSubmittedHeaders(uint _height) external view override returns (uint) {\\n        return chain[_height].length;\\n    }\\n\\n    /// @notice Getter for available TDT in Relay treasury\\n    function availableTDT() external view override returns (uint) {\\n        return IERC20(TeleportDAOToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice Getter for available target native token (TNT) in Relay treasury\\n    function availableTNT() external view override returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Finds the height of a header by its hash\\n    /// @dev Fails if the header is unknown\\n    /// @param _hash The header hash to search for\\n    /// @return The height of the header\\n    function findHeight(bytes32 _hash) external view override returns (uint256) {\\n        return _findHeight(_hash);\\n    }\\n\\n    /// @notice External setter for rewardAmountInTDT\\n    /// @dev This award is for the Relayer who submitted a finalized block header\\n    /// @param _rewardAmountInTDT The amount of reward in TDT\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external override onlyOwner {\\n        _setRewardAmountInTDT(_rewardAmountInTDT);\\n    }\\n\\n    /// @notice External setter for finalizationParameter\\n    /// @dev Bigger finalization parameter increases security but also increases the delay\\n    /// @param _finalizationParameter The finalization parameter of Bitcoin\\n    function setFinalizationParameter(uint _finalizationParameter) external override onlyOwner {\\n        _setFinalizationParameter(_finalizationParameter);\\n    }\\n\\n    /// @notice External setter for relayerPercentageFee\\n    /// @dev A percentage of the submission gas used goes to Relayers as reward\\n    /// @param _relayerPercentageFee New percentage fee\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external override onlyOwner {\\n        _setRelayerPercentageFee(_relayerPercentageFee);\\n    }\\n\\n    /// @notice External setter for TeleportDAO token\\n    /// @param _TeleportDAOToken The TeleportDAO token (TDT) address\\n    function setTeleportDAOToken(address _TeleportDAOToken) external override onlyOwner {\\n        _setTeleportDAOToken(_TeleportDAOToken);\\n    }\\n\\n    /// @notice External setter for epochLength\\n    /// @param _epochLength The length of epochs used for estimating the query fee\\n    function setEpochLength(uint _epochLength) external override onlyOwner {\\n        _setEpochLength(_epochLength);\\n    }\\n\\n    /// @notice External setter for baseQueries\\n    /// @param _baseQueries The base number of queries we assume in each epoch\\n    ///                     This prevents query fee to grow significantly\\n    function setBaseQueries(uint _baseQueries) external override onlyOwner {\\n        _setBaseQueries(_baseQueries);\\n    }\\n\\n    /// @notice External setter for submissionGasUsed\\n    /// @param _submissionGasUsed The gas used by Relayers for submitting a block header\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external override onlyOwner {\\n        _setSubmissionGasUsed(_submissionGasUsed);\\n    }\\n\\n    /// @notice Checks if a tx is included and finalized on Bitcoin\\n    /// @dev Checks if the block is finalized, and Merkle proof is valid\\n    /// @param _txid Desired tx Id in LE form\\n    /// @param _blockHeight of the desired tx\\n    /// @param _intermediateNodes Part of the Merkle tree from the tx to the root in LE form (called Merkle proof)\\n    /// @param _index of the tx in Merkle tree\\n    /// @return True if the provided tx is confirmed on Bitcoin\\n    function checkTxProof (\\n        bytes32 _txid, // In LE form\\n        uint _blockHeight,\\n        bytes calldata _intermediateNodes, // In LE form\\n        uint _index\\n    ) external payable nonReentrant whenNotPaused override returns (bool) {\\n        require(_txid != bytes32(0), \\\"BitcoinRelay: txid should be non-zero\\\");\\n        // Revert if the block is not finalized\\n        require(\\n            _blockHeight + finalizationParameter < lastSubmittedHeight + 1,\\n            \\\"BitcoinRelay: block is not finalized on the relay\\\"\\n        );\\n        // Block header exists on the relay\\n        require(\\n            _blockHeight >= initialHeight,\\n            \\\"BitcoinRelay: the requested height is not submitted on the relay (too old)\\\"\\n        );\\n\\n        // Get the Relay fee from the user\\n        uint paidFee = _getFee(chain[_blockHeight][0].gasPrice);\\n        \\n        // Check the inclusion of the transaction\\n        bytes32 _merkleRoot = chain[_blockHeight][0].merkleRoot;\\n        bytes29 intermediateNodes = _intermediateNodes.ref(0).tryAsMerkleArray(); // Check for errors if any\\n        \\n        emit NewQuery(_txid, _blockHeight, paidFee); \\n        return BitcoinHelper.prove(_txid, _merkleRoot, intermediateNodes, _index);   \\n    }\\n\\n    /// @notice Same as getBlockHeaderHash, but can be called by other contracts\\n    /// @dev Caller should pay the query fee\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable override returns (bytes32) {\\n        uint paidFee = _getFee(chain[_height][_index].gasPrice);\\n        emit NewQuery(chain[_height][_index].selfHash, _height, paidFee); \\n        return chain[_height][_index].selfHash;\\n    }\\n\\n    /// @notice Adds headers to storage after validating\\n    /// @dev Checks integrity and consistency of the header chain\\n    /// @param _anchor The header immediately preceeding the new chain\\n    /// @param _headers A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return True if successfully written, error otherwise\\n    function addHeaders(\\n        bytes calldata _anchor, \\n        bytes calldata _headers\\n    ) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n        bytes29 _anchorView = _anchor.ref(0).tryAsHeader();\\n\\n        _checkInputSizeAddHeaders(_headersView, _anchorView);\\n\\n        return _addHeaders(_anchorView, _headersView, false);\\n    }\\n\\n    /// @notice Adds headers to storage, performs additional validation of retarget\\n    /// @dev Checks the retarget, the heights, and the linkage\\n    /// @param _oldPeriodStartHeader The first header in the difficulty period being closed\\n    /// @param _oldPeriodEndHeader The last header in the difficulty period being closed (anchor of new headers)\\n    /// @param _headers A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return True if successfully written, error otherwise\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _oldStart = _oldPeriodStartHeader.ref(0).tryAsHeader();\\n        bytes29 _oldEnd = _oldPeriodEndHeader.ref(0).tryAsHeader();\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n\\n        _checkInputSizeAddHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n\\n        return _addHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n    }\\n\\n    /// @notice Same as addHeaders, but can only be called by owner even if contract is paused\\n    ///         It will be used if a fork happend\\n    function ownerAddHeaders(\\n        bytes calldata _anchor, \\n        bytes calldata _headers\\n    ) external nonReentrant onlyOwner override returns (bool) {\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n        bytes29 _anchorView = _anchor.ref(0).tryAsHeader();\\n\\n        _checkInputSizeAddHeaders(_headersView, _anchorView);\\n\\n        return _addHeaders(_anchorView, _headersView, false);\\n    }\\n\\n    /// @notice Same as addHeadersWithRetarget, but can only be called by owner even if contract is paused\\n    ///         It will be used if a fork happend\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external nonReentrant onlyOwner override returns (bool) {\\n        bytes29 _oldStart = _oldPeriodStartHeader.ref(0).tryAsHeader();\\n        bytes29 _oldEnd = _oldPeriodEndHeader.ref(0).tryAsHeader();\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n\\n        _checkInputSizeAddHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n\\n        return _addHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n    }\\n\\n    /// @notice  Checks the size of addHeaders inputs \\n    function _checkInputSizeAddHeaders(bytes29 _headersView, bytes29 _anchorView) internal pure {\\n        require(\\n            _headersView.notNull() && _headersView.len() % 80 == 0\\n                && _anchorView.notNull() && _anchorView.len() == 80,\\n            \\\"BitcoinRelay: wrong len\\\"\\n        );\\n    }\\n\\n    /// @notice Checks the size of addHeadersWithRetarget inputs \\n    function _checkInputSizeAddHeadersWithRetarget(\\n        bytes29 _oldStart,\\n        bytes29 _oldEnd,\\n        bytes29 _headersView\\n    ) internal pure {\\n        require(\\n            _oldStart.notNull() && _oldStart.len() == 80 \\n                && _oldEnd.notNull() && _oldEnd.len() == 80 \\n                    && _headersView.notNull() && _headersView.len() % 80 == 0,\\n            \\\"BitcoinRelay: wrong len\\\"\\n        );\\n    }\\n\\n    /// @notice Finds the height of a header by its hash\\n    /// @dev Reverts if the header is unknown\\n    /// @param _hash of the desired header\\n    /// @return The height of the header\\n    function _findHeight(bytes32 _hash) internal view returns (uint256) {\\n        if (blockHeight[_hash] == 0) {\\n            revert(\\\"BitcoinRelay: unknown block\\\");\\n        }\\n        else {\\n            return blockHeight[_hash];\\n        }\\n    }\\n\\n    /// @notice Gets fee from the user who queries the Relay\\n    /// @dev Fee is paid in target blockchain native token (called TNT)\\n    /// @param _gasPrice has been used for submitting the block header\\n    /// @return _feeAmount Needed fee\\n    function _getFee(uint _gasPrice) internal returns (uint _feeAmount) {\\n        // Count the query for next epoch fee calculation\\n        currentEpochQueries += 1;\\n        _feeAmount = _calculateFee(_gasPrice);\\n        require(msg.value >= _feeAmount, \\\"BitcoinRelay: fee is not enough\\\");\\n        Address.sendValue(payable(_msgSender()), msg.value - _feeAmount);\\n    }\\n\\n    /// @notice Calculates the fee of querying a block header\\n    /// @param _gasPrice has been used for submitting the block header\\n    /// @return The fee amount \\n    function _calculateFee(uint _gasPrice) private view returns (uint) {\\n        return (submissionGasUsed * _gasPrice * (ONE_HUNDRED_PERCENT + relayerPercentageFee) * epochLength) \\n            / lastEpochQueries / ONE_HUNDRED_PERCENT;\\n    }\\n\\n    /// @notice Adds headers to storage after validating\\n    function _addHeaders(bytes29 _anchor, bytes29 _headers, bool _internal) internal virtual returns (bool) {\\n        // Extract basic info\\n        bytes32 _previousHash = _anchor.hash256();\\n        uint256 _anchorHeight = _findHeight(_previousHash); // revert if the block is unknown\\n        uint256 _target = _headers.indexHeaderArray(0).target();\\n\\n        // When calling addHeaders, no retargetting should happen\\n        require(\\n            _internal || _anchor.target() == _target,\\n            \\\"BitcoinRelay: unexpected retarget on external call\\\"\\n        );\\n        // check the height on top of the anchor is not finalized\\n        require(\\n            _anchorHeight + 1 + finalizationParameter > lastSubmittedHeight, \\n            \\\"BitcoinRelay: block headers are too old\\\"\\n        );\\n\\n        /*\\n            1. check that the blockheader is not a replica\\n            2. check blocks are in the same epoch regarding difficulty\\n            3. check that headers are in a coherent chain (no retargets, hash links good)\\n            4. check that the header has sufficient work\\n            5. Store the block connection\\n            6. Store the height\\n            7. store the block in the chain\\n        */\\n        uint256 _height;\\n        bytes32 _currentHash;\\n        for (uint256 i = 0; i < _headers.len() / 80; i++) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            _height = _anchorHeight + i + 1;\\n            _currentHash = _header.hash256();\\n\\n            // The below check prevents adding a replicated block header\\n            require(\\n                previousBlock[_currentHash] == bytes32(0),\\n                \\\"BitcoinRelay: the block header exists on the relay\\\"\\n            );\\n\\n            // Blocks that are multiplies of 2016 should be submitted using addHeadersWithRetarget\\n            require(\\n                _internal || _height % BitcoinHelper.RETARGET_PERIOD_BLOCKS != 0,\\n                \\\"BitcoinRelay: headers should be submitted by calling addHeadersWithRetarget\\\"\\n            );\\n\\n            require(_header.time() < block.timestamp + MAX_ALLOWED_GAP, \\\"BitcoinRelay: block is ahead in time\\\");\\n            require(_header.target() == _target, \\\"BitcoinRelay: target changed unexpectedly\\\");\\n            require(_header.checkParent(_previousHash), \\\"BitcoinRelay: headers do not form a consistent chain\\\");\\n            \\n            require(\\n                TypedMemView.reverseUint256(uint256(_currentHash)) <= _target,\\n                \\\"BitcoinRelay: header work is insufficient\\\"\\n            );\\n\\n            previousBlock[_currentHash] = _previousHash;\\n            blockHeight[_currentHash] = _height;\\n            emit BlockAdded(_height, _currentHash, _previousHash, _msgSender());\\n            _addToChain(_header, _height);\\n            _previousHash = _currentHash;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Adds headers to storage, performs additional validation of retarget\\n    function _addHeadersWithRetarget(\\n        bytes29 _oldStart,\\n        bytes29 _oldEnd,\\n        bytes29 _headers\\n    ) internal virtual returns (bool) {\\n        // requires that both blocks are known\\n        uint256 _startHeight = _findHeight(_oldStart.hash256());\\n        uint256 _endHeight = _findHeight(_oldEnd.hash256());\\n\\n        // retargets should happen at 2016 block intervals\\n        require(\\n            _endHeight % BitcoinHelper.RETARGET_PERIOD_BLOCKS == 2015,\\n            \\\"BitcoinRelay: must provide the last header of the closing difficulty period\\\");\\n        require(\\n            _endHeight == _startHeight + 2015,\\n            \\\"BitcoinRelay: must provide exactly 1 difficulty period\\\");\\n        require(\\n            _oldStart.diff() == _oldEnd.diff(),\\n            \\\"BitcoinRelay: period header difficulties do not match\\\");\\n\\n        /* NB: This comparison looks weird because header nBits encoding truncates targets */\\n        bytes29 _newStart = _headers.indexHeaderArray(0);\\n        uint256 _actualTarget = _newStart.target();\\n        uint256 _expectedTarget = BitcoinHelper.retargetAlgorithm(\\n            _oldStart.target(),\\n            _oldStart.time(),\\n            _oldEnd.time()\\n        );\\n        require(\\n            (_actualTarget & _expectedTarget) == _actualTarget, \\n            \\\"BitcoinRelay: invalid retarget provided\\\"\\n        );\\n\\n        // Pass all but the first through to be added\\n        return _addHeaders(_oldEnd, _headers, true);\\n    }\\n\\n    /// @notice Sends reward to the Relayer\\n    /// @dev We compensate the Relayer for the block submission cost + give extra reward in TDT\\n    /// @param _relayer The Relayer address\\n    /// @param _height The height of the submitted block header\\n    /// @return Reward in TNT\\n    /// @return Reward in TDT\\n    function _sendReward(address _relayer, uint _height) internal returns (uint, uint) {\\n\\n        // Reward in TNT\\n        uint rewardAmountInTNT = submissionGasUsed * chain[_height][0].gasPrice \\n            * (ONE_HUNDRED_PERCENT + relayerPercentageFee) / ONE_HUNDRED_PERCENT;\\n\\n        // Reward in TDT\\n        uint contractTDTBalance = 0;\\n        if (TeleportDAOToken != address(0)) {\\n            contractTDTBalance = IERC20(TeleportDAOToken).balanceOf(address(this));\\n        }\\n\\n        // Send reward in TDT\\n        bool sentTDT;\\n        if (rewardAmountInTDT <= contractTDTBalance && rewardAmountInTDT > 0) {\\n            // Call ERC20 token contract to transfer reward tokens to the relayer\\n            IERC20(TeleportDAOToken).safeTransfer(_relayer, rewardAmountInTDT);\\n            sentTDT = true;\\n        }\\n\\n        // Send reward in TNT\\n        bool sentTNT;\\n        if (address(this).balance > rewardAmountInTNT && rewardAmountInTNT > 0) {\\n            // note: no need to revert if failed\\n            (sentTNT,) = payable(_relayer).call{value: rewardAmountInTNT}(\\\"\\\");\\n        }\\n\\n        if (sentTNT) {\\n            return sentTDT ? (rewardAmountInTNT, rewardAmountInTDT) : (rewardAmountInTNT, 0);\\n        } else {\\n            return sentTDT ? (0, rewardAmountInTDT) : (0, 0);\\n        }\\n    }\\n\\n    /// @notice Adds a header to the chain\\n    /// @dev We prune the chain if the new header finalizes any header\\n    /// @param  _header The new block header\\n    /// @param  _height The height of the new block header\\n    function _addToChain(bytes29 _header, uint _height) internal {\\n        // Prevent relayers to submit too old block headers\\n        require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _header.hash256();\\n        newBlockHeader.parentHash = _header.parent();\\n        newBlockHeader.merkleRoot = _header.merkleRoot();\\n        newBlockHeader.relayer = _msgSender();\\n        newBlockHeader.gasPrice = tx.gasprice;\\n        chain[_height].push(newBlockHeader);\\n        if(_height > lastSubmittedHeight){\\n            lastSubmittedHeight += 1;\\n            _updateFee();\\n            _pruneChain();\\n        }\\n    }\\n\\n    /// @notice Reset the number of epoch users when a new epoch starts\\n    /// @dev This parameter is used to calculate the fee that Relay gets from users in the next epoch\\n    function _updateFee() internal {\\n        if (lastSubmittedHeight % epochLength == 0) {\\n            lastEpochQueries = (currentEpochQueries < baseQueries) ? baseQueries : currentEpochQueries;\\n            currentEpochQueries = 0;\\n        }\\n    }\\n\\n    /// @notice Finalizes a block header and removes all the other headers in that height\\n    /// @dev When chain gets pruned, we only delete blocks in the same \\n    ///      height as the finalized header. Other blocks on top of the non finalized blocks \\n    ///      will exist until their height gets finalized.\\n    function _pruneChain() internal {\\n        // Make sure that we have at least finalizationParameter blocks on relay\\n        if ((lastSubmittedHeight - initialHeight) >= finalizationParameter){\\n            uint idx = finalizationParameter;\\n            uint currentHeight = lastSubmittedHeight;\\n            uint stableIdx = 0;\\n            while (idx > 0) {\\n                // bytes29 header = chain[currentHeight][stableIdx];\\n                bytes32 parentHeaderHash = chain[currentHeight][stableIdx].parentHash;\\n                stableIdx = _findIndex(parentHeaderHash, currentHeight-1);\\n                idx--;\\n                currentHeight--;\\n            }\\n            // Keep the finalized block header and delete rest of headers\\n            chain[currentHeight][0] = chain[currentHeight][stableIdx];\\n            if(chain[currentHeight].length > 1){\\n                _pruneHeight(currentHeight);\\n            }\\n            // A new block has been finalized, we send its relayer's reward\\n            uint rewardAmountTNT;\\n            uint rewardAmountTDT;\\n            (rewardAmountTNT, rewardAmountTDT) = _sendReward(chain[currentHeight][0].relayer, currentHeight);\\n\\n            emit BlockFinalized(\\n                currentHeight,\\n                chain[currentHeight][0].selfHash,\\n                chain[currentHeight][0].parentHash,\\n                chain[currentHeight][0].relayer,\\n                rewardAmountTNT,\\n                rewardAmountTDT\\n            );\\n        }\\n    }\\n\\n    /// @notice Finds the index of a block header in a specific height\\n    /// @param _headerHash The block header hash\\n    /// @param _height The height that we are searching\\n    /// @return _index Index of the block header\\n    function _findIndex(bytes32 _headerHash, uint _height) internal view returns(uint _index) {\\n        for(uint256 i = 0; i < chain[_height].length; i++) {\\n            if(_headerHash == chain[_height][i].selfHash) {\\n                _index = i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Deletes all the block header in a height except the first header\\n    /// @dev The first header is the one that gets finalized\\n    /// @param _height The height that we are pruning\\n    function _pruneHeight(uint _height) internal {\\n        uint idx = chain[_height].length - 1;\\n        while(idx > 0){\\n            chain[_height].pop();\\n            idx -= 1;\\n        }\\n    }\\n\\n    /// @notice nternal setter for rewardAmountInTDT\\n    function _setRewardAmountInTDT(uint _rewardAmountInTDT) private {\\n        emit NewRewardAmountInTDT(rewardAmountInTDT, _rewardAmountInTDT);\\n        // this reward can be zero as well\\n        rewardAmountInTDT = _rewardAmountInTDT;\\n    }\\n\\n    /// @notice Internal setter for finalizationParameter\\n    function _setFinalizationParameter(uint _finalizationParameter) private {\\n        emit NewFinalizationParameter(finalizationParameter, _finalizationParameter);\\n        require(\\n            _finalizationParameter > 0 && _finalizationParameter <= MAX_FINALIZATION_PARAMETER,\\n            \\\"BitcoinRelay: invalid finalization param\\\"\\n        );\\n\\n        finalizationParameter = _finalizationParameter;\\n    }\\n\\n    /// @notice Internal setter for relayerPercentageFee\\n    function _setRelayerPercentageFee(uint _relayerPercentageFee) private {\\n        emit NewRelayerPercentageFee(relayerPercentageFee, _relayerPercentageFee);\\n        require(\\n            _relayerPercentageFee <= ONE_HUNDRED_PERCENT,\\n            \\\"BitcoinRelay: relay fee is above max\\\"\\n        );\\n        relayerPercentageFee = _relayerPercentageFee;\\n    }\\n\\n    /// @notice Internal setter for teleportDAO token\\n    function _setTeleportDAOToken(address _TeleportDAOToken) private {\\n        emit NewTeleportDAOToken(TeleportDAOToken, _TeleportDAOToken);\\n        TeleportDAOToken = _TeleportDAOToken;\\n    }\\n\\n    /// @notice Internal setter for epochLength\\n    function _setEpochLength(uint _epochLength) private {\\n        emit NewEpochLength(epochLength, _epochLength);\\n        require(\\n            _epochLength > 0,\\n            \\\"BitcoinRelay: zero epoch length\\\"\\n        );\\n        epochLength = _epochLength;\\n    }\\n\\n    /// @notice Internal setter for baseQueries\\n    function _setBaseQueries(uint _baseQueries) private {\\n        emit NewBaseQueries(baseQueries, _baseQueries);\\n        require(\\n            _baseQueries > 0,\\n            \\\"BitcoinRelay: zero base query\\\"\\n        );\\n        baseQueries = _baseQueries;\\n    }\\n\\n    /// @notice Internal setter for submissionGasUsed\\n    function _setSubmissionGasUsed(uint _submissionGasUsed) private {\\n        emit NewSubmissionGasUsed(submissionGasUsed, _submissionGasUsed);\\n        submissionGasUsed = _submissionGasUsed;\\n    }\\n}\\n\"\n    },\n    \"contracts/relay/BitcoinRelayTestnet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./BitcoinRelay.sol\\\";\\nimport \\\"../libraries/TypedMemView.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\n\\ncontract BitcoinRelayTestnet is BitcoinRelay {\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using BitcoinHelper for bytes29;\\n\\n    /// @notice Gives a starting point for the relay\\n    /// @dev Same as BitcoinRelay contract, but some retargeting checks has been removed\\n    constructor(\\n        bytes memory _genesisHeader,\\n        uint256 _height,\\n        bytes32 _periodStart,\\n        address _TeleportDAOToken\\n    ) BitcoinRelay(_genesisHeader, _height, _periodStart, _TeleportDAOToken) {}\\n\\n    /// @notice Adds headers to storage after validating\\n    /// @dev Checks for retargeting have been removed since the Bitcoin testnet has unexpected retargeting\\n    function _addHeaders(bytes29 _anchor, bytes29 _headers, bool _internal) internal override returns (bool) {\\n        // Extract basic info\\n        bytes32 _previousHash = _anchor.hash256();\\n        uint256 _anchorHeight = _findHeight(_previousHash); // revert if the block is unknown\\n        uint256 _target = _headers.indexHeaderArray(0).target();\\n\\n        /*\\n        1. check that the blockheader is not a replica\\n        2. check blocks are in the same epoch regarding difficulty\\n        3. check that headers are in a coherent chain (no retargets, hash links good)\\n        4. check that the header has sufficient work\\n        5. Store the block connection\\n        6. Store the height\\n        7. store the block in the chain\\n        */\\n        uint256 _height;\\n        bytes32 _currentHash;\\n        for (uint256 i = 0; i < _headers.len() / 80; i++) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            _height = _anchorHeight + i + 1;\\n            _currentHash = _header.hash256();\\n\\n            // The below check prevents adding a replicated block header\\n            require(\\n                previousBlock[_currentHash] == bytes32(0),\\n                \\\"BitcoinRelay: the block header exists on the relay\\\"\\n            );\\n\\n            require(_header.target() == _target, \\\"BitcoinRelay: target changed unexpectedly\\\");\\n            require(_header.checkParent(_previousHash), \\\"BitcoinRelay: headers do not form a consistent chain\\\");\\n            \\n            require(\\n                TypedMemView.reverseUint256(uint256(_currentHash)) <= _target,\\n                \\\"BitcoinRelay: header work is insufficient\\\"\\n            );\\n\\n            previousBlock[_currentHash] = _previousHash;\\n            blockHeight[_currentHash] = _height;\\n            emit BlockAdded(_height, _currentHash, _previousHash, _msgSender());\\n            _addToChain(_header, _height);\\n            _previousHash = _currentHash;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Adds headers to storage, performs additional validation of retarget\\n    /// @dev Checks for retargeting have been removed since the Bitcoin testnet has unexpected retargeting\\n    function _addHeadersWithRetarget(\\n        bytes29 _oldStart,\\n        bytes29 _oldEnd,\\n        bytes29 _headers\\n    ) internal override returns (bool) {\\n        return _addHeaders(_oldEnd, _headers, true);\\n    }\\n\\n}\"\n    },\n    \"contracts/relay/interfaces/IBitcoinRelay.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\"\n    },\n    \"contracts/routers/CCBurnRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../libraries/RelayHelper.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CCBurnRouter is ICCBurnRouter, Ownable, ReentrancyGuard {\\n\\n    using RelayHelper for *;\\n    \\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCBurnRouter: zero address\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n    /// @notice Handles cross-chain burn requests\\n    /// @param _startingBlockNumber Requests that are included in a block older \\n    ///                             than _startingBlockNumber cannot be executed\\n    /// @param _relay Address of relay contract\\n    /// @param _lockers Address of lockers contract\\n    /// @param _treasury Address of the treasury of the protocol\\n    /// @param _teleBTC Address of teleBTC contract\\n    /// @param _transferDeadline of sending BTC to user (aster submitting a burn request)\\n    /// @param _protocolPercentageFee Percentage of tokens that user pays to protocol for burning\\n    /// @param _slasherPercentageReward Percentage of tokens that slasher receives after slashing a locker\\n    /// @param _bitcoinFee Fee of submitting a transaction on Bitcoin\\n    constructor(\\n        uint _startingBlockNumber,\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        address _teleBTC,\\n        uint _transferDeadline,\\n        uint _protocolPercentageFee,\\n        uint _slasherPercentageReward,\\n        uint _bitcoinFee\\n    ) {\\n        startingBlockNumber = _startingBlockNumber;\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setTreasury(_treasury);\\n        _setTeleBTC(_teleBTC);\\n        _setTransferDeadline(_transferDeadline);\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n        _setBitcoinFee(_bitcoinFee);\\n    }\\n\\n    receive() external payable {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Returns true is request has been processed\\n    /// @param _lockerTargetAddress Locker address on the target chain\\n    /// @param _index the request for the locker\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint _index\\n    ) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice Updates relay contract address\\n    /// @dev Only owner can call this\\n    /// @param _relay The new relay contract address\\n    function setRelay(address _relay) external override onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice Updates lockers contract address\\n    /// @dev Only owner can call this\\n    /// @param _lockers The new lockers contract address\\n    function setLockers(address _lockers) external override onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice Updates teleBTC contract address\\n    /// @dev Only owner can call this\\n    /// @param _teleBTC The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice Updates protocol treasury address\\n    /// @dev Only owner can call this\\n    /// @param _treasury The new treasury address\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice Updates deadline of executing burn requests\\n    /// @dev Only owner can call this\\n    ///      Deadline should be greater than relay finalization parameter\\n    /// @param _transferDeadline The new transfer deadline\\n    function setTransferDeadline(uint _transferDeadline) external override onlyOwner {\\n        _setTransferDeadline(_transferDeadline);\\n    }\\n\\n    /// @notice Updating payback deadline if it becomes less than finalization parameter\\n    /// @dev This func protects lockers in the case that finalization parameter was updated\\n    ///      so they can process burn requests\\n    function fixTransferDeadline() external {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        require(_finalizationParameter <= transferDeadline, \\\"CCBurnRouter: low deadline\\\");\\n        uint _transferDeadline = 2 * _finalizationParameter + 1;\\n        _setTransferDeadline(_transferDeadline);\\n    }\\n\\n    /// @notice Updates protocol percentage fee for burning tokens\\n    /// @dev Only owner can call this\\n    /// @param _protocolPercentageFee The new protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice Updates slasher percentage reward for disputing lockers\\n    /// @dev Only owner can call this\\n    /// @param _slasherPercentageReward The new slasher percentage reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n    }\\n\\n    /// @notice Updates Bitcoin transaction fee\\n    /// @dev Only owner can call this\\n    /// @param _bitcoinFee The new Bitcoin transaction fee\\n    function setBitcoinFee(uint _bitcoinFee) external override onlyOwner {\\n        _setBitcoinFee(_bitcoinFee);\\n    }\\n\\n    /// @notice Internal setter for relay contract address\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Internal setter for lockers contract address\\n    /// @param _lockers                     The new lockers contract address\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice Internal setter for teleBTC contract address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice Internal setter for protocol treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice Internal setter for deadline of executing burn requests\\n    function _setTransferDeadline(uint _transferDeadline) private {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        // Gives lockers enough time to pay cc burn requests\\n        require(_transferDeadline > _finalizationParameter, \\\"CCBurnRouter: low deadline\\\");\\n        emit NewTransferDeadline(transferDeadline, _transferDeadline);\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice Internal setter for protocol percentage fee for burning tokens\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(MAX_PROTOCOL_FEE >= _protocolPercentageFee, \\\"CCBurnRouter: invalid fee\\\");\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice Internal setter for slasher percentage reward for disputing lockers\\n    function _setSlasherPercentageReward(uint _slasherPercentageReward) private {\\n        require(MAX_SLASHER_REWARD >= _slasherPercentageReward, \\\"CCBurnRouter: invalid reward\\\");\\n        emit NewSlasherPercentageFee(slasherPercentageReward, _slasherPercentageReward);\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice Internal setter for Bitcoin transaction fee\\n    function _setBitcoinFee(uint _bitcoinFee) private {\\n        emit NewBitcoinFee(bitcoinFee, _bitcoinFee);\\n        require(MAX_PROTOCOL_FEE >= _bitcoinFee, \\\"CCBurnRouter: invalid btc fee\\\");\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice Records users burn request\\n    /// @dev After submitting the burn request, Locker has a limited time\\n    ///      to send BTC and provide burn proof\\n    /// @param _amount of teleBTC that user wants to burn\\n    /// @param _userScript User script hash\\n    /// @param _scriptType User script type\\n    /// @param _lockerLockingScript\\tof locker that should execute the burn request\\n    function ccBurn(\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant override {\\n        // Transfers user's teleBTC to contract\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        (uint burntAmount, address lockerTargetAddress) = _ccBurn(\\n            _amount, \\n            _userScript, \\n            _scriptType, \\n            _lockerLockingScript\\n        );\\n\\n        emit CCBurn(\\n            _msgSender(),\\n            _userScript,\\n            _scriptType,\\n            0, // no input token\\n            address(0), // no input token\\n            _amount,\\n            burntAmount,\\n            lockerTargetAddress,\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].requestIdOfLocker, // index of request\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].deadline\\n        );\\n\\n    }\\n\\n    /// @notice Exchanges input token for teleBTC then burns it\\n    /// @dev After exchanging, rest of the process is similar to ccBurn\\n    /// @param _exchangeConnector Address of exchange connector to be used\\n    /// @param _amounts [inputTokenAmount, teleBTCAmount]\\n    /// @param _isFixedToken True if input token amount is fixed\\n    /// @param _path of exchanging inputToken to teleBTC\\n    /// @param _deadline of exchanging\\n    function ccExchangeAndBurn(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant override {\\n        uint _exchangedTeleBTC = _exchange(\\n            _exchangeConnector,\\n            _amounts,\\n            _isFixedToken,\\n            _path,\\n            _deadline\\n        );\\n\\n        _ccExchangeAndBurn(\\n            _amounts[0],\\n            _path[0],\\n            _exchangedTeleBTC,\\n            _userScript,\\n            _scriptType,\\n            _lockerLockingScript\\n        );\\n    }\\n\\n    /// @notice Checks the correctness of burn proof (which is a Bitcoin tx)\\n    /// @dev Makes isTransferred flag true for the paid requests\\n    /// @param _version Version of the Bitcoin tx\\n    /// @param _vin Inputs of the Bitcoin tx\\n    /// @param _vout Outputs of the Bitcoin tx\\n    /// @param _locktime Lock time of the Bitcoin tx\\n    /// @param _blockNumber Height of the block containing the Bitcoin tx\\n    /// @param _intermediateNodes Merkle inclusion proof for the Bitcoin tx\\n    /// @param _index Index of the Bitcoin tx the block\\n    /// @param _lockerLockingScript Locker's locking script that this burn request belongs to\\n    /// @param _burnReqIndexes Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes Indexes of outputs that were used to pay burn requests. \\n    ///                     _voutIndexes[i] belongs to _burnReqIndexes[i]\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        bytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) external payable nonReentrant override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCBurnRouter: old request\\\");\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"CCBurnRouter: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        require(\\n            _burnReqIndexes.length == _voutIndexes.length,\\n            \\\"CCBurnRouter: wrong indexes\\\"\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            RelayHelper.isConfirmed(\\n                relay,\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: not finalized\\\"\\n        );\\n\\n        // Checks the paid burn requests\\n        uint paidOutputCounter = _checkPaidBurnRequests(\\n            txId,\\n            _blockNumber,\\n            _lockerTargetAddress,\\n            _vout,\\n            _burnReqIndexes,\\n            _voutIndexes\\n        );\\n\\n        /*\\n            Checks if there is an output that goes back to the locker\\n            Sets isUsedAsBurnProof of txId true if all the outputs (except one) were used to pay cc burn requests\\n        */\\n        _updateIsUsedAsBurnProof(paidOutputCounter, _vout, _lockerLockingScript, txId);\\n\\n        return true;\\n    }\\n\\n    /// @notice Slashes a locker if did not pay a cc burn request before its deadline\\n    /// @param _lockerLockingScript Locker's locking script that the unpaid request belongs to\\n    /// @param _indices Indices of requests that their deadline has passed\\n    /// @return True if dispute is successful\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint[] memory _indices\\n    ) external nonReentrant override returns (bool) {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        uint _lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint i = 0; i < _indices.length; i++) {\\n            // Checks that locker has not provided burn proof\\n            require(\\n                !burnRequests[_lockerTargetAddress][_indices[i]].isTransferred,\\n                \\\"CCBurnRouter: already paid\\\"\\n            );\\n\\n            // Checks that payback deadline has passed\\n            require(\\n                burnRequests[_lockerTargetAddress][_indices[i]].deadline < _lastSubmittedHeight,\\n                \\\"CCBurnRouter: deadline not passed\\\"\\n            );\\n\\n            // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n            burnRequests[_lockerTargetAddress][_indices[i]].isTransferred = true;\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockers(lockers).slashIdleLocker(\\n                _lockerTargetAddress,\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n                _msgSender(), // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender // User address\\n            );\\n\\n            emit BurnDispute(\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender,\\n                _lockerTargetAddress,\\n                _lockerLockingScript,\\n                burnRequests[_lockerTargetAddress][_indices[i]].requestIdOfLocker\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev Input tx is a malicious tx which shows that locker spent BTC\\n    ///      Output tx is the tx that was spent by locker in input tx\\n    ///      Output tx shows money goes to locker\\n    ///      Input tx shows locker steals the funds\\n    /// @param _lockerLockingScript Suspicious locker's locking script\\n    /// @param _versions Versions of input and output tx\\n    /// @param _inputVin Inputs of the malicious transaction\\n    /// @param _inputVout Outputs of the malicious transaction\\n    /// @param _outputVin Inputs of the spent transaction\\n    /// @param _outputVout Outputs of the spent transaction\\n    /// @param _locktimes Locktimes of input and output tx\\n    /// @param _inputIntermediateNodes Merkle inclusion proof for the malicious transaction\\n    /// @param _indexesAndBlockNumbers Indices of malicious input in input tx, input tx in block and block number of input tx\\n    /// @return True if dispute is successful\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external payable nonReentrant override returns (bool) {\\n\\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n            _locktimes.length == 2 &&\\n            _indexesAndBlockNumbers.length == 3,\\n            \\\"CCBurnRouter: wrong inputs\\\"\\n        );\\n\\n        require(_indexesAndBlockNumbers[2] >=  startingBlockNumber, \\\"CCBurnRouter: old request\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Finds input tx id and checks its inclusion\\n        bytes32 _inputTxId = BitcoinHelper.calculateTxId(_versions[0], _inputVin, _inputVout, _locktimes[0]);\\n        require(\\n            RelayHelper.isConfirmed(\\n                relay,\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"CCBurnRouter: not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !isUsedAsBurnProof[_inputTxId],\\n            \\\"CCBurnRouter: already used\\\"\\n        );\\n\\n        // prevents multiple slashing of locker\\n        isUsedAsBurnProof[_inputTxId] = true;        \\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint _outpointIndex) = BitcoinHelper.extractOutpoint(\\n            _inputVin,\\n            _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n        );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId == BitcoinHelper.calculateTxId(_versions[1], _outputVin, _outputVout, _locktimes[1]),\\n            \\\"CCBurnRouter: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(BitcoinHelper.getLockingScript(_outputVout, _outpointIndex)) ==\\n            keccak256(_lockerLockingScript),\\n            \\\"CCBurnRouter: not for locker\\\"\\n        );\\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            IBitcoinRelay(relay).lastSubmittedHeight() > transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"CCBurnRouter: deadline not passed\\\"\\n        );\\n\\n        // Slashes locker\\n        _slashLockerForDispute(\\n            _inputVout,\\n            _lockerLockingScript,\\n            _inputTxId,\\n            _indexesAndBlockNumbers[2] // Block number\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Burns the exchanged teleBTC\\n    function _ccExchangeAndBurn(\\n        uint _inputAmount,\\n        address _inputToken,\\n        uint _exchangedTeleBTC, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) private {\\n        (uint burntAmount, address lockerTargetAddress) = _ccBurn(\\n            _exchangedTeleBTC, \\n            _userScript, \\n            _scriptType, \\n            _lockerLockingScript\\n        );\\n\\n        emit CCBurn(\\n            _msgSender(),\\n            _userScript,\\n            _scriptType,\\n            _inputAmount,\\n            _inputToken,\\n            _exchangedTeleBTC,\\n            burntAmount,\\n            lockerTargetAddress,\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].requestIdOfLocker, // index of request\\n            burnRequests[lockerTargetAddress][burnRequests[lockerTargetAddress].length - 1].deadline\\n        );\\n    }\\n\\n    /// @notice Burns teleBTC and records the burn request\\n    /// @return _burntAmount Amount of BTC that user receives\\n    /// @return _lockerTargetAddress Address of locker that will execute the request\\n    function _ccBurn(\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) private returns (uint _burntAmount, address _lockerTargetAddress) {\\n        // Checks validity of user script\\n        _checkScriptType(_userScript, _scriptType);\\n\\n        // Checks if the given locking script is locker\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: not locker\\\"\\n        );\\n\\n        // Gets the target address of locker\\n        _lockerTargetAddress = ILockers(lockers).getLockerTargetAddress(_lockerLockingScript);\\n\\n        uint remainingAmount = _getFees(_amount);\\n\\n        // Burns remained teleBTC\\n        ITeleBTC(teleBTC).approve(lockers, remainingAmount);\\n\\n        // Reduces the Bitcoin fee to find the amount that user receives (called burntAmount)\\n        _burntAmount = (ILockers(lockers).burn(_lockerLockingScript, remainingAmount)) \\n            * (remainingAmount - bitcoinFee) / remainingAmount;\\n\\n        _saveBurnRequest(\\n            _amount,\\n            _burntAmount,\\n            _userScript,\\n            _scriptType,\\n            IBitcoinRelay(relay).lastSubmittedHeight(),\\n            _lockerTargetAddress\\n        );\\n    }\\n\\n    /// @notice Exchanges input token for teleBTC\\n    /// @dev Reverts if exchange fails\\n    /// @return Amount of exchanged teleBTC \\n    function _exchange(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline\\n    ) private returns (uint) {\\n        require(_path[_path.length - 1] == teleBTC, \\\"CCBurnRouter: invalid path\\\");\\n        require(_amounts.length == 2, \\\"CCBurnRouter: wrong amounts\\\");\\n\\n        // Transfers user's input token\\n        IERC20(_path[0]).transferFrom(_msgSender(), address(this), _amounts[0]);\\n        IERC20(_path[0]).approve(_exchangeConnector, _amounts[0]); // Gives approval to exchange connector\\n        (bool result, uint[] memory amounts) = IExchangeConnector(_exchangeConnector).swap(\\n            _amounts[0], \\n            _amounts[1], \\n            _path, \\n            address(this), \\n            _deadline, \\n            _isFixedToken\\n        );\\n\\n        require(result, \\\"CCBurnRouter: exchange failed\\\");\\n        return amounts[amounts.length - 1]; // Amount of exchanged teleBTC\\n    }\\n\\n    /// @notice Slashes the malicious locker\\n    /// @param _inputVout Inputs of the malicious transaction\\n    /// @param _lockerLockingScript Malicious locker's locking script\\n    /// @param _inputTxId Tx id of the malicious transaction\\n    /// @param _inputBlockNumber Block number of the malicious transaction\\n    function _slashLockerForDispute(\\n        bytes memory _inputVout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _inputTxId,\\n        uint _inputBlockNumber\\n    ) private {\\n\\n        // Finds total value of malicious transaction\\n        uint totalValue = BitcoinHelper.parseOutputsTotalValue(_inputVout);\\n\\n        // Gets the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        ILockers(lockers).slashThiefLocker(\\n            _lockerTargetAddress,\\n            totalValue*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n            _msgSender(), // Slasher address\\n            totalValue\\n        );\\n\\n        // Emits the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _lockerLockingScript,\\n            _inputBlockNumber,\\n            _inputTxId,\\n            totalValue + totalValue*slasherPercentageReward/MAX_SLASHER_REWARD\\n        );\\n    }\\n\\n    /// @notice Checks the burn requests that get paid by this transaction\\n    /// @param _paidBlockNumber Block number in which locker paid the burn request\\n    /// @param _lockerTargetAddress Address of the locker on the target chain\\n    /// @param _vout Outputs of a transaction\\n    /// @param _burnReqIndexes Indexes of requests that locker provides proof for them\\n    /// @param _voutIndexes Indexes of outputs that were used to pay burn requests\\n    /// @return paidOutputCounter Number of executed burn requests\\n    function _checkPaidBurnRequests(\\n        bytes32 txId,\\n        uint _paidBlockNumber,\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) private returns (uint paidOutputCounter) {\\n        uint parsedAmount;\\n        /*\\n            Below variable is for checking that every output in vout (except one)\\n            is related to a cc burn request so that we can\\n            set \\\"isUsedAsBurnProof = true\\\" for the whole txId\\n        */\\n        paidOutputCounter = 0;\\n\\n        uint tempVoutIndex;\\n\\n        for (uint i = 0; i < _burnReqIndexes.length; i++) {\\n\\n            // prevent from sending repeated vout indexes\\n            if (i == 0) {\\n                tempVoutIndex = _voutIndexes[i];\\n            } else {\\n                require(\\n                    _voutIndexes[i] > tempVoutIndex,\\n                    \\\"CCBurnRouter: un-sorted vout indexes\\\"\\n                );\\n\\n                tempVoutIndex = _voutIndexes[i];\\n            }\\n\\n            uint _burnReqIndex = _burnReqIndexes[i];\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred &&\\n            burnRequests[_lockerTargetAddress][_burnReqIndex].deadline >= _paidBlockNumber\\n            ) {\\n\\n                parsedAmount = BitcoinHelper.parseValueFromSpecificOutputHavingScript(\\n                    _vout,\\n                    _voutIndexes[i],\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].userScript,\\n                    ScriptTypes(uint(burnRequests[_lockerTargetAddress][_burnReqIndex].scriptType))\\n                );\\n\\n                // Checks that locker has sent required teleBTC amount\\n                if (burnRequests[_lockerTargetAddress][_burnReqIndex].burntAmount == parsedAmount) {\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidCCBurn(\\n                        _lockerTargetAddress,\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex].requestIdOfLocker,\\n                        txId,\\n                        _voutIndexes[i]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev  One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter  Number of the tx outputs that pay a cc burn request\\n    /// @param _vout Outputs of a transaction\\n    /// @param _lockerLockingScript Locking script of locker\\n    /// @param _txId Transaction id\\n    function _updateIsUsedAsBurnProof(\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private {\\n        uint parsedAmount = BitcoinHelper.parseValueHavingLockingScript(_vout, _lockerLockingScript);\\n        uint numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs) {\\n            // One output sends the remaining value to locker\\n            isUsedAsBurnProof[_txId] = true;\\n        } else if (_paidOutputCounter == numberOfOutputs) {\\n            // All output pays cc burn requests\\n            isUsedAsBurnProof[_txId] = true;\\n        }\\n    }\\n\\n    /// @notice Checks the user hash script to be valid (based on its type)\\n    function _checkScriptType(bytes memory _userScript, ScriptTypes _scriptType) private pure {\\n        if (_scriptType == ScriptTypes.P2PK || _scriptType == ScriptTypes.P2WSH) {\\n            require(_userScript.length == 32, \\\"CCBurnRouter: invalid script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"CCBurnRouter: invalid script\\\");\\n        }\\n    }\\n\\n    /// @notice Records burn request of user\\n    /// @param _amount Amount of wrapped token that user wants to burn\\n    /// @param _burntAmount Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userScript User's Bitcoin script type\\n    /// @param _lastSubmittedHeight Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint _amount,\\n        uint _burntAmount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) private {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.burntAmount = _burntAmount;\\n        request.sender = _msgSender();\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        request.requestIdOfLocker = burnRequestCounter[_lockerTargetAddress];\\n        burnRequestCounter[_lockerTargetAddress] = burnRequestCounter[_lockerTargetAddress] + 1;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount The amount to be burnt\\n    /// @return Remaining amount after reducing fees\\n    function _getFees(\\n        uint _amount\\n    ) private returns (uint) {\\n        // Calculates protocol fee\\n        uint protocolFee = _amount * protocolPercentageFee / MAX_PROTOCOL_FEE;\\n\\n        // note: to avoid dust, we require _amount to be greater than (2  * bitcoinFee)\\n        require(_amount > protocolFee + 2 * bitcoinFee, \\\"CCBurnRouter: low amount\\\");\\n\\n        uint remainingAmount = _amount - protocolFee;\\n\\n        // Transfers protocol fee\\n        ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n\\n        return remainingAmount;\\n    }\\n\\n}\"\n    },\n    \"contracts/routers/CCExchangeRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ICCExchangeRouter.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"./interfaces/IInstantRouter.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../libraries/RequestHelper.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CCExchangeRouter is ICCExchangeRouter, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCExchangeRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override protocolPercentageFee; // A number between 0 to 10000\\n    address public override relay;\\n    address public override instantRouter;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    mapping(uint => address) public override exchangeConnector; // mapping from app id to exchange connector address \\n\\n    // Private variables\\n    mapping(bytes32 => ccExchangeRequest) private ccExchangeRequests;\\n\\n    /// @notice                             Gives default params to initiate cc exchange router\\n    /// @param _startingBlockNumber         Requests that are included in a block older than _startingBlockNumber cannot be executed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _relay                       The Relay address to validate data from source chain\\n    /// @param _lockers                     Lockers' contract address\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    /// @param _treasury                    Address of treasury that collects protocol fees\\n    constructor(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _chainId,\\n        address _lockers,\\n        address _relay,\\n        address _teleBTC,\\n        address _treasury\\n    ) {\\n        startingBlockNumber = _startingBlockNumber;\\n        chainId = _chainId;\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setTeleBTC(_teleBTC);\\n        _setTreasury(_treasury);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice         Changes relay contract address\\n    /// @dev            Only owner can call this\\n    /// @param _relay   The new relay contract address\\n    function setRelay(address _relay) external override onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice                 Changes instantRouter contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _instantRouter   The new instantRouter contract address\\n    function setInstantRouter(address _instantRouter) external override onlyOwner {\\n        _setInstantRouter(_instantRouter);\\n    }\\n\\n    /// @notice                 Changes lockers contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _lockers         The new lockers contract address\\n    function setLockers(address _lockers) external override onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice                     Sets appId for an exchange connector\\n    /// @dev                        Only owner can call this. _exchangeConnector can be set to zero to inactive an app\\n    /// @param _appId               AppId of exchange connector\\n    /// @param _exchangeConnector   Address of exchange connector\\n    function setExchangeConnector(\\n        uint _appId, \\n        address _exchangeConnector\\n    ) external override onlyOwner {\\n        exchangeConnector[_appId] = _exchangeConnector;\\n        emit SetExchangeConnector(_appId, _exchangeConnector);\\n    }\\n\\n    /// @notice                 Changes teleBTC contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                             Setter for protocol percentage fee\\n    /// @dev                    Only owner can call this\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice                    Setter for treasury\\n    /// @dev                       Only owner can call this\\n    /// @param _treasury           Treasury address\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice         Internal setter for relay contract address\\n    /// @param _relay   The new relay contract address\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                 Internal setter for instantRouter contract address\\n    /// @param _instantRouter   The new instantRouter contract address\\n    function _setInstantRouter(address _instantRouter) private nonZeroAddress(_instantRouter) {\\n        emit NewInstantRouter(instantRouter, _instantRouter);\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                 Internal setter for lockers contract address\\n    /// @param _lockers         The new lockers contract address\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                 Internal setter for teleBTC contract address\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                             Internal setter for protocol percentage fee\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(\\n            MAX_PROTOCOL_FEE >= _protocolPercentageFee,\\n            \\\"CCExchangeRouter: fee is out of range\\\"\\n        );\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                    Internal setter for treasury\\n    /// @param _treasury           Treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Check if the cc exchange request has been executed before\\n    /// @dev                                It prevents re-submitting an executed request\\n    /// @param _txId                        The transaction ID of request on source chain \\n    /// @return                             True if the cc exchange request has been already executed\\n    function isRequestUsed(bytes32 _txId) external view override returns (bool) {\\n        return ccExchangeRequests[_txId].isUsed ? true : false;\\n    }\\n\\n    /// @notice                     Executes a cross-chain exchange request after checking its merkle inclusion proof\\n    /// @dev                        Mints teleBTC for user if exchanging is not successful\\n    /// @param _version             Version of the transaction containing the user request\\n    /// @param _vin                 Inputs of the transaction containing the user request\\n    /// @param _vout                Outputs of the transaction containing the user request\\n    /// @param _locktime            Lock time of the transaction containing the user request\\n    /// @param _blockNumber         Height of the block containing the user request\\n    /// @param _intermediateNodes   Merkle inclusion proof for transaction containing the user request\\n    /// @param _index               Index of transaction containing the user request in the block\\n    /// @param _lockerLockingScript    Script hash of locker that user has sent BTC to it\\n    /// @return\\n    function ccExchange(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        bytes calldata _lockerLockingScript\\n    ) external payable nonReentrant override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCExchangeRouter: request is too old\\\");\\n\\n        // Calculates transaction id\\n        bytes32 txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n\\n        // Checks that the request has not been processed before\\n        require(\\n            !ccExchangeRequests[txId].isUsed,\\n            \\\"CCExchangeRouter: the request has been used before\\\"\\n        );\\n\\n        require(_locktime == bytes4(0), \\\"CCExchangeRouter: lock time is non-zero\\\");\\n\\n        // Extracts information from the request\\n        _saveCCExchangeRequest(_lockerLockingScript, _vout, txId);\\n\\n        // Check if transaction has been confirmed on source chain\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCExchangeRouter: transaction has not been finalized yet\\\"\\n        );\\n\\n        if (ccExchangeRequests[txId].speed == 0) {\\n            // Normal cc exchange request\\n            _normalCCExchange(_lockerLockingScript, txId);\\n        } else {\\n            // Pay back instant loan (ccExchangeRequests[txId].speed == 1)\\n            _payBackInstantLoan(_lockerLockingScript, txId);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                          Executes a normal cross-chain exchange request\\n    /// @dev                             Mints teleBTC for user if exchanging is not successful\\n    /// @param _lockerLockingScript      Locker's locking script    \\n    /// @param _txId                     Id of the transaction containing the user request\\n    function _normalCCExchange(bytes memory _lockerLockingScript, bytes32 _txId) private {\\n        // Gets remained amount after reducing fees\\n        uint remainedInputAmount = _mintAndReduceFees(_lockerLockingScript, _txId);\\n\\n        bool result;\\n        uint[] memory amounts;\\n\\n        // Gets exchange connector address\\n        address _exchangeConnector = exchangeConnector[ccExchangeRequests[_txId].appId];\\n        require(_exchangeConnector != address(0), \\\"CCExchangeRouter: app id doesn't exist\\\");\\n\\n        // Gives allowance to exchange connector to transfer from cc exchange router\\n        ITeleBTC(teleBTC).approve(\\n            _exchangeConnector,\\n            remainedInputAmount\\n        );\\n        \\n        ccExchangeRequest memory theCCExchangeReq = ccExchangeRequests[_txId];\\n\\n        if (IExchangeConnector(_exchangeConnector).isPathValid(theCCExchangeReq.path)) {\\n            // Exchanges minted teleBTC for output token\\n            (result, amounts) = IExchangeConnector(_exchangeConnector).swap(\\n                remainedInputAmount,\\n                theCCExchangeReq.outputAmount,\\n                theCCExchangeReq.path,\\n                theCCExchangeReq.recipientAddress,\\n                theCCExchangeReq.deadline,\\n                theCCExchangeReq.isFixedToken\\n            );\\n        } else {\\n            // Exchanges minted teleBTC for output token via wrappedNativeToken\\n            // note: path is [teleBTC, wrappedNativeToken, outputToken]\\n            address[] memory _path = new address[](3);\\n            _path[0] = theCCExchangeReq.path[0];\\n            _path[1] = IExchangeConnector(_exchangeConnector).wrappedNativeToken();\\n            _path[2] = theCCExchangeReq.path[1];\\n\\n            (result, amounts) = IExchangeConnector(_exchangeConnector).swap(\\n                remainedInputAmount,\\n                theCCExchangeReq.outputAmount,\\n                _path,\\n                theCCExchangeReq.recipientAddress,\\n                theCCExchangeReq.deadline,\\n                theCCExchangeReq.isFixedToken\\n            );\\n        }\\n\\n        if (result) {\\n            // Emits CCExchange if exchange was successful\\n            emit CCExchange(\\n                _lockerLockingScript,\\n                0,\\n                ILockers(lockers).getLockerTargetAddress(_lockerLockingScript),\\n                theCCExchangeReq.recipientAddress,\\n                [theCCExchangeReq.path[0], theCCExchangeReq.path[1]], // input token // output token\\n                [amounts[0], amounts[amounts.length-1]], // input amount // output amount\\n                theCCExchangeReq.speed,\\n                _msgSender(), // Teleporter address\\n                theCCExchangeReq.fee,\\n                _txId,\\n                theCCExchangeReq.appId\\n            );\\n\\n            // Transfers rest of teleBTC to recipientAddress (if input amount is not fixed)\\n            if (theCCExchangeReq.isFixedToken == false) {\\n                ITeleBTC(teleBTC).transfer(\\n                    theCCExchangeReq.recipientAddress,\\n                    remainedInputAmount - amounts[0]\\n                );\\n            }\\n        } else {\\n            // Handles situation when exchange was not successful\\n\\n            // Revokes allowance\\n            ITeleBTC(teleBTC).approve(\\n                _exchangeConnector,\\n                0\\n            );\\n\\n            // Sends teleBTC to recipient if exchange wasn't successful\\n            ITeleBTC(teleBTC).transfer(\\n                theCCExchangeReq.recipientAddress,\\n                remainedInputAmount\\n            );\\n\\n            emit FailedCCExchange(\\n                _lockerLockingScript,\\n                0,\\n                ILockers(lockers).getLockerTargetAddress(_lockerLockingScript),\\n                theCCExchangeReq.recipientAddress,\\n                [theCCExchangeReq.path[0], theCCExchangeReq.path[1]], // input token // output token\\n                [remainedInputAmount, 0],// input amount //  output amount\\n                theCCExchangeReq.speed,\\n                _msgSender(), // Teleporter address\\n                theCCExchangeReq.fee,\\n                _txId,\\n                theCCExchangeReq.appId\\n            );\\n        }\\n    }\\n\\n    /// @notice                        Executes an instant cross-chain exchange request\\n    /// @dev                           Mints teleBTC for instant router to pay back loan\\n    /// @param _lockerLockingScript    Locker's locking script\\n    /// @param _txId                   Id of the transaction containing the user request\\n    function _payBackInstantLoan(bytes memory _lockerLockingScript, bytes32 _txId) private {\\n        // Gets remained amount after reducing fees\\n        uint remainedAmount = _mintAndReduceFees(_lockerLockingScript, _txId);\\n\\n        // Gives allowance to instant router to transfer minted teleBTC\\n        ITeleBTC(teleBTC).approve(\\n            instantRouter,\\n            remainedAmount\\n        );\\n\\n        // Pays back instant loan\\n        IInstantRouter(instantRouter).payBackLoan(\\n            ccExchangeRequests[_txId].recipientAddress,\\n            remainedAmount\\n        );\\n\\n        ccExchangeRequest memory theCCExchangeReq = ccExchangeRequests[_txId];\\n\\n        emit CCExchange(\\n            _lockerLockingScript,\\n            0,\\n            ILockers(lockers).getLockerTargetAddress(_lockerLockingScript),\\n            theCCExchangeReq.recipientAddress,\\n            [theCCExchangeReq.path[0], theCCExchangeReq.path[1]], // input token // output token\\n            [remainedAmount, theCCExchangeReq.outputAmount], // input amount // output amount\\n            theCCExchangeReq.speed,\\n            _msgSender(), // Teleporter address\\n            theCCExchangeReq.fee,\\n            _txId,\\n            theCCExchangeReq.appId\\n        );\\n    }\\n\\n    /// @notice                             Parses and saves the request\\n    /// @dev                                Checks that user has sent BTC to a valid locker\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _vout                        The outputs of the tx\\n    /// @param _txId                        The txID of the request\\n    function _saveCCExchangeRequest(\\n        bytes memory _lockerLockingScript,\\n        bytes memory _vout,\\n        bytes32 _txId\\n    ) private {\\n\\n        // Checks that given script hash is locker\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCExchangeRouter: no locker with give script hash exists\\\"\\n        );\\n\\n        // Extracts value and opreturn data from request\\n        ccExchangeRequest memory request; // Defines it to save gas\\n        bytes memory arbitraryData;\\n        (request.inputAmount, arbitraryData) = BitcoinHelper.parseValueAndDataHavingLockingScriptBigPayload(\\n            _vout, \\n            _lockerLockingScript\\n        );\\n\\n        // Checks that input amount is not zero\\n        require(request.inputAmount > 0, \\\"CCExchangeRouter: input amount is zero\\\");\\n\\n        // Checks that the request belongs to this chain\\n        require(chainId == RequestHelper.parseChainId(arbitraryData), \\\"CCExchangeRouter: chain id is not correct\\\");\\n        request.appId = RequestHelper.parseAppId(arbitraryData);\\n        \\n        address exchangeToken = RequestHelper.parseExchangeToken(arbitraryData);\\n        request.outputAmount = RequestHelper.parseExchangeOutputAmount(arbitraryData);\\n\\n        if (RequestHelper.parseIsFixedToken(arbitraryData) == 0) {\\n            request.isFixedToken = false ;\\n        } else {\\n            request.isFixedToken = true ;\\n        }\\n\\n        request.recipientAddress = RequestHelper.parseRecipientAddress(arbitraryData);\\n\\n        // note: we assume that the path length is two\\n        address[] memory thePath = new address[](2);\\n        thePath[0] = teleBTC;\\n        thePath[1] = exchangeToken;\\n        request.path = thePath;\\n\\n        request.deadline = RequestHelper.parseDeadline(arbitraryData);\\n\\n        // Calculates fee\\n        uint percentageFee = RequestHelper.parsePercentageFee(arbitraryData);\\n        require(percentageFee <= MAX_PROTOCOL_FEE, \\\"CCExchangeRouter: percentage fee is not correct\\\");\\n        request.fee = percentageFee*request.inputAmount/MAX_PROTOCOL_FEE;\\n\\n        request.speed = RequestHelper.parseSpeed(arbitraryData);\\n        require(request.speed == 0 || request.speed == 1, \\\"CCExchangeRouter: speed is not correct\\\");\\n\\n        request.isUsed = true;\\n\\n        // Saves request\\n        ccExchangeRequests[_txId] = request;\\n    }\\n\\n    /// @notice                             Checks if tx has been finalized on source chain\\n    /// @dev                                Pays relay fee using included ETH in the transaction\\n    /// @param _txId                        The request tx\\n    /// @param _blockNumber                 The block number of the tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @return                             True if the tx is finalized on the source chain\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"CCExchangeRouter: paid fee is not sufficient\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to _msgSender()\\n        Address.sendValue(payable(_msgSender()), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                       Mints teleBTC by calling lockers contract\\n    /// @param _lockerLockingScript   Locker's locking script\\n    /// @param _txId                  The transaction ID of the request\\n    /// @return _remainedAmount       Amount of teleBTC that user receives after reducing all fees (protocol, locker, teleporter)\\n    function _mintAndReduceFees(\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount) {\\n\\n        // Mints teleBTC for cc exchange router\\n        uint mintedAmount = ILockers(lockers).mint(\\n            _lockerLockingScript,\\n            address(this),\\n            ccExchangeRequests[_txId].inputAmount\\n        );\\n\\n        // Calculates fees\\n        uint protocolFee = ccExchangeRequests[_txId].inputAmount*protocolPercentageFee/MAX_PROTOCOL_FEE;\\n        uint teleporterFee = ccExchangeRequests[_txId].fee;\\n\\n        // Pays Teleporter fee\\n        if (teleporterFee > 0) {\\n            ITeleBTC(teleBTC).transfer(_msgSender(), teleporterFee);\\n        }\\n\\n        // Pays protocol fee\\n        if (protocolFee > 0) {\\n            ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n        }\\n\\n        _remainedAmount = mintedAmount - protocolFee - teleporterFee;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/routers/CCTransferRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../libraries/RequestHelper.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"./interfaces/ICCTransferRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"./interfaces/IInstantRouter.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CCTransferRouter is ICCTransferRouter, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCTransferRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override appId;\\n    uint public override protocolPercentageFee; // A number between 0 to 10000\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override instantRouter;\\n    address public override treasury;\\n    mapping(bytes32 => ccTransferRequest) public ccTransferRequests; // TxId to CCTransferRequest structure\\n\\n    /// @notice                             Gives default params to initiate cc transfer router\\n    /// @param _startingBlockNumber         Requests that are included in a block older than _startingBlockNumber cannot be executed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _appId                       Id of ccTransfer dApp\\n    /// @param _relay                       The Relay address to validate data from source chain\\n    /// @param _lockers                     Lockers' contract address\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    /// @param _treasury                    Address of treasury that collects protocol fees\\n    constructor(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _chainId,\\n        uint _appId,\\n        address _relay,\\n        address _lockers,\\n        address _teleBTC,\\n        address _treasury\\n    ) {\\n        startingBlockNumber = _startingBlockNumber;\\n        chainId = _chainId;\\n        appId = _appId;\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setTeleBTC(_teleBTC);\\n        _setTreasury(_treasury);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                             Setter for protocol percentage fee\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice                             Setter for relay\\n    /// @dev                                Only owner can call this\\n    /// @param _relay                       Address of the relay contract\\n    function setRelay(address _relay) external override nonZeroAddress(_relay) onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice                             Setter for lockers\\n    /// @dev                                Only owner can call this\\n    /// @param _lockers                     Address of the lockers contract\\n    function setLockers(address _lockers) external override nonZeroAddress(_lockers) onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice                             Setter for instant router\\n    /// @dev                                Only owner can call this\\n    /// @param _instantRouter               Address of the instant router contract\\n    function setInstantRouter(address _instantRouter) external override nonZeroAddress(_instantRouter) onlyOwner {\\n        _setInstantRouter(_instantRouter);\\n    }\\n\\n    /// @notice                             Setter for teleBTC\\n    /// @dev                                Only owner can call this\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                             Setter for treasury\\n    /// @dev                                Only owner can call this\\n    /// @param _treasury                    Treasury address\\n    function setTreasury(address _treasury) external override nonZeroAddress(_treasury) onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice                             Internal setter for protocol percentage fee\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(\\n            MAX_PROTOCOL_FEE >= _protocolPercentageFee,\\n            \\\"CCTransferRouter: protocol fee is out of range\\\"\\n        );\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                             Internal setter for relay\\n    /// @param _relay                       Address of the relay contract\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Internal setter for relay\\n    /// @param _lockers                     Address of the lockers contract\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                             Internal setter for instant router\\n    /// @param _instantRouter               Address of the instant router contract\\n    function _setInstantRouter(address _instantRouter) private nonZeroAddress(_instantRouter) {\\n        emit NewInstantRouter(instantRouter, _instantRouter);\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                             Internal setter for teleBTC\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                             Internal setter for treasury\\n    /// @param _treasury                    Treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Check if the request has been executed before\\n    /// @dev                                This is to avoid re-submitting a used request\\n    /// @param _txId                        The txId of request on the source chain\\n    /// @return                             True if the request has been executed\\n    function isRequestUsed(bytes32 _txId) external view override returns (bool) {\\n        return ccTransferRequests[_txId].isUsed ? true : false;\\n    }\\n\\n    /// @notice                             Executes the cross chain transfer request\\n    /// @dev                                Validates the transfer request, then,\\n    ///                                     if speed is 1, the request is instant\\n    ///                                     which pays back the loan,\\n    ///                                     if the speed is 0, it is a normal transfer\\n    /// @param _version                     Version of the Bitcoin transaction\\n    /// @param _vin                         Transaction inputs\\n    /// @param _vout                        Transaction outputs\\n    /// @param _locktime                    Bitcoin transaction locktime\\n    /// @param _blockNumber                 The block number of the request tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @param _lockerLockingScript         Locking script of locker that user has sent BTC to it\\n    /// @return                             True if the transfer is successful\\n    function ccTransfer(\\n        // Bitcoin tx\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        // Bitcoin block number\\n        uint256 _blockNumber,\\n        // Merkle proof\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        bytes calldata _lockerLockingScript\\n    ) external payable nonReentrant override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCTransferRouter: request is too old\\\");\\n\\n        // Finds txId on the source chain\\n        bytes32 txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n        \\n        require(\\n            !ccTransferRequests[txId].isUsed,\\n            \\\"CCTransferRouter: request has been used before\\\"\\n        );\\n\\n        require(_locktime == bytes4(0), \\\"CCTransferRouter: lock time is non -zero\\\");\\n\\n        // Extracts information from the request\\n        _saveCCTransferRequest(_lockerLockingScript, _vout, txId);\\n\\n        // Checks if tx has been confirmed on source chain\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCTransferRouter: transaction has not been finalized yet\\\"\\n        );\\n\\n        // Normal cc transfer request\\n        if (ccTransferRequests[txId].speed == 0) {\\n            (uint receivedAmount, uint _protocolFee, uint _teleporterFee) = _sendTeleBTC(_lockerLockingScript, txId);\\n            emit CCTransfer(\\n                _lockerLockingScript,\\n                0,\\n                ILockers(lockers).getLockerTargetAddress(_lockerLockingScript),\\n                ccTransferRequests[txId].recipientAddress,\\n                ccTransferRequests[txId].inputAmount,\\n                receivedAmount,\\n                ccTransferRequests[txId].speed,\\n                _msgSender(),\\n                _teleporterFee,\\n                0,\\n                _protocolFee,\\n                txId\\n            );\\n            return true;\\n        } else {\\n            // Pays back instant loan (ccTransferRequests[txId].speed == 1)\\n            (uint receivedAmount, uint _protocolFee, uint _teleporterFee) = _payBackInstantLoan(_lockerLockingScript, txId);\\n            emit CCTransfer(\\n                _lockerLockingScript,\\n                0,\\n                ILockers(lockers).getLockerTargetAddress(_lockerLockingScript),\\n                ccTransferRequests[txId].recipientAddress,\\n                ccTransferRequests[txId].inputAmount,\\n                receivedAmount,\\n                ccTransferRequests[txId].speed,\\n                _msgSender(),\\n                _teleporterFee,\\n                0,\\n                _protocolFee,\\n                txId\\n            );\\n            return true;\\n        }\\n    }\\n\\n    /// @notice                             Sends minted teleBTC to the user\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _txId                        The transaction ID of the request\\n    /// @return _remainedAmount             Amount of teleBTC that user receives after reducing fees\\n    function _sendTeleBTC(bytes memory _lockerLockingScript, bytes32 _txId) private returns (\\n        uint _remainedAmount,\\n        uint _protocolFee, \\n        uint _teleporterFee\\n    ) {\\n        // Gets remained amount after reducing fees\\n        (_remainedAmount, _protocolFee, _teleporterFee) = _mintAndReduceFees(_lockerLockingScript, _txId);\\n\\n        // Transfers rest of tokens to recipient\\n        ITeleBTC(teleBTC).transfer(\\n            ccTransferRequests[_txId].recipientAddress,\\n            _remainedAmount\\n        );\\n    }\\n\\n    /// @notice                             Executes the paying back instant loan request\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _txId                        The transaction ID of the request\\n    /// @return _remainedAmount             Amount of teleBTC that user receives after reducing fees\\n    function _payBackInstantLoan(\\n        bytes memory _lockerLockingScript, \\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount, uint _protocolFee, uint _teleporterFee) {\\n\\n        // Gets remained amount after reducing fees\\n        (_remainedAmount, _protocolFee, _teleporterFee) = _mintAndReduceFees(_lockerLockingScript, _txId);\\n\\n        // Gives allowance to instant router to transfer remained teleBTC\\n        ITeleBTC(teleBTC).approve(\\n            instantRouter,\\n            _remainedAmount\\n        );\\n\\n        // Pays back instant loan\\n        IInstantRouter(instantRouter).payBackLoan(\\n            ccTransferRequests[_txId].recipientAddress,\\n            _remainedAmount\\n        );\\n    }\\n\\n    /// @notice                             Parses and saves the request\\n    /// @dev                                Checks that user has sent BTC to a valid locker\\n    /// @param _lockerLockingScript         Locker's locking script\\n    /// @param _vout                        The outputs of the tx\\n    /// @param _txId                        The txID of the request\\n    function _saveCCTransferRequest(\\n        bytes memory _lockerLockingScript,\\n        bytes memory _vout,\\n        bytes32 _txId\\n    ) private {\\n\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCTransferRouter: no locker with the given locking script exists\\\"\\n        );\\n\\n        // Extracts value and opreturn data from request\\n        ccTransferRequest memory request; // Defines it to save gas\\n        bytes memory arbitraryData;\\n        \\n        (request.inputAmount, arbitraryData) = BitcoinHelper.parseValueAndDataHavingLockingScriptSmallPayload(\\n            _vout, \\n            _lockerLockingScript\\n        );\\n\\n        // Checks that input amount is not zero\\n        require(request.inputAmount > 0, \\\"CCTransferRouter: input amount is zero\\\");\\n\\n        // Checks chain id and app id\\n        require(RequestHelper.parseChainId(arbitraryData) == chainId, \\\"CCTransferRouter: chain id is not correct\\\");\\n        require(RequestHelper.parseAppId(arbitraryData) == appId, \\\"CCTransferRouter: app id is not correct\\\");\\n\\n        // Calculates fee\\n        uint percentageFee = RequestHelper.parsePercentageFee(arbitraryData);\\n        require(percentageFee <= MAX_PROTOCOL_FEE, \\\"CCTransferRouter: percentage fee is out of range\\\");\\n        request.fee = percentageFee*request.inputAmount/MAX_PROTOCOL_FEE;\\n\\n        // Parses recipient address and request speed\\n        request.recipientAddress = RequestHelper.parseRecipientAddress(arbitraryData);\\n        request.speed = RequestHelper.parseSpeed(arbitraryData);\\n        require(request.speed == 0 || request.speed == 1, \\\"CCTransferRouter: speed is out of range\\\");\\n\\n        // Marks the request as used\\n        request.isUsed = true;\\n\\n        // Saves the request data\\n        ccTransferRequests[_txId] = request;\\n    }\\n\\n    /// @notice                             Checks if tx has been finalized on source chain\\n    /// @dev                                Pays relay fee using included ETH in the transaction\\n    /// @param _txId                        The request tx\\n    /// @param _blockNumber                 The block number of the tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @return                             True if the tx is finalized on the source chain\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Calculates fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0); // Index 0 is for finalized blocks\\n        require(msg.value >= feeAmount, \\\"CCTransferRouter: paid fee is not sufficient\\\");\\n\\n        // Calls relay contract (transfers all msg.value to it)\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n        \\n        // Sends extra ETH back to _msgSender()\\n        Address.sendValue(payable(_msgSender()), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                       Mints teleBTC by calling lockers contract\\n    /// @param _lockerLockingScript   Locker's locking script\\n    /// @param _txId                  The transaction ID of the request\\n    /// @return _remainedAmount       Amount of teleBTC that user receives after reducing all fees (protocol, locker, teleporter)\\n    function _mintAndReduceFees(\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount, uint _protocolFee, uint _teleporterFee) {\\n\\n        // Mints teleBTC for cc transfer router\\n        // Lockers contract gets locker's fee\\n        uint mintedAmount = ILockers(lockers).mint(\\n            _lockerLockingScript,\\n            address(this),\\n            ccTransferRequests[_txId].inputAmount\\n        );\\n\\n        // Calculates fees\\n        _protocolFee = ccTransferRequests[_txId].inputAmount*protocolPercentageFee/MAX_PROTOCOL_FEE;\\n        _teleporterFee = ccTransferRequests[_txId].fee;\\n\\n        // Pays Teleporter fee\\n        if (_teleporterFee > 0) {\\n            ITeleBTC(teleBTC).transfer(_msgSender(), _teleporterFee);\\n        }\\n\\n        // Pays protocol fee\\n        if (_protocolFee > 0) {\\n            ITeleBTC(teleBTC).transfer(treasury, _protocolFee);\\n        }\\n\\n        _remainedAmount = mintedAmount - _protocolFee - _teleporterFee;\\n    }\\n\\n    receive() external payable {}\\n}\"\n    },\n    \"contracts/routers/InstantRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IInstantRouter.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../pools/interfaces/IInstantPool.sol\\\";\\nimport \\\"../pools/interfaces/ICollateralPool.sol\\\";\\nimport \\\"../pools/interfaces/ICollateralPoolFactory.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\ncontract InstantRouter is IInstantRouter, Ownable, ReentrancyGuard, Pausable {\\n     using SafeERC20 for IERC20;\\n     using SafeCast for uint;\\n     \\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"InstantRouter: zero address\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_SLASHER_PERCENTAGE_REWARD = 10000;\\n    uint constant ONE_HUNDRED_PERCENT = 10000;\\n    uint constant MAX_INSTANT_LOAN_NUMBER = 10;\\n\\n    // Public variables\\n    mapping(address => instantRequest[]) public instantRequests; // Mapping from user address to user's unpaid instant requests\\n    mapping(address => uint256) public instantRequestCounter;\\n    uint public override slasherPercentageReward;\\n    uint public override paybackDeadline;\\n    uint public override maxPriceDifferencePercent;\\n    address public override treasuaryAddress;\\n\\n    address public override teleBTC;\\n    address public override teleBTCInstantPool;\\n    address public override relay;\\n    address public override priceOracle;\\n    address public override collateralPoolFactory;\\n    address public override defaultExchangeConnector;\\n\\n    /// @notice                             This contract handles instant transfer and instant exchange requests\\n    /// @dev                                It manages instant pool contract to give loan to users\\n    /// @param _teleBTC                     Address of teleBTC contract\\n    /// @param _relay                       Address of relay contract\\n    /// @param _priceOracle                 Address of price oracle contract\\n    /// @param _collateralPoolFactory       Address of collateral pool factory contract\\n    /// @param _slasherPercentageReward     Percentage of total collateral that goes to slasher\\n    /// @param _paybackDeadline             Deadline of paying back the borrowed tokens\\n    /// @param _defaultExchangeConnector    Exchange connector that is used for exchanging user's collateral to teleBTC (in the case of slashing)\\n    /// @param _maxPriceDifferencePercent   Maximum acceptable price different between chainlink price oracle and dex price\\n    /// @param _treasuaryAddress            Treasury address to which the extra TeleBTCs will go \\n    constructor(\\n        address _teleBTC,\\n        address _relay,\\n        address _priceOracle,\\n        address _collateralPoolFactory,\\n        uint _slasherPercentageReward,\\n        uint _paybackDeadline,\\n        address _defaultExchangeConnector,\\n        uint _maxPriceDifferencePercent,\\n        address _treasuaryAddress\\n    ) {\\n        _setTeleBTC(_teleBTC);\\n        _setRelay(_relay);\\n        _setPriceOracle(_priceOracle);\\n        _setCollateralPoolFactory(_collateralPoolFactory);\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n        _setPaybackDeadline(_paybackDeadline);\\n        _setDefaultExchangeConnector(_defaultExchangeConnector);\\n        _setMaxPriceDifferencePercent(_maxPriceDifferencePercent);\\n        _setTreasuaryAddress(_treasuaryAddress);\\n    }\\n\\n    receive() external payable {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice       Pause the contract\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice       Unpause the contract\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice                  Gives the locked collateral pool token corresponding to a request\\n    /// @param _user             Address of the user\\n    /// @param _index            Index of the request in user's request list\\n    /// @return                  Amount of locked collateral pool token (not collateral token)\\n    function getLockedCollateralPoolTokenAmount(\\n        address _user,\\n        uint _index\\n    ) external view override returns (uint) {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: wrong index\\\");\\n        return instantRequests[_user][_index].lockedCollateralPoolTokenAmount;\\n    }\\n\\n    /// @notice                   Gives the total number of user's unpaid loans\\n    /// @param _user              Address of the user\\n    /// @return                   The total number of user's requests\\n    function getUserRequestsLength(address _user) external view override returns (uint) {\\n        return instantRequests[_user].length;\\n    }\\n\\n    /// @notice                   Gives deadline of a specefic request\\n    /// @param _user              Address of the user\\n    /// @param _index             Index of the request in user's request list\\n    /// @return                   Deadline of that request\\n    function getUserRequestDeadline(address _user, uint _index) external view override returns (uint) {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: wrong index\\\");\\n        return instantRequests[_user][_index].deadline;\\n    }\\n\\n    /// @notice                   Setter for payback deadline\\n    /// @dev                      Only owner can call this. It should be greater than relay finalization parameter so user has enough time to payback loan\\n    /// @param _paybackDeadline   The new payback deadline\\n    function setPaybackDeadline(uint _paybackDeadline) external override onlyOwner {\\n        _setPaybackDeadline(_paybackDeadline);\\n    }\\n\\n    /// @notice                   Fixing payback deadline after changing finalization parameter\\n    function fixPaybackDeadline() external {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        require(_finalizationParameter <= paybackDeadline, \\\"InstantRouter: finalization parameter is not greater than payback deadline\\\");\\n        uint _paybackDeadline = 2 * _finalizationParameter + 1;\\n        _setPaybackDeadline(_paybackDeadline);\\n    }\\n\\n    /// @notice                             Setter for slasher percentage reward\\n    /// @dev                                Only owner can call this\\n    /// @param _slasherPercentageReward     The new slasher reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n    }\\n\\n    /// @notice                                 Setter for teleBTC\\n    /// @dev                                    Only owner can call this\\n    /// @param _teleBTC                         The new teleBTC address\\n    function setTeleBTC(\\n        address _teleBTC\\n    ) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                                 Setter for relay\\n    /// @dev                                    Only owner can call this\\n    /// @param _relay                           The new relay address\\n    function setRelay(\\n        address _relay\\n    ) external override onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice                                 Setter for collateral pool factory\\n    /// @dev                                    Only owner can call this\\n    /// @param _collateralPoolFactory           The new collateral pool factory address\\n    function setCollateralPoolFactory(\\n        address _collateralPoolFactory\\n    ) external override onlyOwner {\\n        _setCollateralPoolFactory(_collateralPoolFactory);\\n    }\\n\\n    /// @notice                                 Setter for price oracle\\n    /// @dev                                    Only owner can call this\\n    /// @param _priceOracle                     The new price oracle address\\n    function setPriceOracle(\\n        address _priceOracle\\n    ) external override onlyOwner {\\n        _setPriceOracle(_priceOracle);\\n    }\\n\\n    /// @notice                                 Setter for teleBTC instant pool\\n    /// @dev                                    Only owner can call this\\n    /// @param _teleBTCInstantPool              The new teleBTC instant pool address\\n    function setTeleBTCInstantPool(\\n        address _teleBTCInstantPool\\n    ) external override onlyOwner {\\n        _setTeleBTCInstantPool(_teleBTCInstantPool);\\n    }\\n\\n    /// @notice                                 Setter for default exchange connector\\n    /// @dev                                    Only owner can call this\\n    /// @param _defaultExchangeConnector        The new defaultExchangeConnector address\\n    function setDefaultExchangeConnector(\\n        address _defaultExchangeConnector\\n    ) external override onlyOwner {\\n        _setDefaultExchangeConnector(_defaultExchangeConnector);\\n    }\\n\\n    /// @notice                                 Setter for treasury address\\n    /// @dev                                    Only owner can call this\\n    /// @param _treasuaryAddress                The new treasury address\\n    function setTreasuaryAddress(\\n        address _treasuaryAddress\\n    ) external override onlyOwner {\\n        _setTreasuaryAddress(_treasuaryAddress);\\n    }\\n\\n    /// @notice                                 Setter for max price differnce in percent \\n    /// @dev                                    Only owner can call this\\n    /// @param _maxPriceDifferencePercent       The new maxPriceDifferencePercent \\n    function setMaxPriceDifferencePercent(\\n        uint _maxPriceDifferencePercent\\n    ) external override onlyOwner {\\n        _setMaxPriceDifferencePercent(_maxPriceDifferencePercent);\\n    }\\n\\n    /// @notice                   Internal setter for payback deadline\\n    /// @dev                      Only owner can call this. It should be greater than relay finalization parameter so user has enough time to payback loan\\n    /// @param _paybackDeadline   The new payback deadline\\n    function _setPaybackDeadline(uint _paybackDeadline) private {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        // Gives users enough time to pay back loans\\n        require(_paybackDeadline > _finalizationParameter, \\\"InstantRouter: wrong payback deadline\\\");\\n        emit NewPaybackDeadline(paybackDeadline, _paybackDeadline);\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    /// @notice                             Internal setter for slasher percentage reward\\n    /// @dev                                Only owner can call this\\n    /// @param _slasherPercentageReward     The new slasher reward\\n    function _setSlasherPercentageReward(uint _slasherPercentageReward) private {\\n        require(\\n            _slasherPercentageReward <= MAX_SLASHER_PERCENTAGE_REWARD,\\n            \\\"InstantRouter: wrong slasher percentage reward\\\"\\n        );\\n        emit NewSlasherPercentageReward(slasherPercentageReward, _slasherPercentageReward);\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                                 Internal setter for teleBTC instant\\n    /// @param _teleBTC                         The new teleBTC instant address\\n    function _setTeleBTC(\\n        address _teleBTC\\n    ) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                                 Internal setter for relay\\n    /// @param _relay                           The new relay address\\n    function _setRelay(\\n        address _relay\\n    ) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                                 Internal setter for collateral pool factory\\n    /// @param _collateralPoolFactory           The new collateral pool factory address\\n    function _setCollateralPoolFactory(\\n        address _collateralPoolFactory\\n    ) private nonZeroAddress(_collateralPoolFactory) {\\n        emit NewCollateralPoolFactory(collateralPoolFactory, _collateralPoolFactory);\\n        collateralPoolFactory = _collateralPoolFactory;\\n    }\\n\\n    /// @notice                                 Internal setter for price oracle\\n    /// @param _priceOracle                     The new price oracle address\\n    function _setPriceOracle(\\n        address _priceOracle\\n    ) private nonZeroAddress(_priceOracle) {\\n        emit NewPriceOracle(priceOracle, _priceOracle);\\n        priceOracle = _priceOracle;\\n    }\\n\\n    /// @notice                                 Internal setter for teleBTC instant pool\\n    /// @param _teleBTCInstantPool              The new teleBTC instant pool address\\n    function _setTeleBTCInstantPool(\\n        address _teleBTCInstantPool\\n    ) private nonZeroAddress(_teleBTCInstantPool) {\\n        emit NewTeleBTCInstantPool(teleBTCInstantPool, _teleBTCInstantPool);\\n        teleBTCInstantPool = _teleBTCInstantPool;\\n    }\\n\\n    /// @notice                                 Internal setter for default exchange connector\\n    /// @param _defaultExchangeConnector        The new defaultExchangeConnector address\\n    function _setDefaultExchangeConnector(\\n        address _defaultExchangeConnector\\n    ) private nonZeroAddress(_defaultExchangeConnector) {\\n        emit NewDefaultExchangeConnector(defaultExchangeConnector, _defaultExchangeConnector);\\n        defaultExchangeConnector = _defaultExchangeConnector;\\n    }\\n\\n    /// @notice                                 Internal setter for treasury address\\n    /// @param _treasuaryAddress                The new treasuaryAddress \\n    function _setTreasuaryAddress(\\n        address _treasuaryAddress\\n    ) private nonZeroAddress(_treasuaryAddress) {\\n        emit NewTreasuaryAddress(treasuaryAddress, _treasuaryAddress);\\n        treasuaryAddress = _treasuaryAddress;\\n    }\\n\\n    /// @notice                                 Internal setter for max price differnce in percent  \\n    /// @param _maxPriceDifferencePercent        The new maxPriceDifferencePercent \\n    function _setMaxPriceDifferencePercent(\\n        uint _maxPriceDifferencePercent\\n    ) private {\\n        emit NewMaxPriceDifferencePercent(maxPriceDifferencePercent, _maxPriceDifferencePercent);\\n        maxPriceDifferencePercent = _maxPriceDifferencePercent;\\n    }\\n\\n    /// @notice                   Transfers the loan amount (in teleBTC) to the user\\n    /// @dev                      Transfers required collateral pool token of user to itself. Only works when contract is not paused.\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _deadline          Deadline for getting the loan\\n    /// @param _collateralToken   Address of the collateral token\\n    /// @return                   True if getting loan was successful\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralToken\\n    ) external nonReentrant nonZeroAddress(_receiver) nonZeroAddress(_collateralToken)\\n    whenNotPaused override returns (bool) {\\n        // Checks that deadline for getting loan has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Gets the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).getFee(_loanAmount);\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(_msgSender(), _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool for receiver\\n        IInstantPool(teleBTCInstantPool).getLoan(_receiver, _loanAmount);\\n\\n        emit InstantTransfer(\\n            _msgSender(),\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            instantRequests[_msgSender()][instantRequests[_msgSender()].length - 1].deadline,\\n            _collateralToken,\\n            instantRequests[_msgSender()][instantRequests[_msgSender()].length - 1].lockedCollateralPoolTokenAmount,\\n            instantRequests[_msgSender()][instantRequests[_msgSender()].length - 1].requestCounterOfUser\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                   Exchanges the loan amount (in teleBTC) for the user\\n    /// @dev                      Locks the required collateral amount of the user. Only works when contract is not paused.\\n    /// @param _exchangeConnector Address of exchange connector that user wants to exchange the borrowed teleBTC in it\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _amountOut         Amount of the output token\\n    /// @param _path              Path of exchanging tokens\\n    /// @param _deadline          Deadline for getting the loan\\n    /// @param _collateralToken   Address of collateral token\\n    /// @param _isFixedToken      Shows whether input or output is fixed in exchange\\n    /// @return _amounts          Amounts of tokens involved in the exchange\\n    function instantCCExchange(\\n        address _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _amountOut,\\n        address[] memory _path,\\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external nonReentrant nonZeroAddress(_exchangeConnector)\\n    whenNotPaused override returns(uint[] memory _amounts) {\\n        // Checks that deadline for exchanging has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Checks that the first token of path is teleBTC and its length is greater than one\\n        require(_path[0] == teleBTC && _path.length > 1, \\\"InstantRouter: path is invalid\\\");\\n\\n        // Calculates the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).getFee(_loanAmount);\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(_msgSender(), _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool\\n        IInstantPool(teleBTCInstantPool).getLoan(address(this), _loanAmount);\\n\\n        // Gives allowance to exchange connector\\n        ITeleBTC(teleBTC).approve(_exchangeConnector, _loanAmount);\\n\\n        // Exchanges teleBTC for output token\\n        bool result;\\n        (result, _amounts) = IExchangeConnector(_exchangeConnector).swap(\\n            _loanAmount,\\n            _amountOut,\\n            _path,\\n            _receiver,\\n            _deadline,\\n            _isFixedToken\\n        );\\n\\n        /*\\n            Reverts if exchanging was not successful since\\n            user doesn't want to lock collateral without exchanging\\n        */\\n        require(result == true, \\\"InstantRouter: exchange was not successful\\\");\\n\\n        emit InstantExchange(\\n            _msgSender(),\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            _amountOut,\\n            _path,\\n            _isFixedToken,\\n            instantRequests[_msgSender()][instantRequests[_msgSender()].length - 1].deadline, // payback deadline\\n            _collateralToken,\\n            instantRequests[_msgSender()][instantRequests[_msgSender()].length - 1].lockedCollateralPoolTokenAmount,\\n            instantRequests[_msgSender()][instantRequests[_msgSender()].length - 1].requestCounterOfUser\\n        );\\n    }\\n\\n    /// @notice                             Settles loans of the user\\n    /// @dev                                Caller should give allowance for teleBTC to instant router\\n    /// @param _user                        Address of user who wants to pay back loans\\n    /// @param _teleBTCAmount               Amount of available teleBTC to pay back loans\\n    /// @return                             True if paying back is successful\\n    function payBackLoan(\\n        address _user,\\n        uint _teleBTCAmount\\n    ) external nonReentrant nonZeroAddress(_user) override returns (bool) {\\n        uint remainedAmount = _teleBTCAmount;\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        uint amountToTransfer = 0;\\n\\n        for (uint i = 1; i <= instantRequests[_user].length; i++) {\\n\\n            // Checks that remained teleBTC is enough to pay back the loan and payback deadline has not passed\\n            if (\\n                remainedAmount >= instantRequests[_user][i-1].paybackAmount &&\\n                instantRequests[_user][i-1].deadline >= lastSubmittedHeight\\n            ) {\\n                remainedAmount = remainedAmount - instantRequests[_user][i-1].paybackAmount;\\n\\n                // Pays back the loan to instant pool\\n                amountToTransfer += instantRequests[_user][i-1].paybackAmount;\\n\\n                // Unlocks the locked collateral pool token after paying the loan\\n                IERC20(instantRequests[_user][i-1].collateralPool).safeTransfer(\\n                    _user,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                emit PaybackLoan(\\n                    _user,\\n                    instantRequests[_user][i-1].paybackAmount,\\n                    instantRequests[_user][i-1].collateralToken,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount,\\n                    instantRequests[_user][i-1].requestCounterOfUser\\n                );\\n\\n                // Deletes the request after paying it\\n                _removeElement(_user, i-1);\\n                i--;\\n            }\\n\\n            if (remainedAmount == 0) {\\n                break;\\n            }\\n        }\\n\\n        ITeleBTC(teleBTC).transferFrom(\\n            _msgSender(),\\n            teleBTCInstantPool,\\n            amountToTransfer\\n        );\\n\\n        // Transfers remained teleBTC to user\\n        if (remainedAmount > 0) {\\n            ITeleBTC(teleBTC).transferFrom(_msgSender(), _user, remainedAmount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes collateral of user who did not pay back loan before its deadline\\n    /// @dev                              Buys teleBTC using the collateral and sends it to instant pool\\n    /// @param _user                      Address of the slashed user\\n    /// @param _requestIndex              Index of the request that have not been paid back before deadline\\n    /// @return                           True if slashing is successful\\n    function slashUser(\\n        address _user,\\n        uint _requestIndex\\n    ) override nonReentrant nonZeroAddress(_user) external returns (bool) {\\n\\n        require(instantRequests[_user].length > _requestIndex, \\\"InstantRouter: request index does not exist\\\");\\n\\n        // Checks that deadline has passed\\n        require(\\n            instantRequests[_user][_requestIndex].deadline < IBitcoinRelay(relay).lastSubmittedHeight(),\\n            \\\"InstantRouter: deadline has not passed yet\\\"\\n        );\\n\\n        // Gets loan information\\n        instantRequest memory theRequest = instantRequests[_user][_requestIndex];\\n\\n        // modifiedPayBackAmount is the maximum payback amount that can be get from the user \\n        // it's used to calculate maximum equivalent collateral amount\\n        uint modifiedPayBackAmount = theRequest.paybackAmount * \\n            (ONE_HUNDRED_PERCENT + maxPriceDifferencePercent) / ONE_HUNDRED_PERCENT;\\n\\n        // Finds needed collateral token to pay back loan\\n        (, uint requiredCollateralToken) = IExchangeConnector(defaultExchangeConnector).getInputAmount(\\n            modifiedPayBackAmount, // Output amount\\n            theRequest.collateralToken, // Input token\\n            teleBTC // Output token\\n        );\\n\\n        // 0 means that the result is false\\n        require(requiredCollateralToken != 0, \\\"InstantRouter: liquidity pool doesn't exist or liquidity is not sufficient\\\");\\n\\n        // Gets the equivalent amount of collateral token\\n        uint requiredCollateralTokenFromOracle = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            modifiedPayBackAmount, // input amount\\n            IERC20Metadata(teleBTC).decimals(),\\n            IERC20Metadata(theRequest.collateralToken).decimals(),\\n            teleBTC, // input token\\n            theRequest.collateralToken // output token\\n        );\\n\\n        // check the price diferences between two sources and compare with the maximum acceptable price difference\\n        uint absPriceDiff = _abs(requiredCollateralTokenFromOracle.toInt256() - requiredCollateralToken.toInt256());\\n        require(\\n            absPriceDiff <= (requiredCollateralToken * maxPriceDifferencePercent)/ONE_HUNDRED_PERCENT,\\n            \\\"InstantRouter: big gap between oracle and AMM price\\\"\\n        );\\n\\n        // update the modifiedPayBackAmount again\\n        if (requiredCollateralToken >= requiredCollateralTokenFromOracle) {\\n            modifiedPayBackAmount = theRequest.paybackAmount;\\n        } else {\\n            modifiedPayBackAmount = theRequest.paybackAmount * requiredCollateralTokenFromOracle / requiredCollateralToken;\\n        }\\n\\n        uint totalCollateralToken = ICollateralPool(theRequest.collateralPool).equivalentCollateralToken(\\n            theRequest.lockedCollateralPoolTokenAmount\\n        );\\n\\n        // Path of exchanging\\n        address[] memory path = new address[](2);\\n        path[0] = theRequest.collateralToken;\\n        path[1] = teleBTC;\\n\\n        // Gets collateral token from collateral pool\\n        ICollateralPool(theRequest.collateralPool).removeCollateral(theRequest.lockedCollateralPoolTokenAmount);\\n\\n        uint[] memory resultAmounts;\\n\\n        // Checks that locked collateral is enough to pay back loan\\n        if (totalCollateralToken >= requiredCollateralToken) {\\n            // Approves exchange connector to use collateral token\\n            IERC20(theRequest.collateralToken).approve(defaultExchangeConnector, requiredCollateralToken);\\n\\n            // Exchanges collateral token for teleBTC\\n            (, resultAmounts) = IExchangeConnector(defaultExchangeConnector).swap(\\n                requiredCollateralToken,\\n                modifiedPayBackAmount, // Output amount\\n                path,\\n                address(this),\\n                block.timestamp + 1,\\n                false // Output amount is fixed\\n            );\\n\\n            // send the laon amount to the instant pool and the excess amount to the treasury\\n            IERC20(teleBTC).safeTransfer(teleBTCInstantPool, theRequest.paybackAmount);\\n            if (modifiedPayBackAmount > theRequest.paybackAmount) {\\n                IERC20(teleBTC).safeTransfer(treasuaryAddress, modifiedPayBackAmount - theRequest.paybackAmount);\\n            }\\n\\n            // Sends reward to slasher\\n            uint slasherReward = (totalCollateralToken - resultAmounts[0])\\n                *slasherPercentageReward/MAX_SLASHER_PERCENTAGE_REWARD;\\n            IERC20(theRequest.collateralToken).safeTransfer(_msgSender(), slasherReward);\\n\\n            if ((totalCollateralToken - resultAmounts[0] - slasherReward) > 0) {\\n                // Deposits rest of the tokens to collateral pool on behalf of the user\\n                IERC20(theRequest.collateralToken).approve(\\n                    theRequest.collateralPool, \\n                    totalCollateralToken - resultAmounts[0] - slasherReward\\n                );\\n                \\n                ICollateralPool(theRequest.collateralPool).addCollateral(\\n                    _user,\\n                    totalCollateralToken - resultAmounts[0] - slasherReward\\n                );\\n            }\\n\\n            emit SlashUser(\\n                _user,\\n                theRequest.collateralToken,\\n                resultAmounts[0] + slasherReward, // total slashed collateral\\n                modifiedPayBackAmount,\\n                _msgSender(),\\n                slasherReward,\\n                theRequest.requestCounterOfUser\\n            );\\n        } else { // Handles situations where locked collateral is not enough to pay back the loan\\n\\n            // Approves exchange connector to use collateral token\\n            IERC20(theRequest.collateralToken).approve(defaultExchangeConnector, totalCollateralToken);\\n\\n            // Buys teleBTC as much as possible and sends it to instant pool\\n            (, resultAmounts) = IExchangeConnector(defaultExchangeConnector).swap(\\n                totalCollateralToken,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp + 1,\\n                true // Input amount is fixed\\n            );\\n\\n            if (resultAmounts[resultAmounts.length - 1] > theRequest.paybackAmount) {\\n                // send the laon amount to the instant pool and the excess amount to the treasury\\n                IERC20(teleBTC).safeTransfer(teleBTCInstantPool, theRequest.paybackAmount);\\n                IERC20(teleBTC).safeTransfer(\\n                    treasuaryAddress, resultAmounts[resultAmounts.length - 1] - theRequest.paybackAmount\\n                );\\n            } else {\\n                IERC20(teleBTC).safeTransfer(teleBTCInstantPool, resultAmounts[resultAmounts.length - 1]);\\n            }\\n\\n            emit SlashUser(\\n                _user,\\n                theRequest.collateralToken,\\n                totalCollateralToken,\\n                resultAmounts[resultAmounts.length - 1],\\n                _msgSender(),\\n                0, // Slasher reward is zero,\\n                theRequest.requestCounterOfUser\\n            );\\n        }\\n\\n        // Deletes the request after slashing user\\n        _removeElement(_user, _requestIndex);\\n\\n        return true;\\n    }\\n\\n    /// @notice             Removes an element of array of user's instant requests\\n    /// @dev                Deletes and shifts the array\\n    /// @param _user        Address of the user whose instant requests array is considered\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElement(address _user, uint _index) private {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: index is out of bound\\\");\\n        for (uint i = _index; i < instantRequests[_user].length - 1; i++) {\\n            instantRequests[_user][i] = instantRequests[_user][i+1];\\n        }\\n        instantRequests[_user].pop();\\n    }\\n\\n    /// @notice                   Locks the required amount of user's collateral\\n    /// @dev                      Records the instant request to be used in future\\n    /// @param _user              Address of the loan receiver\\n    /// @param _paybackAmount     Amount of the (loan + fee) that should be paid back by user\\n    /// @param _collateralToken   Address of the collateral token\\n    function _lockCollateral(\\n        address _user,\\n        uint _paybackAmount,\\n        address _collateralToken\\n    ) private nonZeroAddress(_collateralToken) {\\n        // Checks that collateral token is acceptable\\n        require(\\n            ICollateralPoolFactory(collateralPoolFactory).isCollateral(_collateralToken),\\n            \\\"InstantRouter: collateral token is not acceptable\\\"\\n        );\\n\\n        require(\\n            instantRequests[_user].length < MAX_INSTANT_LOAN_NUMBER,\\n            \\\"InstantRouter: reached max loan number\\\"\\n        );\\n\\n        // Gets the collateral pool address\\n        address collateralPool = ICollateralPoolFactory(collateralPoolFactory).getCollateralPoolByToken(\\n            _collateralToken\\n        );\\n\\n        // Gets collateralization ratio\\n        uint collateralizationRatio = ICollateralPool(collateralPool).collateralizationRatio();\\n\\n        // Gets the equivalent amount of collateral token\\n        uint equivalentCollateralToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _paybackAmount, // input amount\\n            IERC20Metadata(teleBTC).decimals(),\\n            IERC20Metadata(_collateralToken).decimals(),\\n            teleBTC, // input token\\n            _collateralToken // output token\\n        );\\n\\n        // Finds needed collateral token for getting loan\\n        uint requiredCollateralToken = equivalentCollateralToken*collateralizationRatio/ONE_HUNDRED_PERCENT;\\n\\n        // Finds needed collateral pool token for getting loan\\n        uint requiredCollateralPoolToken = ICollateralPool(collateralPool).equivalentCollateralPoolToken(\\n            requiredCollateralToken\\n        );\\n\\n        // Transfers collateral pool token from user to itself\\n        IERC20(collateralPool).safeTransferFrom(_user, address(this), requiredCollateralPoolToken);\\n\\n        // Records the instant request for user\\n        instantRequest memory request;\\n        request.user = _user;\\n        request.paybackAmount = _paybackAmount;\\n        request.lockedCollateralPoolTokenAmount = requiredCollateralPoolToken;\\n        request.collateralPool = collateralPool;\\n        request.collateralToken = _collateralToken;\\n        request.deadline = IBitcoinRelay(relay).lastSubmittedHeight() + paybackDeadline;\\n        request.requestCounterOfUser = instantRequestCounter[_user];\\n        instantRequestCounter[_user] = instantRequestCounter[_user] + 1;\\n        instantRequests[_user].push(request);\\n\\n    }\\n\\n    /// @notice             Returns absolute value\\n    function _abs(int _value) private pure returns (uint) {\\n        return _value >= 0 ? uint(_value) : uint(-_value);\\n    }\\n}\"\n    },\n    \"contracts/routers/interfaces/ICCBurnRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice Emits when a burn request gets submitted\\n    /// @param userTargetAddress Address of the user\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n    /// @param inputAmount Amount of input token (0 if input token is teleBTC)\\n    /// @param inputToken Address of token that will be exchanged for teleBTC (address(0) if input token is teleBTC)\\n\\t/// @param teleBTCAmount amount of teleBTC that user sent OR Amount of teleBTC after exchanging\\n    /// @param burntAmount that user will receive (after reducing fees)\\n\\t/// @param lockerTargetAddress Address of Locker\\n\\t/// @param requestIdOfLocker Index of request between Locker's burn requests\\n\\t/// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\tuint inputAmount,\\n\\t\\taddress inputToken,\\n\\t\\tuint teleBTCAmount, \\n\\t\\tuint burntAmount,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n\\t/// @param bitcoinTxOutputIndex The output index in tx\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\tBlock number of the malicious tx\\n\\t/// @param txId\\tTransaction ID of the malicious tx\\n\\t/// @param amount Slashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice Emits when relay address is updated\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice Emits when treasury address is updated\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice Emits when lockers address is updated\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice Emits when bitcoin fee is updated\\n    event NewBitcoinFee(\\n        uint oldBitcoinFee, \\n        uint newBitcoinFee\\n    );\\n\\n\\t// Read-only functions\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external;\\n\\n    function ccExchangeAndBurn(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline, \\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n\\t) external;\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers \\n\\t\\t// ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable returns (bool);\\n}\"\n    },\n    \"contracts/routers/interfaces/ICCExchangeRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface ICCExchangeRouter {\\n    // Structures\\n\\n    /// @notice                    Structure for recording cross-chain exchange requests\\n    /// @param appId               Application id that user wants to use (defines the exchange that user wants to use)\\n    /// @param inputAmount         Amount of locked BTC on source chain\\n    /// @param outputAmount        Amount of output token\\n    /// @param isFixedToken        True if amount of input token is fixed\\n    /// @param recipientAddress    Address of exchange recipient\\n    /// @param fee                 Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n    /// @param isUsed              Whether the tx is used or not\\n    /// @param path                Path from input token to output token\\n    /// @param deadline            Deadline of exchanging tokens\\n    /// @param speed               Speed of the request (normal or instant)\\n    struct ccExchangeRequest {\\n        uint appId;\\n        uint inputAmount;\\n        uint outputAmount;\\n        bool isFixedToken;\\n        address recipientAddress;\\n        uint fee;\\n        bool isUsed;\\n        address[] path;\\n        uint deadline;\\n        uint speed;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a cc exchange request gets done\\n    /// @param user                 Exchange recipient address\\n    /// @param speed                Speed of the request (normal or instant)\\n    /// @param teleporter          Address of teleporter who submitted the request\\n    /// @param teleporterFee        Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n    event CCExchange(\\n        bytes lockerLockingScript,\\n        uint lockerScriptType,\\n        address lockerTargetAddress,\\n        address indexed user,\\n        address[2] inputAndOutputToken,\\n        uint[2] inputAndOutputAmount,\\n        uint indexed speed,\\n        address indexed teleporter,\\n        uint teleporterFee,\\n        bytes32 bitcoinTxId,\\n        uint appId\\n    );\\n\\n    /// @notice                     Emits when a cc exchange request fails\\n    /// @dev                        In this case, instead of excahnging tokens,\\n    ///                             we mint teleBTC and send it to the user\\n    /// @param recipientAddress     Exchange recipient address\\n    /// @param speed                Speed of the request (normal or instant)\\n    /// @param teleporter          Address of teleporter who submitted the request\\n    /// @param teleporterFee        Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n    event FailedCCExchange(\\n        bytes lockerLockingScript,\\n        uint lockerScriptType,\\n        address lockerTargetAddress,\\n        address indexed recipientAddress,\\n        address[2] inputAndOutputToken,\\n        uint[2] inputAndOutputAmount,\\n        uint indexed speed,\\n        address indexed teleporter,\\n        uint teleporterFee,\\n        bytes32 bitcoinTxId,\\n        uint appId\\n    );\\n\\n    /// @notice                      Emits when appId for an exchange connector is set\\n    /// @param appId                 Assigned application id to exchange\\n    /// @param exchangeConnector     Address of exchange connector contract\\n    event SetExchangeConnector(\\n        uint appId,\\n        address exchangeConnector\\n    );\\n\\n    /// @notice                     Emits when changes made to relay address\\n    event NewRelay (\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n    /// @notice                     Emits when changes made to InstantRouter address\\n    event NewInstantRouter (\\n        address oldInstantRouter, \\n        address newInstantRouter\\n    );\\n\\n    /// @notice                     Emits when changes made to Lockers address\\n    event NewLockers (\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n    /// @notice                     Emits when changes made to TeleBTC address\\n    event NewTeleBTC (\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n    /// @notice                     Emits when changes made to protocol percentage fee\\n    event NewProtocolPercentageFee (\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice                     Emits when changes made to Treasury address\\n    event NewTreasury (\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n    // Read-only functions\\n    \\n    function startingBlockNumber() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n    \\n    function chainId() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function instantRouter() external view returns (address);\\n\\n    function lockers() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function isRequestUsed(bytes32 _txId) external view returns (bool);\\n\\n    function exchangeConnector(uint appId) external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    // State-changing functions\\n\\n    function setRelay(address _relay) external;\\n\\n    function setInstantRouter(address _instantRouter) external;\\n\\n    function setLockers(address _lockers) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setExchangeConnector(uint _appId, address _exchangeConnector) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function ccExchange(\\n        // Bitcoin tx\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        // Bitcoin block number\\n        uint256 _blockNumber,\\n        // Merkle proof\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        bytes calldata _lockerLockingScript\\n    ) external payable returns(bool);\\n}\"\n    },\n    \"contracts/routers/interfaces/ICCTransferRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface ICCTransferRouter {\\n\\n\\t// Structures\\n\\n\\t/// @notice                    Structure for recording cross-chain transfer requests\\n\\t/// @param inputAmount         Amount of locked BTC on source chain\\n\\t/// @param recipientAddress    Address of transfer recipient\\n\\t/// @param fee                 Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n\\t/// @param speed               Speed of the request (normal or instant)\\n\\t/// @param isUsed              Whether the tx is used or not\\n\\tstruct ccTransferRequest {\\n\\t\\tuint inputAmount;\\n\\t\\taddress recipientAddress;\\n\\t\\tuint fee;\\n\\t\\tuint256 speed;\\n\\t\\tbool isUsed;\\n\\t}\\n\\n\\t// Events\\n\\n\\t/// @notice                    \\tEmits when a cc transfer request gets done\\n\\t/// @param lockerLockingScript  Locking script of the locker on bitcoin network\\n\\t/// @param lockerScriptType     Script type of the locker locking script\\n\\t/// @param lockerTargetAddress  Address of the locker on EVM based target chain\\n\\t/// @param user                \\tAddress of teleBTC recipient\\n\\t/// @param inputAmount         \\tAmount of tokens that user locked on source chain\\n\\t/// @param receivedAmount      \\tAmount of tokens that user receives\\n\\t/// @param speed               \\tSpeed of the request (normal or instant)\\n\\t/// @param teleporter          \\tAddress of teleporter who submitted the request\\n\\t/// @param teleporterFee       \\tAmount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n\\t/// @param relayFee       \\t   \\tAmount of fee that is paid to relay contract\\n\\t/// @param protocolFee         \\tAmount of fee that is paid to the protocol\\n\\t/// @param bitcoinTxId         \\tAddress of teleporter who submitted the request\\n\\tevent CCTransfer(\\n\\t\\tbytes indexed lockerLockingScript,\\n\\t\\tuint lockerScriptType,\\n\\t\\taddress lockerTargetAddress,\\n\\t\\taddress indexed user,\\n\\t\\tuint inputAmount,\\n\\t\\tuint receivedAmount,\\n\\t\\tuint indexed speed,\\n\\t\\taddress teleporter,\\n\\t\\tuint teleporterFee,\\n\\t\\tuint relayFee,\\n\\t\\tuint protocolFee,\\n\\t\\tbytes32 bitcoinTxId\\n\\t);\\n\\n\\t/// @notice                     Emits when changes made to relay address\\n    event NewRelay (\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n    /// @notice                     Emits when changes made to InstantRouter address\\n    event NewInstantRouter (\\n        address oldInstantRouter, \\n        address newInstantRouter\\n    );\\n\\n    /// @notice                     Emits when changes made to Lockers address\\n    event NewLockers (\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n    /// @notice                     Emits when changes made to TeleBTC address\\n    event NewTeleBTC (\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n    /// @notice                     Emits when changes made to protocol percentage fee\\n    event NewProtocolPercentageFee (\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice                     Emits when changes made to Treasury address\\n    event NewTreasury (\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t// Read-only functions\\n\\t\\n\\tfunction startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\t\\n\\tfunction chainId() external view returns (uint);\\n\\n\\tfunction appId() external view returns (uint);\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction isRequestUsed(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction ccTransfer(\\n\\t\\t// Bitcoin tx\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes calldata _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\t// Bitcoin block number\\n\\t\\tuint256 _blockNumber,\\n\\t\\t// Merkle proof\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external payable returns (bool);\\n}\"\n    },\n    \"contracts/routers/interfaces/IInstantRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IInstantRouter {\\n    // Structures\\n\\n    /// @notice                                 Structure for recording instant requests\\n    /// @param user                             Address of user who recieves loan\\n    /// @param collateralPool                   Address of collateral pool\\n    /// @param collateralToken                  Address of underlying collateral token\\n    /// @param paybackAmount                    Amount of (loan + instant fee)\\n    /// @param lockedCollateralPoolTokenAmount  Amount of locked collateral pool token for getting loan\\n    /// @param deadline                         Deadline for paying back the loan\\n    /// @param requestCounterOfUser             The index of the request for a specific user\\n    struct instantRequest {\\n        address user;\\n        address collateralPool;\\n\\t\\taddress collateralToken;\\n        uint paybackAmount;\\n        uint lockedCollateralPoolTokenAmount;\\n        uint deadline;\\n        uint requestCounterOfUser;\\n    }\\n\\n    // Events\\n\\n    /// @notice                             Emits when a user gets loan for transfer\\n    /// @param user                         Address of the user who made the request\\n    /// @param receiver                     Address of the loan receiver\\n    /// @param loanAmount                   Amount of the loan\\n    /// @param instantFee                   Amount of the instant loan fee\\n    /// @param deadline                     Deadline of paying back the loan\\n    /// @param collateralToken              Address of the collateral token\\n    /// @param lockedCollateralPoolToken    Amount of collateral pool token that got locked\\n    event InstantTransfer(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee, \\n        uint indexed deadline, \\n        address indexed collateralToken,\\n        uint lockedCollateralPoolToken,\\n        uint requestCounterOfUser\\n    );\\n\\n    /// @notice                             Emits when a user gets loan for exchange\\n    /// @param user                         Address of the user who made the request\\n    /// @param receiver                     Address of the loan receiver\\n    /// @param loanAmount                   Amount of the loan\\n    /// @param instantFee                   Amount of the instant loan fee\\n    /// @param amountOut                    Amount of the output token\\n    /// @param path                         Path of exchanging tokens\\n    /// @param isFixed                      Shows whether input or output is fixed in exchange\\n    /// @param deadline                     Deadline of getting the loan\\n    /// @param collateralToken              Address of the collateral token\\n    /// @param lockedCollateralPoolToken    Amount of collateral pool token that got locked\\n    event InstantExchange(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee,\\n        uint amountOut,\\n        address[] path,\\n        bool isFixed,\\n        uint indexed deadline, \\n        address indexed collateralToken,\\n        uint lockedCollateralPoolToken,\\n        uint requestCounterOfUser\\n    );\\n\\n    /// @notice                            Emits when a loan gets paid back\\n    /// @param user                        Address of user who recieves loan\\n    /// @param paybackAmount               Amount of (loan + fee) that should be paid back\\n    /// @param collateralToken             Address of underlying collateral token\\n    /// @param lockedCollateralPoolToken   Amount of locked collateral pool token for getting loan\\n    event PaybackLoan(\\n\\t\\taddress indexed user, \\n\\t\\tuint paybackAmount, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint lockedCollateralPoolToken,\\n        uint requestCounterOfUser\\n\\t);\\n\\n    /// @notice                         Emits when a user gets slashed\\n    /// @param user                     Address of user who recieves loan\\n    /// @param collateralToken          Address of collateral underlying token\\n\\t/// @param slashedAmount            How much user got slashed\\n\\t/// @param paybackAmount            Amount of teleBTC paid back to the protocol\\n\\t/// @param slasher                  Address of slasher\\n\\t/// @param slasherReward            Slasher reward (in collateral token)\\n    event SlashUser(\\n\\t\\taddress indexed user, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint slashedAmount, \\n\\t\\tuint paybackAmount,\\n        address indexed slasher,\\n        uint slasherReward,\\n        uint requestCounterOfUser\\n\\t);\\n\\n    /// @notice                     \\tEmits when changes made to payback deadline\\n    event NewPaybackDeadline(\\n        uint oldPaybackDeadline, \\n        uint newPaybackDeadline\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to slasher percentage reward\\n    event NewSlasherPercentageReward(\\n        uint oldSlasherPercentageReward, \\n        uint newSlasherPercentageReward\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to treasuray overhead percnet\\n    event NewTreasuaryAddress(\\n        address oldTreasuaryAddress, \\n        address newTreasuaryAddress\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to max price difference percent\\n    event NewMaxPriceDifferencePercent(\\n        uint oldMaxPriceDifferencePercent, \\n        uint newMaxPriceDifferencePercent\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to TeleBTC address\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to relay address\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to collateral pool factory address\\n    event NewCollateralPoolFactory(\\n        address oldCollateralPoolFactory, \\n        address newCollateralPoolFactory\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to price oracle address\\n    event NewPriceOracle(\\n        address oldPriceOracle, \\n        address newPriceOracle\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to TeleBTC instant pool address\\n    event NewTeleBTCInstantPool(\\n        address oldTeleBTCInstantPool, \\n        address newTeleBTCInstantPool\\n    );\\n\\n    /// @notice                     \\tEmits when changes made to default exchange connector address\\n    event NewDefaultExchangeConnector(\\n        address oldDefaultExchangeConnector, \\n        address newDefaultExchangeConnector\\n    );\\n\\n\\n    // Read-only functions\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function teleBTCInstantPool() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function relay() external view returns (address);\\n\\n\\tfunction collateralPoolFactory() external view returns (address);\\n\\n\\tfunction priceOracle() external view returns (address);\\n\\n    function slasherPercentageReward() external view returns (uint);\\n\\n    function paybackDeadline() external view returns (uint);\\n\\n    function defaultExchangeConnector() external view returns (address);\\n    \\n    function getLockedCollateralPoolTokenAmount(address _user, uint _index) external view returns (uint);\\n\\n    function getUserRequestsLength(address _user) external view returns (uint);\\n\\n    function getUserRequestDeadline(address _user, uint _index) external view returns (uint);\\n\\n    function maxPriceDifferencePercent() external view returns (uint);\\n\\n    function treasuaryAddress() external view returns (address);\\n\\n    // State-changing functions\\n\\n    function setPaybackDeadline(uint _paybackDeadline) external;\\n\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCollateralPoolFactory(address _collateralPoolFactory) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setTeleBTCInstantPool(address _teleBTCInstantPool) external;\\n\\n    function setDefaultExchangeConnector(address _defaultExchangeConnector) external;\\n\\n    function setTreasuaryAddress(address _treasuaryAddres) external;\\n    \\n    function setMaxPriceDifferencePercent(uint _maxPriceDifferencePercent) external;\\n\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralPool\\n    ) external returns (bool);\\n\\n    function instantCCExchange(\\n\\t\\taddress _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount, \\n        uint _amountOut, \\n        address[] memory _path, \\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external returns (uint[] memory);\\n\\n    function payBackLoan(address _user, uint _teleBTCAmount) external returns (bool);\\n\\n    function slashUser(\\n\\t\\taddress _user, \\n\\t\\tuint _requestIndex\\n\\t) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/types/DataTypes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n}\"\n    },\n    \"contracts/types/ScriptTypesEnum.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH // 32 bytes               \\n    }\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2Callee.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Migrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Migrator {\\n    function migrate(address token, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/V1/IUniswapV1Exchange.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV1Exchange {\\n    function balanceOf(address owner) external view returns (uint);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function removeLiquidity(uint, uint, uint, uint) external returns (uint, uint);\\n    function tokenToEthSwapInput(uint, uint, uint) external returns (uint);\\n    function ethToTokenSwapInput(uint, uint) external payable returns (uint);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/V1/IUniswapV1Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV1Factory {\\n    function getExchange(address) external view returns (address);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/libraries/TransferHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "19c2e853485f0ab2e15344275177b5ee",
      "transactionHash": "0x75aa050fa7ad1dad5198c368648ee84989758d71ce933010b54862e89d1865cc",
      "args": [
        "786280",
        "0xc7a7C6AB475138565FE0D2476EE4616862Bf2467",
        "0xf5D6D369A7F4147F720AEAdd4C4f903aE8046166",
        "0x24004f4f6d2e75b039d528e82b100355d8b1d4fb",
        "0x515D720B9D219f1931205D5B8D842bE1Fe2FeBDE",
        72,
        5,
        500,
        10000
      ]
    },
    "decoded": {
      "from": "0xBffc372e2E00a247c17bf0A9eD0b993Bfe3607F5",
      "gasPrice": "177000000000",
      "gasLimit": "5646283",
      "to": null,
      "value": "0",
      "nonce": 423,
      "data": "",
      "r": "0x4583909e044876dc94816155a09ef4eed0992af8c237e384ca028e66fa04d0ea",
      "s": "0x1d318f45f9826af50508704fb0c462ed682efecf21302ba6a287d9cac3ddbfb0",
      "v": 309,
      "chainId": 137
    }
  }
}