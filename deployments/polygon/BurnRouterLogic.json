{
  "address": "0x557D44fF6c75649C2a27451ee0330f99aF04283E",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        }
      ],
      "name": "BurnDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockerDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLockers",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockers",
          "type": "address"
        }
      ],
      "name": "NewLockers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldNetworkFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNetworkFee",
          "type": "uint256"
        }
      ],
      "name": "NewNetworkFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldNetworkFeeOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newNetworkFeeOracle",
          "type": "address"
        }
      ],
      "name": "NewNetworkFeeOracle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewProtocolPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "NewRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSlasherPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlasherPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewSlasherPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleBTC",
          "type": "address"
        }
      ],
      "name": "NewTeleBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldThirdPartyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newThirdPartyAddress",
          "type": "address"
        }
      ],
      "name": "NewThirdPartyAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThirdPartyFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThirdPartyFee",
          "type": "uint256"
        }
      ],
      "name": "NewThirdPartyFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTransferDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTransferDeadline",
          "type": "uint256"
        }
      ],
      "name": "NewTransferDeadline",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[3]",
          "name": "amounts",
          "type": "uint256[3]"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "fees",
          "type": "uint256[4]"
        }
      ],
      "name": "NewUnwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldWrappedNativeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "NewWrappedNativeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bitcoinTxId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bitcoinTxOutputIndex",
          "type": "uint256"
        }
      ],
      "name": "PaidUnwrap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bitcoinFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bitcoinFeeOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnReqIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_voutIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "burnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "burnRequestCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTransferred",
          "type": "bool"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "disputeBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "bytes4[]",
          "name": "_versions",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes",
          "name": "_inputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_inputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4[]",
          "name": "_locktimes",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes",
          "name": "_inputIntermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexesAndBlockNumbers",
          "type": "uint256[]"
        }
      ],
      "name": "disputeLocker",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_networkFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isTransferred",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isUsedAsBurnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        }
      ],
      "name": "setLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_networkFee",
          "type": "uint256"
        }
      ],
      "name": "setNetworkFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_networkFeeOracle",
          "type": "address"
        }
      ],
      "name": "setNetworkFeeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        }
      ],
      "name": "setSlasherPercentageReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "setStartingBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_thirdPartyAddress",
          "type": "address"
        }
      ],
      "name": "setThirdPartyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_thirdPartyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_thirdPartyFee",
          "type": "uint256"
        }
      ],
      "name": "setThirdPartyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        }
      ],
      "name": "setTransferDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasherPercentageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_isFixedToken",
          "type": "bool"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "thirdParty",
          "type": "uint256"
        }
      ],
      "name": "swapAndUnwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thirdPartyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "thirdPartyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "thirdParty",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdd8c1573881d0e95eb7813f691a4ef50d6af3e0d6e7e16071471f7b5ee9c9d44",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0x557D44fF6c75649C2a27451ee0330f99aF04283E",
    "transactionIndex": 7,
    "gasUsed": "5312566",
    "logsBloom": "0x
    "blockHash": "0x1d372dc800b741c88eefd0de1d9bcf58d488949f9142c98957a2ff4272dbf294",
    "transactionHash": "0xdd8c1573881d0e95eb7813f691a4ef50d6af3e0d6e7e16071471f7b5ee9c9d44",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 68409962,
        "transactionHash": "0xdd8c1573881d0e95eb7813f691a4ef50d6af3e0d6e7e16071471f7b5ee9c9d44",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d3e4aeb9347c224dae7f1dc1213be082f6fddec",
          "0x000000000000000000000000ce7fcb674ba27a952c71061b649fb5a5746f3b2b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000002e18373c5ba9c94000000000000000000000000000000000000000000000000086648b377554825a0000000000000000000000000000000000000000000000e14c7c5a4fdc125c7e000000000000000000000000000000000000000000000000584c53fb19aab91a0000000000000000000000000000000000000000000000e17a94918c37bc25be",
        "logIndex": 13,
        "blockHash": "0x1d372dc800b741c88eefd0de1d9bcf58d488949f9142c98957a2ff4272dbf294"
      }
    ],
    "blockNumber": 68409962,
    "cumulativeGasUsed": "5943174",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a8d56e12f03703b3ec0a2d052929c31e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"name\":\"BurnDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockerDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockers\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockers\",\"type\":\"address\"}],\"name\":\"NewLockers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNetworkFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNetworkFee\",\"type\":\"uint256\"}],\"name\":\"NewNetworkFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldNetworkFeeOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newNetworkFeeOracle\",\"type\":\"address\"}],\"name\":\"NewNetworkFeeOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"NewRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlasherPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlasherPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewSlasherPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBTC\",\"type\":\"address\"}],\"name\":\"NewTeleBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldThirdPartyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newThirdPartyAddress\",\"type\":\"address\"}],\"name\":\"NewThirdPartyAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThirdPartyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThirdPartyFee\",\"type\":\"uint256\"}],\"name\":\"NewThirdPartyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferDeadline\",\"type\":\"uint256\"}],\"name\":\"NewTransferDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"fees\",\"type\":\"uint256[4]\"}],\"name\":\"NewUnwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWrappedNativeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWrappedNativeToken\",\"type\":\"address\"}],\"name\":\"NewWrappedNativeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitcoinTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bitcoinTxOutputIndex\",\"type\":\"uint256\"}],\"name\":\"PaidUnwrap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bitcoinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bitcoinFeeOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnReqIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_voutIndexes\",\"type\":\"uint256[]\"}],\"name\":\"burnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransferred\",\"type\":\"bool\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"disputeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_versions\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_inputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_locktimes\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputIntermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexesAndBlockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"disputeLocker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_networkFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isUsedAsBurnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_networkFee\",\"type\":\"uint256\"}],\"name\":\"setNetworkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_networkFeeOracle\",\"type\":\"address\"}],\"name\":\"setNetworkFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setStartingBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_thirdPartyAddress\",\"type\":\"address\"}],\"name\":\"setThirdPartyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thirdPartyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thirdPartyFee\",\"type\":\"uint256\"}],\"name\":\"setThirdPartyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"}],\"name\":\"setTransferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"thirdParty\",\"type\":\"uint256\"}],\"name\":\"swapAndUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdPartyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"thirdPartyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"thirdParty\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"details\":\"Makes isTransferred flag true for the paid requests\",\"params\":{\"_blockNumber\":\"Height of the block containing the Bitcoin tx\",\"_burnReqIndexes\":\"Indexes of requests that locker wants to provide proof for them\",\"_index\":\"Index of the Bitcoin tx the block\",\"_intermediateNodes\":\"Merkle inclusion proof for the Bitcoin tx\",\"_lockerLockingScript\":\"Locker's locking script that this burn request belongs to\",\"_locktime\":\"Lock time of the Bitcoin tx\",\"_version\":\"Version of the Bitcoin tx\",\"_vin\":\"Inputs of the Bitcoin tx\",\"_vout\":\"Outputs of the Bitcoin tx\",\"_voutIndexes\":\"Indexes of outputs that were used to pay burn requests.                     _voutIndexes[i] belongs to _burnReqIndexes[i]\"}},\"disputeBurn(bytes,uint256[])\":{\"params\":{\"_indices\":\"Indices of requests that their deadline has passed\",\"_lockerLockingScript\":\"Locker's locking script that the unpaid request belongs to\"}},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"details\":\"Input tx is a malicious tx which shows that locker spent BTC      Output tx is the tx that was spent by locker in input tx      Output tx shows money goes to locker      Input tx shows locker steals the funds\",\"params\":{\"_indexesAndBlockNumbers\":\"Indices of malicious input in input tx,                                input tx in block and block number of input tx\",\"_inputIntermediateNodes\":\"Merkle inclusion proof for the malicious transaction\",\"_inputVin\":\"Inputs of the malicious transaction\",\"_inputVout\":\"Outputs of the malicious transaction\",\"_lockerLockingScript\":\"Suspicious locker's locking script\",\"_locktimes\":\"Locktimes of input and output tx\",\"_outputVin\":\"Inputs of the spent transaction\",\"_outputVout\":\"Outputs of the spent transaction\",\"_versions\":\"Versions of input and output tx\"}},\"initialize(uint256,address,address,address,address,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_lockers\":\"Address of lockers contract\",\"_networkFee\":\"Fee of submitting a transaction on Network\",\"_protocolPercentageFee\":\"Percentage of tokens that user pays to protocol for burning\",\"_relay\":\"Address of relay contract\",\"_slasherPercentageReward\":\"Percentage of tokens that slasher receives after slashing a locker\",\"_startingBlockNumber\":\"Requests that are included in a block older                             than _startingBlockNumber cannot be executed\",\"_teleBTC\":\"Address of teleBTC contract\",\"_transferDeadline\":\"of sending BTC to user (aster submitting a burn request)\",\"_treasury\":\"Address of the treasury of the protocol\"}},\"isTransferred(address,uint256)\":{\"params\":{\"_index\":\"the request for the locker\",\"_lockerTargetAddress\":\"Locker address on the target chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"The new lockers contract address\"}},\"setNetworkFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_networkFee\":\"The new Bitcoin transaction fee\"}},\"setNetworkFeeOracle(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_networkFeeOracle\":\"Address of oracle who can update burn fee\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"The new protocol percentage fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"The new relay contract address\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher percentage reward\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new teleBTC contract address\"}},\"setThirdPartyAddress(uint256,address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_thirdPartyAddress\":\"third party address\"}},\"setThirdPartyFee(uint256,uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_thirdPartyFee\":\"third party fee\"}},\"setTransferDeadline(uint256)\":{\"details\":\"Only owner can call this      Deadline should be greater than relay finalization parameter\",\"params\":{\"_transferDeadline\":\"The new transfer deadline\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"The new treasury address\"}},\"swapAndUnwrap(address,uint256[],bool,address[],uint256,bytes,uint8,bytes,uint256)\":{\"details\":\"After exchanging, rest of the process is similar to ccBurn\",\"params\":{\"_amounts\":\"[inputTokenAmount, teleBTCAmount]\",\"_deadline\":\"of exchanging\",\"_exchangeConnector\":\"Address of exchange connectBurnRouterLogicor to be used\",\"_isFixedToken\":\"True if input token amount is fixed\",\"_path\":\"of exchanging inputToken to teleBTC\",\"thirdParty\":\"Third party id\"},\"returns\":{\"_0\":\"Amount of BTC that user receives\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unwrap(uint256,bytes,uint8,bytes,uint256)\":{\"details\":\"After submitting the burn request, Locker has a limited time      to send BTC and provide burn proof\",\"params\":{\"_amount\":\"of teleBTC that user wants to burn\",\"_lockerLockingScript\":\"of locker that should execute the burn request\",\"_scriptType\":\"User script type\",\"_userScript\":\"User script hash\",\"thirdParty\":\"Third party id\"},\"returns\":{\"_0\":\"Amount of BTC that user receives\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LockerDispute(address,bytes,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a locker gets slashed for withdrawing BTC without proper reason\"},\"NewLockers(address,address)\":{\"notice\":\"Emits when lockers address is updated\"},\"NewNetworkFee(uint256,uint256)\":{\"notice\":\"Emits when network fee is updated\"},\"NewNetworkFeeOracle(address,address)\":{\"notice\":\"Emits when network fee oracle is updated\"},\"NewProtocolPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when percentage fee is updated\"},\"NewRelay(address,address)\":{\"notice\":\"Emits when relay address is updated\"},\"NewSlasherPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when slasher percentage fee is updated\"},\"NewTeleBTC(address,address)\":{\"notice\":\"Emits when TeleBTC address is updated\"},\"NewThirdPartyAddress(uint256,address,address)\":{\"notice\":\"Emits when changes made to third party address\"},\"NewThirdPartyFee(uint256,uint256,uint256)\":{\"notice\":\"Emits when changes made to third party fee\"},\"NewTransferDeadline(uint256,uint256)\":{\"notice\":\"Emits when transfer deadline is updated\"},\"NewTreasury(address,address)\":{\"notice\":\"Emits when treasury address is updated\"},\"NewUnwrap(bytes,uint8,address,address,uint256,uint256,uint256,address,uint256[3],uint256[4])\":{\"notice\":\"Emits when a burn request gets submitted\"},\"PaidUnwrap(address,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a burn proof is provided\"}},\"kind\":\"user\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"notice\":\"Checks the correctness of burn proof (which is a Bitcoin tx)\"},\"disputeBurn(bytes,uint256[])\":{\"notice\":\"Slashes a locker if did not pay a cc burn request before its deadline\"},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"notice\":\"Slashes a locker if they issue a tx that doesn't match any burn request\"},\"initialize(uint256,address,address,address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Handles cross-chain burn requests\"},\"isTransferred(address,uint256)\":{\"notice\":\"Returns true is request has been processed\"},\"setLockers(address)\":{\"notice\":\"Updates lockers contract address\"},\"setNetworkFee(uint256)\":{\"notice\":\"Updates Bitcoin transaction fee\"},\"setNetworkFeeOracle(address)\":{\"notice\":\"Updates Bitcoin oracle\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Updates protocol percentage fee for burning tokens\"},\"setRelay(address)\":{\"notice\":\"Updates relay contract address\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Updates slasher percentage reward for disputing lockers\"},\"setStartingBlockNumber(uint256)\":{\"notice\":\"Setter for starting block number\"},\"setTeleBTC(address)\":{\"notice\":\"Updates teleBTC contract address\"},\"setThirdPartyAddress(uint256,address)\":{\"notice\":\"Setter for third party address\"},\"setThirdPartyFee(uint256,uint256)\":{\"notice\":\"Setter for third party fee\"},\"setTransferDeadline(uint256)\":{\"notice\":\"Updates deadline of executing burn requests\"},\"setTreasury(address)\":{\"notice\":\"Updates protocol treasury address\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Change the wrapped native token address\"},\"swapAndUnwrap(address,uint256[],bool,address[],uint256,bytes,uint8,bytes,uint256)\":{\"notice\":\"Exchanges input token for teleBTC then burns it\"},\"unwrap(uint256,bytes,uint8,bytes,uint256)\":{\"notice\":\"Records users burn request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/BurnRouterLogic.sol\":\"BurnRouterLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        // Validates Vin length\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds the value of a specific output\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @param _index             Index of output\\n    /// @return _value            Value of the specified output\\n    function parseOutputValue(bytes memory _vout, uint _index) internal pure returns (uint64 _value) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n        output = indexVout(voutView, _index);\\n        _value = value(output);\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n        \\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n        \\n        if (_scriptType == ScriptTypes.P2TR) {\\n            // note: first two bytes are OP_1 and Pushdata Bytelength. \\n            // note: script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 83 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            // This means that this output is not OP_RETURN\\n            return TypedMemView.nullView();\\n        }\\n        // Extra checks for OP_RETURN\\n        require(_bodyLength <= 77 && _bodyLength >= 4, \\\"BitcoinHelper: invalid opreturn\\\"); \\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        require(_root != bytes32(0), \\\"BitcoinHelper: zero root\\\");\\n\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0x2aff58cb87c1223fcf40f95e1f723485c5bcc63b1e0bd0498a705aa236b30564\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbca90a02eb6c7d68e75548ce6621bddddf3f78629b8b7a4a01c510c99f17c0e\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice Structure for recording block header\\n    /// @param selfHash Hash of block header\\n    /// @param parentHash Hash of parent header\\n    /// @param merkleRoot Merkle root of transactions in the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param gasPrice Gas price of block header submission transaction\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a block header is added\\n    /// @param height of submitted header\\n    /// @param selfHash Hash of submitted header\\n    /// @param parentHash of submitted header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice Emits when a block header gets finalized\\n    /// @param height of the header\\n    /// @param selfHash Hash of the header\\n    /// @param parentHash of the header\\n    /// @param relayer Address of Relayer who submitted the block header\\n    /// @param rewardAmountTNT Amount of reward that the Relayer receives in target blockchain native token\\n    /// @param rewardAmountTDT Amount of reward that the Relayer receives in TeleportDAO token\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    /// @notice Emits when inclusion of a tx is queried\\n    /// @param txId of queried transaction\\n    /// @param blockHeight of the block that includes the tx\\n    /// @param paidFee Amount of fee that user paid to Relay\\n    event NewQuery(\\n        bytes32 txId,\\n        uint blockHeight,\\n        uint paidFee\\n    );\\n         \\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee(uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function getBlockHeaderHashContract(uint _height, uint _index) external payable returns (bytes32);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xf8b47bdc9c94c8da51772aea70e5b5c14c9115e5cbc79df6f552985a2d8f867f\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/dex_connectors/interfaces/IDexConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\ninterface IDexConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x4063ca823f0ca14d76c64730d0364a0939c7b2ac5286705d9d2c5be23fb7097d\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xe920734db9187500e5a4b9f231c6c7afa342b8f95bc8a06d925ab061a1b4b04b\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n    /// @notice Structure for registering lockers\\n    /// @param lockerLockingScript Locker redeem script\\n    /// @param lockerRescueType Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript Locker script in case of getting BTCs back\\n    /// @param TSTLockedAmount Amount of TST locked by Locker\\n    /// @param collateralTokenLockedAmount Amount of collateral token locked by Locker\\n    /// @param netMinted Total minted - total burnt\\n    /// @param slashingTeleBTCAmount Total amount of teleBTC a locker must be slashed\\n    /// @param reservedCollateralTokenForSlash Total collateral token reserved for slashing locker\\n    /// @param isLocker True if it's a Locker\\n    /// @param isCandidate True if it's a candidate\\n    /// @param isScriptHash NOT USED\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint256 TSTLockedAmount;\\n        uint256 collateralTokenLockedAmount;\\n        uint256 netMinted;\\n        uint256 slashingTeleBTCAmount;\\n        uint256 reservedCollateralTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint256 OneHundredPercent;\\n        uint256 HealthFactor;\\n        uint256 UpperHealthFactor;\\n        uint256 MaxLockerFee;\\n        uint256 NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address TeleportSystemToken;\\n        address teleBTC;\\n        address burnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n        uint256 minRequiredTSTLockedAmount;\\n        uint256 minRequiredTNTLockedAmount;\\n        uint256 lockerPercentageFee;\\n        uint256 collateralRatio;\\n        uint256 liquidationRatio;\\n        uint256 priceWithDiscountRatio;\\n        uint256 inactivationDelay;\\n    }\\n\\n    struct becomeLockerArguments {\\n        ILockersManager.lockersLibConstants libConstants;\\n        ILockersManager.lockersLibParam libParams;\\n        address theLockerTargetAddress;\\n        address collateralToken;\\n        uint256 collateralDecimal;\\n        uint256 _lockedTSTAmount;\\n        uint256 _lockedCollateralTokenAmount;\\n        bytes _candidateLockingScript;\\n        ScriptTypes _lockerRescueType;\\n        bytes _lockerRescueScript;\\n    }\\n\\n    // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint256 indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address collateralToken,\\n        uint collateralTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address collateralToken,\\n        uint collateralTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenLockedAmount,\\n        uint reliabilityFactor,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTUnlockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        address collateralToken,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint256 amount,\\n        address indexed recipient,\\n        uint256 slashedCollateralAmount,\\n        uint256 slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        address collateralToken,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        address indexed collateralToken,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        address indexed collateralToken,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        address indexed collateralToken,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint256 mintedAmount,\\n        uint256 lockerFee,\\n        uint256 mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint256 burntAmount,\\n        uint256 lockerFee,\\n        uint256 burningTime\\n    );\\n\\n    event NewCollateralToken(address token, uint decimal);\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n    event BurnerAdded(address indexed account);\\n\\n    event BurnerRemoved(address indexed account);\\n\\n    event NewLockerPercentageFee(\\n        uint256 oldLockerPercentageFee,\\n        uint256 newLockerPercentageFee\\n    );\\n\\n    event NewReliabilityFactor(\\n        address lockerTargetAddress,\\n        uint oldReliabilityFactor,\\n        uint newReliabilityFactor\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint256 oldPriceWithDiscountRatio,\\n        uint256 newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTSTLockedAmount(\\n        uint256 oldMinRequiredTSTLockedAmount,\\n        uint256 newMinRequiredTSTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint256 oldMinRequiredTNTLockedAmount,\\n        uint256 newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\\n\\n    event NewBurnRouter(address oldBurnRouter, address newBurnRouter);\\n\\n    event NewTST(address oldTST, address newTST);\\n\\n    event NewTeleBTC(address oldTeleBTC, address newTeleBTC);\\n\\n    event NewCollateralRatio(\\n        uint256 oldCollateralRatio,\\n        uint256 newCollateralRatio\\n    );\\n\\n    event NewLiquidationRatio(\\n        uint256 oldLiquidationRatio,\\n        uint256 newLiquidationRatio\\n    );\\n\\n    // Read-only functions\\n\\n    function TeleportSystemToken() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function burnRouter() external view returns (address);\\n\\n    function exchangeConnector() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function minRequiredTSTLockedAmount() external view returns (uint256);\\n\\n    function minRequiredTNTLockedAmount() external view returns (uint256);\\n\\n    function lockerPercentageFee() external view returns (uint256);\\n\\n    function collateralRatio() external view returns (uint256);\\n\\n    function liquidationRatio() external view returns (uint256);\\n\\n    function priceWithDiscountRatio() external view returns (uint256);\\n\\n    function totalNumberOfCandidates() external view returns (uint256);\\n\\n    function totalNumberOfLockers() external view returns (uint256);\\n\\n    function getLockerTargetAddress(\\n        bytes calldata _lockerLockingScript\\n    ) external view returns (address);\\n\\n    function isLocker(\\n        bytes calldata _lockerLockingScript\\n    ) external view returns (bool);\\n\\n    function isLockerActive(\\n        address _lockerTargetAddress\\n    ) external view returns (bool);\\n\\n    function getLockerHealthFactor(\\n        address _lockerTargetAddress\\n    ) external view returns (uint256);\\n\\n    function minters(address) external view returns (bool);\\n\\n    function burners(address) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addCollateralToken(address _token, uint _decimal) external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(\\n        bytes calldata _lockerLockingScript,\\n        address _receiver,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function burn(\\n        bytes calldata _lockerLockingScript,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function setRewardDistributor(address _rewardDistributor) external;\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint256 _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(\\n        uint256 _priceWithDiscountRatio\\n    ) external;\\n\\n    function setMinRequiredTSTLockedAmount(\\n        uint256 _minRequiredTSTLockedAmount\\n    ) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setBurnRouter(address _burnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setLockerReliabilityFactor(\\n        address _lockerTargetAddress,\\n        uint _reliabilityFactor\\n    ) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint256 _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint256 _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint256 _addingCollateralTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint256 _removingCollateralTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        address _collateralToken,\\n        uint _lockedTSTAmount,\\n        uint _lockedCollateralTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(\\n        address _lockerTargetAddress,\\n        uint256 _lockerReliabilityFactor\\n    ) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint256 _rewardAmount,\\n        address _slasher,\\n        uint256 _amount,\\n        address _recipient\\n    ) external returns (bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint256 _rewardAmount,\\n        address _slasher,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint256 _collateralAmount\\n    ) external returns (bool);\\n\\n    function getLockerCapacity(\\n        address _lockerTargetAddress\\n    ) external returns (uint256 theLockerCapacity);\\n}\\n\",\"keccak256\":\"0xbdd3fa0b4a0b31c34afae914f66d2c8e28bdf28bcc8d0d7e85aa563e9f9d4fca\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/libraries/BitcoinHelper.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../routers/BurnRouterStorage.sol\\\";\\n\\nlibrary BurnRouterLib {\\n    /// @notice Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev  One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter  Number of the tx outputs that pay a cc burn request\\n    /// @param _vout Outputs of a transaction\\n    /// @param _lockerLockingScript Locking script of locker\\n    /// @param _txId Transaction id\\n    function updateIsUsedAsBurnProof(\\n        mapping(bytes32 => bool) storage _isUsedAsBurnProof,\\n        uint256 _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) external returns (bool) {\\n        uint256 parsedAmount = BitcoinHelper.parseValueHavingLockingScript(\\n            _vout,\\n            _lockerLockingScript\\n        );\\n        uint256 numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (\\n            (parsedAmount == 0 && _paidOutputCounter == numberOfOutputs) ||\\n            (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs)\\n        ) {\\n            /* \\n                Two cases are accepted:\\n                1. All outputs pay cc burn requests\\n                2. One output sends the remaining value to locker and rest pay cc burn requests\\n            */\\n            _isUsedAsBurnProof[_txId] = true;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function disputeBurnHelper(\\n        mapping(address => BurnRouterStorage.burnRequest[])\\n            storage burnRequests,\\n        address _lockerTargetAddress,\\n        uint256 _index,\\n        uint256 _transferDeadline,\\n        uint256 _lastSubmittedHeight,\\n        uint256 _startingBlockNumber\\n    ) external {\\n        // Checks that locker has not provided burn proof\\n        require(\\n            !burnRequests[_lockerTargetAddress][_index].isTransferred,\\n            \\\"BurnRouterLogic: already paid\\\"\\n        );\\n\\n        // Checks that payback deadline has passed\\n        require(\\n            burnRequests[_lockerTargetAddress][_index].deadline <\\n                _lastSubmittedHeight,\\n            \\\"BurnRouterLogic: deadline not passed\\\"\\n        );\\n\\n        require(\\n            burnRequests[_lockerTargetAddress][_index].deadline >\\n                _startingBlockNumber + _transferDeadline,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n\\n        // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n        burnRequests[_lockerTargetAddress][_index].isTransferred = true;\\n    }\\n\\n    function disputeAndSlashLockerHelper(\\n        address lockers,\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes[3] memory _inputOutputVinVout, // [_inputVin, _outputVin, _outputVout]\\n        mapping(bytes32 => bool) storage _isUsedAsBurnProof,\\n        uint256 _transferDeadline,\\n        address _relay,\\n        uint256 _startingBlockNumber,\\n        bytes32 _inputTxId,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint256[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n                _locktimes.length == 2 &&\\n                _indexesAndBlockNumbers.length == 3,\\n            \\\"BurnRouterLogic: wrong inputs\\\"\\n        );\\n\\n        require(\\n            _indexesAndBlockNumbers[2] >= _startingBlockNumber,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n\\n        require(\\n            isConfirmed(\\n                _relay,\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"BurnRouterLogic: not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !_isUsedAsBurnProof[_inputTxId],\\n            \\\"BurnRouterLogic: already used\\\"\\n        );\\n\\n        // prevents multiple slashing of locker\\n        _isUsedAsBurnProof[_inputTxId] = true;\\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            lastSubmittedHeight(_relay) >\\n                _transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"BurnRouterLogic: deadline not passed\\\"\\n        );\\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint256 _outpointIndex) = BitcoinHelper\\n            .extractOutpoint(\\n                _inputOutputVinVout[0],\\n                _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n            );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId ==\\n                BitcoinHelper.calculateTxId(\\n                    _versions[1],\\n                    _inputOutputVinVout[1],\\n                    _inputOutputVinVout[2],\\n                    _locktimes[1]\\n                ),\\n            \\\"BurnRouterLogic: wrong output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(\\n                BitcoinHelper.getLockingScript(\\n                    _inputOutputVinVout[2],\\n                    _outpointIndex\\n                )\\n            ) == keccak256(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not for locker\\\"\\n        );\\n    }\\n\\n    function burnProofHelper(\\n        uint256 _blockNumber,\\n        uint256 startingBlockNumber,\\n        bytes4 _locktime,\\n        address lockers,\\n        bytes memory _lockerLockingScript,\\n        uint256 _burnReqIndexesLength,\\n        uint256 _voutIndexesLength\\n    ) external view {\\n        require(\\n            _blockNumber >= startingBlockNumber,\\n            \\\"BurnRouterLogic: old request\\\"\\n        );\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"BurnRouterLogic: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        require(\\n            _burnReqIndexesLength == _voutIndexesLength,\\n            \\\"BurnRouterLogic: wrong indexes\\\"\\n        );\\n    }\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _relay Address of Relay contract\\n    /// @param _txId of the transaction\\n    /// @param _blockNumber Height of the block containing the transaction\\n    /// @param _intermediateNodes Merkle inclusion proof for the transaction\\n    /// @param _index Index of transaction in the block\\n    /// @return True if the transaction was included in the block\\n    function isConfirmed(\\n        address _relay,\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint256 _index\\n    ) public returns (bool) {\\n        // Finds fee amount\\n        uint256 feeAmount = getFinalizedBlockHeaderFee(_relay, _blockNumber);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: low fee\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            _relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice Checks the user hash script to be valid (based on its type)\\n    function checkScriptTypeAndLocker(\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        address lockers,\\n        bytes calldata _lockerLockingScript\\n    ) external view {\\n        if (\\n            _scriptType == ScriptTypes.P2PK ||\\n            _scriptType == ScriptTypes.P2WSH ||\\n            _scriptType == ScriptTypes.P2TR\\n        ) {\\n            require(\\n                _userScript.length == 32,\\n                \\\"BurnRouterLogic: invalid script\\\"\\n            );\\n        } else {\\n            require(\\n                _userScript.length == 20,\\n                \\\"BurnRouterLogic: invalid script\\\"\\n            );\\n        }\\n\\n        // Checks if the given locking script is locker\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n    }\\n\\n    function lastSubmittedHeight(address _relay) public view returns (uint256) {\\n        return IBitcoinRelay(_relay).lastSubmittedHeight();\\n    }\\n\\n    function finalizationParameter(\\n        address _relay\\n    ) external view returns (uint256) {\\n        return IBitcoinRelay(_relay).finalizationParameter();\\n    }\\n\\n    function getFinalizedBlockHeaderFee(\\n        address _relay,\\n        uint256 _blockNumber\\n    ) public view returns (uint256) {\\n        return IBitcoinRelay(_relay).getBlockHeaderFee(_blockNumber, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xbaf14d2af9a19f7e30b56ec3285c9aadc1e95da7ddb89742909595aba958860a\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"../erc20/interfaces/IWETH.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\nimport \\\"../dex_connectors/interfaces/IDexConnector.sol\\\";\\nimport \\\"./BurnRouterLib.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./BurnRouterStorageV2.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BurnRouterLogic is\\n    BurnRouterStorage,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    BurnRouterStorageV2\\n{\\n    error ZeroAddress();\\n\\n    modifier nonZeroAddress(address _address) {\\n        if (_address == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n\\n    modifier onlyOracle(address _networkFeeOracle) {\\n        require(\\n            _networkFeeOracle == bitcoinFeeOracle,\\n            \\\"BurnRouterLogic: not oracle\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice Handles cross-chain burn requests\\n    /// @param _startingBlockNumber Requests that are included in a block older\\n    ///                             than _startingBlockNumber cannot be executed\\n    /// @param _relay Address of relay contract\\n    /// @param _lockers Address of lockers contract\\n    /// @param _treasury Address of the treasury of the protocol\\n    /// @param _teleBTC Address of teleBTC contract\\n    /// @param _transferDeadline of sending BTC to user (aster submitting a burn request)\\n    /// @param _protocolPercentageFee Percentage of tokens that user pays to protocol for burning\\n    /// @param _slasherPercentageReward Percentage of tokens that slasher receives after slashing a locker\\n    /// @param _networkFee Fee of submitting a transaction on Network\\n    function initialize(\\n        uint256 _startingBlockNumber,\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        address _teleBTC,\\n        uint256 _transferDeadline,\\n        uint256 _protocolPercentageFee,\\n        uint256 _slasherPercentageReward,\\n        uint256 _networkFee,\\n        address _wrappedNativeToken\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        setStartingBlockNumber(_startingBlockNumber);\\n        setRelay(_relay);\\n        setLockers(_lockers);\\n        setTreasury(_treasury);\\n        setTeleBTC(_teleBTC);\\n        setTransferDeadline(_transferDeadline);\\n        setProtocolPercentageFee(_protocolPercentageFee);\\n        setSlasherPercentageReward(_slasherPercentageReward);\\n        setNetworkFeeOracle(owner());\\n        setNetworkFee(_networkFee);\\n        setWrappedNativeToken(_wrappedNativeToken);\\n    }\\n\\n    receive() external payable {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice Returns true is request has been processed\\n    /// @param _lockerTargetAddress Locker address on the target chain\\n    /// @param _index the request for the locker\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint256 _index\\n    ) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice Setter for starting block number\\n    function setStartingBlockNumber(\\n        uint256 _startingBlockNumber\\n    ) public override onlyOwner {\\n        require(\\n            _startingBlockNumber > startingBlockNumber,\\n            \\\"BurnRouterLogic: low startingBlockNumber\\\"\\n        );\\n        startingBlockNumber = _startingBlockNumber;\\n    }\\n\\n    /// @notice Updates relay contract address\\n    /// @dev Only owner can call this\\n    /// @param _relay The new relay contract address\\n    function setRelay(\\n        address _relay\\n    ) public override onlyOwner nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice Updates lockers contract address\\n    /// @dev Only owner can call this\\n    /// @param _lockers The new lockers contract address\\n    function setLockers(\\n        address _lockers\\n    ) public override onlyOwner nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice Updates teleBTC contract address\\n    /// @dev Only owner can call this\\n    /// @param _teleBTC The new teleBTC contract address\\n    function setTeleBTC(\\n        address _teleBTC\\n    ) public override onlyOwner nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice Updates protocol treasury address\\n    /// @dev Only owner can call this\\n    /// @param _treasury The new treasury address\\n    function setTreasury(\\n        address _treasury\\n    ) public override onlyOwner nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice Updates deadline of executing burn requests\\n    /// @dev Only owner can call this\\n    ///      Deadline should be greater than relay finalization parameter\\n    /// @param _transferDeadline The new transfer deadline\\n    function setTransferDeadline(uint256 _transferDeadline) public override {\\n        uint256 _finalizationParameter = BurnRouterLib.finalizationParameter(\\n            relay\\n        );\\n        require(\\n            _msgSender() == owner() ||\\n                transferDeadline < _finalizationParameter,\\n            \\\"BurnRouterLogic: no permit\\\"\\n        );\\n        // Gives lockers enough time to pay cc burn requests\\n        require(\\n            _transferDeadline > _finalizationParameter,\\n            \\\"BurnRouterLogic: low deadline\\\"\\n        );\\n        emit NewTransferDeadline(transferDeadline, _transferDeadline);\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice Updates protocol percentage fee for burning tokens\\n    /// @dev Only owner can call this\\n    /// @param _protocolPercentageFee The new protocol percentage fee\\n    function setProtocolPercentageFee(\\n        uint256 _protocolPercentageFee\\n    ) public override onlyOwner {\\n        require(\\n            MAX_PROTOCOL_FEE >= _protocolPercentageFee,\\n            \\\"BurnRouterLogic: invalid fee\\\"\\n        );\\n        emit NewProtocolPercentageFee(\\n            protocolPercentageFee,\\n            _protocolPercentageFee\\n        );\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice Updates slasher percentage reward for disputing lockers\\n    /// @dev Only owner can call this\\n    /// @param _slasherPercentageReward The new slasher percentage reward\\n    function setSlasherPercentageReward(\\n        uint256 _slasherPercentageReward\\n    ) public override onlyOwner {\\n        require(\\n            MAX_SLASHER_REWARD >= _slasherPercentageReward,\\n            \\\"BurnRouterLogic: invalid reward\\\"\\n        );\\n        emit NewSlasherPercentageFee(\\n            slasherPercentageReward,\\n            _slasherPercentageReward\\n        );\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice Updates Bitcoin oracle\\n    /// @dev Only owner can call this\\n    /// @param _networkFeeOracle Address of oracle who can update burn fee\\n    function setNetworkFeeOracle(\\n        address _networkFeeOracle\\n    ) public override onlyOwner {\\n        emit NewNetworkFeeOracle(bitcoinFeeOracle, _networkFeeOracle);\\n        bitcoinFeeOracle = _networkFeeOracle;\\n    }\\n\\n    /// @notice Updates Bitcoin transaction fee\\n    /// @dev Only owner can call this\\n    /// @param _networkFee The new Bitcoin transaction fee\\n    function setNetworkFee(\\n        uint256 _networkFee\\n    ) public override onlyOracle(msg.sender) {\\n        emit NewNetworkFee(bitcoinFee, _networkFee);\\n        bitcoinFee = _networkFee;\\n    }\\n\\n    /// @notice                             Setter for third party address\\n    /// @dev                                Only owner can call this\\n    /// @param _thirdPartyAddress           third party address\\n    function setThirdPartyAddress(\\n        uint256 _thirdPartyId,\\n        address _thirdPartyAddress\\n    ) public override onlyOwner {\\n        emit NewThirdPartyAddress(\\n            _thirdPartyId,\\n            thirdPartyAddress[_thirdPartyId],\\n            _thirdPartyAddress\\n        );\\n        thirdPartyAddress[_thirdPartyId] = _thirdPartyAddress;\\n    }\\n\\n    /// @notice                             Setter for third party fee\\n    /// @dev                                Only owner can call this\\n    /// @param _thirdPartyFee               third party fee\\n    function setThirdPartyFee(\\n        uint256 _thirdPartyId,\\n        uint256 _thirdPartyFee\\n    ) public override onlyOwner {\\n        emit NewThirdPartyFee(\\n            _thirdPartyId,\\n            thirdPartyFee[_thirdPartyId],\\n            _thirdPartyFee\\n        );\\n        thirdPartyFee[_thirdPartyId] = _thirdPartyFee;\\n    }\\n\\n    /// @notice Change the wrapped native token address\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) public override onlyOwner {\\n        emit NewWrappedNativeToken(wrappedNativeToken, _wrappedNativeToken);\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice Records users burn request\\n    /// @dev After submitting the burn request, Locker has a limited time\\n    ///      to send BTC and provide burn proof\\n    /// @param _amount of teleBTC that user wants to burn\\n    /// @param _userScript User script hash\\n    /// @param _scriptType User script type\\n    /// @param _lockerLockingScript\\tof locker that should execute the burn request\\n    /// @param thirdParty Third party id\\n    /// @return Amount of BTC that user receives\\n    function unwrap(\\n        uint256 _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint256 thirdParty\\n    ) external override nonReentrant returns (uint256) {\\n        // Transfers user's teleBTC to contract\\n        require(\\n            IWETH(teleBTC).transferFrom(_msgSender(), address(this), _amount),\\n            \\\"BurnRouterLogic: transferFrom failed\\\"\\n        );\\n\\n        uint256 burntAmount = _unwrap(\\n            teleBTC,\\n            _amount,\\n            _amount,\\n            _userScript,\\n            _scriptType,\\n            _lockerLockingScript,\\n            thirdParty\\n        );\\n\\n        return burntAmount;\\n    }\\n\\n    /// @notice Exchanges input token for teleBTC then burns it\\n    /// @dev After exchanging, rest of the process is similar to ccBurn\\n    /// @param _exchangeConnector Address of exchange connectBurnRouterLogicor to be used\\n    /// @param _amounts [inputTokenAmount, teleBTCAmount]\\n    /// @param _isFixedToken True if input token amount is fixed\\n    /// @param _path of exchanging inputToken to teleBTC\\n    /// @param _deadline of exchanging\\n    /// @param thirdParty Third party id\\n    /// @return Amount of BTC that user receives\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint256[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint256 thirdParty\\n    ) external payable override nonReentrant returns (uint256) {\\n        uint256 _exchangedTeleBTC = _exchange(\\n            _exchangeConnector,\\n            _amounts,\\n            _isFixedToken,\\n            _path,\\n            _deadline\\n        );\\n\\n        return\\n            _swapAndUnwrap(\\n                _amounts[0],\\n                _path[0],\\n                _exchangedTeleBTC,\\n                _userScript,\\n                _scriptType,\\n                _lockerLockingScript,\\n                thirdParty\\n            );\\n    }\\n\\n    /// @notice Checks the correctness of burn proof (which is a Bitcoin tx)\\n    /// @dev Makes isTransferred flag true for the paid requests\\n    /// @param _version Version of the Bitcoin tx\\n    /// @param _vin Inputs of the Bitcoin tx\\n    /// @param _vout Outputs of the Bitcoin tx\\n    /// @param _locktime Lock time of the Bitcoin tx\\n    /// @param _blockNumber Height of the block containing the Bitcoin tx\\n    /// @param _intermediateNodes Merkle inclusion proof for the Bitcoin tx\\n    /// @param _index Index of the Bitcoin tx the block\\n    /// @param _lockerLockingScript Locker's locking script that this burn request belongs to\\n    /// @param _burnReqIndexes Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes Indexes of outputs that were used to pay burn requests.\\n    ///                     _voutIndexes[i] belongs to _burnReqIndexes[i]\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint256 _index,\\n        bytes memory _lockerLockingScript,\\n        uint256[] memory _burnReqIndexes,\\n        uint256[] memory _voutIndexes\\n    ) external payable override nonReentrant returns (bool) {\\n        // Get the Locker target address\\n        address _lockerTargetAddress = ILockersManager(lockers)\\n            .getLockerTargetAddress(_lockerLockingScript);\\n\\n        // It's more safe to only allow the Locker to call this function\\n        require(\\n            _msgSender() == _lockerTargetAddress ||\\n                _msgSender() == bitcoinFeeOracle,\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        BurnRouterLib.burnProofHelper(\\n            _blockNumber,\\n            startingBlockNumber,\\n            _locktime,\\n            lockers,\\n            _lockerLockingScript,\\n            _burnReqIndexes.length,\\n            _voutIndexes.length\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = BitcoinHelper.calculateTxId(\\n            _version,\\n            _vin,\\n            _vout,\\n            _locktime\\n        );\\n        require(\\n            BurnRouterLib.isConfirmed(\\n                relay,\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"BurnRouterLogic: not finalized\\\"\\n        );\\n\\n        // Mark the burn requests that are paid by this transaction\\n        uint256 paidOutputCounter = _checkPaidBurnRequests(\\n            txId,\\n            _blockNumber,\\n            _lockerTargetAddress,\\n            _vout,\\n            _burnReqIndexes,\\n            _voutIndexes\\n        );\\n\\n        // Mark the Bitcoin tx as used for burn proof so Locker cannot use it again\\n        require(\\n            BurnRouterLib.updateIsUsedAsBurnProof(\\n                isUsedAsBurnProof,\\n                paidOutputCounter,\\n                _vout,\\n                _lockerLockingScript,\\n                txId\\n            ),\\n            \\\"BurnRouterLogic: invalid burn proof\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice Slashes a locker if did not pay a cc burn request before its deadline\\n    /// @param _lockerLockingScript Locker's locking script that the unpaid request belongs to\\n    /// @param _indices Indices of requests that their deadline has passed\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint256[] memory _indices\\n    ) external override nonReentrant onlyOwner {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockersManager(lockers).isLocker(_lockerLockingScript),\\n            \\\"BurnRouterLogic: not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockersManager(lockers)\\n            .getLockerTargetAddress(_lockerLockingScript);\\n\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint256 i = 0; i < _indices.length; i++) {\\n            BurnRouterLib.disputeBurnHelper(\\n                burnRequests,\\n                _lockerTargetAddress,\\n                _indices[i],\\n                transferDeadline,\\n                BurnRouterLib.lastSubmittedHeight(relay),\\n                startingBlockNumber\\n            );\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockersManager(lockers).slashIdleLocker(\\n                _lockerTargetAddress,\\n                (burnRequests[_lockerTargetAddress][_indices[i]].amount *\\n                    slasherPercentageReward) / MAX_SLASHER_REWARD, // Slasher reward\\n                _msgSender(), // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender // User address\\n            );\\n\\n            emit BurnDispute(\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender,\\n                _lockerTargetAddress,\\n                _lockerLockingScript,\\n                burnRequests[_lockerTargetAddress][_indices[i]]\\n                    .requestIdOfLocker\\n            );\\n        }\\n    }\\n\\n    /// @notice Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev Input tx is a malicious tx which shows that locker spent BTC\\n    ///      Output tx is the tx that was spent by locker in input tx\\n    ///      Output tx shows money goes to locker\\n    ///      Input tx shows locker steals the funds\\n    /// @param _lockerLockingScript Suspicious locker's locking script\\n    /// @param _versions Versions of input and output tx\\n    /// @param _inputVin Inputs of the malicious transaction\\n    /// @param _inputVout Outputs of the malicious transaction\\n    /// @param _outputVin Inputs of the spent transaction\\n    /// @param _outputVout Outputs of the spent transaction\\n    /// @param _locktimes Locktimes of input and output tx\\n    /// @param _inputIntermediateNodes Merkle inclusion proof for the malicious transaction\\n    /// @param _indexesAndBlockNumbers Indices of malicious input in input tx,\\n    ///                                input tx in block and block number of input tx\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint256[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external payable override nonReentrant onlyOwner {\\n        // Finds input tx id and checks its inclusion\\n        bytes32 _inputTxId = BitcoinHelper.calculateTxId(\\n            _versions[0],\\n            _inputVin,\\n            _inputVout,\\n            _locktimes[0]\\n        );\\n\\n        BurnRouterLib.disputeAndSlashLockerHelper(\\n            lockers,\\n            _lockerLockingScript,\\n            _versions,\\n            [_inputVin, _outputVin, _outputVout],\\n            isUsedAsBurnProof,\\n            transferDeadline,\\n            relay,\\n            startingBlockNumber,\\n            _inputTxId,\\n            _locktimes,\\n            _inputIntermediateNodes,\\n            _indexesAndBlockNumbers\\n        );\\n\\n        // Slashes locker\\n        _slashLockerForDispute(\\n            _inputVout,\\n            _lockerLockingScript,\\n            _inputTxId,\\n            _indexesAndBlockNumbers[2] // Block number\\n        );\\n    }\\n\\n    /// @notice Burns the exchanged teleBTC\\n    function _swapAndUnwrap(\\n        uint256 _inputAmount,\\n        address _inputToken,\\n        uint256 _exchangedTeleBTC,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint256 thirdParty\\n    ) private returns (uint256) {\\n        uint256 burntAmount = _unwrap(\\n            _inputToken,\\n            _inputAmount,\\n            _exchangedTeleBTC,\\n            _userScript,\\n            _scriptType,\\n            _lockerLockingScript,\\n            thirdParty\\n        );\\n\\n        return burntAmount;\\n    }\\n\\n    /// @notice Burns teleBTC and records the burn request\\n    /// @return _burntAmount Amount of BTC that user receives\\n    function _unwrap(\\n        address _inputToken,\\n        uint256 _inputAmount,\\n        uint256 _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint256 thirdParty\\n    ) private returns (uint256 _burntAmount) {\\n        // Checks validity of user script\\n        BurnRouterLib.checkScriptTypeAndLocker(\\n            _userScript,\\n            _scriptType,\\n            lockers,\\n            _lockerLockingScript\\n        );\\n\\n        // Gets the target address of locker\\n        (\\n            uint256 remainingAmount,\\n            uint256 protocolFee,\\n            uint256 thirdPartyFee\\n        ) = _getFees(_amount, _lockerLockingScript, thirdParty);\\n\\n        // Burns remained teleBTC\\n        IWETH(teleBTC).approve(lockers, remainingAmount);\\n\\n        // Reduces the Bitcoin fee to find the amount that user receives (called burntAmount)\\n        _burntAmount = (\\n            ILockersManager(lockers).burn(_lockerLockingScript, remainingAmount)\\n        );\\n\\n        address _lockerTargetAddress = ILockersManager(lockers)\\n            .getLockerTargetAddress(_lockerLockingScript);\\n\\n        _saveBurnRequest(\\n            _amount,\\n            _burntAmount,\\n            _userScript,\\n            _scriptType,\\n            BurnRouterLib.lastSubmittedHeight(relay),\\n            _lockerTargetAddress\\n        );\\n\\n        address inputToken = _inputToken;\\n        uint256[3] memory amounts = [_inputAmount, _amount, _burntAmount];\\n        uint256[4] memory fees = [\\n            bitcoinFee,\\n            remainingAmount - _burntAmount,\\n            protocolFee,\\n            thirdPartyFee\\n        ];\\n\\n        emit NewUnwrap(\\n            _userScript,\\n            _scriptType,\\n            _lockerTargetAddress,\\n            _msgSender(),\\n            burnRequests[_lockerTargetAddress][\\n                burnRequests[_lockerTargetAddress].length - 1\\n            ].requestIdOfLocker, // index of request\\n            burnRequests[_lockerTargetAddress][\\n                burnRequests[_lockerTargetAddress].length - 1\\n            ].deadline,\\n            thirdParty,\\n            inputToken,\\n            amounts,\\n            fees\\n        );\\n    }\\n\\n    /// @notice Exchanges input token for teleBTC\\n    /// @dev Reverts if exchange fails\\n    /// @return Amount of exchanged teleBTC\\n    function _exchange(\\n        address _exchangeConnector,\\n        uint256[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline\\n    ) private returns (uint256) {\\n        require(\\n            _path[_path.length - 1] == teleBTC,\\n            \\\"BurnRouterLogic: invalid path\\\"\\n        );\\n        require(_amounts.length == 2, \\\"BurnRouterLogic: wrong amounts\\\");\\n\\n        if (msg.value != 0) {\\n            require(\\n                msg.value == _amounts[0],\\n                \\\"BurnRouterLogic: invalid amount\\\"\\n            );\\n            require(\\n                wrappedNativeToken == _path[0],\\n                \\\"BurnRouterLogic: invalid path\\\"\\n            );\\n            // Mint wrapped native token\\n            IWETH(wrappedNativeToken).deposit{value: msg.value}();\\n        } else {\\n            // Transfer user input token to contract\\n            IWETH(_path[0]).transferFrom(\\n                _msgSender(),\\n                address(this),\\n                _amounts[0]\\n            );\\n        }\\n\\n        // Give approval to exchange connector\\n        IWETH(_path[0]).approve(_exchangeConnector, _amounts[0]);\\n        (bool result, uint256[] memory amounts) = IDexConnector(\\n            _exchangeConnector\\n        ).swap(\\n                _amounts[0],\\n                _amounts[1] * 90 / 100, // TODO: _amounts[1]\\n                _path,\\n                address(this),\\n                _deadline,\\n                _isFixedToken\\n            );\\n        require(result, \\\"BurnRouterLogic: exchange failed\\\");\\n        return amounts[amounts.length - 1]; // Amount of exchanged teleBTC\\n    }\\n\\n    /// @notice Slashes the malicious locker\\n    /// @param _inputVout Inputs of the malicious transaction\\n    /// @param _lockerLockingScript Malicious locker's locking script\\n    /// @param _inputTxId Tx id of the malicious transaction\\n    /// @param _inputBlockNumber Block number of the malicious transaction\\n    function _slashLockerForDispute(\\n        bytes memory _inputVout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _inputTxId,\\n        uint256 _inputBlockNumber\\n    ) private {\\n        // Finds total value of malicious transaction\\n        uint256 totalValue = BitcoinHelper.parseOutputsTotalValue(_inputVout);\\n\\n        // Gets the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockersManager(lockers)\\n            .getLockerTargetAddress(_lockerLockingScript);\\n\\n        ILockersManager(lockers).slashThiefLocker(\\n            _lockerTargetAddress,\\n            (totalValue * slasherPercentageReward) / MAX_SLASHER_REWARD, // Slasher reward\\n            _msgSender(), // Slasher address\\n            totalValue\\n        );\\n\\n        // Emits the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _lockerLockingScript,\\n            _inputBlockNumber,\\n            _inputTxId,\\n            totalValue +\\n                (totalValue * slasherPercentageReward) /\\n                MAX_SLASHER_REWARD\\n        );\\n    }\\n\\n    /// @notice Checks the burn requests that get paid by this transaction\\n    /// @param _paidBlockNumber Block number in which locker paid the burn request\\n    /// @param _lockerTargetAddress Address of the locker on the target chain\\n    /// @param _vout Outputs of a transaction\\n    /// @param _burnReqIndexes Indexes of requests that locker provides proof for them\\n    /// @param _voutIndexes Indexes of outputs that were used to pay burn requests\\n    /// @return paidOutputCounter Number of executed burn requests\\n    function _checkPaidBurnRequests(\\n        bytes32 txId,\\n        uint256 _paidBlockNumber,\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint256[] memory _burnReqIndexes,\\n        uint256[] memory _voutIndexes\\n    ) private returns (uint256 paidOutputCounter) {\\n        uint256 parsedAmount;\\n        /*\\n            Below variable is for checking that every output in vout (except one)\\n            is related to a cc burn request so that we can\\n            set \\\"isUsedAsBurnProof = true\\\" for the whole txId\\n        */\\n        paidOutputCounter = 0;\\n        uint256 tempVoutIndex;\\n\\n        for (uint256 i = 0; i < _burnReqIndexes.length; i++) {\\n            // prevent from sending repeated vout indexes\\n            if (i == 0) {\\n                tempVoutIndex = _voutIndexes[i];\\n            } else {\\n                // get vout indexes in increasing order to get sure there is no duplicate\\n                require(\\n                    _voutIndexes[i] > tempVoutIndex,\\n                    \\\"BurnRouterLogic: un-sorted vout indexes\\\"\\n                );\\n\\n                tempVoutIndex = _voutIndexes[i];\\n            }\\n\\n            uint256 _burnReqIndex = _burnReqIndexes[i];\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][_burnReqIndex]\\n                    .isTransferred &&\\n                burnRequests[_lockerTargetAddress][_burnReqIndex].deadline >=\\n                _paidBlockNumber\\n            ) {\\n                parsedAmount = BitcoinHelper\\n                    .parseValueFromSpecificOutputHavingScript(\\n                        _vout,\\n                        _voutIndexes[i],\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex]\\n                            .userScript,\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex]\\n                            .scriptType\\n                    );\\n\\n                // Checks that locker has sent required teleBTC amount\\n                if (\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex]\\n                        .burntAmount == parsedAmount\\n                ) {\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex]\\n                        .isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidUnwrap(\\n                        _lockerTargetAddress,\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex]\\n                            .requestIdOfLocker,\\n                        txId,\\n                        _voutIndexes[i]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Records burn request of user\\n    /// @param _amount Amount of wrapped token that user wants to burn\\n    /// @param _burntAmount Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userScript User's Bitcoin script type\\n    /// @param _lastSubmittedHeight Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint256 _amount,\\n        uint256 _burntAmount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint256 _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) private {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.burntAmount = _burntAmount;\\n        request.sender = _msgSender();\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        request.requestIdOfLocker = burnRequestCounter[_lockerTargetAddress];\\n        burnRequestCounter[_lockerTargetAddress] =\\n            burnRequestCounter[_lockerTargetAddress] +\\n            1;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice Checks inclusion of the transaction in the specified block\\n    /// @dev Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount The amount to be burnt\\n    /// @return remainingAmount amount after reducing fees\\n    /// @return _protocolFee fee of protocol\\n    /// @return _thirdPartyFee fee of third party\\n    function _getFees(\\n        uint256 _amount,\\n        bytes memory _lockerLockingScript,\\n        uint256 _thirdParty\\n    )\\n        private\\n        returns (\\n            uint256 remainingAmount,\\n            uint256 _protocolFee,\\n            uint256 _thirdPartyFee\\n        )\\n    {\\n        // Find protocol and third-party fee\\n        _protocolFee = (_amount * protocolPercentageFee) / MAX_PROTOCOL_FEE;\\n        _thirdPartyFee =\\n            (_amount * thirdPartyFee[_thirdParty]) /\\n            MAX_PROTOCOL_FEE;\\n\\n        remainingAmount = _amount - _protocolFee - _thirdPartyFee - bitcoinFee;\\n\\n        // Note: to avoid dust amount, we require remainingAmount to be greater than 1000\\n        require(remainingAmount >= 1000, \\\"BurnRouterLogic: low amount\\\");\\n\\n        // Send protocol fee\\n        if (_protocolFee > 0) {\\n            require(\\n                IWETH(teleBTC).transfer(treasury, _protocolFee),\\n                \\\"BurnRouterLogic: fee transfer failed\\\"\\n            );\\n        }\\n\\n        // Send third party fee\\n        if (_thirdPartyFee > 0) {\\n            require(\\n                IWETH(teleBTC).transfer(\\n                    thirdPartyAddress[_thirdParty],\\n                    _thirdPartyFee\\n                ),\\n                \\\"BurnRouterLogic: third party fee transfer failed\\\"\\n            );\\n        }\\n\\n        if (bitcoinFee > 0) {\\n            // This compensates locker for the network fee\\n            address _lockerTargetAddress = ILockersManager(lockers)\\n                .getLockerTargetAddress(_lockerLockingScript);\\n            require(\\n                IWETH(teleBTC).transfer(_lockerTargetAddress, bitcoinFee),\\n                \\\"BurnRouterLogic: network fee transfer failed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8aa6378b38dd233e4e7ad7ad8f571145e12a3b56a9857632309943e8bac99c4\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\n\\nabstract contract BurnRouterStorage is IBurnRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    address public override bitcoinFeeOracle;\\n    uint public override startingBlockNumber;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    \\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n}\",\"keccak256\":\"0x7d070b246c54b207911d56bae926d134732bb3cb434a0603a6890a55e4b4149e\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterStorageV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\n\\nabstract contract BurnRouterStorageV2 is IBurnRouter {\\n    mapping(uint => uint) public thirdPartyFee;\\n    mapping(uint => address) public thirdPartyAddress;\\n    address public wrappedNativeToken;\\n}\\n\",\"keccak256\":\"0xeba103f0a41ced0b7c7e7ddd0021576be2a69c62c907f343573be92ef71358ef\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n    // Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n    struct burnRequest {\\n        uint amount;\\n        uint burntAmount;\\n        address sender;\\n        bytes userScript;\\n        uint deadline;\\n        bool isTransferred;\\n        ScriptTypes scriptType;\\n        uint requestIdOfLocker;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param userTargetAddress Address of the user on EVM\\n    /// @param requestIdOfLocker Index of request between Locker's burn requests\\n    /// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n    /// @param thirdPartyId Id of third party\\n    /// @param inputToken inputToken address\\n    /// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n    /// @param fees [network fee, locker fee, protocol fee, third party fee]\\n    event NewUnwrap(\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        address lockerTargetAddress,\\n        address indexed userTargetAddress,\\n        uint requestIdOfLocker,\\n        uint indexed deadline,\\n        uint thirdPartyId,\\n        address inputToken,\\n        uint[3] amounts,\\n        uint[4] fees\\n    );\\n\\n    /// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n    /// @param bitcoinTxOutputIndex The output index in tx\\n    event PaidUnwrap(\\n        address indexed lockerTargetAddress,\\n        uint requestIdOfLocker,\\n        bytes32 bitcoinTxId,\\n        uint bitcoinTxOutputIndex\\n    );\\n\\n    /// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n    /// @param _lockerTargetAddress\\tLocker's address on the target chain\\n    /// @param _blockNumber\\tBlock number of the malicious tx\\n    /// @param txId\\tTransaction ID of the malicious tx\\n    /// @param amount Slashed amount\\n    event LockerDispute(\\n        address _lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint _blockNumber,\\n        bytes32 txId,\\n        uint amount\\n    );\\n\\n    event BurnDispute(\\n        address indexed userTargetAddress,\\n        address indexed _lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint requestIdOfLocker\\n    );\\n\\n    /// @notice Emits when relay address is updated\\n    event NewRelay(address oldRelay, address newRelay);\\n\\n    /// @notice Emits when treasury address is updated\\n    event NewTreasury(address oldTreasury, address newTreasury);\\n\\n    /// @notice Emits when lockers address is updated\\n    event NewLockers(address oldLockers, address newLockers);\\n\\n    /// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(address oldTeleBTC, address newTeleBTC);\\n\\n    /// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline,\\n        uint newTransferDeadline\\n    );\\n\\n    /// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee,\\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee,\\n        uint newSlasherPercentageFee\\n    );\\n\\n    /// @notice Emits when network fee is updated\\n    event NewNetworkFee(uint oldNetworkFee, uint newNetworkFee);\\n\\n    /// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle,\\n        address newNetworkFeeOracle\\n    );\\n\\n    /// @notice Emits when changes made to third party address\\n    event NewThirdPartyAddress(\\n        uint thirdPartyId,\\n        address oldThirdPartyAddress,\\n        address newThirdPartyAddress\\n    );\\n\\n    /// @notice Emits when changes made to third party fee\\n    event NewThirdPartyFee(\\n        uint thirdPartyId,\\n        uint oldThirdPartyFee,\\n        uint newThirdPartyFee\\n    );\\n\\n\\tevent NewWrappedNativeToken(\\n        address oldWrappedNativeToken,\\n        address newWrappedNativeToken\\n    );\\n\\n    // Read-only functions\\n\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint _index\\n    ) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function lockers() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function transferDeadline() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n\\n    function slasherPercentageReward() external view returns (uint);\\n\\n    function bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n    function isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n    function bitcoinFeeOracle() external view returns (address);\\n\\n    // State-changing functions\\n\\n    function setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setLockers(address _lockers) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function setTransferDeadline(uint _transferDeadline) external;\\n\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n    function setNetworkFee(uint _networkFee) external;\\n\\n    function setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n    function setThirdPartyAddress(\\n        uint _thirdPartyId,\\n        address _thirdPartyAddress\\n    ) external;\\n\\n    function setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function unwrap(\\n        uint _amount,\\n        bytes calldata _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint thirdParty\\n    ) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint thirdParty\\n    ) external payable returns (uint);\\n\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        bytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) external payable returns (bool);\\n\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint[] memory _indices\\n    ) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers\\n        // ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x63f2cefb2a5bd58746a143143c10c1297b0ae2e3a8c5613d79ee2058ee9664cc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f2080620000216000396000f3fe6080604052600436106101c45760003560e01c80630e757850146101d057806317fcb39b146101f25780631812adb6146102285780631876dec41461024c5780631e2361681461026c5780631e7107c7146102ac57806333453d15146102cc5780633fea4367146102ec578063419cba7f1461030c57806344dd6aa5146103225780634782bc361461033557806350a058361461035557806359fd0b0c146103755780635c4f5f3e146103a257806361d027b3146103c257806370872aa5146103e2578063715018a6146103f857806373532b2a1461040d5780637ed557481461042d5780637f0f18171461044d5780637ffe9a921461046d5780638d3d78cd1461048d5780638d5fc1d4146104ad5780638da5cb5b146104cd5780638f9eb78b146104e2578063930a60e814610502578063a9b682711461052f578063b14d353214610565578063b59589d114610585578063b74d0d35146105a5578063bed6a602146105bb578063c780c03f146105d1578063c805f68b146105e4578063cf54ce4714610604578063da058ae314610624578063ea73263714610644578063f0f4426014610657578063f2fde38b14610677578063f47e22401461069757600080fd5b366101cb57005b600080fd5b3480156101dc57600080fd5b506101f06101eb36600461542c565b6106cb565b005b3480156101fe57600080fd5b5060a654610212906001600160a01b031681565b60405161021f9190615722565b60405180910390f35b34801561023457600080fd5b5061023e60075481565b60405190815260200161021f565b34801561025857600080fd5b50600154610212906001600160a01b031681565b34801561027857600080fd5b5061029c6102873660046150e9565b600c6020526000908152604090205460ff1681565b604051901515815260200161021f565b3480156102b857600080fd5b506101f06102c73660046150e9565b610858565b3480156102d857600080fd5b506101f06102e7366004614ea9565b6108c7565b3480156102f857600080fd5b5061023e6103073660046154ce565b610938565b34801561031857600080fd5b5061023e60085481565b61023e610330366004614ee1565b610a54565b34801561034157600080fd5b506101f06103503660046150e9565b610afa565b34801561036157600080fd5b50600454610212906001600160a01b031681565b34801561038157600080fd5b5061023e6103903660046150e9565b60a46020526000908152604090205481565b3480156103ae57600080fd5b506101f06103bd3660046150e9565b610b94565b3480156103ce57600080fd5b50600354610212906001600160a01b031681565b3480156103ee57600080fd5b5061023e60055481565b34801561040457600080fd5b506101f0610d2a565b34801561041957600080fd5b506101f061042836600461523e565b610d34565b34801561043957600080fd5b506101f06104483660046150e9565b61135a565b34801561045957600080fd5b506101f0610468366004614ea9565b6113f3565b34801561047957600080fd5b5061029c610488366004614ff9565b61148d565b34801561049957600080fd5b50600254610212906001600160a01b031681565b3480156104b957600080fd5b506101f06104c83660046153fd565b6114e5565b3480156104d957600080fd5b50610212611589565b3480156104ee57600080fd5b506101f06104fd366004615557565b611598565b34801561050e57600080fd5b5061023e61051d366004614ea9565b600b6020526000908152604090205481565b34801561053b57600080fd5b5061021261054a3660046150e9565b60a5602052600090815260409020546001600160a01b031681565b34801561057157600080fd5b506101f0610580366004614ea9565b6115fd565b34801561059157600080fd5b50600054610212906001600160a01b031681565b3480156105b157600080fd5b5061023e60095481565b3480156105c757600080fd5b5061023e60065481565b6101f06105df3660046152a3565b611697565b3480156105f057600080fd5b506101f06105ff366004614ea9565b611815565b34801561061057600080fd5b506101f061061f3660046150e9565b6118af565b34801561063057600080fd5b506101f061063f366004614ea9565b61194a565b61029c610652366004615119565b6119bb565b34801561066357600080fd5b506101f0610672366004614ea9565b611d2c565b34801561068357600080fd5b506101f0610692366004614ea9565b611dc6565b3480156106a357600080fd5b506106b76106b2366004614ff9565b611e3f565b60405161021f989796959493929190615b63565b600d54610100900460ff16158080156106eb5750600d54600160ff909116105b806107055750303b1580156107055750600d5460ff166001145b61076d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600d805460ff19166001179055801561079057600d805461ff0019166101001790555b610798611f3c565b6107a0611f6b565b6107a98b610858565b6107b28a611815565b6107bb896115fd565b6107c488611d2c565b6107cd876113f3565b6107d686610b94565b6107df8561135a565b6107e884610afa565b6107f36102e7611589565b6107fc836118af565b6108058261194a565b801561084b57600d805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b610860611f9a565b60055481116108c25760405162461bcd60e51b815260206004820152602860248201527f4275726e526f757465724c6f6769633a206c6f77207374617274696e67426c6f60448201526731b5a73ab6b132b960c11b6064820152608401610764565b600555565b6108cf611f9a565b6004546040517f68bf625687194a1bbeeccbaa327c37aa1f9940a3c6c9e8fe84f06f1dc14fd1769161090e916001600160a01b03909116908490615736565b60405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610942611ff9565b6002546001600160a01b03166323b872dd33308a6040518463ffffffff1660e01b815260040161097493929190615750565b602060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190615024565b610a1e5760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a207472616e7366657246726f6d2066616044820152631a5b195960e21b6064820152608401610764565b600254600090610a3d906001600160a01b031689808a8a8a8a8a612053565b915050610a4a6001607255565b9695505050505050565b6000610a5e611ff9565b6000610a6f8e8e8e8e8e8e8e6124fa565b9050610add8d8d6000818110610a9557634e487b7160e01b600052603260045260246000fd5b905060200201358b8b6000818110610abd57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ad29190614ea9565b838a8a8a8a8a612a54565b915050610aea6001607255565b9c9b505050505050505050505050565b610b02611f9a565b806127101015610b545760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420726577617264006044820152606401610764565b7faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f6760085482604051610b87929190615b55565b60405180910390a1600855565b600080546040516353bcd1c960e11b815273428351462684f4c9df7ef60b35825471d6d7540a9163a779a39291610bd7916001600160a01b031690600401615722565b60206040518083038186803b158015610bef57600080fd5b505af4158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190615101565b9050610c31611589565b6001600160a01b0316336001600160a01b03161480610c51575080600654105b610c9a5760405162461bcd60e51b815260206004820152601a602482015279109d5c9b949bdd5d195c931bd9da58ce881b9bc81c195c9b5a5d60321b6044820152606401610764565b808211610ce95760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a206c6f7720646561646c696e650000006044820152606401610764565b7f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf30041660065483604051610d1c929190615b55565b60405180910390a150600655565b610d32611f9a565b565b610d3c611ff9565b610d44611f9a565b60015460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390610d7690869086906004016158cd565b60206040518083038186803b158015610d8e57600080fd5b505afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190615024565b610de25760405162461bcd60e51b815260040161076490615a88565b60015460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90610e1590879087906004016158cd565b60206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190614ec5565b905060005b82518110156113495773428351462684f4c9df7ef60b35825471d6d7540a6315755789600a84868581518110610eb057634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546000546040516310889dc360e01b815273428351462684f4c9df7ef60b35825471d6d7540a916310889dc391610f00916001600160a01b031690600401615722565b60206040518083038186803b158015610f1857600080fd5b505af4158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190615101565b6005546040516001600160e01b031960e089901b16815260048101969096526001600160a01b03909416602486015260448501929092526064840152608483015260a482015260c40160006040518083038186803b158015610fb157600080fd5b505af4158015610fc5573d6000803e3d6000fd5b50506001546008546001600160a01b038681166000908152600a602052604090208851919093169450631697565b93508692612710929189908890811061101c57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061104257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016000015461105e9190615d99565b6110689190615d79565b336001600160a01b0387166000908152600a6020526040902088518990889081106110a357634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106110c957634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154600a6000896001600160a01b03166001600160a01b0316815260200190815260200160002089888151811061112057634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061114657634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190615024565b506001600160a01b0382166000818152600a60205260409020845185908490811061122c57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061125257634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160020160009054906101000a90046001600160a01b03166001600160a01b03167f58c23b4ae0617be275628875bcfd65759a441263099a256eeb27899fb5dd846d8787600a6000886001600160a01b03166001600160a01b031681526020019081526020016000208887815181106112e857634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061130e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161132f939291906158e1565b60405180910390a38061134181615e80565b915050610e6a565b50506113556001607255565b505050565b611362611f9a565b8061271010156113b35760405162461bcd60e51b815260206004820152601c60248201527b4275726e526f757465724c6f6769633a20696e76616c69642066656560201b6044820152606401610764565b7f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b600754826040516113e6929190615b55565b60405180910390a1600755565b6113fb611f9a565b806001600160a01b0381166114235760405163d92e233d60e01b815260040160405180910390fd5b6002546040517f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec2609691611462916001600160a01b03909116908590615736565b60405180910390a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600a602052604081208054839081106114c557634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1690505b92915050565b6114ed611f9a565b600082815260a56020526040908190205490517f1e73962bcff5b98a9ac70c9b0f71fbb31dc0f5a09348c6d3ceab164169a9e729916115539185916001600160a01b03169085909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a1600091825260a5602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6040546001600160a01b031690565b6115a0611f9a565b600082815260a46020526040908190205490517f188adabf806a6b6d814acc1dbd9f09e5a251c8c065d6285749a5824e4579b645916115e3918591908590615b3f565b60405180910390a1600091825260a4602052604090912055565b611605611f9a565b806001600160a01b03811661162d5760405163d92e233d60e01b815260040160405180910390fd5b6001546040517ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c39161166c916001600160a01b03909116908590615736565b60405180910390a150600180546001600160a01b0319166001600160a01b0392909216919091179055565b61169f611ff9565b6116a7611f9a565b6000611705896000815181106116cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518989876000815181106116f857634e487b7160e01b600052603260045260246000fd5b6020026020010151612a67565b905073428351462684f4c9df7ef60b35825471d6d7540a63441d3a21600160009054906101000a90046001600160a01b03168c8c60405180606001604052808e81526020018c81526020018b815250600c60065460008054906101000a90046001600160a01b03166005548a8e8e8e6040518d63ffffffff1660e01b815260040161179b9c9b9a999897969594939291906157b3565b60006040518083038186803b1580156117b357600080fd5b505af41580156117c7573d6000803e3d6000fd5b505050506117ff878b83856002815181106117f257634e487b7160e01b600052603260045260246000fd5b6020026020010151612bcd565b5061180a6001607255565b505050505050505050565b61181d611f9a565b806001600160a01b0381166118455760405163d92e233d60e01b815260040160405180910390fd5b6000546040517f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f491611884916001600160a01b03909116908590615736565b60405180910390a150600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045433906001600160a01b031681146119095760405162461bcd60e51b815260206004820152601b60248201527a4275726e526f757465724c6f6769633a206e6f74206f7261636c6560281b6044820152606401610764565b7f890eb41e398fd9cf425695b34269b781ad56c257422859094a28db47fb78f1b36009548360405161193c929190615b55565b60405180910390a150600955565b611952611f9a565b60a6546040517f4da8064030e901e42f6de0ab04f4c322d7936d0120503addfe8a51f12709068991611991916001600160a01b03909116908490615736565b60405180910390a160a680546001600160a01b0319166001600160a01b0392909216919091179055565b60006119c5611ff9565b60015460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a906119f6908890600401615905565b60206040518083038186803b158015611a0e57600080fd5b505afa158015611a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a469190614ec5565b9050336001600160a01b0382161480611a7257506004546001600160a01b0316336001600160a01b0316145b611a8e5760405162461bcd60e51b815260040161076490615a88565b73428351462684f4c9df7ef60b35825471d6d7540a6344922b64896005548c600160009054906101000a90046001600160a01b03168a8a518a516040518863ffffffff1660e01b8152600401611aea9796959493929190615c45565b60006040518083038186803b158015611b0257600080fd5b505af4158015611b16573d6000803e3d6000fd5b505050506000611b288d8d8d8d612a67565b600054604051637ebc232760e01b815291925073428351462684f4c9df7ef60b35825471d6d7540a91637ebc232791611b77916001600160a01b039091169085908e908e908e90600401615774565b60206040518083038186803b158015611b8f57600080fd5b505af4158015611ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc79190615024565b611c135760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a206e6f742066696e616c697a656400006044820152606401610764565b6000611c23828b858f8a8a612d99565b905073428351462684f4c9df7ef60b35825471d6d7540a63191e28dc600c838f8b876040518663ffffffff1660e01b8152600401611c65959493929190615a0f565b60206040518083038186803b158015611c7d57600080fd5b505af4158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb59190615024565b611d0d5760405162461bcd60e51b815260206004820152602360248201527f4275726e526f757465724c6f6769633a20696e76616c6964206275726e20707260448201526237b7b360e91b6064820152608401610764565b60019350505050611d1e6001607255565b9a9950505050505050505050565b611d34611f9a565b806001600160a01b038116611d5c5760405163d92e233d60e01b815260040160405180910390fd5b6003546040517f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591611d9b916001600160a01b03909116908590615736565b60405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b611dce611f9a565b6001600160a01b038116611e335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610764565b611e3c8161327d565b50565b600a6020528160005260406000208181548110611e5b57600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611e9790615e4b565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec390615e4b565b8015611f105780601f10611ee557610100808354040283529160200191611f10565b820191906000526020600020905b815481529060010190602001808311611ef357829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b600d54610100900460ff16611f635760405162461bcd60e51b815260040161076490615abd565b610d326132cd565b600d54610100900460ff16611f925760405162461bcd60e51b815260040161076490615abd565b610d326132fd565b33611fa3611589565b6001600160a01b031614610d325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610764565b6002607254141561204c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610764565b6002607255565b600154604051630f87661560e41b815260009173428351462684f4c9df7ef60b35825471d6d7540a9163f8766150916120a2918a918a916001600160a01b03909116908a908a90600401615918565b60006040518083038186803b1580156120ba57600080fd5b505af41580156120ce573d6000803e3d6000fd5b5050505060008060006121198a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250613324915050565b60025460015460405163095ea7b360e01b81529497509295509093506001600160a01b039081169263095ea7b39261215792169087906004016158b4565b602060405180830381600087803b15801561217157600080fd5b505af1158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190615024565b506001546040516338463cff60e01b81526001600160a01b03909116906338463cff906121de908a908a9088906004016158e1565b602060405180830381600087803b1580156121f857600080fd5b505af115801561220c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122309190615101565b60015460405163626885b560e11b81529195506000916001600160a01b039091169063c4d10b6a90612268908b908b906004016158cd565b60206040518083038186803b15801561228057600080fd5b505afa158015612294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b89190614ec5565b6000546040516310889dc360e01b815291925061235f918d9188918e918e9173428351462684f4c9df7ef60b35825471d6d7540a916310889dc391612309916001600160a01b031690600401615722565b60206040518083038186803b15801561232157600080fd5b505af4158015612335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123599190615101565b86613749565b604080516060810182528d815260208082018e905281830188905282516080810190935260095483528f9260009181016123998a8a615de1565b8152602080820189905260409182018890526001600160a01b0387166000908152600a909152208054919250906123d290600190615de1565b815481106123f057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600401546124093390565b6001600160a01b03167f6b5c22e69db87534a562352580358411dc7b2d98d24684765342f2ebf2dd8c318f8f88600a60008b6001600160a01b03166001600160a01b031681526020019081526020016000206001600a60008d6001600160a01b03166001600160a01b03168152602001908152602001600020805490506124909190615de1565b815481106124ae57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548f8a8a8a6040516124d8989796959493929190615966565b60405180910390a35050505050505098975050505050505050565b6001607255565b6002546000906001600160a01b03168484612516600182615de1565b81811061253357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906125489190614ea9565b6001600160a01b03161461256e5760405162461bcd60e51b815260040161076490615b08565b600286146125be5760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a2077726f6e6720616d6f756e747300006044820152606401610764565b341561270b57868660008181106125e557634e487b7160e01b600052603260045260246000fd5b90506020020135341461263a5760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420616d6f756e74006044820152606401610764565b8383600081811061265b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906126709190614ea9565b60a6546001600160a01b0390811691161461269d5760405162461bcd60e51b815260040161076490615b08565b60a660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156126ed57600080fd5b505af1158015612701573d6000803e3d6000fd5b50505050506127eb565b8383600081811061272c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906127419190614ea9565b6001600160a01b03166323b872dd33308a8a600081811061277257634e487b7160e01b600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161279793929190615750565b602060405180830381600087803b1580156127b157600080fd5b505af11580156127c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e99190615024565b505b8383600081811061280c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906128219190614ea9565b6001600160a01b031663095ea7b3898989600081811061285157634e487b7160e01b600052603260045260246000fd5b905060200201356040518363ffffffff1660e01b81526004016128759291906158b4565b602060405180830381600087803b15801561288f57600080fd5b505af11580156128a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c79190615024565b50600080896001600160a01b031663b0bbcd888a8a60008181106128fb57634e487b7160e01b600052603260045260246000fd5b9050602002013560648c8c600181811061292557634e487b7160e01b600052603260045260246000fd5b90506020020135605a6129389190615d99565b6129429190615d79565b8989308a8e6040518863ffffffff1660e01b81526004016129699796959493929190615bc6565b600060405180830381600087803b15801561298357600080fd5b505af1158015612997573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129bf9190810190615040565b9150915081612a105760405162461bcd60e51b815260206004820181905260248201527f4275726e526f757465724c6f6769633a2065786368616e6765206661696c65646044820152606401610764565b8060018251612a1f9190615de1565b81518110612a3d57634e487b7160e01b600052603260045260246000fd5b602002602001015192505050979650505050505050565b600080611d1e898b8a8a8a8a8a8a612053565b600080612a7c612a778683613919565b61393d565b9050612a8d62ffffff198216613a93565b15612ad75760405162461bcd60e51b815260206004820152601a602482015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b6044820152606401610764565b6000600287878787604051602001612af294939291906156b3565b60408051601f1981840301815290829052612b0c91615706565b602060405180830381855afa158015612b29573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b4c9190615101565b90506000600282604051602001612b6591815260200190565b60408051601f1981840301815290829052612b7f91615706565b602060405180830381855afa158015612b9c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bbf9190615101565b93505050505b949350505050565b6000612bd885613a9f565b60015460405163626885b560e11b81526001600160401b039290921692506000916001600160a01b039091169063c4d10b6a90612c19908890600401615905565b60206040518083038186803b158015612c3157600080fd5b505afa158015612c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c699190614ec5565b6001546008549192506001600160a01b03169063b734de2690839061271090612c929087615d99565b612c9c9190615d79565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612cf557600080fd5b505af1158015612d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2d9190615024565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060085488612d649190615d99565b612d6e9190615d79565b612d789088615cef565b604051612d89959493929190615873565b60405180910390a1505050505050565b60008080805b85518110156132705780612ddc57848181518110612dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101519150612e8d565b81858281518110612dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015111612e625760405162461bcd60e51b815260206004820152602760248201527f4275726e526f757465724c6f6769633a20756e2d736f7274656420766f757420604482015266696e646578657360c81b6064820152608401610764565b848181518110612e8257634e487b7160e01b600052603260045260246000fd5b602002602001015191505b6000868281518110612eaf57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208181548110612efd57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff16158015612f6c57506001600160a01b0389166000908152600a6020526040902080548b919083908110612f5757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b1561325d576130d988878481518110612f9557634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60008d6001600160a01b03166001600160a01b031681526020019081526020016000208481548110612fe157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016003018054612ffd90615e4b565b80601f016020809104026020016040519081016040528092919081815260200182805461302990615e4b565b80156130765780601f1061304b57610100808354040283529160200191613076565b820191906000526020600020905b81548152906001019060200180831161305957829003601f168201915b5050506001600160a01b038f166000908152600a60205260409020805490925087915081106130b557634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff16613b42565b6001600160401b0316935083600a60008b6001600160a01b03166001600160a01b03168152602001908152602001600020828154811061312957634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010154141561325d576001600160a01b0389166000908152600a602052604090208054600191908390811061317d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff19169115159190911790556131aa856001615cef565b6001600160a01b038a166000818152600a60205260409020805492975090917f7b8cb33b1d4dc1e5d05c58e9945c383eb161ac22029c5b963989d08c3d0ef4da91908490811061320a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548d89868151811061323d57634e487b7160e01b600052603260045260246000fd5b602002602001015160405161325493929190615b3f565b60405180910390a25b508061326881615e80565b915050612d9f565b5050509695505050505050565b604080546001600160a01b038381166001600160a01b031983168117845592519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600d54610100900460ff166132f45760405162461bcd60e51b815260040161076490615abd565b610d323361327d565b600d54610100900460ff166124f35760405162461bcd60e51b815260040161076490615abd565b60008060006127106007548761333a9190615d99565b6133449190615d79565b600085815260a46020526040902054909250612710906133649088615d99565b61336e9190615d79565b6009549091508161337f8489615de1565b6133899190615de1565b6133939190615de1565b92506103e88310156133e55760405162461bcd60e51b815260206004820152601b60248201527a109d5c9b949bdd5d195c931bd9da58ce881b1bddc8185b5bdd5b9d602a1b6044820152606401610764565b81156134cb5760025460035460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926134219291169086906004016158b4565b602060405180830381600087803b15801561343b57600080fd5b505af115801561344f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134739190615024565b6134cb5760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a20666565207472616e736665722066616044820152631a5b195960e21b6064820152608401610764565b80156135cb57600254600085815260a560205260409081902054905163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926135149291169085906004016158b4565b602060405180830381600087803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135669190615024565b6135cb5760405162461bcd60e51b815260206004820152603060248201527f4275726e526f757465724c6f6769633a2074686972642070617274792066656560448201526f081d1c985b9cd9995c8819985a5b195960821b6064820152608401610764565b600954156137405760015460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90613604908990600401615905565b60206040518083038186803b15801561361c57600080fd5b505afa158015613630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136549190614ec5565b60025460095460405163a9059cbb60e01b81529293506001600160a01b039091169163a9059cbb9161368b918591906004016158b4565b602060405180830381600087803b1580156136a557600080fd5b505af11580156136b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136dd9190615024565b61373e5760405162461bcd60e51b815260206004820152602c60248201527f4275726e526f757465724c6f6769633a206e6574776f726b206665652074726160448201526b1b9cd9995c8819985a5b195960a21b6064820152608401610764565b505b93509350939050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e083019190915288825260208201889052339282019290925260608101869052908460058111156137ad57634e487b7160e01b600052602160045260246000fd5b908160058111156137ce57634e487b7160e01b600052602160045260246000fd5b9052506006546137de9084615cef565b6080820152600060a082018190526001600160a01b038316808252600b6020818152604084205460e086018190529290935290915261381e906001615cef565b6001600160a01b038381166000908152600b6020908152604080832094909455600a81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b031916919093161790915560608301518051849361389e926003850192910190614c17565b506080820151600482015560a08201516005808301805492151560ff1984168117825560c086015193919261ff001990911661ffff1990921691909117906101009084908111156138ff57634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b81516000906020840161393464ffffffffff85168284613db6565b95945050505050565b60008181613953815b62ffffff19841690613dfd565b5061396362ffffff198516613ed7565b6001600160601b031661397f57613978613ee6565b9250613a8c565b600061398c856000613eee565b9050600061399f62ffffff198716613ed7565b6001600160601b031690506001600160401b0382166139c9576139c0613ee6565b94505050613a8c565b60006139d483614037565b60ff16905060005b836001600160401b0316811015613a5257828210613a07576139fc613ee6565b965050505050613a8c565b6000613a27613a168486615de1565b60055b62ffffff198c169190614095565b9050613a32816140bf565b613a3c9084615cef565b9250508080613a4a90615e80565b9150506139dc565b50818114613a6c57613a62613ee6565b9550505050613a8c565b613a8660065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff199081161490565b600080613ab4613aaf8483613919565b614113565b9050613ac562ffffff198216613a93565b15613ae25760405162461bcd60e51b815260040161076490615a53565b600080613af0836000613eee565b6001600160401b0316905060005b81811015613b3957613b108482614214565b9250613b1b8361432b565b613b259086615d07565b945080613b3181615e80565b915050613afe565b50505050919050565b600080613b52613aaf8783613919565b9050613b6362ffffff198216613a93565b15613b805760405162461bcd60e51b815260040161076490615a53565b6000613b8c8287614214565b90506000613b9982614350565b90506005856005811115613bbd57634e487b7160e01b600052602160045260246000fd5b1415613c2257613bd662ffffff198216600260206143a1565b604051602001613be891815260200190565b60405160208183030381529060405280519060200120868051906020012014613c12576000613c1b565b613c1b8261432b565b9350613dab565b6000856005811115613c4457634e487b7160e01b600052602160045260246000fd5b1415613c5d57613bd662ffffff198216600160206143a1565b6001856005811115613c7f57634e487b7160e01b600052602160045260246000fd5b1415613cb957613c9662ffffff19821660036144cf565b604051602001613be8919060609190911b6001600160601b031916815260140190565b6002856005811115613cdb57634e487b7160e01b600052602160045260246000fd5b1415613cf257613c9662ffffff19821660026144cf565b6003856005811115613d1457634e487b7160e01b600052602160045260246000fd5b1415613d2b57613c9662ffffff19821660026144cf565b6004856005811115613d4d57634e487b7160e01b600052602160045260246000fd5b1415613dab57613d6662ffffff198216600260206143a1565b604051602001613d7891815260200190565b60405160208183030381529060405280519060200120868051906020012014613da2576000612bbf565b612bbf8261432b565b505050949350505050565b600080613dc38385615cef565b9050604051811115613dd3575060005b80613de55762ffffff19915050613df6565b5050606083811b8317901b811760181b5b9392505050565b6000613e0983836144dd565b613ed0576000613e28613e1c8560d81c90565b64ffffffffff16614500565b9150506000613e3d8464ffffffffff16614500565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016107649190615905565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b600080613f0362ffffff1985168460016145ac565b905060fc8111613f1e57613f16816145dc565b9150506114df565b8060fd1415613f8457613f4c613f47613f38856001615cef565b62ffffff198716906002614648565b6145dc565b9150613f5782614037565b60ff16600314613f7f57613f7d613f7862ffffff198616856003600061478b565b6147f1565b505b614030565b8060fe1415613fd957613fad613f47613f9e856001615cef565b62ffffff198716906004614648565b9150613fb882614037565b60ff16600514613f7f57613f7d613f7862ffffff198616856005600061478b565b8060ff141561403057614002613f47613ff3856001615cef565b62ffffff198716906008614648565b915061400d82614037565b60ff166009146140305761402e613f7862ffffff198616856009600061478b565b505b5092915050565b600060fc826001600160401b03161161405257506001919050565b61ffff826001600160401b03161161406c57506003919050565b63ffffffff826001600160401b03161161408857506005919050565b506009919050565b919050565b6000612bc584846140a587613ed7565b6001600160601b03166140b89190615de1565b858561478b565b60008160056140cd81613946565b5060006140db856024613eee565b9050806001600160401b03166140f082614037565b60ff166140fd9190615cef565b614108906024615cef565b613934906004615cef565b6000818161412081613946565b5061413062ffffff198516613ed7565b6001600160601b031661414557613978613ee6565b6000614152856000613eee565b9050600061416562ffffff198716613ed7565b6001600160601b031690506001600160401b038216614186576139c0613ee6565b600061419183614037565b60ff16905060005b836001600160401b03168110156141fa578282106141b9576139fc613ee6565b60006141cf6141c88486615de1565b600e613a19565b90506141da81614879565b6141e49084615cef565b92505080806141f290615e80565b915050614199565b5081811461420a57613a62613ee6565b613a86600f613a72565b600082600f61422281613946565b506000614230866000613eee565b6001600160401b03169050600061424c62ffffff198816613ed7565b6001600160601b0316905081861061429a5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610764565b60006142a583614037565b60ff1690506000805b888110156142fb576142d26142c38486615de1565b62ffffff198c1690600e614095565b91506142dd82614879565b6142e79084615cef565b92506142f4600182615cef565b90506142ae565b506143096141c88385615de1565b9050600061431682614879565b9050611d1e62ffffff198b168483600d61478b565b600081600d61433981613946565b50612bc5613f4762ffffff19861660006008614648565b600081600d61435e81613946565b50600061436c856008613eee565b905061393461437a82614037565b614385906008615d32565b62ffffff1987169060ff166001600160401b038416600761478b565b600060ff82166143b357506000613df6565b6143bc84613ed7565b6001600160601b03166143d260ff841685615cef565b1115614422576144096143e4856148c2565b6001600160601b03166143f686613ed7565b6001600160601b0316858560ff166148d1565b60405162461bcd60e51b81526004016107649190615905565b60208260ff1611156144995760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b6064820152608401610764565b6008820260006144a8866148c2565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000613df6838360146145ac565b60008164ffffffffff166144f18460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561455e57600061451f826008615db8565b60ff1685901c9050614530816149fb565b61ffff16841793508160ff1660101461454b57601084901b93505b50614557600182615df8565b9050614506565b50600f5b60ff8160ff1610156145a65760ff600882021684901c614581816149fb565b61ffff16831792508160ff1660001461459c57601083901b92505b5060001901614562565b50915091565b60006145b9826020615df8565b6145c4906008615db8565b60ff166145d28585856143a1565b901c949350505050565b60006001600160401b038211156146445760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610764565b5090565b6000612bc56146588585856143a1565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff161790506040816001600160401b03600160801b03600160c01b0316901b604082901c6001600160401b03600160801b03600160c01b0316179050608081901b608082901c179050919050565b600080614797866148c2565b6001600160601b031690506147ab86614a2d565b846147b68784615cef565b6147c09190615cef565b11156147d35762ffffff19915050612bc5565b6147dd8582615cef565b9050610a4a8364ffffffffff168286613db6565b6060600061482f61482a8261481c61480e62ffffff198816613ed7565b6001600160601b0316614a5a565b62ffffff19871691906145ac565b614500565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d01613ea5565b600081600e61488781613946565b506000614895856008613eee565b9050806001600160401b03166148aa82614037565b60ff166148b79190615cef565b613934906008615cef565b60781c6001600160601b031690565b606060006148de86614500565b91505060006148ec86614500565b91505060006148fa86614500565b915050600061490886614500565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000614a0d60048360ff16901c614abb565b60ff1661ffff919091161760081b614a2482614abb565b60ff1617919050565b6000614a3882613ed7565b614a41836148c2565b614a4b9190615d57565b6001600160601b031692915050565b600060ff8211156146445760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610764565b600060f08083179060ff82161415614ad65750603092915050565b8060ff1660f11415614aeb5750603192915050565b8060ff1660f21415614b005750603292915050565b8060ff1660f31415614b155750603392915050565b8060ff1660f41415614b2a5750603492915050565b8060ff1660f51415614b3f5750603592915050565b8060ff1660f61415614b545750603692915050565b8060ff1660f71415614b695750603792915050565b8060ff1660f81415614b7e5750603892915050565b8060ff1660f91415614b935750603992915050565b8060ff1660fa1415614ba85750606192915050565b8060ff1660fb1415614bbd5750606292915050565b8060ff1660fc1415614bd25750606392915050565b8060ff1660fd1415614be75750606492915050565b8060ff1660fe1415614bfc5750606592915050565b8060ff1660ff1415614c115750606692915050565b50919050565b828054614c2390615e4b565b90600052602060002090601f016020900481019282614c455760008555614c8b565b82601f10614c5e57805160ff1916838001178555614c8b565b82800160010185558215614c8b579182015b82811115614c8b578251825591602001919060010190614c70565b506146449291505b808211156146445760008155600101614c93565b803561409081615ec7565b60008083601f840112614cc3578182fd5b5081356001600160401b03811115614cd9578182fd5b6020830191508360208260051b8501011115614cf457600080fd5b9250929050565b600082601f830112614d0b578081fd5b81356020614d20614d1b83615ccc565b615c9c565b80838252828201915082860187848660051b8901011115614d3f578586fd5b855b85811015614d6457614d5282614dd9565b84529284019290840190600101614d41565b5090979650505050505050565b600082601f830112614d81578081fd5b81356020614d91614d1b83615ccc565b80838252828201915082860187848660051b8901011115614db0578586fd5b855b85811015614d6457813584529284019290840190600101614db2565b803561409081615edc565b80356001600160e01b03198116811461409057600080fd5b60008083601f840112614e02578182fd5b5081356001600160401b03811115614e18578182fd5b602083019150836020828501011115614cf457600080fd5b600082601f830112614e40578081fd5b81356001600160401b03811115614e5957614e59615eb1565b614e6c601f8201601f1916602001615c9c565b818152846020838601011115614e80578283fd5b816020850160208301379081016020019190915292915050565b80356006811061409057600080fd5b600060208284031215614eba578081fd5b8135613df681615ec7565b600060208284031215614ed6578081fd5b8151613df681615ec7565b6000806000806000806000806000806000806101208d8f031215614f03578788fd5b614f0c8d614ca7565b9b506001600160401b0360208e01351115614f25578788fd5b614f358e60208f01358f01614cb2565b909b509950614f4660408e01614dce565b98506001600160401b0360608e01351115614f5f578788fd5b614f6f8e60608f01358f01614cb2565b909850965060808d013595506001600160401b0360a08e01351115614f92578485fd5b614fa28e60a08f01358f01614e30565b9450614fb060c08e01614e9a565b93506001600160401b0360e08e01351115614fc9578283fd5b614fd98e60e08f01358f01614df1565b81945080935050506101008d013590509295989b509295989b509295989b565b6000806040838503121561500b578182fd5b823561501681615ec7565b946020939093013593505050565b600060208284031215615035578081fd5b8151613df681615edc565b60008060408385031215615052578182fd5b825161505d81615edc565b602084810151919350906001600160401b0381111561507a578283fd5b8401601f8101861361508a578283fd5b8051615098614d1b82615ccc565b80828252848201915084840189868560051b87010111156150b7578687fd5b8694505b838510156150d95780518352600194909401939185019185016150bb565b5080955050505050509250929050565b6000602082840312156150fa578081fd5b5035919050565b600060208284031215615112578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215615138578384fd5b6151418b614dd9565b995060208b01356001600160401b038082111561515c578586fd5b6151688e838f01614e30565b9a5060408d013591508082111561517d578586fd5b6151898e838f01614e30565b995061519760608e01614dd9565b985060808d0135975060a08d01359150808211156151b3578586fd5b6151bf8e838f01614e30565b965060c08d0135955060e08d01359150808211156151db578485fd5b6151e78e838f01614e30565b94506101008d01359150808211156151fd578384fd5b6152098e838f01614d71565b93506101208d013591508082111561521f578283fd5b5061522c8d828e01614d71565b9150509295989b9194979a5092959850565b600080600060408486031215615252578081fd5b83356001600160401b0380821115615268578283fd5b61527487838801614df1565b9095509350602086013591508082111561528c578283fd5b5061529986828701614d71565b9150509250925092565b60008060008060008060008060006101208a8c0312156152c1578283fd5b89356001600160401b03808211156152d7578485fd5b6152e38d838e01614e30565b9a5060208c01359150808211156152f8578485fd5b6153048d838e01614cfb565b995060408c0135915080821115615319578485fd5b6153258d838e01614e30565b985060608c013591508082111561533a578485fd5b6153468d838e01614e30565b975060808c013591508082111561535b578485fd5b6153678d838e01614e30565b965060a08c013591508082111561537c578485fd5b6153888d838e01614e30565b955060c08c013591508082111561539d578485fd5b6153a98d838e01614cfb565b945060e08c01359150808211156153be578384fd5b6153ca8d838e01614e30565b93506101008c01359150808211156153e0578283fd5b506153ed8c828d01614d71565b9150509295985092959850929598565b6000806040838503121561540f578182fd5b82359150602083013561542181615ec7565b809150509250929050565b6000806000806000806000806000806101408b8d03121561544b578384fd5b8a35995060208b013561545d81615ec7565b985060408b013561546d81615ec7565b975060608b013561547d81615ec7565b965060808b013561548d81615ec7565b955060a08b0135945060c08b0135935060e08b013592506101008b013591506101208b01356154bb81615ec7565b809150509295989b9194979a5092959850565b60008060008060008060a087890312156154e6578384fd5b8635955060208701356001600160401b0380821115615503578586fd5b61550f8a838b01614e30565b965061551d60408a01614e9a565b95506060890135915080821115615532578384fd5b5061553f89828a01614df1565b979a9699509497949695608090950135949350505050565b60008060408385031215615569578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156155be5781516001600160e01b03191687529582019590820190600101615598565b509495945050505050565b6000826060810183835b60038110156156025783830387526155ec838351615665565b60209788019790935091909101906001016155d3565b509095945050505050565b6000815180845260208085019450808401835b838110156155be57815187529582019590820190600101615620565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261567d816020860160208601615e1b565b601f01601f19169290920160200192915050565b600681106156af57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b808716835285516156d5816004860160208a01615e1b565b8551908401906156ec816004840160208a01615e1b565b919094169301600481019390935250506008019392505050565b60008251615718818460208701615e1b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60018060a01b038616815284602082015283604082015260a0606082015260006157a160a0830185615665565b90508260808301529695505050505050565b6157bd818e615578565b610180602082015260006157d561018083018e615665565b82810360408401526157e7818e615585565b905082810360608401526157fb818d6155c9565b90508a60808401528960a084015261581660c084018a615578565b8760e0840152866101008401528281036101208401526158368187615585565b905082810361014084015261584b8186615665565b9050828103610160840152615860818561560d565b9f9e505050505050505050505050505050565b6001600160a01b038616815260a06020820181905260009061589790830187615665565b604083019590955250606081019290925260809091015292915050565b6001600160a01b03929092168252602082015260400190565b602081526000612bc560208301848661563c565b6040815260006158f560408301858761563c565b9050826020830152949350505050565b602081526000613df66020830184615665565b60808152600061592b6080830188615665565b6159386020840188615691565b6001600160a01b0386166040840152828103606084015261595a81858761563c565b98975050505050505050565b60006101a080835261597a8184018c615665565b915050602061598b8184018b615691565b6001600160a01b0389811660408501526060840189905260808401889052861660a084015260c083018560005b60038110156159d5578151835291830191908301906001016159b8565b50505061012083018460005b60048110156159fe578151835291830191908301906001016159e1565b505050509998505050505050505050565b85815284602082015260a060408201526000615a2e60a0830186615665565b8281036060840152615a408186615665565b9150508260808301529695505050505050565b6020808252601b908201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b604082015260600190565b6020808252601b908201527a213ab9372937baba32b92637b3b4b19d103737ba103637b1b5b2b960291b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601d908201527f4275726e526f757465724c6f6769633a20696e76616c69642070617468000000604082015260600190565b9283526020830191909152604082015260600190565b918252602082015260400190565b888152602081018890526001600160a01b038716604082015261010060608201819052600090615b9583820189615665565b91505085608083015284151560a0830152615bb360c0830185615691565b8260e08301529998505050505050505050565b878152602080820188905260c0604083018190528201869052600090879060e08401835b89811015615c18578335615bfd81615ec7565b6001600160a01b031682529282019290820190600101615bea565b506001600160a01b039790971660608501525050506080810192909252151560a090910152949350505050565b878152602081018790526001600160e01b0319861660408201526001600160a01b038516606082015260e060808201819052600090615c8690830186615665565b60a08301949094525060c0015295945050505050565b604051601f8201601f191681016001600160401b0381118282101715615cc457615cc4615eb1565b604052919050565b60006001600160401b03821115615ce557615ce5615eb1565b5060051b60200190565b60008219821115615d0257615d02615e9b565b500190565b60006001600160401b03828116848216808303821115615d2957615d29615e9b565b01949350505050565b600060ff821660ff84168060ff03821115615d4f57615d4f615e9b565b019392505050565b60006001600160601b03828116848216808303821115615d2957615d29615e9b565b600082615d9457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615db357615db3615e9b565b500290565b600060ff821660ff84168160ff0481118215151615615dd957615dd9615e9b565b029392505050565b600082821015615df357615df3615e9b565b500390565b600060ff821660ff841680821015615e1257615e12615e9b565b90039392505050565b60005b83811015615e36578181015183820152602001615e1e565b83811115615e45576000848401525b50505050565b600181811c90821680615e5f57607f821691505b60208210811415614c1157634e487b7160e01b600052602260045260246000fd5b6000600019821415615e9457615e94615e9b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e3c57600080fd5b8015158114611e3c57600080fdfea2646970667358221220a8cb3d3df4affae48a11b20c46a9d2cb3ba2d36eacd9f3b0c9110628ce5bc65c64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101c45760003560e01c80630e757850146101d057806317fcb39b146101f25780631812adb6146102285780631876dec41461024c5780631e2361681461026c5780631e7107c7146102ac57806333453d15146102cc5780633fea4367146102ec578063419cba7f1461030c57806344dd6aa5146103225780634782bc361461033557806350a058361461035557806359fd0b0c146103755780635c4f5f3e146103a257806361d027b3146103c257806370872aa5146103e2578063715018a6146103f857806373532b2a1461040d5780637ed557481461042d5780637f0f18171461044d5780637ffe9a921461046d5780638d3d78cd1461048d5780638d5fc1d4146104ad5780638da5cb5b146104cd5780638f9eb78b146104e2578063930a60e814610502578063a9b682711461052f578063b14d353214610565578063b59589d114610585578063b74d0d35146105a5578063bed6a602146105bb578063c780c03f146105d1578063c805f68b146105e4578063cf54ce4714610604578063da058ae314610624578063ea73263714610644578063f0f4426014610657578063f2fde38b14610677578063f47e22401461069757600080fd5b366101cb57005b600080fd5b3480156101dc57600080fd5b506101f06101eb36600461542c565b6106cb565b005b3480156101fe57600080fd5b5060a654610212906001600160a01b031681565b60405161021f9190615722565b60405180910390f35b34801561023457600080fd5b5061023e60075481565b60405190815260200161021f565b34801561025857600080fd5b50600154610212906001600160a01b031681565b34801561027857600080fd5b5061029c6102873660046150e9565b600c6020526000908152604090205460ff1681565b604051901515815260200161021f565b3480156102b857600080fd5b506101f06102c73660046150e9565b610858565b3480156102d857600080fd5b506101f06102e7366004614ea9565b6108c7565b3480156102f857600080fd5b5061023e6103073660046154ce565b610938565b34801561031857600080fd5b5061023e60085481565b61023e610330366004614ee1565b610a54565b34801561034157600080fd5b506101f06103503660046150e9565b610afa565b34801561036157600080fd5b50600454610212906001600160a01b031681565b34801561038157600080fd5b5061023e6103903660046150e9565b60a46020526000908152604090205481565b3480156103ae57600080fd5b506101f06103bd3660046150e9565b610b94565b3480156103ce57600080fd5b50600354610212906001600160a01b031681565b3480156103ee57600080fd5b5061023e60055481565b34801561040457600080fd5b506101f0610d2a565b34801561041957600080fd5b506101f061042836600461523e565b610d34565b34801561043957600080fd5b506101f06104483660046150e9565b61135a565b34801561045957600080fd5b506101f0610468366004614ea9565b6113f3565b34801561047957600080fd5b5061029c610488366004614ff9565b61148d565b34801561049957600080fd5b50600254610212906001600160a01b031681565b3480156104b957600080fd5b506101f06104c83660046153fd565b6114e5565b3480156104d957600080fd5b50610212611589565b3480156104ee57600080fd5b506101f06104fd366004615557565b611598565b34801561050e57600080fd5b5061023e61051d366004614ea9565b600b6020526000908152604090205481565b34801561053b57600080fd5b5061021261054a3660046150e9565b60a5602052600090815260409020546001600160a01b031681565b34801561057157600080fd5b506101f0610580366004614ea9565b6115fd565b34801561059157600080fd5b50600054610212906001600160a01b031681565b3480156105b157600080fd5b5061023e60095481565b3480156105c757600080fd5b5061023e60065481565b6101f06105df3660046152a3565b611697565b3480156105f057600080fd5b506101f06105ff366004614ea9565b611815565b34801561061057600080fd5b506101f061061f3660046150e9565b6118af565b34801561063057600080fd5b506101f061063f366004614ea9565b61194a565b61029c610652366004615119565b6119bb565b34801561066357600080fd5b506101f0610672366004614ea9565b611d2c565b34801561068357600080fd5b506101f0610692366004614ea9565b611dc6565b3480156106a357600080fd5b506106b76106b2366004614ff9565b611e3f565b60405161021f989796959493929190615b63565b600d54610100900460ff16158080156106eb5750600d54600160ff909116105b806107055750303b1580156107055750600d5460ff166001145b61076d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600d805460ff19166001179055801561079057600d805461ff0019166101001790555b610798611f3c565b6107a0611f6b565b6107a98b610858565b6107b28a611815565b6107bb896115fd565b6107c488611d2c565b6107cd876113f3565b6107d686610b94565b6107df8561135a565b6107e884610afa565b6107f36102e7611589565b6107fc836118af565b6108058261194a565b801561084b57600d805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b610860611f9a565b60055481116108c25760405162461bcd60e51b815260206004820152602860248201527f4275726e526f757465724c6f6769633a206c6f77207374617274696e67426c6f60448201526731b5a73ab6b132b960c11b6064820152608401610764565b600555565b6108cf611f9a565b6004546040517f68bf625687194a1bbeeccbaa327c37aa1f9940a3c6c9e8fe84f06f1dc14fd1769161090e916001600160a01b03909116908490615736565b60405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610942611ff9565b6002546001600160a01b03166323b872dd33308a6040518463ffffffff1660e01b815260040161097493929190615750565b602060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190615024565b610a1e5760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a207472616e7366657246726f6d2066616044820152631a5b195960e21b6064820152608401610764565b600254600090610a3d906001600160a01b031689808a8a8a8a8a612053565b915050610a4a6001607255565b9695505050505050565b6000610a5e611ff9565b6000610a6f8e8e8e8e8e8e8e6124fa565b9050610add8d8d6000818110610a9557634e487b7160e01b600052603260045260246000fd5b905060200201358b8b6000818110610abd57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ad29190614ea9565b838a8a8a8a8a612a54565b915050610aea6001607255565b9c9b505050505050505050505050565b610b02611f9a565b806127101015610b545760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420726577617264006044820152606401610764565b7faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f6760085482604051610b87929190615b55565b60405180910390a1600855565b600080546040516353bcd1c960e11b815273__$c65f3a446ccd8d7ab73874f642eb6191e5$__9163a779a39291610bd7916001600160a01b031690600401615722565b60206040518083038186803b158015610bef57600080fd5b505af4158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190615101565b9050610c31611589565b6001600160a01b0316336001600160a01b03161480610c51575080600654105b610c9a5760405162461bcd60e51b815260206004820152601a602482015279109d5c9b949bdd5d195c931bd9da58ce881b9bc81c195c9b5a5d60321b6044820152606401610764565b808211610ce95760405162461bcd60e51b815260206004820152601d60248201527f4275726e526f757465724c6f6769633a206c6f7720646561646c696e650000006044820152606401610764565b7f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf30041660065483604051610d1c929190615b55565b60405180910390a150600655565b610d32611f9a565b565b610d3c611ff9565b610d44611f9a565b60015460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390610d7690869086906004016158cd565b60206040518083038186803b158015610d8e57600080fd5b505afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190615024565b610de25760405162461bcd60e51b815260040161076490615a88565b60015460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90610e1590879087906004016158cd565b60206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190614ec5565b905060005b82518110156113495773__$c65f3a446ccd8d7ab73874f642eb6191e5$__6315755789600a84868581518110610eb057634e487b7160e01b600052603260045260246000fd5b60209081029190910101516006546000546040516310889dc360e01b815273__$c65f3a446ccd8d7ab73874f642eb6191e5$__916310889dc391610f00916001600160a01b031690600401615722565b60206040518083038186803b158015610f1857600080fd5b505af4158015610f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f509190615101565b6005546040516001600160e01b031960e089901b16815260048101969096526001600160a01b03909416602486015260448501929092526064840152608483015260a482015260c40160006040518083038186803b158015610fb157600080fd5b505af4158015610fc5573d6000803e3d6000fd5b50506001546008546001600160a01b038681166000908152600a602052604090208851919093169450631697565b93508692612710929189908890811061101c57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061104257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016000015461105e9190615d99565b6110689190615d79565b336001600160a01b0387166000908152600a6020526040902088518990889081106110a357634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106110c957634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154600a6000896001600160a01b03166001600160a01b0316815260200190815260200160002089888151811061112057634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061114657634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190615024565b506001600160a01b0382166000818152600a60205260409020845185908490811061122c57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061125257634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160020160009054906101000a90046001600160a01b03166001600160a01b03167f58c23b4ae0617be275628875bcfd65759a441263099a256eeb27899fb5dd846d8787600a6000886001600160a01b03166001600160a01b031681526020019081526020016000208887815181106112e857634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061130e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016006015460405161132f939291906158e1565b60405180910390a38061134181615e80565b915050610e6a565b50506113556001607255565b505050565b611362611f9a565b8061271010156113b35760405162461bcd60e51b815260206004820152601c60248201527b4275726e526f757465724c6f6769633a20696e76616c69642066656560201b6044820152606401610764565b7f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b600754826040516113e6929190615b55565b60405180910390a1600755565b6113fb611f9a565b806001600160a01b0381166114235760405163d92e233d60e01b815260040160405180910390fd5b6002546040517f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec2609691611462916001600160a01b03909116908590615736565b60405180910390a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600a602052604081208054839081106114c557634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1690505b92915050565b6114ed611f9a565b600082815260a56020526040908190205490517f1e73962bcff5b98a9ac70c9b0f71fbb31dc0f5a09348c6d3ceab164169a9e729916115539185916001600160a01b03169085909283526001600160a01b03918216602084015216604082015260600190565b60405180910390a1600091825260a5602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6040546001600160a01b031690565b6115a0611f9a565b600082815260a46020526040908190205490517f188adabf806a6b6d814acc1dbd9f09e5a251c8c065d6285749a5824e4579b645916115e3918591908590615b3f565b60405180910390a1600091825260a4602052604090912055565b611605611f9a565b806001600160a01b03811661162d5760405163d92e233d60e01b815260040160405180910390fd5b6001546040517ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c39161166c916001600160a01b03909116908590615736565b60405180910390a150600180546001600160a01b0319166001600160a01b0392909216919091179055565b61169f611ff9565b6116a7611f9a565b6000611705896000815181106116cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518989876000815181106116f857634e487b7160e01b600052603260045260246000fd5b6020026020010151612a67565b905073__$c65f3a446ccd8d7ab73874f642eb6191e5$__63441d3a21600160009054906101000a90046001600160a01b03168c8c60405180606001604052808e81526020018c81526020018b815250600c60065460008054906101000a90046001600160a01b03166005548a8e8e8e6040518d63ffffffff1660e01b815260040161179b9c9b9a999897969594939291906157b3565b60006040518083038186803b1580156117b357600080fd5b505af41580156117c7573d6000803e3d6000fd5b505050506117ff878b83856002815181106117f257634e487b7160e01b600052603260045260246000fd5b6020026020010151612bcd565b5061180a6001607255565b505050505050505050565b61181d611f9a565b806001600160a01b0381166118455760405163d92e233d60e01b815260040160405180910390fd5b6000546040517f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f491611884916001600160a01b03909116908590615736565b60405180910390a150600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045433906001600160a01b031681146119095760405162461bcd60e51b815260206004820152601b60248201527a4275726e526f757465724c6f6769633a206e6f74206f7261636c6560281b6044820152606401610764565b7f890eb41e398fd9cf425695b34269b781ad56c257422859094a28db47fb78f1b36009548360405161193c929190615b55565b60405180910390a150600955565b611952611f9a565b60a6546040517f4da8064030e901e42f6de0ab04f4c322d7936d0120503addfe8a51f12709068991611991916001600160a01b03909116908490615736565b60405180910390a160a680546001600160a01b0319166001600160a01b0392909216919091179055565b60006119c5611ff9565b60015460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a906119f6908890600401615905565b60206040518083038186803b158015611a0e57600080fd5b505afa158015611a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a469190614ec5565b9050336001600160a01b0382161480611a7257506004546001600160a01b0316336001600160a01b0316145b611a8e5760405162461bcd60e51b815260040161076490615a88565b73__$c65f3a446ccd8d7ab73874f642eb6191e5$__6344922b64896005548c600160009054906101000a90046001600160a01b03168a8a518a516040518863ffffffff1660e01b8152600401611aea9796959493929190615c45565b60006040518083038186803b158015611b0257600080fd5b505af4158015611b16573d6000803e3d6000fd5b505050506000611b288d8d8d8d612a67565b600054604051637ebc232760e01b815291925073__$c65f3a446ccd8d7ab73874f642eb6191e5$__91637ebc232791611b77916001600160a01b039091169085908e908e908e90600401615774565b60206040518083038186803b158015611b8f57600080fd5b505af4158015611ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc79190615024565b611c135760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a206e6f742066696e616c697a656400006044820152606401610764565b6000611c23828b858f8a8a612d99565b905073__$c65f3a446ccd8d7ab73874f642eb6191e5$__63191e28dc600c838f8b876040518663ffffffff1660e01b8152600401611c65959493929190615a0f565b60206040518083038186803b158015611c7d57600080fd5b505af4158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb59190615024565b611d0d5760405162461bcd60e51b815260206004820152602360248201527f4275726e526f757465724c6f6769633a20696e76616c6964206275726e20707260448201526237b7b360e91b6064820152608401610764565b60019350505050611d1e6001607255565b9a9950505050505050505050565b611d34611f9a565b806001600160a01b038116611d5c5760405163d92e233d60e01b815260040160405180910390fd5b6003546040517f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b22822591611d9b916001600160a01b03909116908590615736565b60405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b611dce611f9a565b6001600160a01b038116611e335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610764565b611e3c8161327d565b50565b600a6020528160005260406000208181548110611e5b57600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611e9790615e4b565b80601f0160208091040260200160405190810160405280929190818152602001828054611ec390615e4b565b8015611f105780601f10611ee557610100808354040283529160200191611f10565b820191906000526020600020905b815481529060010190602001808311611ef357829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b600d54610100900460ff16611f635760405162461bcd60e51b815260040161076490615abd565b610d326132cd565b600d54610100900460ff16611f925760405162461bcd60e51b815260040161076490615abd565b610d326132fd565b33611fa3611589565b6001600160a01b031614610d325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610764565b6002607254141561204c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610764565b6002607255565b600154604051630f87661560e41b815260009173__$c65f3a446ccd8d7ab73874f642eb6191e5$__9163f8766150916120a2918a918a916001600160a01b03909116908a908a90600401615918565b60006040518083038186803b1580156120ba57600080fd5b505af41580156120ce573d6000803e3d6000fd5b5050505060008060006121198a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250613324915050565b60025460015460405163095ea7b360e01b81529497509295509093506001600160a01b039081169263095ea7b39261215792169087906004016158b4565b602060405180830381600087803b15801561217157600080fd5b505af1158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190615024565b506001546040516338463cff60e01b81526001600160a01b03909116906338463cff906121de908a908a9088906004016158e1565b602060405180830381600087803b1580156121f857600080fd5b505af115801561220c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122309190615101565b60015460405163626885b560e11b81529195506000916001600160a01b039091169063c4d10b6a90612268908b908b906004016158cd565b60206040518083038186803b15801561228057600080fd5b505afa158015612294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b89190614ec5565b6000546040516310889dc360e01b815291925061235f918d9188918e918e9173__$c65f3a446ccd8d7ab73874f642eb6191e5$__916310889dc391612309916001600160a01b031690600401615722565b60206040518083038186803b15801561232157600080fd5b505af4158015612335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123599190615101565b86613749565b604080516060810182528d815260208082018e905281830188905282516080810190935260095483528f9260009181016123998a8a615de1565b8152602080820189905260409182018890526001600160a01b0387166000908152600a909152208054919250906123d290600190615de1565b815481106123f057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600401546124093390565b6001600160a01b03167f6b5c22e69db87534a562352580358411dc7b2d98d24684765342f2ebf2dd8c318f8f88600a60008b6001600160a01b03166001600160a01b031681526020019081526020016000206001600a60008d6001600160a01b03166001600160a01b03168152602001908152602001600020805490506124909190615de1565b815481106124ae57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548f8a8a8a6040516124d8989796959493929190615966565b60405180910390a35050505050505098975050505050505050565b6001607255565b6002546000906001600160a01b03168484612516600182615de1565b81811061253357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906125489190614ea9565b6001600160a01b03161461256e5760405162461bcd60e51b815260040161076490615b08565b600286146125be5760405162461bcd60e51b815260206004820152601e60248201527f4275726e526f757465724c6f6769633a2077726f6e6720616d6f756e747300006044820152606401610764565b341561270b57868660008181106125e557634e487b7160e01b600052603260045260246000fd5b90506020020135341461263a5760405162461bcd60e51b815260206004820152601f60248201527f4275726e526f757465724c6f6769633a20696e76616c696420616d6f756e74006044820152606401610764565b8383600081811061265b57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906126709190614ea9565b60a6546001600160a01b0390811691161461269d5760405162461bcd60e51b815260040161076490615b08565b60a660009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156126ed57600080fd5b505af1158015612701573d6000803e3d6000fd5b50505050506127eb565b8383600081811061272c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906127419190614ea9565b6001600160a01b03166323b872dd33308a8a600081811061277257634e487b7160e01b600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b815260040161279793929190615750565b602060405180830381600087803b1580156127b157600080fd5b505af11580156127c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e99190615024565b505b8383600081811061280c57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906128219190614ea9565b6001600160a01b031663095ea7b3898989600081811061285157634e487b7160e01b600052603260045260246000fd5b905060200201356040518363ffffffff1660e01b81526004016128759291906158b4565b602060405180830381600087803b15801561288f57600080fd5b505af11580156128a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c79190615024565b50600080896001600160a01b031663b0bbcd888a8a60008181106128fb57634e487b7160e01b600052603260045260246000fd5b9050602002013560648c8c600181811061292557634e487b7160e01b600052603260045260246000fd5b90506020020135605a6129389190615d99565b6129429190615d79565b8989308a8e6040518863ffffffff1660e01b81526004016129699796959493929190615bc6565b600060405180830381600087803b15801561298357600080fd5b505af1158015612997573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129bf9190810190615040565b9150915081612a105760405162461bcd60e51b815260206004820181905260248201527f4275726e526f757465724c6f6769633a2065786368616e6765206661696c65646044820152606401610764565b8060018251612a1f9190615de1565b81518110612a3d57634e487b7160e01b600052603260045260246000fd5b602002602001015192505050979650505050505050565b600080611d1e898b8a8a8a8a8a8a612053565b600080612a7c612a778683613919565b61393d565b9050612a8d62ffffff198216613a93565b15612ad75760405162461bcd60e51b815260206004820152601a602482015279109a5d18dbda5b92195b1c195c8e881d9a5b881a5cc81b9d5b1b60321b6044820152606401610764565b6000600287878787604051602001612af294939291906156b3565b60408051601f1981840301815290829052612b0c91615706565b602060405180830381855afa158015612b29573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b4c9190615101565b90506000600282604051602001612b6591815260200190565b60408051601f1981840301815290829052612b7f91615706565b602060405180830381855afa158015612b9c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bbf9190615101565b93505050505b949350505050565b6000612bd885613a9f565b60015460405163626885b560e11b81526001600160401b039290921692506000916001600160a01b039091169063c4d10b6a90612c19908890600401615905565b60206040518083038186803b158015612c3157600080fd5b505afa158015612c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c699190614ec5565b6001546008549192506001600160a01b03169063b734de2690839061271090612c929087615d99565b612c9c9190615d79565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612cf557600080fd5b505af1158015612d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2d9190615024565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060085488612d649190615d99565b612d6e9190615d79565b612d789088615cef565b604051612d89959493929190615873565b60405180910390a1505050505050565b60008080805b85518110156132705780612ddc57848181518110612dcd57634e487b7160e01b600052603260045260246000fd5b60200260200101519150612e8d565b81858281518110612dfd57634e487b7160e01b600052603260045260246000fd5b602002602001015111612e625760405162461bcd60e51b815260206004820152602760248201527f4275726e526f757465724c6f6769633a20756e2d736f7274656420766f757420604482015266696e646578657360c81b6064820152608401610764565b848181518110612e8257634e487b7160e01b600052603260045260246000fd5b602002602001015191505b6000868281518110612eaf57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208181548110612efd57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff16158015612f6c57506001600160a01b0389166000908152600a6020526040902080548b919083908110612f5757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b1561325d576130d988878481518110612f9557634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60008d6001600160a01b03166001600160a01b031681526020019081526020016000208481548110612fe157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016003018054612ffd90615e4b565b80601f016020809104026020016040519081016040528092919081815260200182805461302990615e4b565b80156130765780601f1061304b57610100808354040283529160200191613076565b820191906000526020600020905b81548152906001019060200180831161305957829003601f168201915b5050506001600160a01b038f166000908152600a60205260409020805490925087915081106130b557634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff16613b42565b6001600160401b0316935083600a60008b6001600160a01b03166001600160a01b03168152602001908152602001600020828154811061312957634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160010154141561325d576001600160a01b0389166000908152600a602052604090208054600191908390811061317d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff19169115159190911790556131aa856001615cef565b6001600160a01b038a166000818152600a60205260409020805492975090917f7b8cb33b1d4dc1e5d05c58e9945c383eb161ac22029c5b963989d08c3d0ef4da91908490811061320a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548d89868151811061323d57634e487b7160e01b600052603260045260246000fd5b602002602001015160405161325493929190615b3f565b60405180910390a25b508061326881615e80565b915050612d9f565b5050509695505050505050565b604080546001600160a01b038381166001600160a01b031983168117845592519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600d54610100900460ff166132f45760405162461bcd60e51b815260040161076490615abd565b610d323361327d565b600d54610100900460ff166124f35760405162461bcd60e51b815260040161076490615abd565b60008060006127106007548761333a9190615d99565b6133449190615d79565b600085815260a46020526040902054909250612710906133649088615d99565b61336e9190615d79565b6009549091508161337f8489615de1565b6133899190615de1565b6133939190615de1565b92506103e88310156133e55760405162461bcd60e51b815260206004820152601b60248201527a109d5c9b949bdd5d195c931bd9da58ce881b1bddc8185b5bdd5b9d602a1b6044820152606401610764565b81156134cb5760025460035460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926134219291169086906004016158b4565b602060405180830381600087803b15801561343b57600080fd5b505af115801561344f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134739190615024565b6134cb5760405162461bcd60e51b8152602060048201526024808201527f4275726e526f757465724c6f6769633a20666565207472616e736665722066616044820152631a5b195960e21b6064820152608401610764565b80156135cb57600254600085815260a560205260409081902054905163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926135149291169085906004016158b4565b602060405180830381600087803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135669190615024565b6135cb5760405162461bcd60e51b815260206004820152603060248201527f4275726e526f757465724c6f6769633a2074686972642070617274792066656560448201526f081d1c985b9cd9995c8819985a5b195960821b6064820152608401610764565b600954156137405760015460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90613604908990600401615905565b60206040518083038186803b15801561361c57600080fd5b505afa158015613630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136549190614ec5565b60025460095460405163a9059cbb60e01b81529293506001600160a01b039091169163a9059cbb9161368b918591906004016158b4565b602060405180830381600087803b1580156136a557600080fd5b505af11580156136b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136dd9190615024565b61373e5760405162461bcd60e51b815260206004820152602c60248201527f4275726e526f757465724c6f6769633a206e6574776f726b206665652074726160448201526b1b9cd9995c8819985a5b195960a21b6064820152608401610764565b505b93509350939050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e083019190915288825260208201889052339282019290925260608101869052908460058111156137ad57634e487b7160e01b600052602160045260246000fd5b908160058111156137ce57634e487b7160e01b600052602160045260246000fd5b9052506006546137de9084615cef565b6080820152600060a082018190526001600160a01b038316808252600b6020818152604084205460e086018190529290935290915261381e906001615cef565b6001600160a01b038381166000908152600b6020908152604080832094909455600a81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b031916919093161790915560608301518051849361389e926003850192910190614c17565b506080820151600482015560a08201516005808301805492151560ff1984168117825560c086015193919261ff001990911661ffff1990921691909117906101009084908111156138ff57634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b81516000906020840161393464ffffffffff85168284613db6565b95945050505050565b60008181613953815b62ffffff19841690613dfd565b5061396362ffffff198516613ed7565b6001600160601b031661397f57613978613ee6565b9250613a8c565b600061398c856000613eee565b9050600061399f62ffffff198716613ed7565b6001600160601b031690506001600160401b0382166139c9576139c0613ee6565b94505050613a8c565b60006139d483614037565b60ff16905060005b836001600160401b0316811015613a5257828210613a07576139fc613ee6565b965050505050613a8c565b6000613a27613a168486615de1565b60055b62ffffff198c169190614095565b9050613a32816140bf565b613a3c9084615cef565b9250508080613a4a90615e80565b9150506139dc565b50818114613a6c57613a62613ee6565b9550505050613a8c565b613a8660065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff199081161490565b600080613ab4613aaf8483613919565b614113565b9050613ac562ffffff198216613a93565b15613ae25760405162461bcd60e51b815260040161076490615a53565b600080613af0836000613eee565b6001600160401b0316905060005b81811015613b3957613b108482614214565b9250613b1b8361432b565b613b259086615d07565b945080613b3181615e80565b915050613afe565b50505050919050565b600080613b52613aaf8783613919565b9050613b6362ffffff198216613a93565b15613b805760405162461bcd60e51b815260040161076490615a53565b6000613b8c8287614214565b90506000613b9982614350565b90506005856005811115613bbd57634e487b7160e01b600052602160045260246000fd5b1415613c2257613bd662ffffff198216600260206143a1565b604051602001613be891815260200190565b60405160208183030381529060405280519060200120868051906020012014613c12576000613c1b565b613c1b8261432b565b9350613dab565b6000856005811115613c4457634e487b7160e01b600052602160045260246000fd5b1415613c5d57613bd662ffffff198216600160206143a1565b6001856005811115613c7f57634e487b7160e01b600052602160045260246000fd5b1415613cb957613c9662ffffff19821660036144cf565b604051602001613be8919060609190911b6001600160601b031916815260140190565b6002856005811115613cdb57634e487b7160e01b600052602160045260246000fd5b1415613cf257613c9662ffffff19821660026144cf565b6003856005811115613d1457634e487b7160e01b600052602160045260246000fd5b1415613d2b57613c9662ffffff19821660026144cf565b6004856005811115613d4d57634e487b7160e01b600052602160045260246000fd5b1415613dab57613d6662ffffff198216600260206143a1565b604051602001613d7891815260200190565b60405160208183030381529060405280519060200120868051906020012014613da2576000612bbf565b612bbf8261432b565b505050949350505050565b600080613dc38385615cef565b9050604051811115613dd3575060005b80613de55762ffffff19915050613df6565b5050606083811b8317901b811760181b5b9392505050565b6000613e0983836144dd565b613ed0576000613e28613e1c8560d81c90565b64ffffffffff16614500565b9150506000613e3d8464ffffffffff16614500565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016107649190615905565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b600080613f0362ffffff1985168460016145ac565b905060fc8111613f1e57613f16816145dc565b9150506114df565b8060fd1415613f8457613f4c613f47613f38856001615cef565b62ffffff198716906002614648565b6145dc565b9150613f5782614037565b60ff16600314613f7f57613f7d613f7862ffffff198616856003600061478b565b6147f1565b505b614030565b8060fe1415613fd957613fad613f47613f9e856001615cef565b62ffffff198716906004614648565b9150613fb882614037565b60ff16600514613f7f57613f7d613f7862ffffff198616856005600061478b565b8060ff141561403057614002613f47613ff3856001615cef565b62ffffff198716906008614648565b915061400d82614037565b60ff166009146140305761402e613f7862ffffff198616856009600061478b565b505b5092915050565b600060fc826001600160401b03161161405257506001919050565b61ffff826001600160401b03161161406c57506003919050565b63ffffffff826001600160401b03161161408857506005919050565b506009919050565b919050565b6000612bc584846140a587613ed7565b6001600160601b03166140b89190615de1565b858561478b565b60008160056140cd81613946565b5060006140db856024613eee565b9050806001600160401b03166140f082614037565b60ff166140fd9190615cef565b614108906024615cef565b613934906004615cef565b6000818161412081613946565b5061413062ffffff198516613ed7565b6001600160601b031661414557613978613ee6565b6000614152856000613eee565b9050600061416562ffffff198716613ed7565b6001600160601b031690506001600160401b038216614186576139c0613ee6565b600061419183614037565b60ff16905060005b836001600160401b03168110156141fa578282106141b9576139fc613ee6565b60006141cf6141c88486615de1565b600e613a19565b90506141da81614879565b6141e49084615cef565b92505080806141f290615e80565b915050614199565b5081811461420a57613a62613ee6565b613a86600f613a72565b600082600f61422281613946565b506000614230866000613eee565b6001600160401b03169050600061424c62ffffff198816613ed7565b6001600160601b0316905081861061429a5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610764565b60006142a583614037565b60ff1690506000805b888110156142fb576142d26142c38486615de1565b62ffffff198c1690600e614095565b91506142dd82614879565b6142e79084615cef565b92506142f4600182615cef565b90506142ae565b506143096141c88385615de1565b9050600061431682614879565b9050611d1e62ffffff198b168483600d61478b565b600081600d61433981613946565b50612bc5613f4762ffffff19861660006008614648565b600081600d61435e81613946565b50600061436c856008613eee565b905061393461437a82614037565b614385906008615d32565b62ffffff1987169060ff166001600160401b038416600761478b565b600060ff82166143b357506000613df6565b6143bc84613ed7565b6001600160601b03166143d260ff841685615cef565b1115614422576144096143e4856148c2565b6001600160601b03166143f686613ed7565b6001600160601b0316858560ff166148d1565b60405162461bcd60e51b81526004016107649190615905565b60208260ff1611156144995760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d7074656420746044820152796f20696e646578206d6f7265207468616e20333220627974657360301b6064820152608401610764565b6008820260006144a8866148c2565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000613df6838360146145ac565b60008164ffffffffff166144f18460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561455e57600061451f826008615db8565b60ff1685901c9050614530816149fb565b61ffff16841793508160ff1660101461454b57601084901b93505b50614557600182615df8565b9050614506565b50600f5b60ff8160ff1610156145a65760ff600882021684901c614581816149fb565b61ffff16831792508160ff1660001461459c57601083901b92505b5060001901614562565b50915091565b60006145b9826020615df8565b6145c4906008615db8565b60ff166145d28585856143a1565b901c949350505050565b60006001600160401b038211156146445760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610764565b5090565b6000612bc56146588585856143a1565b60008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b600882901c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff161790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b601082901c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff161790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b602082901c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff161790506040816001600160401b03600160801b03600160c01b0316901b604082901c6001600160401b03600160801b03600160c01b0316179050608081901b608082901c179050919050565b600080614797866148c2565b6001600160601b031690506147ab86614a2d565b846147b68784615cef565b6147c09190615cef565b11156147d35762ffffff19915050612bc5565b6147dd8582615cef565b9050610a4a8364ffffffffff168286613db6565b6060600061482f61482a8261481c61480e62ffffff198816613ed7565b6001600160601b0316614a5a565b62ffffff19871691906145ac565b614500565b6040517a09cdedc5adad2dcd2dac2d840ecc2e440d2dce85c408edee84060f602b1b60208201526001600160701b0319607083901b16603b82015290925060009150604d01613ea5565b600081600e61488781613946565b506000614895856008613eee565b9050806001600160401b03166148aa82614037565b60ff166148b79190615cef565b613934906008615cef565b60781c6001600160601b031690565b606060006148de86614500565b91505060006148ec86614500565b91505060006148fa86614500565b915050600061490886614500565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000614a0d60048360ff16901c614abb565b60ff1661ffff919091161760081b614a2482614abb565b60ff1617919050565b6000614a3882613ed7565b614a41836148c2565b614a4b9190615d57565b6001600160601b031692915050565b600060ff8211156146445760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610764565b600060f08083179060ff82161415614ad65750603092915050565b8060ff1660f11415614aeb5750603192915050565b8060ff1660f21415614b005750603292915050565b8060ff1660f31415614b155750603392915050565b8060ff1660f41415614b2a5750603492915050565b8060ff1660f51415614b3f5750603592915050565b8060ff1660f61415614b545750603692915050565b8060ff1660f71415614b695750603792915050565b8060ff1660f81415614b7e5750603892915050565b8060ff1660f91415614b935750603992915050565b8060ff1660fa1415614ba85750606192915050565b8060ff1660fb1415614bbd5750606292915050565b8060ff1660fc1415614bd25750606392915050565b8060ff1660fd1415614be75750606492915050565b8060ff1660fe1415614bfc5750606592915050565b8060ff1660ff1415614c115750606692915050565b50919050565b828054614c2390615e4b565b90600052602060002090601f016020900481019282614c455760008555614c8b565b82601f10614c5e57805160ff1916838001178555614c8b565b82800160010185558215614c8b579182015b82811115614c8b578251825591602001919060010190614c70565b506146449291505b808211156146445760008155600101614c93565b803561409081615ec7565b60008083601f840112614cc3578182fd5b5081356001600160401b03811115614cd9578182fd5b6020830191508360208260051b8501011115614cf457600080fd5b9250929050565b600082601f830112614d0b578081fd5b81356020614d20614d1b83615ccc565b615c9c565b80838252828201915082860187848660051b8901011115614d3f578586fd5b855b85811015614d6457614d5282614dd9565b84529284019290840190600101614d41565b5090979650505050505050565b600082601f830112614d81578081fd5b81356020614d91614d1b83615ccc565b80838252828201915082860187848660051b8901011115614db0578586fd5b855b85811015614d6457813584529284019290840190600101614db2565b803561409081615edc565b80356001600160e01b03198116811461409057600080fd5b60008083601f840112614e02578182fd5b5081356001600160401b03811115614e18578182fd5b602083019150836020828501011115614cf457600080fd5b600082601f830112614e40578081fd5b81356001600160401b03811115614e5957614e59615eb1565b614e6c601f8201601f1916602001615c9c565b818152846020838601011115614e80578283fd5b816020850160208301379081016020019190915292915050565b80356006811061409057600080fd5b600060208284031215614eba578081fd5b8135613df681615ec7565b600060208284031215614ed6578081fd5b8151613df681615ec7565b6000806000806000806000806000806000806101208d8f031215614f03578788fd5b614f0c8d614ca7565b9b506001600160401b0360208e01351115614f25578788fd5b614f358e60208f01358f01614cb2565b909b509950614f4660408e01614dce565b98506001600160401b0360608e01351115614f5f578788fd5b614f6f8e60608f01358f01614cb2565b909850965060808d013595506001600160401b0360a08e01351115614f92578485fd5b614fa28e60a08f01358f01614e30565b9450614fb060c08e01614e9a565b93506001600160401b0360e08e01351115614fc9578283fd5b614fd98e60e08f01358f01614df1565b81945080935050506101008d013590509295989b509295989b509295989b565b6000806040838503121561500b578182fd5b823561501681615ec7565b946020939093013593505050565b600060208284031215615035578081fd5b8151613df681615edc565b60008060408385031215615052578182fd5b825161505d81615edc565b602084810151919350906001600160401b0381111561507a578283fd5b8401601f8101861361508a578283fd5b8051615098614d1b82615ccc565b80828252848201915084840189868560051b87010111156150b7578687fd5b8694505b838510156150d95780518352600194909401939185019185016150bb565b5080955050505050509250929050565b6000602082840312156150fa578081fd5b5035919050565b600060208284031215615112578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215615138578384fd5b6151418b614dd9565b995060208b01356001600160401b038082111561515c578586fd5b6151688e838f01614e30565b9a5060408d013591508082111561517d578586fd5b6151898e838f01614e30565b995061519760608e01614dd9565b985060808d0135975060a08d01359150808211156151b3578586fd5b6151bf8e838f01614e30565b965060c08d0135955060e08d01359150808211156151db578485fd5b6151e78e838f01614e30565b94506101008d01359150808211156151fd578384fd5b6152098e838f01614d71565b93506101208d013591508082111561521f578283fd5b5061522c8d828e01614d71565b9150509295989b9194979a5092959850565b600080600060408486031215615252578081fd5b83356001600160401b0380821115615268578283fd5b61527487838801614df1565b9095509350602086013591508082111561528c578283fd5b5061529986828701614d71565b9150509250925092565b60008060008060008060008060006101208a8c0312156152c1578283fd5b89356001600160401b03808211156152d7578485fd5b6152e38d838e01614e30565b9a5060208c01359150808211156152f8578485fd5b6153048d838e01614cfb565b995060408c0135915080821115615319578485fd5b6153258d838e01614e30565b985060608c013591508082111561533a578485fd5b6153468d838e01614e30565b975060808c013591508082111561535b578485fd5b6153678d838e01614e30565b965060a08c013591508082111561537c578485fd5b6153888d838e01614e30565b955060c08c013591508082111561539d578485fd5b6153a98d838e01614cfb565b945060e08c01359150808211156153be578384fd5b6153ca8d838e01614e30565b93506101008c01359150808211156153e0578283fd5b506153ed8c828d01614d71565b9150509295985092959850929598565b6000806040838503121561540f578182fd5b82359150602083013561542181615ec7565b809150509250929050565b6000806000806000806000806000806101408b8d03121561544b578384fd5b8a35995060208b013561545d81615ec7565b985060408b013561546d81615ec7565b975060608b013561547d81615ec7565b965060808b013561548d81615ec7565b955060a08b0135945060c08b0135935060e08b013592506101008b013591506101208b01356154bb81615ec7565b809150509295989b9194979a5092959850565b60008060008060008060a087890312156154e6578384fd5b8635955060208701356001600160401b0380821115615503578586fd5b61550f8a838b01614e30565b965061551d60408a01614e9a565b95506060890135915080821115615532578384fd5b5061553f89828a01614df1565b979a9699509497949695608090950135949350505050565b60008060408385031215615569578182fd5b50508035926020909101359150565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156155be5781516001600160e01b03191687529582019590820190600101615598565b509495945050505050565b6000826060810183835b60038110156156025783830387526155ec838351615665565b60209788019790935091909101906001016155d3565b509095945050505050565b6000815180845260208085019450808401835b838110156155be57815187529582019590820190600101615620565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261567d816020860160208601615e1b565b601f01601f19169290920160200192915050565b600681106156af57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b808716835285516156d5816004860160208a01615e1b565b8551908401906156ec816004840160208a01615e1b565b919094169301600481019390935250506008019392505050565b60008251615718818460208701615e1b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60018060a01b038616815284602082015283604082015260a0606082015260006157a160a0830185615665565b90508260808301529695505050505050565b6157bd818e615578565b610180602082015260006157d561018083018e615665565b82810360408401526157e7818e615585565b905082810360608401526157fb818d6155c9565b90508a60808401528960a084015261581660c084018a615578565b8760e0840152866101008401528281036101208401526158368187615585565b905082810361014084015261584b8186615665565b9050828103610160840152615860818561560d565b9f9e505050505050505050505050505050565b6001600160a01b038616815260a06020820181905260009061589790830187615665565b604083019590955250606081019290925260809091015292915050565b6001600160a01b03929092168252602082015260400190565b602081526000612bc560208301848661563c565b6040815260006158f560408301858761563c565b9050826020830152949350505050565b602081526000613df66020830184615665565b60808152600061592b6080830188615665565b6159386020840188615691565b6001600160a01b0386166040840152828103606084015261595a81858761563c565b98975050505050505050565b60006101a080835261597a8184018c615665565b915050602061598b8184018b615691565b6001600160a01b0389811660408501526060840189905260808401889052861660a084015260c083018560005b60038110156159d5578151835291830191908301906001016159b8565b50505061012083018460005b60048110156159fe578151835291830191908301906001016159e1565b505050509998505050505050505050565b85815284602082015260a060408201526000615a2e60a0830186615665565b8281036060840152615a408186615665565b9150508260808301529695505050505050565b6020808252601b908201527a109a5d18dbda5b92195b1c195c8e881d9bdd5d081a5cc81b9d5b1b602a1b604082015260600190565b6020808252601b908201527a213ab9372937baba32b92637b3b4b19d103737ba103637b1b5b2b960291b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601d908201527f4275726e526f757465724c6f6769633a20696e76616c69642070617468000000604082015260600190565b9283526020830191909152604082015260600190565b918252602082015260400190565b888152602081018890526001600160a01b038716604082015261010060608201819052600090615b9583820189615665565b91505085608083015284151560a0830152615bb360c0830185615691565b8260e08301529998505050505050505050565b878152602080820188905260c0604083018190528201869052600090879060e08401835b89811015615c18578335615bfd81615ec7565b6001600160a01b031682529282019290820190600101615bea565b506001600160a01b039790971660608501525050506080810192909252151560a090910152949350505050565b878152602081018790526001600160e01b0319861660408201526001600160a01b038516606082015260e060808201819052600090615c8690830186615665565b60a08301949094525060c0015295945050505050565b604051601f8201601f191681016001600160401b0381118282101715615cc457615cc4615eb1565b604052919050565b60006001600160401b03821115615ce557615ce5615eb1565b5060051b60200190565b60008219821115615d0257615d02615e9b565b500190565b60006001600160401b03828116848216808303821115615d2957615d29615e9b565b01949350505050565b600060ff821660ff84168060ff03821115615d4f57615d4f615e9b565b019392505050565b60006001600160601b03828116848216808303821115615d2957615d29615e9b565b600082615d9457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615615db357615db3615e9b565b500290565b600060ff821660ff84168160ff0481118215151615615dd957615dd9615e9b565b029392505050565b600082821015615df357615df3615e9b565b500390565b600060ff821660ff841680821015615e1257615e12615e9b565b90039392505050565b60005b83811015615e36578181015183820152602001615e1e565b83811115615e45576000848401525b50505050565b600181811c90821680615e5f57607f821691505b60208210811415614c1157634e487b7160e01b600052602260045260246000fd5b6000600019821415615e9457615e94615e9b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e3c57600080fd5b8015158114611e3c57600080fdfea2646970667358221220a8cb3d3df4affae48a11b20c46a9d2cb3ba2d36eacd9f3b0c9110628ce5bc65c64736f6c63430008040033",
  "libraries": {
    "BurnRouterLib": "0x428351462684f4c9df7ef60b35825471d6d7540a"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
        "details": "Makes isTransferred flag true for the paid requests",
        "params": {
          "_blockNumber": "Height of the block containing the Bitcoin tx",
          "_burnReqIndexes": "Indexes of requests that locker wants to provide proof for them",
          "_index": "Index of the Bitcoin tx the block",
          "_intermediateNodes": "Merkle inclusion proof for the Bitcoin tx",
          "_lockerLockingScript": "Locker's locking script that this burn request belongs to",
          "_locktime": "Lock time of the Bitcoin tx",
          "_version": "Version of the Bitcoin tx",
          "_vin": "Inputs of the Bitcoin tx",
          "_vout": "Outputs of the Bitcoin tx",
          "_voutIndexes": "Indexes of outputs that were used to pay burn requests.                     _voutIndexes[i] belongs to _burnReqIndexes[i]"
        }
      },
      "disputeBurn(bytes,uint256[])": {
        "params": {
          "_indices": "Indices of requests that their deadline has passed",
          "_lockerLockingScript": "Locker's locking script that the unpaid request belongs to"
        }
      },
      "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
        "details": "Input tx is a malicious tx which shows that locker spent BTC      Output tx is the tx that was spent by locker in input tx      Output tx shows money goes to locker      Input tx shows locker steals the funds",
        "params": {
          "_indexesAndBlockNumbers": "Indices of malicious input in input tx,                                input tx in block and block number of input tx",
          "_inputIntermediateNodes": "Merkle inclusion proof for the malicious transaction",
          "_inputVin": "Inputs of the malicious transaction",
          "_inputVout": "Outputs of the malicious transaction",
          "_lockerLockingScript": "Suspicious locker's locking script",
          "_locktimes": "Locktimes of input and output tx",
          "_outputVin": "Inputs of the spent transaction",
          "_outputVout": "Outputs of the spent transaction",
          "_versions": "Versions of input and output tx"
        }
      },
      "initialize(uint256,address,address,address,address,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_lockers": "Address of lockers contract",
          "_networkFee": "Fee of submitting a transaction on Network",
          "_protocolPercentageFee": "Percentage of tokens that user pays to protocol for burning",
          "_relay": "Address of relay contract",
          "_slasherPercentageReward": "Percentage of tokens that slasher receives after slashing a locker",
          "_startingBlockNumber": "Requests that are included in a block older                             than _startingBlockNumber cannot be executed",
          "_teleBTC": "Address of teleBTC contract",
          "_transferDeadline": "of sending BTC to user (aster submitting a burn request)",
          "_treasury": "Address of the treasury of the protocol"
        }
      },
      "isTransferred(address,uint256)": {
        "params": {
          "_index": "the request for the locker",
          "_lockerTargetAddress": "Locker address on the target chain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setLockers(address)": {
        "details": "Only owner can call this",
        "params": {
          "_lockers": "The new lockers contract address"
        }
      },
      "setNetworkFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_networkFee": "The new Bitcoin transaction fee"
        }
      },
      "setNetworkFeeOracle(address)": {
        "details": "Only owner can call this",
        "params": {
          "_networkFeeOracle": "Address of oracle who can update burn fee"
        }
      },
      "setProtocolPercentageFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_protocolPercentageFee": "The new protocol percentage fee"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "The new relay contract address"
        }
      },
      "setSlasherPercentageReward(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slasherPercentageReward": "The new slasher percentage reward"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new teleBTC contract address"
        }
      },
      "setThirdPartyAddress(uint256,address)": {
        "details": "Only owner can call this",
        "params": {
          "_thirdPartyAddress": "third party address"
        }
      },
      "setThirdPartyFee(uint256,uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_thirdPartyFee": "third party fee"
        }
      },
      "setTransferDeadline(uint256)": {
        "details": "Only owner can call this      Deadline should be greater than relay finalization parameter",
        "params": {
          "_transferDeadline": "The new transfer deadline"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call this",
        "params": {
          "_treasury": "The new treasury address"
        }
      },
      "swapAndUnwrap(address,uint256[],bool,address[],uint256,bytes,uint8,bytes,uint256)": {
        "details": "After exchanging, rest of the process is similar to ccBurn",
        "params": {
          "_amounts": "[inputTokenAmount, teleBTCAmount]",
          "_deadline": "of exchanging",
          "_exchangeConnector": "Address of exchange connectBurnRouterLogicor to be used",
          "_isFixedToken": "True if input token amount is fixed",
          "_path": "of exchanging inputToken to teleBTC",
          "thirdParty": "Third party id"
        },
        "returns": {
          "_0": "Amount of BTC that user receives"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unwrap(uint256,bytes,uint8,bytes,uint256)": {
        "details": "After submitting the burn request, Locker has a limited time      to send BTC and provide burn proof",
        "params": {
          "_amount": "of teleBTC that user wants to burn",
          "_lockerLockingScript": "of locker that should execute the burn request",
          "_scriptType": "User script type",
          "_userScript": "User script hash",
          "thirdParty": "Third party id"
        },
        "returns": {
          "_0": "Amount of BTC that user receives"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LockerDispute(address,bytes,uint256,bytes32,uint256)": {
        "notice": "Emits when a locker gets slashed for withdrawing BTC without proper reason"
      },
      "NewLockers(address,address)": {
        "notice": "Emits when lockers address is updated"
      },
      "NewNetworkFee(uint256,uint256)": {
        "notice": "Emits when network fee is updated"
      },
      "NewNetworkFeeOracle(address,address)": {
        "notice": "Emits when network fee oracle is updated"
      },
      "NewProtocolPercentageFee(uint256,uint256)": {
        "notice": "Emits when percentage fee is updated"
      },
      "NewRelay(address,address)": {
        "notice": "Emits when relay address is updated"
      },
      "NewSlasherPercentageFee(uint256,uint256)": {
        "notice": "Emits when slasher percentage fee is updated"
      },
      "NewTeleBTC(address,address)": {
        "notice": "Emits when TeleBTC address is updated"
      },
      "NewThirdPartyAddress(uint256,address,address)": {
        "notice": "Emits when changes made to third party address"
      },
      "NewThirdPartyFee(uint256,uint256,uint256)": {
        "notice": "Emits when changes made to third party fee"
      },
      "NewTransferDeadline(uint256,uint256)": {
        "notice": "Emits when transfer deadline is updated"
      },
      "NewTreasury(address,address)": {
        "notice": "Emits when treasury address is updated"
      },
      "NewUnwrap(bytes,uint8,address,address,uint256,uint256,uint256,address,uint256[3],uint256[4])": {
        "notice": "Emits when a burn request gets submitted"
      },
      "PaidUnwrap(address,uint256,bytes32,uint256)": {
        "notice": "Emits when a burn proof is provided"
      }
    },
    "kind": "user",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
        "notice": "Checks the correctness of burn proof (which is a Bitcoin tx)"
      },
      "disputeBurn(bytes,uint256[])": {
        "notice": "Slashes a locker if did not pay a cc burn request before its deadline"
      },
      "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
        "notice": "Slashes a locker if they issue a tx that doesn't match any burn request"
      },
      "initialize(uint256,address,address,address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Handles cross-chain burn requests"
      },
      "isTransferred(address,uint256)": {
        "notice": "Returns true is request has been processed"
      },
      "setLockers(address)": {
        "notice": "Updates lockers contract address"
      },
      "setNetworkFee(uint256)": {
        "notice": "Updates Bitcoin transaction fee"
      },
      "setNetworkFeeOracle(address)": {
        "notice": "Updates Bitcoin oracle"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Updates protocol percentage fee for burning tokens"
      },
      "setRelay(address)": {
        "notice": "Updates relay contract address"
      },
      "setSlasherPercentageReward(uint256)": {
        "notice": "Updates slasher percentage reward for disputing lockers"
      },
      "setStartingBlockNumber(uint256)": {
        "notice": "Setter for starting block number"
      },
      "setTeleBTC(address)": {
        "notice": "Updates teleBTC contract address"
      },
      "setThirdPartyAddress(uint256,address)": {
        "notice": "Setter for third party address"
      },
      "setThirdPartyFee(uint256,uint256)": {
        "notice": "Setter for third party fee"
      },
      "setTransferDeadline(uint256)": {
        "notice": "Updates deadline of executing burn requests"
      },
      "setTreasury(address)": {
        "notice": "Updates protocol treasury address"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Change the wrapped native token address"
      },
      "swapAndUnwrap(address,uint256[],bool,address[],uint256,bytes,uint8,bytes,uint256)": {
        "notice": "Exchanges input token for teleBTC then burns it"
      },
      "unwrap(uint256,bytes,uint8,bytes,uint256)": {
        "notice": "Records users burn request"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38233,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "relay",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 38236,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "lockers",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 38239,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "teleBTC",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 38242,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 38245,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "bitcoinFeeOracle",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 38248,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "startingBlockNumber",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 38251,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "transferDeadline",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 38254,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 38257,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "slasherPercentageReward",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 38260,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "bitcoinFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 38266,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "burnRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(burnRequest)41992_storage)dyn_storage)"
      },
      {
        "astId": 38270,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "burnRequestCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 38275,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "isUsedAsBurnProof",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 11827,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "13",
        "type": "t_uint8"
      },
      {
        "astId": 11830,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 13298,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11699,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "64",
        "type": "t_address"
      },
      {
        "astId": 11819,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "65",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12132,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "_status",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 12201,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 38285,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "thirdPartyFee",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 38289,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "thirdPartyAddress",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 38291,
        "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "166",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(burnRequest)41992_storage)dyn_storage": {
        "base": "t_struct(burnRequest)41992_storage",
        "encoding": "dynamic_array",
        "label": "struct IBurnRouter.burnRequest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)20049": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(burnRequest)41992_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBurnRouter.burnRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(burnRequest)41992_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(burnRequest)41992_storage": {
        "encoding": "inplace",
        "label": "struct IBurnRouter.burnRequest",
        "members": [
          {
            "astId": 41976,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 41978,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "burntAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 41980,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 41982,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "userScript",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 41984,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 41986,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "isTransferred",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 41989,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "scriptType",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(ScriptTypes)20049"
          },
          {
            "astId": 41991,
            "contract": "contracts/routers/BurnRouterLogic.sol:BurnRouterLogic",
            "label": "requestIdOfLocker",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}