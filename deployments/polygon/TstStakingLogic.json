{
  "address": "0xDDa9dC6aA9c5bC60Fa8Be0f9c90E7B704eED7e45",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingPercentage",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingPeriod",
          "type": "uint256"
        }
      ],
      "name": "LockerRegisteredForStaking",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStakedAmount",
          "type": "uint256"
        }
      ],
      "name": "TstStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "TstUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_STAKING_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TST",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnclaimedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TST",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingPercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingPeriod",
          "type": "uint256"
        }
      ],
      "name": "registerLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "removeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TST",
          "type": "address"
        }
      ],
      "name": "setTst",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakingPercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalStakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimedReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentRewardPerToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initRewardPerToken",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "unstakeByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateRegisteredLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x688a4b66fe168c7a17108f3cc534cc1a0ad487fac06f9dec883d98bca170d142",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0xDDa9dC6aA9c5bC60Fa8Be0f9c90E7B704eED7e45",
    "transactionIndex": 52,
    "gasUsed": "2301808",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000100000082000000000000000000004000000000000000000000000000000000000000100000000000000000200000000000000000000000000000000000000000000000000020000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x2ebfc018bbbf7a8e71af8c1a040db9258f634fce4042af223ca692c0d9797140",
    "transactionHash": "0x688a4b66fe168c7a17108f3cc534cc1a0ad487fac06f9dec883d98bca170d142",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 68170890,
        "transactionHash": "0x688a4b66fe168c7a17108f3cc534cc1a0ad487fac06f9dec883d98bca170d142",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d3e4aeb9347c224dae7f1dc1213be082f6fddec",
          "0x000000000000000000000000eedba2484aaf940f37cd3cd21a5d7c4a7dafbfc0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d127a72957f530000000000000000000000000000000000000000000000003b6a46f6168b1bcb800000000000000000000000000000000000000000001d880b160ceb1e604d596000000000000000000000000000000000000000000000003b5d347ba3f59c78800000000000000000000000000000000000000000001d880b231f6590f5ccac6",
        "logIndex": 226,
        "blockHash": "0x2ebfc018bbbf7a8e71af8c1a040db9258f634fce4042af223ca692c0d9797140"
      }
    ],
    "blockNumber": 68170890,
    "cumulativeGasUsed": "9157747",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b8488c4c7ae0738a5711a04ee8442227",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPercentage\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"LockerRegisteredForStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"}],\"name\":\"TstStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TstUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_STAKING_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnclaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TST\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"registerLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TST\",\"type\":\"address\"}],\"name\":\"setTst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unstakeByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"name\":\"updateRegisteredLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Controller can stake and unstake on behalf of other users\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claimReward(address,address)\":{\"details\":\"Controller can claim reward on behalf of other users,      but reward will be sent to user\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getStakingPosition(address,address)\":{\"returns\":{\"_0\":\"Returns TST staked amount, end time, claimed reward, unclaimed reward\"}},\"getUnclaimedReward(address,address)\":{\"returns\":{\"_0\":\"Returns unclaimed reward amount\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerLocker(address,uint256,address,uint256)\":{\"params\":{\"_locker\":\"Address of the Locker\",\"_rewardToken\":\"Address of the reward token\",\"_stakingPercentage\":\"Percentage of Locker fees to be distributed to stakers\",\"_stakingPeriod\":\"Users can unstake after before this period\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"stake(address,uint256,address)\":{\"details\":\"Controller can stake on behalf of other usersThis mints veToken to the userUsers can stake extra TST to their existing position\",\"params\":{\"_amount\":\"Amount of TST to stake\",\"_locker\":\"Address of the Locker\",\"_user\":\"Address of the user\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(address,address)\":{\"details\":\"Controller can unstake on behalf of other usersThis burns veToken from the userUser can unstake only after staking period is overAll unclaimed reward will be sent to user\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addController(address)\":{\"notice\":\"Adds a controller\"},\"claimReward(address,address)\":{\"notice\":\"Claims unclaimed reward\"},\"depositReward(address,uint256)\":{\"notice\":\"Deposits reward token for a Locker.         This reward will be distributed to stakers and Locker\"},\"getUnclaimedReward(address,address)\":{\"notice\":\"Calculate total reward earned by user, and subtract already claimed reward\"},\"initialize(address)\":{\"notice\":\"Staking contract for TST. Stakers earn rewards from Locker fees.         By staking TST, user receives veTST which can be used for governance voting.         veTST is not transferable.\"},\"pause()\":{\"notice\":\"Allows owner to pause all staking operations\"},\"registerLocker(address,uint256,address,uint256)\":{\"notice\":\"Registers a new Locker for staking.         Users who delegate TST to the Locker will earn percentage of Locker fees.\"},\"removeController(address)\":{\"notice\":\"Removes a controller\"},\"setTst(address)\":{\"notice\":\"Setter for TST\"},\"stake(address,uint256,address)\":{\"notice\":\"Stakes TST to earn rewards\"},\"unpause()\":{\"notice\":\"Allows owner to unpause all staking operations\"},\"unstake(address,address)\":{\"notice\":\"Unstakes TST. Users cannot unstake partial amount.\"},\"updateRegisteredLocker(address,uint256,uint256)\":{\"notice\":\"Updates staking percentage and staking period for a registered Locker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TstStakingLogic.sol\":\"TstStakingLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xa9311aeb22f459e57d4dac77ee76cf43fb28ad3215278456211b5852b0e9e970\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/staking/TstStakingLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./TstStakingStorage.sol\\\";\\n\\ncontract TstStakingLogic is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ERC20Upgradeable,\\n    TstStakingStorage\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Staking contract for TST. Stakers earn rewards from Locker fees.\\n    ///         By staking TST, user receives veTST which can be used for governance voting.\\n    ///         veTST is not transferable.\\n    function initialize(address _TST) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n        ERC20Upgradeable.__ERC20_init(\\n            \\\"Vote Escrowed Teleport System Token\\\",\\n            \\\"veTST\\\"\\n        );\\n        setTst(_TST);\\n    }\\n\\n    /// @return Returns TST staked amount, end time, claimed reward, unclaimed reward\\n    function getStakingPosition(\\n        address _locker,\\n        address _user\\n    ) external view override returns (uint, uint, uint, uint) {\\n        return (\\n            stakingPosition[_locker][_user].stakedAmount,\\n            stakingPosition[_locker][_user].unstakingTime,\\n            stakingPosition[_locker][_user].claimedReward,\\n            getUnclaimedReward(_locker, _user)\\n        );\\n    }\\n\\n    /// @notice Calculate total reward earned by user, and subtract already claimed reward\\n    /// @return Returns unclaimed reward amount\\n    function getUnclaimedReward(\\n        address _locker,\\n        address _user\\n    ) public view override returns (uint) {\\n        // Calculate total reward earned by user, and subtract already claimed reward\\n        uint totalReward = ((stakingPosition[_locker][_user].stakedAmount *\\n            (stakingInfo[_locker].currentRewardPerToken -\\n                stakingPosition[_locker][_user].initRewardPerToken)) /\\n            PERCISION);\\n\\n        if (totalReward > stakingPosition[_locker][_user].claimedReward) {\\n            return totalReward - stakingPosition[_locker][_user].claimedReward;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Setter for TST\\n    function setTst(address _TST) public override onlyOwner {\\n        TST = _TST;\\n    }\\n\\n    /// @notice Registers a new Locker for staking.\\n    ///         Users who delegate TST to the Locker will earn percentage of Locker fees.\\n    /// @param _locker Address of the Locker\\n    /// @param _stakingPercentage Percentage of Locker fees to be distributed to stakers\\n    /// @param _rewardToken Address of the reward token\\n    /// @param _stakingPeriod Users can unstake after before this period\\n    function registerLocker(\\n        address _locker,\\n        uint _stakingPercentage,\\n        address _rewardToken,\\n        uint _stakingPeriod\\n    ) external override onlyOwner {\\n        require(\\n            _stakingPercentage <= MAX_STAKING_PERCENTAGE,\\n            \\\"TstStaking: invalid staking percentage\\\"\\n        );\\n        require(\\n            stakingInfo[_locker].stakingPercentage == 0,\\n            \\\"TstStaking: locker already registered\\\"\\n        );\\n        stakingInfo[_locker].stakingPercentage = _stakingPercentage;\\n        stakingInfo[_locker].rewardToken = _rewardToken;\\n        stakingInfo[_locker].stakingPeriod = _stakingPeriod;\\n\\n        emit LockerRegisteredForStaking(\\n            _locker,\\n            _stakingPercentage,\\n            _rewardToken,\\n            _stakingPeriod\\n        );\\n    }\\n\\n    /// @notice Updates staking percentage and staking period for a registered Locker\\n    function updateRegisteredLocker(\\n        address _locker,\\n        uint _stakingPercentage,\\n        uint _stakingPeriod\\n    ) external override onlyOwner {\\n        stakingInfo[_locker].stakingPercentage = _stakingPercentage;\\n        stakingInfo[_locker].stakingPeriod = _stakingPeriod;\\n        emit LockerRegisteredForStaking(\\n            _locker,\\n            _stakingPercentage,\\n            stakingInfo[_locker].rewardToken,\\n            _stakingPeriod\\n        );\\n    }\\n\\n    /// @notice Adds a controller\\n    /// @dev Controller can stake and unstake on behalf of other users\\n    function addController(address _controller) external onlyOwner {\\n        isController[_controller] = true;\\n    }\\n\\n    /// @notice Removes a controller\\n    function removeController(address _controller) external onlyOwner {\\n        isController[_controller] = false;\\n    }\\n\\n    /// @notice Allows owner to pause all staking operations\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Allows owner to unpause all staking operations\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function onOFTReceived(\\n        uint16, // _srcChainId\\n        bytes memory, // _srcAddress\\n        uint64, // _nonce\\n        bytes32, // _from\\n        uint _amount,\\n        bytes memory _payload // This is our payload (not LZ payload)\\n    ) public override {\\n        address _locker = toAddress(_payload, 0);\\n        address _user = toAddress(_payload, 20);\\n        stake(_locker, _amount, _user);\\n    }\\n\\n    /// @notice Stakes TST to earn rewards\\n    /// @dev Controller can stake on behalf of other users\\n    /// @dev This mints veToken to the user\\n    /// @dev Users can stake extra TST to their existing position\\n    /// @param _locker Address of the Locker\\n    /// @param _amount Amount of TST to stake\\n    /// @param _user Address of the user\\n    function stake(\\n        address _locker,\\n        uint _amount,\\n        address _user\\n    ) public override whenNotPaused nonReentrant {\\n        // If user has no staked amount, delete their staking position\\n        if (stakingPosition[_locker][_user].stakedAmount == 0) {\\n            delete stakingPosition[_locker][_user];\\n        }\\n\\n        require(\\n            stakingInfo[_locker].stakingPercentage > 0,\\n            \\\"TstStaking: locker not registered\\\"\\n        );\\n\\n        // If msg.sender is not the user, then it must be a controller\\n        if (_user != msg.sender) {\\n            if (stakingPosition[_locker][_user].controller != address(0)) {\\n                // If user has already staked, then controller must be the same\\n                require(\\n                    stakingPosition[_locker][_user].controller == msg.sender,\\n                    \\\"TstStaking: not controller\\\"\\n                );\\n            } else {\\n                require(isController[msg.sender], \\\"TstStaking: not controller\\\");\\n            }\\n        }\\n\\n        // Transfer TST from msg.sender\\n        IERC20(TST).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Update staking info\\n        stakingInfo[_locker].totalStakedAmount += _amount;\\n\\n        // Update staking position\\n\\n        // Users can unstake after staking period\\n        stakingPosition[_locker][_user].unstakingTime =\\n            block.timestamp +\\n            stakingInfo[_locker].stakingPeriod;\\n\\n        // To calculate user reward, we multiply number of staked tokens with\\n        // the difference of current reward per token and initial reward per token.\\n        // This means that user will earn reward for the tokens staked after the last reward update\\n        // Below formula allow users to stake extra TST to their existing position\\n        stakingPosition[_locker][_user].initRewardPerToken =\\n            ((stakingPosition[_locker][_user].stakedAmount *\\n                stakingPosition[_locker][_user].initRewardPerToken) +\\n                (stakingInfo[_locker].currentRewardPerToken * _amount)) /\\n            (stakingPosition[_locker][_user].stakedAmount + _amount);\\n\\n        stakingPosition[_locker][_user].stakedAmount += _amount;\\n\\n        // Mint veToken\\n        _mint(_user, _amount);\\n\\n        emit TstStaked(\\n            msg.sender,\\n            _locker,\\n            stakingInfo[_locker].rewardToken,\\n            _amount,\\n            _user,\\n            stakingPosition[_locker][_user].unstakingTime,\\n            stakingPosition[_locker][_user].stakedAmount\\n        );\\n    }\\n\\n    /// @notice Claims unclaimed reward\\n    /// @dev Controller can claim reward on behalf of other users,\\n    ///      but reward will be sent to user\\n    function claimReward(\\n        address _locker,\\n        address _user\\n    ) public override whenNotPaused nonReentrant {\\n        if (_user != msg.sender) {\\n            require(\\n                stakingPosition[_locker][_user].controller == msg.sender,\\n                \\\"TstStaking: not controller\\\"\\n            );\\n        }\\n        require(\\n            stakingInfo[_locker].stakingPercentage > 0,\\n            \\\"TstStaking: locker not registered\\\"\\n        );\\n        _claimReward(_locker, _user);\\n    }\\n\\n    /// @notice Unstakes TST. Users cannot unstake partial amount.\\n    /// @dev Controller can unstake on behalf of other users\\n    /// @dev This burns veToken from the user\\n    /// @dev User can unstake only after staking period is over\\n    /// @dev All unclaimed reward will be sent to user\\n    function unstake(\\n        address _locker,\\n        address _user\\n    ) external override whenNotPaused nonReentrant {\\n        uint _stakedAmount = stakingPosition[_locker][_user].stakedAmount;\\n\\n        // User or controller must be the caller\\n        if (_user != msg.sender) {\\n            require(\\n                stakingPosition[_locker][_user].controller == msg.sender,\\n                \\\"TstStaking: not controller\\\"\\n            );\\n        }\\n        /*Check:\\n            1. Locker is registered\\n            2. User has enough staked amount\\n            3. Staking period is over\\n        */\\n        require(\\n            stakingInfo[_locker].stakingPercentage > 0,\\n            \\\"TstStaking: locker not registered\\\"\\n        );\\n        require(\\n            block.timestamp >= stakingPosition[_locker][_user].unstakingTime,\\n            \\\"TstStaking: staking period not over\\\"\\n        );\\n\\n        // Send any unclaimed reward\\n        _claimReward(_locker, _user);\\n\\n        // Burn veToken\\n        _burn(_user, _stakedAmount);\\n\\n        // Update staking info\\n        stakingInfo[_locker].totalStakedAmount -= _stakedAmount;\\n\\n        // Delete staking position\\n        delete stakingPosition[_locker][_user];\\n\\n        IERC20(TST).safeTransfer(_user, _stakedAmount);\\n\\n        emit TstUnstaked(\\n            msg.sender,\\n            _locker,\\n            _stakedAmount,\\n            _user\\n        );\\n    }\\n\\n    function unstakeByOwner(\\n        address _locker,\\n        address _user\\n    ) external onlyOwner nonReentrant {\\n        uint _stakedAmount = stakingPosition[_locker][_user].stakedAmount;\\n\\n        /*Check:\\n            1. Locker is registered\\n            2. User has enough staked amount\\n            3. Staking period is over\\n        */\\n        require(\\n            stakingInfo[_locker].stakingPercentage > 0,\\n            \\\"TstStaking: locker not registered\\\"\\n        );\\n\\n        // Send any unclaimed reward\\n        _claimReward(_locker, _user);\\n\\n        // Burn veToken\\n        _burn(_user, _stakedAmount);\\n\\n        // Update staking info\\n        stakingInfo[_locker].totalStakedAmount -= _stakedAmount;\\n\\n        // Delete staking position\\n        delete stakingPosition[_locker][_user];\\n\\n        IERC20(TST).safeTransfer(_user, _stakedAmount);\\n\\n        emit TstUnstaked(\\n            msg.sender,\\n            _locker,\\n            _stakedAmount,\\n            _user\\n        );\\n    }\\n\\n    /// @notice Deposits reward token for a Locker.\\n    ///         This reward will be distributed to stakers and Locker\\n    function depositReward(\\n        address _locker,\\n        uint _amount\\n    ) external override nonReentrant {\\n        if (stakingInfo[_locker].stakingPercentage == 0) {\\n            // If staking not enabled, send tokens to locker\\n            IERC20(stakingInfo[_locker].rewardToken).safeTransferFrom(\\n                msg.sender,\\n                _locker,\\n                _amount\\n            );\\n            emit RewardDeposited(msg.sender, _locker, address(0), _amount, 0);\\n        } else {\\n            // Get reward token from sender\\n            IERC20(stakingInfo[_locker].rewardToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n\\n            uint rewardAmount = (_amount *\\n                stakingInfo[_locker].stakingPercentage) /\\n                MAX_STAKING_PERCENTAGE;\\n\\n            // Send rest of it to Locker\\n            IERC20(stakingInfo[_locker].rewardToken).safeTransfer(\\n                _locker,\\n                _amount - rewardAmount\\n            );\\n\\n            // Update staking info\\n            stakingInfo[_locker].totalReward += rewardAmount;\\n            stakingInfo[_locker].currentRewardPerToken +=\\n                (PERCISION * rewardAmount) /\\n                stakingInfo[_locker].totalStakedAmount;\\n\\n            emit RewardDeposited(\\n                msg.sender,\\n                _locker,\\n                stakingInfo[_locker].rewardToken,\\n                _amount,\\n                rewardAmount\\n            );\\n        }\\n    }\\n\\n    function _claimReward(address _locker, address _user) private {\\n        // Get unclaimed reward\\n        uint reward = getUnclaimedReward(_locker, _user);\\n\\n        if (reward > 0) {\\n            stakingPosition[_locker][_user].claimedReward += reward;\\n            stakingInfo[_locker].totalClaimedReward += reward;\\n            // Send reward token to user (not controller)\\n            IERC20(stakingInfo[_locker].rewardToken).safeTransfer(\\n                _user,\\n                reward\\n            );\\n\\n            emit RewardClaimed(\\n                msg.sender,\\n                _locker,\\n                stakingInfo[_locker].rewardToken,\\n                _user,\\n                reward\\n            );\\n        }\\n    }\\n\\n    /// @notice veToken is not transferable\\n    function _transfer(address, address, uint256) internal pure override {\\n        require(false, \\\"TstStaking: transfers not allowed\\\");\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint _start\\n    ) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xd9da10de0aef76deb2ec543ec0bfbecfdb1f73c2cfebd0c0c8d96b347cdc1e7d\",\"license\":\"MIT\"},\"contracts/staking/TstStakingStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"./interfaces/ITstStaking.sol\\\";\\n\\nabstract contract TstStakingStorage is ITstStaking {\\n    uint public constant MAX_STAKING_PERCENTAGE = 10000;\\n    uint public constant PERCISION = 1e27;\\n    // ^^ This is used to avoid percision loss (since rewardPerToken is a fraction)\\n    mapping(address => mapping(address => StakingPosition))\\n        public stakingPosition;\\n    // ^^ [locker][user] => staking position\\n    mapping(address => StakingInfo) public stakingInfo;\\n    // ^^ [locker] => staking info\\n    address public override TST;\\n    mapping(address => bool) public override isController;\\n}\\n\",\"keccak256\":\"0x348870b5c4cf74922151c26619eb9416ebc39a5604f0d00c23a332edd031d8c1\",\"license\":\"MIT\"},\"contracts/staking/interfaces/ITstStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ITstStaking {\\n    // Structs\\n\\n    struct StakingPosition {\\n        uint stakedAmount;\\n        uint unstakedAmount;\\n        uint unstakingTime;\\n        uint claimedReward;\\n        uint initRewardPerToken;\\n        address controller;\\n    }\\n\\n    struct StakingInfo {\\n        uint stakingPercentage;\\n        address rewardToken;\\n        uint totalStakedAmount;\\n        uint totalReward;\\n        uint totalClaimedReward;\\n        uint currentRewardPerToken;\\n        uint stakingPeriod;\\n    }\\n\\n    // Events\\n\\n    event LockerRegisteredForStaking(\\n        address indexed locker,\\n        uint stakingPercentage,\\n        address indexed rewardToken,\\n        uint stakingPeriod\\n    );\\n\\n    event TstStaked(\\n        address caller,\\n        address indexed locker,\\n        address indexed rewardToken,\\n        uint amount,\\n        address indexed user,\\n        uint unstakingTime,\\n        uint totalStakedAmount\\n    );\\n\\n    event RewardClaimed(\\n        address caller,\\n        address indexed locker,\\n        address indexed rewardToken,\\n        address indexed user,\\n        uint amount\\n    );\\n\\n    event RewardDeposited(\\n        address sender,\\n        address indexed locker,\\n        address indexed rewardToken,\\n        uint totalAmount,\\n        uint rewardAmount\\n    );\\n\\n    event TstUnstaked(\\n        address caller,\\n        address indexed locker,\\n        uint amount,\\n        address indexed user\\n    );\\n\\n    // View-only Functions\\n\\n    function getStakingPosition(\\n        address _locker,\\n        address _user\\n    ) external view returns (uint, uint, uint, uint);\\n\\n    function getUnclaimedReward(\\n        address _locker,\\n        address _user\\n    ) external view returns (uint);\\n\\n    function TST() external view returns (address);\\n\\n    function isController(address) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function setTst(address _TST) external;\\n\\n    function addController(address _controller) external;\\n\\n    function removeController(address _controller) external;\\n\\n    function registerLocker(\\n        address _locker,\\n        uint _stakingPercentage,\\n        address _rewardToken,\\n        uint _stakingPeriod\\n    ) external;\\n\\n    function updateRegisteredLocker(\\n        address _locker,\\n        uint _stakingPercentage,\\n        uint _stakingPeriod\\n    ) external;\\n\\n    function stake(address _locker, uint _amount, address _user) external;\\n\\n    function claimReward(address _locker, address _user) external;\\n\\n    function unstake(address _locker, address _user) external;\\n\\n    function depositReward(address _locker, uint _amount) external;\\n\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdfe7acbd780de376a347ba8cce8b7e55da56a4fd223e5be54a66ca07f0e4b369\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638456cb5911610130578063c4d66de8116100b8578063ed6e23711161007c578063ed6e2371146105a1578063f21f3c08146105d4578063f2fde38b146105e7578063f6a74ed7146105fa578063fde042811461060d57600080fd5b8063c4d66de814610542578063d263cef314610555578063dd62ed3e14610568578063e3daba711461057b578063ed31520d1461058e57600080fd5b8063a457c2d7116100ff578063a457c2d7146104d3578063a7fc7a07146104e6578063a9059cbb146104f9578063b429afeb1461050c578063c3c8f2f01461052f57600080fd5b80638456cb591461040c5780638da5cb5b1461041457806394eecb501461043957806395d89b41146104cb57600080fd5b80633f4ba83a116101b35780636e8dd839116101825780636e8dd8391461032857806370a08231146103b5578063715018a6146103de5780637db4e28f146103e65780637fcf35da146103f957600080fd5b80633f4ba83a146102ef5780634953c782146102f7578063564632991461030a5780635c975abb1461031d57600080fd5b806323b872dd116101fa57806323b872dd14610294578063256e2703146102a7578063294091cd146102ba578063313ce567146102cd57806339509351146102dc57600080fd5b806306fdde031461022c578063095ea7b31461024a5780630cf7ea8f1461026d57806318160ddd14610282575b600080fd5b610234610616565b604051610241919061238a565b60405180910390f35b61025d6102583660046123d9565b6106a8565b6040519015158152602001610241565b61028061027b366004612403565b6106c2565b005b60cb545b604051908152602001610241565b61025d6102a2366004612436565b610735565b6102806102b5366004612472565b61075b565b6102806102c83660046124a5565b6108c6565b60405160128152602001610241565b61025d6102ea3660046123d9565b610c44565b610280610c66565b610280610305366004612472565b610c78565b610286610318366004612472565b610d29565b60975460ff1661025d565b61037f610336366004612472565b60fb60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460059095015493949293919290916001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c001610241565b6102866103c33660046124e1565b6001600160a01b0316600090815260c9602052604090205490565b610280610e2e565b6102806103f43660046123d9565b610e40565b61028061040736600461259f565b61106d565b6102806110a0565b6065546001600160a01b03165b6040516001600160a01b039091168152602001610241565b61048e6104473660046124e1565b60fc60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919087565b604080519788526001600160a01b039096166020880152948601939093526060850191909152608084015260a083015260c082015260e001610241565b6102346110b0565b61025d6104e13660046123d9565b6110bf565b6102806104f43660046124e1565b611145565b61025d6105073660046123d9565b611171565b61025d61051a3660046124e1565b60fe6020526000908152604090205460ff1681565b6102866b033b2e3c9fd0803ce800000081565b6102806105503660046124e1565b61117f565b6102806105633660046124e1565b6112e8565b610286610576366004612472565b611312565b60fd54610421906001600160a01b031681565b61028061059c366004612648565b61133d565b6105b46105af366004612472565b611494565b604080519485526020850193909352918301526060820152608001610241565b6102806105e2366004612472565b6114eb565b6102806105f53660046124e1565b61162d565b6102806106083660046124e1565b6116a6565b61028661271081565b606060cc80546106259061268c565b80601f01602080910402602001604051908101604052809291908181526020018280546106519061268c565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b5050505050905090565b6000336106b68185856116cf565b60019150505b92915050565b6106ca6117eb565b6001600160a01b03838116600081815260fc602090815260409182902086815560068101869055600101548251878152918201869052909316927f6adcd71da76e0a69ed435c9ba83e788ac1a11abf12d5ddce101edeebae1e8cd291015b60405180910390a3505050565b600033610743858285611845565b61074e8585856118bf565b60019150505b9392505050565b6107636117eb565b61076b611911565b6001600160a01b03808316600081815260fb6020908152604080832094861683529381528382205492825260fc905291909120546107c45760405162461bcd60e51b81526004016107bb906126c7565b60405180910390fd5b6107ce838361196b565b6107d88282611a7a565b6001600160a01b038316600090815260fc60205260408120600201805483929061080390849061271e565b90915550506001600160a01b03808416600090815260fb6020908152604080832086851684529091528120818155600181018290556002810182905560038101829055600481019190915560050180546001600160a01b031916905560fd5461086e91168383611bae565b60408051338152602081018390526001600160a01b0380851692908616917f6af5feb7f457294f20ebb307166d54c47a6386c8f4b6482c67ffc241fec9bd7391015b60405180910390a3506108c260018055565b5050565b6108ce611c17565b6108d6611911565b6001600160a01b03808416600090815260fb6020908152604080832093851683529290522054610959576001600160a01b03808416600090815260fb602090815260408083209385168352929052908120818155600181018290556002810182905560038101829055600481019190915560050180546001600160a01b03191690555b6001600160a01b038316600090815260fc602052604090205461098e5760405162461bcd60e51b81526004016107bb906126c7565b6001600160a01b0381163314610a4b576001600160a01b03838116600090815260fb6020908152604080832085851684529091529020600501541615610a1c576001600160a01b03838116600090815260fb602090815260408083208585168452909152902060050154163314610a175760405162461bcd60e51b81526004016107bb90612735565b610a4b565b33600090815260fe602052604090205460ff16610a4b5760405162461bcd60e51b81526004016107bb90612735565b60fd54610a63906001600160a01b0316333085611c5d565b6001600160a01b038316600090815260fc602052604081206002018054849290610a8e90849061276c565b90915550506001600160a01b038316600090815260fc6020526040902060060154610ab9904261276c565b6001600160a01b03848116600090815260fb60209081526040808320938616835292905220600281019190915554610af290839061276c565b6001600160a01b038416600090815260fc6020526040902060050154610b19908490612784565b6001600160a01b03858116600090815260fb6020908152604080832093871683529290522060048101549054610b4f9190612784565b610b59919061276c565b610b6391906127a3565b6001600160a01b03848116600090815260fb6020908152604080832093861683529290529081206004810192909255815484929190610ba390849061276c565b90915550610bb390508183611c95565b6001600160a01b03838116600081815260fc602090815260408083206001015460fb8352818420878716808652908452938290206002810154905483513381529485018a9052848401919091526060840152905192941692917ffbf2a04e1b9d1d59c31693e240cdbfbcb171dbf5f121836b299389192ea461969181900360800190a4610c3f60018055565b505050565b6000336106b6818585610c578383611312565b610c61919061276c565b6116cf565b610c6e6117eb565b610c76611d56565b565b610c80611c17565b610c88611911565b6001600160a01b0381163314610ce1576001600160a01b03828116600090815260fb602090815260408083208585168452909152902060050154163314610ce15760405162461bcd60e51b81526004016107bb90612735565b6001600160a01b038216600090815260fc6020526040902054610d165760405162461bcd60e51b81526004016107bb906126c7565b610d20828261196b565b6108c260018055565b6001600160a01b03808316600081815260fb6020908152604080832094861683529381528382206004015492825260fc90529182206005015482916b033b2e3c9fd0803ce800000091610d7c919061271e565b6001600160a01b03808716600090815260fb6020908152604080832093891683529290522054610dac9190612784565b610db691906127a3565b6001600160a01b03808616600090815260fb6020908152604080832093881683529290522060030154909150811115610e24576001600160a01b03808516600090815260fb6020908152604080832093871683529290522060030154610e1c908261271e565b9150506106bc565b60009150506106bc565b610e366117eb565b610c766000611da8565b610e48611911565b6001600160a01b038216600090815260fc6020526040902054610ee2576001600160a01b03808316600090815260fc6020526040902060010154610e8f9116338484611c5d565b604080513381526020810183905260009181018290526001600160a01b038416907faa83330f31f55b682a58c00b453d9ed38fdeddca3a81e4d8cb07527b8e94e4039060600160405180910390a3610d20565b6001600160a01b03808316600090815260fc6020526040902060010154610f0c9116333084611c5d565b6001600160a01b038216600090815260fc602052604081205461271090610f339084612784565b610f3d91906127a3565b9050610f7283610f4d838561271e565b6001600160a01b03808716600090815260fc6020526040902060010154169190611bae565b6001600160a01b038316600090815260fc602052604081206003018054839290610f9d90849061276c565b90915550506001600160a01b038316600090815260fc6020526040902060020154610fd4826b033b2e3c9fd0803ce8000000612784565b610fde91906127a3565b6001600160a01b038416600090815260fc60205260408120600501805490919061100990849061276c565b90915550506001600160a01b03838116600081815260fc60209081526040918290206001015482513381529182018790529181018590529216917faa83330f31f55b682a58c00b453d9ed38fdeddca3a81e4d8cb07527b8e94e403906060016108b0565b600061107a826000611dfa565b90506000611089836014611dfa565b90506110968285836108c6565b5050505050505050565b6110a86117eb565b610c76611e5f565b606060cd80546106259061268c565b600033816110cd8286611312565b90508381101561112d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107bb565b61113a82868684036116cf565b506001949350505050565b61114d6117eb565b6001600160a01b0316600090815260fe60205260409020805460ff19166001179055565b6000336106b68185856118bf565b600054610100900460ff161580801561119f5750600054600160ff909116105b806111b95750303b1580156111b9575060005460ff166001145b61121c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bb565b6000805460ff19166001179055801561123f576000805461ff0019166101001790555b611247611e9c565b61124f611ecb565b611257611efa565b61129660405180606001604052806023815260200161284f60239139604051806040016040528060058152602001641d995514d560da1b815250611f29565b61129f826112e8565b80156108c2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6112f06117eb565b60fd80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b6113456117eb565b6127108311156113a65760405162461bcd60e51b815260206004820152602660248201527f5473745374616b696e673a20696e76616c6964207374616b696e672070657263604482015265656e7461676560d01b60648201526084016107bb565b6001600160a01b038416600090815260fc60205260409020541561141a5760405162461bcd60e51b815260206004820152602560248201527f5473745374616b696e673a206c6f636b657220616c72656164792072656769736044820152641d195c995960da1b60648201526084016107bb565b6001600160a01b03848116600081815260fc60209081526040918290208781556001810180546001600160a01b031916958816958617905560060185905581518781529081018590527f6adcd71da76e0a69ed435c9ba83e788ac1a11abf12d5ddce101edeebae1e8cd2910160405180910390a350505050565b6001600160a01b03828116600090815260fb602090815260408083209385168352929052908120805460028201546003909201548392839283929091906114db8989610d29565b9299919850965090945092505050565b6114f3611c17565b6114fb611911565b6001600160a01b03808316600090815260fb6020908152604080832093851680845293909152902054903314611574576001600160a01b03838116600090815260fb6020908152604080832086851684529091529020600501541633146115745760405162461bcd60e51b81526004016107bb90612735565b6001600160a01b038316600090815260fc60205260409020546115a95760405162461bcd60e51b81526004016107bb906126c7565b6001600160a01b03808416600090815260fb60209081526040808320938616835292905220600201544210156107c45760405162461bcd60e51b815260206004820152602360248201527f5473745374616b696e673a207374616b696e6720706572696f64206e6f74206f6044820152623b32b960e91b60648201526084016107bb565b6116356117eb565b6001600160a01b03811661169a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bb565b6116a381611da8565b50565b6116ae6117eb565b6001600160a01b0316600090815260fe60205260409020805460ff19169055565b6001600160a01b0383166117315760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107bb565b6001600160a01b0382166117925760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107bb565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610728565b6065546001600160a01b03163314610c765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107bb565b60006118518484611312565b905060001981146118b957818110156118ac5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016107bb565b6118b984848484036116cf565b50505050565b60405162461bcd60e51b815260206004820152602160248201527f5473745374616b696e673a207472616e7366657273206e6f7420616c6c6f77656044820152601960fa1b60648201526084016107bb565b600260015414156119645760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107bb565b6002600155565b60006119778383610d29565b90508015610c3f576001600160a01b03808416600090815260fb60209081526040808320938616835292905290812060030180548392906119b990849061276c565b90915550506001600160a01b038316600090815260fc6020526040812060040180548392906119e990849061276c565b90915550506001600160a01b03808416600090815260fc6020526040902060010154611a1791168383611bae565b6001600160a01b03838116600081815260fc6020908152604091829020600101548251338152918201869052868516941692917f3c7cf01a909d99baa17e8a20a6b1313defa27faddbf794dd957e2e3945429131910160405180910390a4505050565b6001600160a01b038216611ada5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107bb565b6001600160a01b038216600090815260c9602052604090205481811015611b4e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107bb565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610c3f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f5a565b60018055565b60975460ff1615610c765760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107bb565b6040516001600160a01b03808516602483015283166044820152606481018290526118b99085906323b872dd60e01b90608401611bda565b6001600160a01b038216611ceb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107bb565b8060cb6000828254611cfd919061276c565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b611d5e61202c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611e0782601461276c565b83511015611e4f5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016107bb565b500160200151600160601b900490565b611e67611c17565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d8b3390565b600054610100900460ff16611ec35760405162461bcd60e51b81526004016107bb906127c5565b610c76612075565b600054610100900460ff16611ef25760405162461bcd60e51b81526004016107bb906127c5565b610c766120a5565b600054610100900460ff16611f215760405162461bcd60e51b81526004016107bb906127c5565b610c766120cc565b600054610100900460ff16611f505760405162461bcd60e51b81526004016107bb906127c5565b6108c282826120ff565b6000611faf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661214d9092919063ffffffff16565b805190915015610c3f5780806020019051810190611fcd9190612810565b610c3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107bb565b60975460ff16610c765760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107bb565b600054610100900460ff1661209c5760405162461bcd60e51b81526004016107bb906127c5565b610c7633611da8565b600054610100900460ff16611c115760405162461bcd60e51b81526004016107bb906127c5565b600054610100900460ff166120f35760405162461bcd60e51b81526004016107bb906127c5565b6097805460ff19169055565b600054610100900460ff166121265760405162461bcd60e51b81526004016107bb906127c5565b81516121399060cc9060208501906122c5565b508051610c3f9060cd9060208401906122c5565b606061215c8484600085612164565b949350505050565b6060824710156121c55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107bb565b843b6122135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107bb565b600080866001600160a01b0316858760405161222f9190612832565b60006040518083038185875af1925050503d806000811461226c576040519150601f19603f3d011682016040523d82523d6000602084013e612271565b606091505b509150915061228182828661228c565b979650505050505050565b6060831561229b575081610754565b8251156122ab5782518084602001fd5b8160405162461bcd60e51b81526004016107bb919061238a565b8280546122d19061268c565b90600052602060002090601f0160209004810192826122f35760008555612339565b82601f1061230c57805160ff1916838001178555612339565b82800160010185558215612339579182015b8281111561233957825182559160200191906001019061231e565b50612345929150612349565b5090565b5b80821115612345576000815560010161234a565b60005b83811015612379578181015183820152602001612361565b838111156118b95750506000910152565b60208152600082518060208401526123a981604085016020870161235e565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146123d457600080fd5b919050565b600080604083850312156123ec57600080fd5b6123f5836123bd565b946020939093013593505050565b60008060006060848603121561241857600080fd5b612421846123bd565b95602085013595506040909401359392505050565b60008060006060848603121561244b57600080fd5b612454846123bd565b9250612462602085016123bd565b9150604084013590509250925092565b6000806040838503121561248557600080fd5b61248e836123bd565b915061249c602084016123bd565b90509250929050565b6000806000606084860312156124ba57600080fd5b6124c3846123bd565b9250602084013591506124d8604085016123bd565b90509250925092565b6000602082840312156124f357600080fd5b610754826123bd565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261252357600080fd5b813567ffffffffffffffff8082111561253e5761253e6124fc565b604051601f8301601f19908116603f01168101908282118183101715612566576125666124fc565b8160405283815286602085880101111561257f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156125b857600080fd5b863561ffff811681146125ca57600080fd5b9550602087013567ffffffffffffffff808211156125e757600080fd5b6125f38a838b01612512565b965060408901359150808216821461260a57600080fd5b909450606088013593506080880135925060a0880135908082111561262e57600080fd5b5061263b89828a01612512565b9150509295509295509295565b6000806000806080858703121561265e57600080fd5b612667856123bd565b93506020850135925061267c604086016123bd565b9396929550929360600135925050565b600181811c908216806126a057607f821691505b602082108114156126c157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f5473745374616b696e673a206c6f636b6572206e6f74207265676973746572656040820152601960fa1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561273057612730612708565b500390565b6020808252601a908201527f5473745374616b696e673a206e6f7420636f6e74726f6c6c6572000000000000604082015260600190565b6000821982111561277f5761277f612708565b500190565b600081600019048311821515161561279e5761279e612708565b500290565b6000826127c057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561282257600080fd5b8151801515811461075457600080fd5b6000825161284481846020870161235e565b919091019291505056fe566f746520457363726f7765642054656c65706f72742053797374656d20546f6b656ea2646970667358221220a57b846cc55acc376c88ee5c644e9430e29c977871f3c5071f29ecf5639b061e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80638456cb5911610130578063c4d66de8116100b8578063ed6e23711161007c578063ed6e2371146105a1578063f21f3c08146105d4578063f2fde38b146105e7578063f6a74ed7146105fa578063fde042811461060d57600080fd5b8063c4d66de814610542578063d263cef314610555578063dd62ed3e14610568578063e3daba711461057b578063ed31520d1461058e57600080fd5b8063a457c2d7116100ff578063a457c2d7146104d3578063a7fc7a07146104e6578063a9059cbb146104f9578063b429afeb1461050c578063c3c8f2f01461052f57600080fd5b80638456cb591461040c5780638da5cb5b1461041457806394eecb501461043957806395d89b41146104cb57600080fd5b80633f4ba83a116101b35780636e8dd839116101825780636e8dd8391461032857806370a08231146103b5578063715018a6146103de5780637db4e28f146103e65780637fcf35da146103f957600080fd5b80633f4ba83a146102ef5780634953c782146102f7578063564632991461030a5780635c975abb1461031d57600080fd5b806323b872dd116101fa57806323b872dd14610294578063256e2703146102a7578063294091cd146102ba578063313ce567146102cd57806339509351146102dc57600080fd5b806306fdde031461022c578063095ea7b31461024a5780630cf7ea8f1461026d57806318160ddd14610282575b600080fd5b610234610616565b604051610241919061238a565b60405180910390f35b61025d6102583660046123d9565b6106a8565b6040519015158152602001610241565b61028061027b366004612403565b6106c2565b005b60cb545b604051908152602001610241565b61025d6102a2366004612436565b610735565b6102806102b5366004612472565b61075b565b6102806102c83660046124a5565b6108c6565b60405160128152602001610241565b61025d6102ea3660046123d9565b610c44565b610280610c66565b610280610305366004612472565b610c78565b610286610318366004612472565b610d29565b60975460ff1661025d565b61037f610336366004612472565b60fb60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460059095015493949293919290916001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c001610241565b6102866103c33660046124e1565b6001600160a01b0316600090815260c9602052604090205490565b610280610e2e565b6102806103f43660046123d9565b610e40565b61028061040736600461259f565b61106d565b6102806110a0565b6065546001600160a01b03165b6040516001600160a01b039091168152602001610241565b61048e6104473660046124e1565b60fc60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919087565b604080519788526001600160a01b039096166020880152948601939093526060850191909152608084015260a083015260c082015260e001610241565b6102346110b0565b61025d6104e13660046123d9565b6110bf565b6102806104f43660046124e1565b611145565b61025d6105073660046123d9565b611171565b61025d61051a3660046124e1565b60fe6020526000908152604090205460ff1681565b6102866b033b2e3c9fd0803ce800000081565b6102806105503660046124e1565b61117f565b6102806105633660046124e1565b6112e8565b610286610576366004612472565b611312565b60fd54610421906001600160a01b031681565b61028061059c366004612648565b61133d565b6105b46105af366004612472565b611494565b604080519485526020850193909352918301526060820152608001610241565b6102806105e2366004612472565b6114eb565b6102806105f53660046124e1565b61162d565b6102806106083660046124e1565b6116a6565b61028661271081565b606060cc80546106259061268c565b80601f01602080910402602001604051908101604052809291908181526020018280546106519061268c565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b5050505050905090565b6000336106b68185856116cf565b60019150505b92915050565b6106ca6117eb565b6001600160a01b03838116600081815260fc602090815260409182902086815560068101869055600101548251878152918201869052909316927f6adcd71da76e0a69ed435c9ba83e788ac1a11abf12d5ddce101edeebae1e8cd291015b60405180910390a3505050565b600033610743858285611845565b61074e8585856118bf565b60019150505b9392505050565b6107636117eb565b61076b611911565b6001600160a01b03808316600081815260fb6020908152604080832094861683529381528382205492825260fc905291909120546107c45760405162461bcd60e51b81526004016107bb906126c7565b60405180910390fd5b6107ce838361196b565b6107d88282611a7a565b6001600160a01b038316600090815260fc60205260408120600201805483929061080390849061271e565b90915550506001600160a01b03808416600090815260fb6020908152604080832086851684529091528120818155600181018290556002810182905560038101829055600481019190915560050180546001600160a01b031916905560fd5461086e91168383611bae565b60408051338152602081018390526001600160a01b0380851692908616917f6af5feb7f457294f20ebb307166d54c47a6386c8f4b6482c67ffc241fec9bd7391015b60405180910390a3506108c260018055565b5050565b6108ce611c17565b6108d6611911565b6001600160a01b03808416600090815260fb6020908152604080832093851683529290522054610959576001600160a01b03808416600090815260fb602090815260408083209385168352929052908120818155600181018290556002810182905560038101829055600481019190915560050180546001600160a01b03191690555b6001600160a01b038316600090815260fc602052604090205461098e5760405162461bcd60e51b81526004016107bb906126c7565b6001600160a01b0381163314610a4b576001600160a01b03838116600090815260fb6020908152604080832085851684529091529020600501541615610a1c576001600160a01b03838116600090815260fb602090815260408083208585168452909152902060050154163314610a175760405162461bcd60e51b81526004016107bb90612735565b610a4b565b33600090815260fe602052604090205460ff16610a4b5760405162461bcd60e51b81526004016107bb90612735565b60fd54610a63906001600160a01b0316333085611c5d565b6001600160a01b038316600090815260fc602052604081206002018054849290610a8e90849061276c565b90915550506001600160a01b038316600090815260fc6020526040902060060154610ab9904261276c565b6001600160a01b03848116600090815260fb60209081526040808320938616835292905220600281019190915554610af290839061276c565b6001600160a01b038416600090815260fc6020526040902060050154610b19908490612784565b6001600160a01b03858116600090815260fb6020908152604080832093871683529290522060048101549054610b4f9190612784565b610b59919061276c565b610b6391906127a3565b6001600160a01b03848116600090815260fb6020908152604080832093861683529290529081206004810192909255815484929190610ba390849061276c565b90915550610bb390508183611c95565b6001600160a01b03838116600081815260fc602090815260408083206001015460fb8352818420878716808652908452938290206002810154905483513381529485018a9052848401919091526060840152905192941692917ffbf2a04e1b9d1d59c31693e240cdbfbcb171dbf5f121836b299389192ea461969181900360800190a4610c3f60018055565b505050565b6000336106b6818585610c578383611312565b610c61919061276c565b6116cf565b610c6e6117eb565b610c76611d56565b565b610c80611c17565b610c88611911565b6001600160a01b0381163314610ce1576001600160a01b03828116600090815260fb602090815260408083208585168452909152902060050154163314610ce15760405162461bcd60e51b81526004016107bb90612735565b6001600160a01b038216600090815260fc6020526040902054610d165760405162461bcd60e51b81526004016107bb906126c7565b610d20828261196b565b6108c260018055565b6001600160a01b03808316600081815260fb6020908152604080832094861683529381528382206004015492825260fc90529182206005015482916b033b2e3c9fd0803ce800000091610d7c919061271e565b6001600160a01b03808716600090815260fb6020908152604080832093891683529290522054610dac9190612784565b610db691906127a3565b6001600160a01b03808616600090815260fb6020908152604080832093881683529290522060030154909150811115610e24576001600160a01b03808516600090815260fb6020908152604080832093871683529290522060030154610e1c908261271e565b9150506106bc565b60009150506106bc565b610e366117eb565b610c766000611da8565b610e48611911565b6001600160a01b038216600090815260fc6020526040902054610ee2576001600160a01b03808316600090815260fc6020526040902060010154610e8f9116338484611c5d565b604080513381526020810183905260009181018290526001600160a01b038416907faa83330f31f55b682a58c00b453d9ed38fdeddca3a81e4d8cb07527b8e94e4039060600160405180910390a3610d20565b6001600160a01b03808316600090815260fc6020526040902060010154610f0c9116333084611c5d565b6001600160a01b038216600090815260fc602052604081205461271090610f339084612784565b610f3d91906127a3565b9050610f7283610f4d838561271e565b6001600160a01b03808716600090815260fc6020526040902060010154169190611bae565b6001600160a01b038316600090815260fc602052604081206003018054839290610f9d90849061276c565b90915550506001600160a01b038316600090815260fc6020526040902060020154610fd4826b033b2e3c9fd0803ce8000000612784565b610fde91906127a3565b6001600160a01b038416600090815260fc60205260408120600501805490919061100990849061276c565b90915550506001600160a01b03838116600081815260fc60209081526040918290206001015482513381529182018790529181018590529216917faa83330f31f55b682a58c00b453d9ed38fdeddca3a81e4d8cb07527b8e94e403906060016108b0565b600061107a826000611dfa565b90506000611089836014611dfa565b90506110968285836108c6565b5050505050505050565b6110a86117eb565b610c76611e5f565b606060cd80546106259061268c565b600033816110cd8286611312565b90508381101561112d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016107bb565b61113a82868684036116cf565b506001949350505050565b61114d6117eb565b6001600160a01b0316600090815260fe60205260409020805460ff19166001179055565b6000336106b68185856118bf565b600054610100900460ff161580801561119f5750600054600160ff909116105b806111b95750303b1580156111b9575060005460ff166001145b61121c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107bb565b6000805460ff19166001179055801561123f576000805461ff0019166101001790555b611247611e9c565b61124f611ecb565b611257611efa565b61129660405180606001604052806023815260200161284f60239139604051806040016040528060058152602001641d995514d560da1b815250611f29565b61129f826112e8565b80156108c2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6112f06117eb565b60fd80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b6113456117eb565b6127108311156113a65760405162461bcd60e51b815260206004820152602660248201527f5473745374616b696e673a20696e76616c6964207374616b696e672070657263604482015265656e7461676560d01b60648201526084016107bb565b6001600160a01b038416600090815260fc60205260409020541561141a5760405162461bcd60e51b815260206004820152602560248201527f5473745374616b696e673a206c6f636b657220616c72656164792072656769736044820152641d195c995960da1b60648201526084016107bb565b6001600160a01b03848116600081815260fc60209081526040918290208781556001810180546001600160a01b031916958816958617905560060185905581518781529081018590527f6adcd71da76e0a69ed435c9ba83e788ac1a11abf12d5ddce101edeebae1e8cd2910160405180910390a350505050565b6001600160a01b03828116600090815260fb602090815260408083209385168352929052908120805460028201546003909201548392839283929091906114db8989610d29565b9299919850965090945092505050565b6114f3611c17565b6114fb611911565b6001600160a01b03808316600090815260fb6020908152604080832093851680845293909152902054903314611574576001600160a01b03838116600090815260fb6020908152604080832086851684529091529020600501541633146115745760405162461bcd60e51b81526004016107bb90612735565b6001600160a01b038316600090815260fc60205260409020546115a95760405162461bcd60e51b81526004016107bb906126c7565b6001600160a01b03808416600090815260fb60209081526040808320938616835292905220600201544210156107c45760405162461bcd60e51b815260206004820152602360248201527f5473745374616b696e673a207374616b696e6720706572696f64206e6f74206f6044820152623b32b960e91b60648201526084016107bb565b6116356117eb565b6001600160a01b03811661169a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107bb565b6116a381611da8565b50565b6116ae6117eb565b6001600160a01b0316600090815260fe60205260409020805460ff19169055565b6001600160a01b0383166117315760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016107bb565b6001600160a01b0382166117925760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016107bb565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610728565b6065546001600160a01b03163314610c765760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107bb565b60006118518484611312565b905060001981146118b957818110156118ac5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016107bb565b6118b984848484036116cf565b50505050565b60405162461bcd60e51b815260206004820152602160248201527f5473745374616b696e673a207472616e7366657273206e6f7420616c6c6f77656044820152601960fa1b60648201526084016107bb565b600260015414156119645760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107bb565b6002600155565b60006119778383610d29565b90508015610c3f576001600160a01b03808416600090815260fb60209081526040808320938616835292905290812060030180548392906119b990849061276c565b90915550506001600160a01b038316600090815260fc6020526040812060040180548392906119e990849061276c565b90915550506001600160a01b03808416600090815260fc6020526040902060010154611a1791168383611bae565b6001600160a01b03838116600081815260fc6020908152604091829020600101548251338152918201869052868516941692917f3c7cf01a909d99baa17e8a20a6b1313defa27faddbf794dd957e2e3945429131910160405180910390a4505050565b6001600160a01b038216611ada5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016107bb565b6001600160a01b038216600090815260c9602052604090205481811015611b4e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016107bb565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610c3f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f5a565b60018055565b60975460ff1615610c765760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107bb565b6040516001600160a01b03808516602483015283166044820152606481018290526118b99085906323b872dd60e01b90608401611bda565b6001600160a01b038216611ceb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016107bb565b8060cb6000828254611cfd919061276c565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b611d5e61202c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611e0782601461276c565b83511015611e4f5760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b60448201526064016107bb565b500160200151600160601b900490565b611e67611c17565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d8b3390565b600054610100900460ff16611ec35760405162461bcd60e51b81526004016107bb906127c5565b610c76612075565b600054610100900460ff16611ef25760405162461bcd60e51b81526004016107bb906127c5565b610c766120a5565b600054610100900460ff16611f215760405162461bcd60e51b81526004016107bb906127c5565b610c766120cc565b600054610100900460ff16611f505760405162461bcd60e51b81526004016107bb906127c5565b6108c282826120ff565b6000611faf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661214d9092919063ffffffff16565b805190915015610c3f5780806020019051810190611fcd9190612810565b610c3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107bb565b60975460ff16610c765760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107bb565b600054610100900460ff1661209c5760405162461bcd60e51b81526004016107bb906127c5565b610c7633611da8565b600054610100900460ff16611c115760405162461bcd60e51b81526004016107bb906127c5565b600054610100900460ff166120f35760405162461bcd60e51b81526004016107bb906127c5565b6097805460ff19169055565b600054610100900460ff166121265760405162461bcd60e51b81526004016107bb906127c5565b81516121399060cc9060208501906122c5565b508051610c3f9060cd9060208401906122c5565b606061215c8484600085612164565b949350505050565b6060824710156121c55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107bb565b843b6122135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107bb565b600080866001600160a01b0316858760405161222f9190612832565b60006040518083038185875af1925050503d806000811461226c576040519150601f19603f3d011682016040523d82523d6000602084013e612271565b606091505b509150915061228182828661228c565b979650505050505050565b6060831561229b575081610754565b8251156122ab5782518084602001fd5b8160405162461bcd60e51b81526004016107bb919061238a565b8280546122d19061268c565b90600052602060002090601f0160209004810192826122f35760008555612339565b82601f1061230c57805160ff1916838001178555612339565b82800160010185558215612339579182015b8281111561233957825182559160200191906001019061231e565b50612345929150612349565b5090565b5b80821115612345576000815560010161234a565b60005b83811015612379578181015183820152602001612361565b838111156118b95750506000910152565b60208152600082518060208401526123a981604085016020870161235e565b601f01601f19169190910160400192915050565b80356001600160a01b03811681146123d457600080fd5b919050565b600080604083850312156123ec57600080fd5b6123f5836123bd565b946020939093013593505050565b60008060006060848603121561241857600080fd5b612421846123bd565b95602085013595506040909401359392505050565b60008060006060848603121561244b57600080fd5b612454846123bd565b9250612462602085016123bd565b9150604084013590509250925092565b6000806040838503121561248557600080fd5b61248e836123bd565b915061249c602084016123bd565b90509250929050565b6000806000606084860312156124ba57600080fd5b6124c3846123bd565b9250602084013591506124d8604085016123bd565b90509250925092565b6000602082840312156124f357600080fd5b610754826123bd565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261252357600080fd5b813567ffffffffffffffff8082111561253e5761253e6124fc565b604051601f8301601f19908116603f01168101908282118183101715612566576125666124fc565b8160405283815286602085880101111561257f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156125b857600080fd5b863561ffff811681146125ca57600080fd5b9550602087013567ffffffffffffffff808211156125e757600080fd5b6125f38a838b01612512565b965060408901359150808216821461260a57600080fd5b909450606088013593506080880135925060a0880135908082111561262e57600080fd5b5061263b89828a01612512565b9150509295509295509295565b6000806000806080858703121561265e57600080fd5b612667856123bd565b93506020850135925061267c604086016123bd565b9396929550929360600135925050565b600181811c908216806126a057607f821691505b602082108114156126c157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f5473745374616b696e673a206c6f636b6572206e6f74207265676973746572656040820152601960fa1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561273057612730612708565b500390565b6020808252601a908201527f5473745374616b696e673a206e6f7420636f6e74726f6c6c6572000000000000604082015260600190565b6000821982111561277f5761277f612708565b500190565b600081600019048311821515161561279e5761279e612708565b500290565b6000826127c057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561282257600080fd5b8151801515811461075457600080fd5b6000825161284481846020870161235e565b919091019291505056fe566f746520457363726f7765642054656c65706f72742053797374656d20546f6b656ea2646970667358221220a57b846cc55acc376c88ee5c644e9430e29c977871f3c5071f29ecf5639b061e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Controller can stake and unstake on behalf of other users"
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claimReward(address,address)": {
        "details": "Controller can claim reward on behalf of other users,      but reward will be sent to user"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getStakingPosition(address,address)": {
        "returns": {
          "_0": "Returns TST staked amount, end time, claimed reward, unclaimed reward"
        }
      },
      "getUnclaimedReward(address,address)": {
        "returns": {
          "_0": "Returns unclaimed reward amount"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerLocker(address,uint256,address,uint256)": {
        "params": {
          "_locker": "Address of the Locker",
          "_rewardToken": "Address of the reward token",
          "_stakingPercentage": "Percentage of Locker fees to be distributed to stakers",
          "_stakingPeriod": "Users can unstake after before this period"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "stake(address,uint256,address)": {
        "details": "Controller can stake on behalf of other usersThis mints veToken to the userUsers can stake extra TST to their existing position",
        "params": {
          "_amount": "Amount of TST to stake",
          "_locker": "Address of the Locker",
          "_user": "Address of the user"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(address,address)": {
        "details": "Controller can unstake on behalf of other usersThis burns veToken from the userUser can unstake only after staking period is overAll unclaimed reward will be sent to user"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addController(address)": {
        "notice": "Adds a controller"
      },
      "claimReward(address,address)": {
        "notice": "Claims unclaimed reward"
      },
      "depositReward(address,uint256)": {
        "notice": "Deposits reward token for a Locker.         This reward will be distributed to stakers and Locker"
      },
      "getUnclaimedReward(address,address)": {
        "notice": "Calculate total reward earned by user, and subtract already claimed reward"
      },
      "initialize(address)": {
        "notice": "Staking contract for TST. Stakers earn rewards from Locker fees.         By staking TST, user receives veTST which can be used for governance voting.         veTST is not transferable."
      },
      "pause()": {
        "notice": "Allows owner to pause all staking operations"
      },
      "registerLocker(address,uint256,address,uint256)": {
        "notice": "Registers a new Locker for staking.         Users who delegate TST to the Locker will earn percentage of Locker fees."
      },
      "removeController(address)": {
        "notice": "Removes a controller"
      },
      "setTst(address)": {
        "notice": "Setter for TST"
      },
      "stake(address,uint256,address)": {
        "notice": "Stakes TST to earn rewards"
      },
      "unpause()": {
        "notice": "Allows owner to unpause all staking operations"
      },
      "unstake(address,address)": {
        "notice": "Unstakes TST. Users cannot unstake partial amount."
      },
      "updateRegisteredLocker(address,uint256,uint256)": {
        "notice": "Updates staking percentage and staking period for a registered Locker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 444,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 513,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1610,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 428,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 534,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 540,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 542,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 544,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 546,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 1126,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 3233,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "stakingPosition",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(StakingPosition)3262_storage))"
      },
      {
        "astId": 3238,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "stakingInfo",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_struct(StakingInfo)3277_storage)"
      },
      {
        "astId": 3241,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "TST",
        "offset": 0,
        "slot": "253",
        "type": "t_address"
      },
      {
        "astId": 3246,
        "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
        "label": "isController",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(StakingPosition)3262_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ITstStaking.StakingPosition))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(StakingPosition)3262_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(StakingInfo)3277_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITstStaking.StakingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingInfo)3277_storage"
      },
      "t_mapping(t_address,t_struct(StakingPosition)3262_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITstStaking.StakingPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingPosition)3262_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(StakingInfo)3277_storage": {
        "encoding": "inplace",
        "label": "struct ITstStaking.StakingInfo",
        "members": [
          {
            "astId": 3264,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "stakingPercentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3266,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "rewardToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3268,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "totalStakedAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3270,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "totalReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3272,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "totalClaimedReward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3274,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "currentRewardPerToken",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3276,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "stakingPeriod",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(StakingPosition)3262_storage": {
        "encoding": "inplace",
        "label": "struct ITstStaking.StakingPosition",
        "members": [
          {
            "astId": 3251,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3253,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "unstakedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3255,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "unstakingTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3257,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "claimedReward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3259,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "initRewardPerToken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3261,
            "contract": "contracts/staking/TstStakingLogic.sol:TstStakingLogic",
            "label": "controller",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}