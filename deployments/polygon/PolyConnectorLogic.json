{
  "address": "0xFB3eC82a31c95cEF1A228a7C915aDb706261b4c4",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAcross",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAcross",
          "type": "address"
        }
      ],
      "name": "AcrossUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBurnRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBurnRouter",
          "type": "address"
        }
      ],
      "name": "BurnRouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEthConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEthConnector",
          "type": "address"
        }
      ],
      "name": "EthConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        }
      ],
      "name": "FailedSwapAndUnwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        }
      ],
      "name": "FailedSwapAndUnwrapRune",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLockersProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockersProxy",
          "type": "address"
        }
      ],
      "name": "LockersProxyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "functionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MsgReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        }
      ],
      "name": "NewSwapAndUnwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        }
      ],
      "name": "NewSwapAndUnwrapRune",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        }
      ],
      "name": "RetriedSwapAndUnwrap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thirdPartyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        }
      ],
      "name": "RetriedSwapAndUnwrapRune",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "uniqueCounter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "relayerFeePercentage",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "WithdrawnFundsToSourceChain",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "across",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRouterProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "failedReqs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenSent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handleV3AcrossMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockersProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burnRouterProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_across",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_runeRouterProxy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockersProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "newFailedReqs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "retrySwapAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "retrySwapAndUnwrapRune",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "runeRouterProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_across",
          "type": "address"
        }
      ],
      "name": "setAcross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burnRouterProxy",
          "type": "address"
        }
      ],
      "name": "setBurnRouterProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockersProxy",
          "type": "address"
        }
      ],
      "name": "setLockersProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_runeRouterProxy",
          "type": "address"
        }
      ],
      "name": "setRuneRouterProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "withdrawFundsToSourceChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_uniqueCounter",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "int64",
          "name": "_relayerFeePercentage",
          "type": "int64"
        }
      ],
      "name": "withdrawFundsToSourceChainByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x290fe990c610d864e0944d1b4aaffbe76299ce7c8dee5f78ea6325e617587f74",
  "receipt": {
    "to": null,
    "from": "0x2D3E4AeB9347C224DAe7F1dc1213bE082F6FddEC",
    "contractAddress": "0xFB3eC82a31c95cEF1A228a7C915aDb706261b4c4",
    "transactionIndex": 17,
    "gasUsed": "2905462",
    "logsBloom": "0x
    "blockHash": "0x9ca3f08cc729824102ccc18aa695f35e4a537697234b1c31b905bf9335d9a028",
    "transactionHash": "0x290fe990c610d864e0944d1b4aaffbe76299ce7c8dee5f78ea6325e617587f74",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 63774167,
        "transactionHash": "0x290fe990c610d864e0944d1b4aaffbe76299ce7c8dee5f78ea6325e617587f74",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002d3e4aeb9347c224dae7f1dc1213be082f6fddec",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d4605e1eebe6080000000000000000000000000000000000000000000000002e51f6a4686da7420000000000000000000000000000000000000000000006438ab10414a82aace90000000000000000000000000000000000000000000000002c7d96464981c13a0000000000000000000000000000000000000000000006438c856472c71692f1",
        "logIndex": 90,
        "blockHash": "0x9ca3f08cc729824102ccc18aa695f35e4a537697234b1c31b905bf9335d9a028"
      }
    ],
    "blockNumber": 63774167,
    "cumulativeGasUsed": "5382527",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9195b9a016ea6c0fb926e827d7bc82cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAcross\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAcross\",\"type\":\"address\"}],\"name\":\"AcrossUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBurnRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBurnRouter\",\"type\":\"address\"}],\"name\":\"BurnRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEthConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEthConnector\",\"type\":\"address\"}],\"name\":\"EthConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"}],\"name\":\"FailedSwapAndUnwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"}],\"name\":\"FailedSwapAndUnwrapRune\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockersProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockersProxy\",\"type\":\"address\"}],\"name\":\"LockersProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MsgReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"}],\"name\":\"NewSwapAndUnwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"name\":\"NewSwapAndUnwrapRune\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"}],\"name\":\"RetriedSwapAndUnwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thirdPartyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"name\":\"RetriedSwapAndUnwrapRune\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"relayerFeePercentage\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WithdrawnFundsToSourceChain\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"across\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRouterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"failedReqs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenSent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handleV3AcrossMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockersProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnRouterProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_across\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_runeRouterProxy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockersProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newFailedReqs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"retrySwapAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"retrySwapAndUnwrapRune\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runeRouterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_across\",\"type\":\"address\"}],\"name\":\"setAcross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnRouterProxy\",\"type\":\"address\"}],\"name\":\"setBurnRouterProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockersProxy\",\"type\":\"address\"}],\"name\":\"setLockersProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_runeRouterProxy\",\"type\":\"address\"}],\"name\":\"setRuneRouterProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawFundsToSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniqueCounter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"_relayerFeePercentage\",\"type\":\"int64\"}],\"name\":\"withdrawFundsToSourceChainByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyWithdraw(address,address,uint256)\":{\"details\":\"Only owner can call this\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)\":{\"details\":\"User signs a message for retrying its request\",\"params\":{\"_message\":\"The signed message\",\"_r\":\"Signature r\",\"_s\":\"Signature s\",\"_v\":\"Signature v\"}},\"retrySwapAndUnwrapRune(bytes,uint8,bytes32,bytes32)\":{\"details\":\"User signs a message for retrying its request\",\"params\":{\"_message\":\"The signed message\",\"_r\":\"Signature r\",\"_s\":\"Signature s\",\"_v\":\"Signature v\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFundsToSourceChain(bytes,uint8,bytes32,bytes32)\":{\"params\":{\"_message\":\"The signed message\",\"_r\":\"Signature r\",\"_s\":\"Signature s\",\"_v\":\"Signature v\"}},\"withdrawFundsToSourceChainByOwner(address,uint256,uint256,address,int64)\":{\"details\":\"Owner can only set the relayer fee percentage\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address,address,uint256)\":{\"notice\":\"Withdraws tokens in the emergency case\"},\"handleV3AcrossMessage(address,uint256,address,bytes)\":{\"notice\":\"Process requests coming from Ethereum (using Across V3)\"},\"retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)\":{\"notice\":\"Retry to swap and unwrap tokens\"},\"retrySwapAndUnwrapRune(bytes,uint8,bytes32,bytes32)\":{\"notice\":\"Retry to swap and unwrap tokens\"},\"setAcross(address)\":{\"notice\":\"Setter for AcrossV3\"},\"setBurnRouterProxy(address)\":{\"notice\":\"Setter for BurnRouterProxy\"},\"setLockersProxy(address)\":{\"notice\":\"Setter for LockersProxy\"},\"setRuneRouterProxy(address)\":{\"notice\":\"Setter for runeRouterProxy\"},\"withdrawFundsToSourceChain(bytes,uint8,bytes32,bytes32)\":{\"notice\":\"Send back tokens to the source chain\"},\"withdrawFundsToSourceChainByOwner(address,uint256,uint256,address,int64)\":{\"notice\":\"Send back tokens to the source chain by owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain_connectors/PolyConnectorLogic.sol\":\"PolyConnectorLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@across-protocol/contracts-v2/contracts/interfaces/SpokePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Contains common data structures and functions used by all SpokePool implementations.\\n */\\ninterface SpokePoolInterface {\\n    // This leaf is meant to be decoded in the SpokePool to pay out successful relayers.\\n    struct RelayerRefundLeaf {\\n        // This is the amount to return to the HubPool. This occurs when there is a PoolRebalanceLeaf netSendAmount that\\n        // is negative. This is just the negative of this value.\\n        uint256 amountToReturn;\\n        // Used to verify that this is being executed on the correct destination chainId.\\n        uint256 chainId;\\n        // This array designates how much each of those addresses should be refunded.\\n        uint256[] refundAmounts;\\n        // Used as the index in the bitmap to track whether this leaf has been executed or not.\\n        uint32 leafId;\\n        // The associated L2TokenAddress that these claims apply to.\\n        address l2TokenAddress;\\n        // Must be same length as refundAmounts and designates each address that must be refunded.\\n        address[] refundAddresses;\\n    }\\n\\n    // Stores collection of merkle roots that can be published to this contract from the HubPool, which are referenced\\n    // by \\\"data workers\\\" via inclusion proofs to execute leaves in the roots.\\n    struct RootBundle {\\n        // Merkle root of slow relays that were not fully filled and whose recipient is still owed funds from the LP pool.\\n        bytes32 slowRelayRoot;\\n        // Merkle root of relayer refunds for successful relays.\\n        bytes32 relayerRefundRoot;\\n        // This is a 2D bitmap tracking which leaves in the relayer refund root have been claimed, with max size of\\n        // 256x(2^248) leaves per root.\\n        mapping(uint256 => uint256) claimedBitmap;\\n    }\\n\\n    function setCrossDomainAdmin(address newCrossDomainAdmin) external;\\n\\n    function setHubPool(address newHubPool) external;\\n\\n    function setEnableRoute(\\n        address originToken,\\n        uint256 destinationChainId,\\n        bool enable\\n    ) external;\\n\\n    function pauseDeposits(bool pause) external;\\n\\n    function pauseFills(bool pause) external;\\n\\n    function relayRootBundle(bytes32 relayerRefundRoot, bytes32 slowRelayRoot) external;\\n\\n    function emergencyDeleteRootBundle(uint256 rootBundleId) external;\\n\\n    function deposit(\\n        address recipient,\\n        address originToken,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        int64 relayerFeePct,\\n        uint32 quoteTimestamp,\\n        bytes memory message,\\n        uint256 maxCount\\n    ) external payable;\\n\\n    function depositFor(\\n        address depositor,\\n        address recipient,\\n        address originToken,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        int64 relayerFeePct,\\n        uint32 quoteTimestamp,\\n        bytes memory message,\\n        uint256 maxCount\\n    ) external payable;\\n\\n    function executeRelayerRefundLeaf(\\n        uint32 rootBundleId,\\n        SpokePoolInterface.RelayerRefundLeaf memory relayerRefundLeaf,\\n        bytes32[] memory proof\\n    ) external payable;\\n\\n    function chainId() external view returns (uint256);\\n\\n    error NotEOA();\\n    error InvalidDepositorSignature();\\n    error InvalidRelayerFeePct();\\n    error MaxTransferSizeExceeded();\\n    error InvalidCrossDomainAdmin();\\n    error InvalidHubPool();\\n    error DepositsArePaused();\\n    error FillsArePaused();\\n}\\n\",\"keccak256\":\"0xc90fbd7e66e2e87e9aacbe93c20cc020cd1fc582c4fd4879807e7dc026943ea0\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH, // 32 bytes\\n        P2TR // 32 bytes               \\n    }\",\"keccak256\":\"0x6285b8e2459ab9dda3d9beacad436428979224c9bef81fbf26d84a7994b573d1\",\"license\":\"MIT\"},\"contracts/chain_connectors/PolyConnectorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@across-protocol/contracts-v2/contracts/interfaces/SpokePoolInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\nimport \\\"../routers/interfaces/IBurnRouter.sol\\\";\\nimport \\\"../routers/interfaces/AcrossMessageHandler.sol\\\";\\nimport \\\"../routers/BurnRouterStorage.sol\\\";\\nimport \\\"../lockersManager/interfaces/ILockersManager.sol\\\";\\nimport \\\"./PolyConnectorStorage.sol\\\";\\nimport \\\"./interfaces/IPolyConnector.sol\\\";\\nimport \\\"../rune_router/interfaces/IRuneRouter.sol\\\";\\n\\ncontract PolyConnectorLogic is\\n    IPolyConnector,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    AcrossMessageHandler,\\n    PolyConnectorStorage\\n{\\n    error ZeroAddress();\\n\\n    modifier nonZeroAddress(address _address) {\\n        if (_address == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _lockersProxy,\\n        address _burnRouterProxy,\\n        address _across,\\n        address _runeRouterProxy\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        lockersProxy = _lockersProxy;\\n        burnRouterProxy = _burnRouterProxy;\\n        across = _across;\\n        runeRouterProxy = _runeRouterProxy;\\n    }\\n\\n    /// @notice Setter for LockersProxy\\n    function setLockersProxy(\\n        address _lockersProxy\\n    ) external override onlyOwner nonZeroAddress(_lockersProxy) {\\n        lockersProxy = _lockersProxy;\\n    }\\n\\n    /// @notice Setter for BurnRouterProxy\\n    function setBurnRouterProxy(\\n        address _burnRouterProxy\\n    ) external override onlyOwner nonZeroAddress(_burnRouterProxy) {\\n        burnRouterProxy = _burnRouterProxy;\\n    }\\n\\n    /// @notice Setter for runeRouterProxy\\n    function setRuneRouterProxy(\\n        address _runeRouterProxy\\n    ) external override onlyOwner nonZeroAddress(_runeRouterProxy) {\\n        runeRouterProxy = _runeRouterProxy;\\n    }\\n\\n    /// @notice Setter for AcrossV3\\n    function setAcross(\\n        address _across\\n    ) external override onlyOwner nonZeroAddress(_across) {\\n        across = _across;\\n    }\\n\\n    /// @notice Process requests coming from Ethereum (using Across V3)\\n    function handleV3AcrossMessage(\\n        address _tokenSent,\\n        uint256 _amount,\\n        address,\\n        bytes memory _message\\n    ) external override nonReentrant {\\n        // Check the msg origin\\n        require(msg.sender == across, \\\"PolygonConnectorLogic: not across\\\");\\n\\n        // Determine the function call\\n        (string memory purpose, uint256 uniqueCounter, uint256 chainId) = abi\\n            .decode(_message, (string, uint256, uint256));\\n        emit MsgReceived(purpose, uniqueCounter, chainId, _message);\\n\\n        if (_isEqualString(purpose, \\\"swapAndUnwrap\\\")) {\\n            _swapAndUnwrap(_amount, _message, _tokenSent);\\n        }\\n\\n        if (_isEqualString(purpose, \\\"swapAndUnwrapRune\\\")) {\\n            _swapAndUnwrapRune(_amount, _message, _tokenSent);\\n        }\\n    }\\n\\n    /// @notice Send back tokens to the source chain\\n    /// @param _message The signed message\\n    /// @param _v Signature v\\n    /// @param _r Signature r\\n    /// @param _s Signature s\\n    function withdrawFundsToSourceChain(\\n        bytes memory _message,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override nonReentrant {\\n        // Find user address after verifying the signature\\n        address user = _verifySig(_message, _r, _s, _v);\\n\\n        (\\n            uint256 _chainId,\\n            uint256 _uniqueCounter,\\n            address _token,\\n            int64 _relayerFeePercentage\\n        ) = abi.decode(_message, (uint256, uint256, address, int64));\\n\\n        uint256 _amount = newFailedReqs[user][_chainId][_uniqueCounter][_token];\\n        // Update witholded amount\\n        delete newFailedReqs[user][_chainId][_uniqueCounter][_token];\\n\\n        require(_amount > 0, \\\"PolygonConnectorLogic: already withdrawn\\\");\\n\\n        // Send token back to the user\\n        _sendTokenUsingAcross(\\n            user,\\n            _chainId,\\n            _token,\\n            _amount,\\n            _relayerFeePercentage\\n        );\\n\\n        emit WithdrawnFundsToSourceChain(\\n            _uniqueCounter,\\n            _chainId,\\n            _token,\\n            _amount,\\n            _relayerFeePercentage,\\n            user\\n        );\\n    }\\n\\n    /// @notice Send back tokens to the source chain by owner\\n    /// @dev Owner can only set the relayer fee percentage\\n    function withdrawFundsToSourceChainByOwner(\\n        address _user,\\n        uint256 _chainId,\\n        uint256 _uniqueCounter,\\n        address _token,\\n        int64 _relayerFeePercentage\\n    ) external nonReentrant onlyOwner {\\n\\n        uint256 _amount = newFailedReqs[_user][_chainId][_uniqueCounter][_token];\\n        // Update witholded amount\\n        delete newFailedReqs[_user][_chainId][_uniqueCounter][_token];\\n\\n        require(_amount > 0, \\\"PolygonConnectorLogic: already withdrawn\\\");\\n\\n        // Send token back to the user\\n        _sendTokenUsingAcross(\\n            _user,\\n            _chainId,\\n            _token,\\n            _amount,\\n            _relayerFeePercentage\\n        );\\n\\n        emit WithdrawnFundsToSourceChain(\\n            _uniqueCounter,\\n            _chainId,\\n            _token,\\n            _amount,\\n            _relayerFeePercentage,\\n            _user\\n        );\\n    }\\n\\n    /// @notice Retry to swap and unwrap tokens\\n    /// @dev User signs a message for retrying its request\\n    /// @param _message The signed message\\n    /// @param _v Signature v\\n    /// @param _r Signature r\\n    /// @param _s Signature s\\n    function retrySwapAndUnwrap(\\n        bytes memory _message,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override nonReentrant {\\n        // Find user address after verifying the signature\\n        address user = _verifySig(_message, _r, _s, _v);\\n\\n        (\\n            uint256 _chainId,\\n            uint256 _uniqueCounter,\\n            address _token,\\n            address exchangeConnector,\\n            uint256 outputAmount,\\n            bytes memory userScript,\\n            ScriptTypes scriptType,\\n            bytes memory lockerLockingScript,\\n            address[] memory path,\\n            uint256 thirdPartyId\\n        ) = abi.decode(\\n                _message,\\n                (\\n                    uint256,\\n                    uint256,\\n                    address,\\n                    address,\\n                    uint256,\\n                    bytes,\\n                    ScriptTypes,\\n                    bytes,\\n                    address[],\\n                    uint256\\n                )\\n            );\\n\\n        uint256 _amount = newFailedReqs[user][_chainId][_uniqueCounter][_token];\\n        delete newFailedReqs[user][_chainId][_uniqueCounter][_token];\\n        require(_amount > 0, \\\"PolygonConnectorLogic: already retried\\\");\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = _amount;\\n        amounts[1] = outputAmount;\\n\\n        IERC20(path[0]).approve(burnRouterProxy, _amount);\\n        IBurnRouter(burnRouterProxy).swapAndUnwrap(\\n            exchangeConnector,\\n            amounts,\\n            true, // Input token amount is fixed\\n            path,\\n            block.timestamp,\\n            userScript,\\n            scriptType,\\n            lockerLockingScript,\\n            thirdPartyId\\n        );\\n\\n        address lockerTargetAddress = ILockersManager(lockersProxy)\\n            .getLockerTargetAddress(lockerLockingScript);\\n\\n        emit RetriedSwapAndUnwrap(\\n            _uniqueCounter,\\n            _chainId,\\n            exchangeConnector,\\n            _token,\\n            _amount,\\n            user,\\n            userScript,\\n            scriptType,\\n            lockerTargetAddress,\\n            BurnRouterStorage(burnRouterProxy).burnRequestCounter(\\n                lockerTargetAddress\\n            ) - 1,\\n            path,\\n            thirdPartyId\\n        );\\n    }\\n\\n    /// @notice Retry to swap and unwrap tokens\\n    /// @dev User signs a message for retrying its request\\n    /// @param _message The signed message\\n    /// @param _v Signature v\\n    /// @param _r Signature r\\n    /// @param _s Signature s\\n    function retrySwapAndUnwrapRune(\\n        bytes memory _message,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override nonReentrant {\\n        // Find user address after verifying the signature\\n        address user = _verifySig(_message, _r, _s, _v);\\n\\n        exchangeForRuneArguments memory arguments = _decodeReqRune(_message);\\n\\n        uint256 _amount = newFailedReqs[user][arguments.chainId][\\n            arguments.uniqueCounter\\n        ][arguments.path[0]];\\n        delete newFailedReqs[user][arguments.chainId][arguments.uniqueCounter][\\n            arguments.path[0]\\n        ];\\n        require(_amount > 0, \\\"PolygonConnectorLogic: already retried\\\");\\n\\n        IERC20(arguments.path[0]).approve(runeRouterProxy, _amount);\\n\\n        // Get unwrap fee from contract\\n        uint unwrapFee = IRuneRouter(runeRouterProxy).unwrapFee();\\n\\n        IRuneRouter(runeRouterProxy).unwrapRune{value: unwrapFee}(\\n            arguments.thirdPartyId,\\n            arguments.internalId,\\n            arguments.outputAmount,\\n            arguments.userScript.userScript,\\n            arguments.userScript.scriptType,\\n            arguments.appId,\\n            _amount,\\n            arguments.path\\n        );\\n\\n        emit RetriedSwapAndUnwrapRune(\\n            arguments.chainId,\\n            arguments.user,\\n            arguments.thirdPartyId,\\n            arguments.internalId,\\n            arguments.appId,\\n            arguments.outputAmount,\\n            _amount,\\n            arguments.path,\\n            arguments.userScript.userScript,\\n            arguments.userScript.scriptType,\\n            IRuneRouter(runeRouterProxy).totalRuneUnwrapRequests() - 1\\n        );\\n    }\\n\\n    /// @notice Withdraws tokens in the emergency case\\n    /// @dev Only owner can call this\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        if (_token == ETH_ADDR) _to.call{value: _amount}(\\\"\\\");\\n        else IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Helper for exchanging token for BTC\\n    function _swapAndUnwrap(\\n        uint256 _amount,\\n        bytes memory _message,\\n        address _tokenSent\\n    ) internal {\\n        exchangeForBtcArguments memory arguments = _decodeReq(_message);\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = _amount;\\n        amounts[1] = arguments.outputAmount;\\n\\n        IERC20(_tokenSent).approve(burnRouterProxy, _amount);\\n\\n        try\\n            IBurnRouter(burnRouterProxy).swapAndUnwrap(\\n                arguments.exchangeConnector,\\n                amounts,\\n                arguments.isInputFixed,\\n                arguments.path,\\n                block.timestamp,\\n                arguments.scripts.userScript,\\n                arguments.scripts.scriptType,\\n                arguments.scripts.lockerLockingScript,\\n                arguments.thirdParty\\n            )\\n        {\\n            address lockerTargetAddress = ILockersManager(lockersProxy)\\n                .getLockerTargetAddress(arguments.scripts.lockerLockingScript);\\n\\n            emit NewSwapAndUnwrap(\\n                arguments.uniqueCounter,\\n                arguments.chainId,\\n                arguments.exchangeConnector,\\n                _tokenSent,\\n                _amount,\\n                arguments.user,\\n                arguments.scripts.userScript,\\n                arguments.scripts.scriptType,\\n                lockerTargetAddress,\\n                BurnRouterStorage(burnRouterProxy).burnRequestCounter(\\n                    lockerTargetAddress\\n                ) - 1,\\n                arguments.path,\\n                arguments.thirdParty\\n            );\\n        } catch {\\n            // Remove spending allowance\\n            IERC20(_tokenSent).approve(burnRouterProxy, 0);\\n\\n            // Save token amount so user can withdraw it in future\\n            newFailedReqs[arguments.user][arguments.chainId][\\n                arguments.uniqueCounter\\n            ][_tokenSent] = _amount;\\n\\n            emit FailedSwapAndUnwrap(\\n                arguments.uniqueCounter,\\n                arguments.chainId,\\n                arguments.exchangeConnector,\\n                _tokenSent,\\n                _amount,\\n                arguments.user,\\n                arguments.scripts.userScript,\\n                arguments.scripts.scriptType,\\n                arguments.path,\\n                arguments.thirdParty\\n            );\\n        }\\n    }\\n\\n    /// @notice Helper for exchanging token for RUNE\\n    function _swapAndUnwrapRune(\\n        uint256 _amount,\\n        bytes memory _message,\\n        address _tokenSent\\n    ) internal {\\n        exchangeForRuneArguments memory arguments = _decodeReqRune(_message);\\n\\n        IERC20(_tokenSent).approve(runeRouterProxy, _amount);\\n\\n        // Get unwrap fee from contract\\n        // We assume that contract owner has funded the contract with enough native token\\n        // Owner get this fee from users in the source chain connector contract\\n        uint unwrapFee = IRuneRouter(runeRouterProxy).unwrapFee();\\n\\n        try\\n            IRuneRouter(runeRouterProxy).unwrapRune{value: unwrapFee}(\\n                arguments.thirdPartyId,\\n                arguments.internalId,\\n                arguments.outputAmount,\\n                arguments.userScript.userScript,\\n                arguments.userScript.scriptType,\\n                arguments.appId,\\n                _amount,\\n                arguments.path\\n            )\\n        {\\n            emit NewSwapAndUnwrapRune(\\n                arguments.chainId,\\n                arguments.user,\\n                arguments.thirdPartyId,\\n                arguments.internalId,\\n                arguments.appId,\\n                arguments.outputAmount,\\n                _amount,\\n                arguments.path,\\n                arguments.userScript.userScript,\\n                arguments.userScript.scriptType,\\n                IRuneRouter(runeRouterProxy).totalRuneUnwrapRequests() - 1\\n            );\\n        } catch {\\n            // Remove spending allowance\\n            IERC20(_tokenSent).approve(runeRouterProxy, 0);\\n\\n            // Save token amount so user can withdraw it in future\\n            newFailedReqs[arguments.user][arguments.chainId][\\n                arguments.uniqueCounter\\n            ][_tokenSent] = _amount;\\n\\n            emit FailedSwapAndUnwrapRune(\\n                arguments.chainId,\\n                arguments.user,\\n                arguments.thirdPartyId,\\n                arguments.internalId,\\n                arguments.appId,\\n                arguments.outputAmount,\\n                _amount,\\n                arguments.path,\\n                arguments.userScript.userScript,\\n                arguments.userScript.scriptType\\n            );\\n        }\\n    }\\n\\n    function _decodeReq(\\n        bytes memory _message\\n    ) private pure returns (exchangeForBtcArguments memory arguments) {\\n        (\\n            ,\\n            // purpose\\n            arguments.uniqueCounter,\\n            arguments.chainId,\\n            arguments.user,\\n            arguments.exchangeConnector,\\n            arguments.outputAmount,\\n            arguments.isInputFixed,\\n            arguments.path,\\n            arguments.scripts\\n        ) = abi.decode(\\n            _message,\\n            (\\n                string,\\n                uint256,\\n                uint256,\\n                address,\\n                address,\\n                uint256,\\n                bool,\\n                address[],\\n                UserAndLockerScript\\n            )\\n        );\\n\\n        (, , , , , , , , , arguments.thirdParty) = abi.decode(\\n            _message,\\n            (\\n                string,\\n                uint256,\\n                uint256,\\n                address,\\n                address,\\n                uint256,\\n                bool,\\n                address[],\\n                UserAndLockerScript,\\n                uint256\\n            )\\n        );\\n    }\\n\\n    function _decodeReqRune(\\n        bytes memory _message\\n    ) private pure returns (exchangeForRuneArguments memory arguments) {\\n        (\\n            , // purpose,\\n            arguments.uniqueCounter,\\n            arguments.chainId,\\n            arguments.user,\\n            arguments.appId,\\n            arguments.outputAmount,\\n            arguments.internalId, \\n            , // arguments.path,\\n            , // arguments.userScript,\\n            // arguments.thirdPartyId\\n        ) = abi.decode(\\n            _message,\\n            (\\n                string,\\n                uint256,\\n                uint256,\\n                address,\\n                uint256,\\n                uint256,\\n                uint256,\\n                address[],\\n                UserScript,\\n                uint256\\n            )\\n        );\\n\\n        // to handle stack too deep\\n\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            arguments.path,\\n            arguments.userScript,\\n            arguments.thirdPartyId\\n        ) = abi.decode(\\n            _message,\\n            (\\n                string,\\n                uint256,\\n                uint256,\\n                address,\\n                uint256,\\n                uint256,\\n                uint256,\\n                address[],\\n                UserScript,\\n                uint256\\n            )\\n        );\\n    }\\n\\n    /// @notice Sends tokens to Ethereum using Across\\n    /// @dev This will be used for withdrawing funds\\n    function _sendTokenUsingAcross(\\n        address _user,\\n        uint256 _chainId,\\n        address _token,\\n        uint256 _amount,\\n        int64 _relayerFeePercentage\\n    ) internal {\\n        bytes memory nullData;\\n        IERC20(_token).approve(across, _amount);\\n\\n        SpokePoolInterface(across).depositFor(\\n            _user,\\n            _user,\\n            _token,\\n            _amount,\\n            _chainId,\\n            _relayerFeePercentage,\\n            uint32(block.timestamp),\\n            nullData,\\n            115792089237316195423570985008687907853269984665640564039457584007913129639935\\n        );\\n    }\\n\\n    function _verifySig(\\n        bytes memory message,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) internal pure returns (address) {\\n        // Compute the message hash\\n        bytes32 messageHash = keccak256(message);\\n\\n        // Prefix the message hash as per the Ethereum signing standard\\n        bytes32 ethSignedMessageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n        );\\n\\n        // Verify the message using ecrecover\\n        address signer = ecrecover(ethSignedMessageHash, v, r, s);\\n        require(signer != address(0), \\\"PolygonConnectorLogic: Invalid sig\\\");\\n\\n        return signer;\\n    }\\n\\n    /// @notice Checks if two strings are equal\\n    function _isEqualString(\\n        string memory _a,\\n        string memory _b\\n    ) internal pure returns (bool) {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n}\\n\",\"keccak256\":\"0xb8ee65e45bd00e26c5031436843bc2cba12a120dd4337ad197e73d2bf44210cd\",\"license\":\"MIT\"},\"contracts/chain_connectors/PolyConnectorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IPolyConnector.sol\\\";\\n\\nabstract contract PolyConnectorStorage is IPolyConnector {\\n    struct Bid {\\n        uint256 amount;\\n        address token;\\n    }\\n\\n    struct UserScriptData {\\n        bytes userScript;\\n        ScriptTypes scriptType;\\n    }\\n\\n    address public constant ETH_ADDR =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public override lockersProxy;\\n    address public override burnRouterProxy;\\n    address public override across;\\n    mapping(address => mapping(uint256 => mapping(address => uint256)))\\n        public\\n        override failedReqs;\\n    // ^ Mapping from [user][chainId][token] to amount\\n    mapping(address => mapping(uint256 => mapping(uint256 => mapping(address => uint256))))\\n        public\\n        override newFailedReqs;\\n    // ^ Mapping from [user][chainId][reqId][token] to amount\\n\\n    // New variables for RUNE\\n    address public override runeRouterProxy;\\n}\\n\",\"keccak256\":\"0x0afbd189caf1d60fba62f9fab3a8cf6ea9c7bf39fb70f094481b3bdeee75e0e2\",\"license\":\"MIT\"},\"contracts/chain_connectors/interfaces/IPolyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IPolyConnector {\\n    // Structs\\n\\n    struct UserScript {\\n        bytes userScript;\\n        ScriptTypes scriptType;\\n    }\\n\\n    struct UserAndLockerScript {\\n        bytes userScript;\\n        ScriptTypes scriptType;\\n        bytes lockerLockingScript;\\n    }\\n\\n    struct exchangeForBtcArguments {\\n        uint256 uniqueCounter;\\n        uint256 chainId;\\n        address user;\\n        address exchangeConnector;\\n        uint256 outputAmount;\\n        bool isInputFixed;\\n        address[] path;\\n        UserAndLockerScript scripts;\\n        uint256 thirdParty;\\n    }\\n\\n    struct exchangeForRuneArguments {\\n        uint256 uniqueCounter;\\n        uint256 chainId;\\n        address user;\\n        uint256 thirdPartyId;\\n        uint256 internalId;\\n        uint256 appId;\\n        uint256 outputAmount;\\n        address[] path;\\n        UserScript userScript;\\n    }\\n\\n    // Events\\n\\n    event MsgReceived(\\n        string functionName,\\n        uint256 uniqueCounter,\\n        uint256 chainId,\\n        bytes data\\n    );\\n\\n    event NewSwapAndUnwrap(\\n        uint256 uniqueCounter,\\n        uint256 chainId,\\n        address exchangeConnector,\\n        address inputToken,\\n        uint256 inputAmount,\\n        address indexed userTargetAddress,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        address lockerTargetAddress,\\n        uint256 requestIdOfLocker,\\n        address[] path,\\n        uint256 thirdPartyId\\n    );\\n\\n    event FailedSwapAndUnwrap(\\n        uint256 uniqueCounter,\\n        uint256 chainId,\\n        address exchangeConnector,\\n        address inputToken,\\n        uint256 inputAmount,\\n        address indexed userTargetAddress,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        address[] path,\\n        uint256 thirdPartyId\\n    );\\n\\n    event RetriedSwapAndUnwrap(\\n        uint256 uniqueCounter,\\n        uint256 chainId,\\n        address exchangeConnector,\\n        address inputToken,\\n        uint256 inputAmount,\\n        address indexed userTargetAddress,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        address lockerTargetAddress,\\n        uint256 requestIdOfLocker,\\n        address[] path,\\n        uint256 thirdPartyId\\n    );\\n\\n    event WithdrawnFundsToSourceChain(\\n        uint256 uniqueCounter,\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        int64 relayerFeePercentage,\\n        address user\\n    );\\n\\n    event NewSwapAndUnwrapRune(\\n        uint256 chainId,\\n        address indexed userTargetAddress,\\n        uint256 thirdPartyId,\\n        uint256 internalId,\\n        uint256 appId,\\n        uint256 amount,\\n        uint256 inputAmount,\\n        address[] path,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        uint256 requestIdOfLocker\\n    );\\n\\n    event FailedSwapAndUnwrapRune(\\n        uint256 chainId,\\n        address indexed userTargetAddress,\\n        uint256 thirdPartyId,\\n        uint256 internalId,\\n        uint256 appId,\\n        uint256 amount,\\n        uint256 inputAmount,\\n        address[] path,\\n        bytes userScript,\\n        ScriptTypes scriptType\\n    );\\n\\n    event RetriedSwapAndUnwrapRune(\\n        uint256 chainId,\\n        address indexed userTargetAddress,\\n        uint256 thirdPartyId,\\n        uint256 internalId,\\n        uint256 appId,\\n        uint256 amount,\\n        uint256 inputAmount,\\n        address[] path,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        uint256 requestIdOfLocker\\n    );\\n\\n    event AcrossUpdated(address oldAcross, address newAcross);\\n\\n    event EthConnectorUpdated(address oldEthConnector, address newEthConnector);\\n\\n    event BurnRouterUpdated(address oldBurnRouter, address newBurnRouter);\\n\\n    event LockersProxyUpdated(address oldLockersProxy, address newLockersProxy);\\n\\n    // Read-only functions\\n\\n    function lockersProxy() external view returns (address);\\n\\n    function burnRouterProxy() external view returns (address);\\n\\n    function across() external view returns (address);\\n\\n    function failedReqs(address, uint256, address) external returns (uint256);\\n\\n    function runeRouterProxy() external view returns (address);\\n\\n    function newFailedReqs(\\n        address,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (uint256);\\n\\n    // State-changing functions\\n\\n    function setAcross(address _across) external;\\n\\n    function setBurnRouterProxy(address _burnRouterProxy) external;\\n\\n    function setRuneRouterProxy(address _runeRouterProxy) external;\\n\\n    function setLockersProxy(address _lockersProxy) external;\\n\\n    function withdrawFundsToSourceChain(\\n        bytes memory _message,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function retrySwapAndUnwrap(\\n        bytes memory _message,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function retrySwapAndUnwrapRune(\\n        bytes memory _message,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3a1aebcb88a510defdb876db536abd65d5e93075e35cb2792f037ba1dd0982ed\",\"license\":\"MIT\"},\"contracts/lockersManager/interfaces/ILockersManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface ILockersManager {\\n    /// @notice Structure for registering lockers\\n    /// @param lockerLockingScript Locker redeem script\\n    /// @param lockerRescueType Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript Locker script in case of getting BTCs back\\n    /// @param TSTLockedAmount Amount of TST locked by Locker\\n    /// @param collateralTokenLockedAmount Amount of collateral token locked by Locker\\n    /// @param netMinted Total minted - total burnt\\n    /// @param slashingTeleBTCAmount Total amount of teleBTC a locker must be slashed\\n    /// @param reservedCollateralTokenForSlash Total collateral token reserved for slashing locker\\n    /// @param isLocker True if it's a Locker\\n    /// @param isCandidate True if it's a candidate\\n    /// @param isScriptHash NOT USED\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint256 TSTLockedAmount;\\n        uint256 collateralTokenLockedAmount;\\n        uint256 netMinted;\\n        uint256 slashingTeleBTCAmount;\\n        uint256 reservedCollateralTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint256 OneHundredPercent;\\n        uint256 HealthFactor;\\n        uint256 UpperHealthFactor;\\n        uint256 MaxLockerFee;\\n        uint256 NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address TeleportSystemToken;\\n        address teleBTC;\\n        address burnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n        uint256 minRequiredTSTLockedAmount;\\n        uint256 minRequiredTNTLockedAmount;\\n        uint256 lockerPercentageFee;\\n        uint256 collateralRatio;\\n        uint256 liquidationRatio;\\n        uint256 priceWithDiscountRatio;\\n        uint256 inactivationDelay;\\n    }\\n\\n    struct becomeLockerArguments {\\n        ILockersManager.lockersLibConstants libConstants;\\n        ILockersManager.lockersLibParam libParams;\\n        address theLockerTargetAddress;\\n        address collateralToken;\\n        uint256 collateralDecimal;\\n        uint256 _lockedTSTAmount;\\n        uint256 _lockedCollateralTokenAmount;\\n        bytes _candidateLockingScript;\\n        ScriptTypes _lockerRescueType;\\n        bytes _lockerRescueScript;\\n    }\\n\\n    // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenLockedAmount\\n    );\\n\\n    event RequestInactivateLocker(\\n        address indexed lockerTargetAddress,\\n        uint256 indexed inactivationTimestamp,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address collateralToken,\\n        uint collateralTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event ActivateLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address collateralToken,\\n        uint collateralTokenLockedAmount,\\n        uint netMinted\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTLockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenLockedAmount,\\n        uint reliabilityFactor,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TSTUnlockedAmount,\\n        address indexed collateralToken,\\n        uint collateralTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        address collateralToken,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint256 amount,\\n        address indexed recipient,\\n        uint256 slashedCollateralAmount,\\n        uint256 slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        address collateralToken,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        address indexed collateralToken,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        address indexed collateralToken,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        address indexed collateralToken,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint256 mintedAmount,\\n        uint256 lockerFee,\\n        uint256 mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint256 burntAmount,\\n        uint256 lockerFee,\\n        uint256 burningTime\\n    );\\n\\n    event NewCollateralToken(address token, uint decimal);\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n    event BurnerAdded(address indexed account);\\n\\n    event BurnerRemoved(address indexed account);\\n\\n    event NewLockerPercentageFee(\\n        uint256 oldLockerPercentageFee,\\n        uint256 newLockerPercentageFee\\n    );\\n\\n    event NewReliabilityFactor(\\n        address lockerTargetAddress,\\n        uint oldReliabilityFactor,\\n        uint newReliabilityFactor\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint256 oldPriceWithDiscountRatio,\\n        uint256 newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTSTLockedAmount(\\n        uint256 oldMinRequiredTSTLockedAmount,\\n        uint256 newMinRequiredTSTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint256 oldMinRequiredTNTLockedAmount,\\n        uint256 newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\\n\\n    event NewBurnRouter(address oldBurnRouter, address newBurnRouter);\\n\\n    event NewTST(address oldTST, address newTST);\\n\\n    event NewTeleBTC(address oldTeleBTC, address newTeleBTC);\\n\\n    event NewCollateralRatio(\\n        uint256 oldCollateralRatio,\\n        uint256 newCollateralRatio\\n    );\\n\\n    event NewLiquidationRatio(\\n        uint256 oldLiquidationRatio,\\n        uint256 newLiquidationRatio\\n    );\\n\\n    // Read-only functions\\n\\n    function TeleportSystemToken() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function burnRouter() external view returns (address);\\n\\n    function exchangeConnector() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function minRequiredTSTLockedAmount() external view returns (uint256);\\n\\n    function minRequiredTNTLockedAmount() external view returns (uint256);\\n\\n    function lockerPercentageFee() external view returns (uint256);\\n\\n    function collateralRatio() external view returns (uint256);\\n\\n    function liquidationRatio() external view returns (uint256);\\n\\n    function priceWithDiscountRatio() external view returns (uint256);\\n\\n    function totalNumberOfCandidates() external view returns (uint256);\\n\\n    function totalNumberOfLockers() external view returns (uint256);\\n\\n    function getLockerTargetAddress(\\n        bytes calldata _lockerLockingScript\\n    ) external view returns (address);\\n\\n    function isLocker(\\n        bytes calldata _lockerLockingScript\\n    ) external view returns (bool);\\n\\n    function isLockerActive(\\n        address _lockerTargetAddress\\n    ) external view returns (bool);\\n\\n    function getLockerHealthFactor(\\n        address _lockerTargetAddress\\n    ) external view returns (uint256);\\n\\n    function minters(address) external view returns (bool);\\n\\n    function burners(address) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addCollateralToken(address _token, uint _decimal) external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(\\n        bytes calldata _lockerLockingScript,\\n        address _receiver,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function burn(\\n        bytes calldata _lockerLockingScript,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function setRewardDistributor(address _rewardDistributor) external;\\n\\n    function setTST(address _TST) external;\\n\\n    function setLockerPercentageFee(uint256 _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(\\n        uint256 _priceWithDiscountRatio\\n    ) external;\\n\\n    function setMinRequiredTSTLockedAmount(\\n        uint256 _minRequiredTSTLockedAmount\\n    ) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setBurnRouter(address _burnRouter) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setLockerReliabilityFactor(\\n        address _lockerTargetAddress,\\n        uint _reliabilityFactor\\n    ) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint256 _liquidationRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint256 _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint256 _addingCollateralTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint256 _removingCollateralTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        address _collateralToken,\\n        uint _lockedTSTAmount,\\n        uint _lockedCollateralTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(\\n        address _lockerTargetAddress,\\n        uint256 _lockerReliabilityFactor\\n    ) external returns (bool);\\n\\n    function requestInactivation() external returns (bool);\\n\\n    function requestActivation() external returns (bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint256 _rewardAmount,\\n        address _slasher,\\n        uint256 _amount,\\n        address _recipient\\n    ) external returns (bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint256 _rewardAmount,\\n        address _slasher,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint256 _collateralAmount\\n    ) external returns (bool);\\n\\n    function getLockerCapacity(\\n        address _lockerTargetAddress\\n    ) external returns (uint256 theLockerCapacity);\\n}\\n\",\"keccak256\":\"0xbdd3fa0b4a0b31c34afae914f66d2c8e28bdf28bcc8d0d7e85aa563e9f9d4fca\",\"license\":\"MIT\"},\"contracts/routers/BurnRouterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"./interfaces/IBurnRouter.sol\\\";\\n\\nabstract contract BurnRouterStorage is IBurnRouter {\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    address public override bitcoinFeeOracle;\\n    uint public override startingBlockNumber;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    \\n    mapping(address => burnRequest[]) public burnRequests; \\n    // ^ Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; \\n    // ^ Mapping that shows a txId has been submitted to pay a burn request\\n\\n}\",\"keccak256\":\"0x7d070b246c54b207911d56bae926d134732bb3cb434a0603a6890a55e4b4149e\",\"license\":\"MIT\"},\"contracts/routers/interfaces/AcrossMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\n/// @notice This interface is expected to be implemented by any contract\\n///         that expects to recieve messages from the SpokePool.\\ninterface AcrossMessageHandler {\\n    function handleV3AcrossMessage(\\n        address tokenSent,\\n        uint256 amount,\\n        address relayer,\\n        bytes memory message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8bc7c87bf386e4bb2cb01eb48b332d38c029f20ce3684f016a044c3bfa621772\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IBurnRouter {\\n    // Structures\\n\\n    /// @notice Structure for recording cc burn requests\\n    /// @param amount of tokens that user wants to burn\\n    /// @param burntAmount that user will receive (after reducing fees from amount)\\n    /// @param sender Address of user who requests burning\\n    /// @param userScript Script hash of the user on Bitcoin\\n    /// @param deadline of locker for executing the request\\n    /// @param isTransferred True if the request has been processed\\n    /// @param scriptType The script type of the user\\n    /// @param requestIdOfLocker The index of the request for a specific locker\\n    struct burnRequest {\\n        uint amount;\\n        uint burntAmount;\\n        address sender;\\n        bytes userScript;\\n        uint deadline;\\n        bool isTransferred;\\n        ScriptTypes scriptType;\\n        uint requestIdOfLocker;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when a burn request gets submitted\\n    /// @param userScript Script of user on Bitcoin\\n    /// @param scriptType Script type of the user (for bitcoin address)\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param userTargetAddress Address of the user on EVM\\n    /// @param requestIdOfLocker Index of request between Locker's burn requests\\n    /// @param deadline of Locker for executing the request (in terms of Bitcoin blocks)\\n    /// @param thirdPartyId Id of third party\\n    /// @param inputToken inputToken address\\n    /// @param amounts [inputAmount, teleBTCAmount, burntAmount]\\n    /// @param fees [network fee, locker fee, protocol fee, third party fee]\\n    event NewUnwrap(\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        address lockerTargetAddress,\\n        address indexed userTargetAddress,\\n        uint requestIdOfLocker,\\n        uint indexed deadline,\\n        uint thirdPartyId,\\n        address inputToken,\\n        uint[3] amounts,\\n        uint[4] fees\\n    );\\n\\n    /// @notice Emits when a burn proof is provided\\n    /// @param lockerTargetAddress Address of Locker\\n    /// @param requestIdOfLocker Index of paid request of among Locker's requests\\n    /// @param bitcoinTxId The hash of tx that paid a burn request\\n    /// @param bitcoinTxOutputIndex The output index in tx\\n    event PaidUnwrap(\\n        address indexed lockerTargetAddress,\\n        uint requestIdOfLocker,\\n        bytes32 bitcoinTxId,\\n        uint bitcoinTxOutputIndex\\n    );\\n\\n    /// @notice  Emits when a locker gets slashed for withdrawing BTC without proper reason\\n    /// @param _lockerTargetAddress\\tLocker's address on the target chain\\n    /// @param _blockNumber\\tBlock number of the malicious tx\\n    /// @param txId\\tTransaction ID of the malicious tx\\n    /// @param amount Slashed amount\\n    event LockerDispute(\\n        address _lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint _blockNumber,\\n        bytes32 txId,\\n        uint amount\\n    );\\n\\n    event BurnDispute(\\n        address indexed userTargetAddress,\\n        address indexed _lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint requestIdOfLocker\\n    );\\n\\n    /// @notice Emits when relay address is updated\\n    event NewRelay(address oldRelay, address newRelay);\\n\\n    /// @notice Emits when treasury address is updated\\n    event NewTreasury(address oldTreasury, address newTreasury);\\n\\n    /// @notice Emits when lockers address is updated\\n    event NewLockers(address oldLockers, address newLockers);\\n\\n    /// @notice Emits when TeleBTC address is updated\\n    event NewTeleBTC(address oldTeleBTC, address newTeleBTC);\\n\\n    /// @notice Emits when transfer deadline is updated\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline,\\n        uint newTransferDeadline\\n    );\\n\\n    /// @notice Emits when percentage fee is updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee,\\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice Emits when slasher percentage fee is updated\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee,\\n        uint newSlasherPercentageFee\\n    );\\n\\n    /// @notice Emits when network fee is updated\\n    event NewNetworkFee(uint oldNetworkFee, uint newNetworkFee);\\n\\n    /// @notice Emits when network fee oracle is updated\\n    event NewNetworkFeeOracle(\\n        address oldNetworkFeeOracle,\\n        address newNetworkFeeOracle\\n    );\\n\\n    /// @notice Emits when changes made to third party address\\n    event NewThirdPartyAddress(\\n        uint thirdPartyId,\\n        address oldThirdPartyAddress,\\n        address newThirdPartyAddress\\n    );\\n\\n    /// @notice Emits when changes made to third party fee\\n    event NewThirdPartyFee(\\n        uint thirdPartyId,\\n        uint oldThirdPartyFee,\\n        uint newThirdPartyFee\\n    );\\n\\n\\tevent NewWrappedNativeToken(\\n        address oldWrappedNativeToken,\\n        address newWrappedNativeToken\\n    );\\n\\n    // Read-only functions\\n\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint _index\\n    ) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function lockers() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function transferDeadline() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n\\n    function slasherPercentageReward() external view returns (uint);\\n\\n    function bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n    function isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n    function bitcoinFeeOracle() external view returns (address);\\n\\n    // State-changing functions\\n\\n    function setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setLockers(address _lockers) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function setTransferDeadline(uint _transferDeadline) external;\\n\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n    function setNetworkFee(uint _networkFee) external;\\n\\n    function setNetworkFeeOracle(address _networkFeeOracle) external;\\n\\n    function setThirdPartyAddress(\\n        uint _thirdPartyId,\\n        address _thirdPartyAddress\\n    ) external;\\n\\n    function setThirdPartyFee(uint _thirdPartyId, uint _thirdPartyFee) external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function unwrap(\\n        uint _amount,\\n        bytes calldata _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint thirdParty\\n    ) external returns (uint);\\n\\n    function swapAndUnwrap(\\n        address _exchangeConnector,\\n        uint[] calldata _amounts,\\n        bool _isFixedToken,\\n        address[] calldata _path,\\n        uint256 _deadline,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript,\\n        uint thirdParty\\n    ) external payable returns (uint);\\n\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        bytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) external payable returns (bool);\\n\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint[] memory _indices\\n    ) external;\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers\\n        // ^ [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x63f2cefb2a5bd58746a143143c10c1297b0ae2e3a8c5613d79ee2058ee9664cc\",\"license\":\"MIT\"},\"contracts/rune_router/interfaces/IRuneRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.4;\\n\\nimport \\\"@teleportdao/btc-evm-bridge/contracts/types/ScriptTypesEnum.sol\\\";\\n\\ninterface IRuneRouter {\\n    // Structures\\n\\n    /// @notice Structure for recording wrap and wrap&swap requests\\n    struct runeWrapRequest {\\n        bool isUsed;\\n        uint chainId;\\n        uint appId;\\n        uint tokenId;\\n        uint inputAmount;\\n        address inputToken;\\n        address recipientAddress;\\n        uint thirdPartyId;\\n        uint fee;\\n        uint outputAmount;\\n        address outputToken;\\n    }\\n\\n    /// @notice Structure for recording unwrap and swap&unwrap requests\\n    struct runeUnwrapRequest {\\n        bool isProcessed;\\n        uint amount;\\n        uint burntAmount;\\n        uint appId;\\n        address sender;\\n        bytes userScript;\\n        ScriptTypes scriptType;\\n    }\\n\\n    struct thirdParty {\\n        address thirdPartyAddress;\\n        uint thirdPartyFee;\\n    }\\n\\n    struct fees {\\n        uint protocolFee;\\n        uint lockerFee;\\n        uint thirdPartyFee;\\n    }\\n\\n    // Events\\n\\n    /// @notice Emits when appId for an exchange connector is set\\n    /// @param appId Assigned application id to exchange\\n    /// @param exchangeConnector Address of exchange connector contract\\n    event SetExchangeConnector(uint appId, address exchangeConnector);\\n\\n    /// @notice Emit when relay address updated\\n    event NewRelay(address oldRelay, address newRelay);\\n\\n    /// @notice Emit when locker address updated\\n    event NewLocker(address oldLocker, address newLocker);\\n\\n    /// @notice Emit when teleporter address updated\\n    event NewTeleporter(address oldTeleporter, address newTeleporter);\\n\\n    /// @notice Emit when protocol fee updated\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee,\\n        uint newProtocolPercentageFee\\n    );\\n\\n    /// @notice Emit when protocol fee updated\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    /// @notice Emit when treasury address updated\\n    event NewTreasury(address oldTreasury, address newTreasury);\\n\\n    /// @notice Emit when new Rune added\\n    event NewRune(\\n        string name,\\n        string symbol,\\n        string runeId,\\n        uint decimal,\\n        uint internalId,\\n        address wRuneProxy,\\n        address wRuneLogic\\n    );\\n\\n    /// @notice Emit when Rune removed\\n    event RuneRemoved(uint tokenId, address wRuneProxy);\\n\\n    /// @notice Emit when unwrap fee updated\\n    event UnwrapFeeUpdated(uint oldFee, uint newFee);\\n\\n    /// @notice Emit when third party fee updated\\n    event ThirdPartyInfoUpdated(\\n        uint thirdPartyId,\\n        address oldAddress,\\n        uint oldFee,\\n        address newAddress,\\n        uint newFee\\n    );\\n\\n    /// @notice Emit when a rune wrap request is processed\\n    event NewRuneWrap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a wrap&swap request is processed\\n    event NewRuneWrapAndSwap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        address outputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a wrap&swap request is processed but swap failed\\n    event FailedRuneWrapAndSwap(\\n        address user,\\n        uint remainingAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        address outputToken,\\n        fees fee,\\n        address thirdPartyAddress,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a unwrap request is processed\\n    event UnwrapRuneProcessed(\\n        address user,\\n        uint remainingAmount,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        uint reqIdx,\\n        bytes32 txId\\n    );\\n\\n    /// @notice Emit when a new rune unwrap request is created\\n    event NewRuneUnwrap(\\n        address user,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        address inputToken,\\n        uint inputAmount,\\n        uint remainingAmount,\\n        fees fee,\\n        uint unwrapFee,\\n        address thirdPartyAddress,\\n        uint reqIdx\\n    );\\n\\n    /// @notice Emit when a new rune swap&unwrap request is created\\n    event NewRuneSwapAndUnwrap(\\n        address user,\\n        bytes userScript,\\n        ScriptTypes scriptType,\\n        uint inputAmount,\\n        address inputToken,\\n        uint outputAmount,\\n        uint remainingAmount,\\n        address outputToken,\\n        fees fee,\\n        uint unwrapFee,\\n        address thirdPartyAddress,\\n        uint reqIdx\\n    );\\n\\n    // Read-only functions\\n\\n    function isWrapRequestProcessed(bytes32 _txId) external view returns (bool);\\n\\n    function isUnwrapRequestProcessed(\\n        uint _reqIdx\\n    ) external view returns (bool);\\n\\n    function startingBlockNumber() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n\\n    function chainId() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function locker() external view returns (address);\\n\\n    function teleporter() external view returns (address);\\n\\n    function exchangeConnector(uint appId) external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function lockerLockingScript() external view returns (bytes memory);\\n\\n    function lockerScriptType() external view returns (ScriptTypes);\\n\\n    function unwrapFee() external view returns (uint);\\n\\n    function totalRuneUnwrapRequests() external view returns (uint);\\n\\n    // State-changing functions\\n    function setRewardDistributor(address _rewardDistributor) external;\\n\\n    function setStartingBlockNumber(uint _startingBlockNumber) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setLocker(address _locker) external;\\n\\n    function setTeleporter(address _teleporter) external;\\n\\n    function setExchangeConnector(\\n        uint _appId,\\n        address _exchangeConnector\\n    ) external;\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setChainId(uint _chainId) external;\\n\\n    function setLockerLockingScript(\\n        bytes memory _lockerLockingScript,\\n        ScriptTypes _lockerScriptType\\n    ) external;\\n\\n    function setUnwrapFee(uint _newFee) external;\\n\\n    function setThirdParty(\\n        uint _thirdPartyId,\\n        address _thirdPartyAddress,\\n        uint _thirdPartyFee\\n    ) external;\\n\\n    function addRune(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _runeId,\\n        uint8 _decimal,\\n        uint _tokenId\\n    ) external;\\n\\n    function removeRune(uint _tokenId) external;\\n\\n    function wrapRune(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address[] memory _path\\n    ) external payable;\\n\\n    function unwrapProofRune(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        uint[] memory _reqIndexes\\n    ) external payable;\\n\\n    function unwrapRune(\\n        uint _thirdPartyId,\\n        uint _tokenId,\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _appId,\\n        uint _inputAmount,\\n        address[] memory _path\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xe104d9346139955b80e367e20580c62d40f25c1f9b01db7c2a7abfb0ca11e5ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613397806100206000396000f3fe6080604052600436106101095760003560e01c80630597865c146101155780631dbd94ff1461014b578063292c1d921461016d578063296079f11461018d5780633a5be8cb146101ad5780633e938097146101cd5780633f8c6ae0146101ed5780634d6e8f9d1461020d578063598418881461022d5780635c975abb1461024d57806361be10f2146102705780636d269aa814610290578063715018a6146102b05780637753f47b146102c55780638907eb5c146102ed5780638da5cb5b14610339578063a088bb201461034e578063baf7f9181461036e578063cf256854146103b5578063e63ea408146103d5578063f2fde38b146103f5578063f8c8765e1461041557600080fd5b3661011057005b600080fd5b34801561012157600080fd5b5060ce54610135906001600160a01b031681565b6040516101429190612da2565b60405180910390f35b34801561015757600080fd5b5061016b61016636600461268a565b610435565b005b34801561017957600080fd5b5060cb54610135906001600160a01b031681565b34801561019957600080fd5b5060c954610135906001600160a01b031681565b3480156101b957600080fd5b5061016b6101c83660046127a5565b610488565b3480156101d957600080fd5b5061016b6101e83660046128c4565b6105ea565b3480156101f957600080fd5b5060ca54610135906001600160a01b031681565b34801561021957600080fd5b5061016b61022836600461268a565b6106cb565b34801561023957600080fd5b5061016b61024836600461268a565b61071e565b34801561025957600080fd5b5060975460ff166040519015158152602001610142565b34801561027c57600080fd5b5061016b61028b36600461268a565b610771565b34801561029c57600080fd5b5061016b6102ab36600461284c565b6107c4565b3480156102bc57600080fd5b5061016b61087b565b3480156102d157600080fd5b5061013573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3480156102f957600080fd5b5061032b610308366004612764565b60cc60209081526000938452604080852082529284528284209052825290205481565b604051908152602001610142565b34801561034557600080fd5b5061013561088f565b34801561035a57600080fd5b5061016b6103693660046128c4565b61089e565b34801561037a57600080fd5b5061032b61038936600461280e565b60cd60209081526000948552604080862082529385528385208152918452828420909152825290205481565b3480156103c157600080fd5b5061016b6103d03660046128c4565b610cc9565b3480156103e157600080fd5b5061016b6103f0366004612724565b611164565b34801561040157600080fd5b5061016b61041036600461268a565b611267565b34801561042157600080fd5b5061016b6104303660046126c9565b6112e0565b61043d61144e565b806001600160a01b0381166104655760405163d92e233d60e01b815260040160405180910390fd5b5060ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6104906114ad565b60cb546001600160a01b031633146104f95760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a206e6f74206163726f736044820152607360f81b60648201526084015b60405180910390fd5b6000806000838060200190518101906105129190612925565b9250925092507fd8883c6af9aa96506569d2db74cafb52037a26374320a8aeaf9fd5cd7df3d2288383838760405161054d9493929190612ef6565b60405180910390a1610584836040518060400160405280600d81526020016c073776170416e64556e7772617609c1b815250611507565b1561059457610594868589611560565b6105c7836040518060400160405280601181526020017073776170416e64556e7772617052756e6560781b815250611507565b156105d7576105d7868589611a59565b5050506105e46001606555565b50505050565b6105f26114ad565b600061060085848487611eaa565b90506000806000808880602001905181019061061c9190612cb6565b6001600160a01b03898116600090815260cd602090815260408083208884528252808320878452825280832093861683529290529081208054919055939750919550935091508061067f5760405162461bcd60e51b81526004016104f090612f27565b61068c8686858486611fd9565b60008051602061334283398151915284868584868b6040516106b3969594939291906130ea565b60405180910390a15050505050506105e46001606555565b6106d361144e565b806001600160a01b0381166106fb5760405163d92e233d60e01b815260040160405180910390fd5b5060ca80546001600160a01b0319166001600160a01b0392909216919091179055565b61072661144e565b806001600160a01b03811661074e5760405163d92e233d60e01b815260040160405180910390fd5b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b61077961144e565b806001600160a01b0381166107a15760405163d92e233d60e01b815260040160405180910390fd5b5060cb80546001600160a01b0319166001600160a01b0392909216919091179055565b6107cc6114ad565b6107d461144e565b6001600160a01b03858116600090815260cd6020908152604080832088845282528083208784528252808320938616835292905290812080549190558061082d5760405162461bcd60e51b81526004016104f090612f27565b61083a8686858486611fd9565b60008051602061334283398151915284868584868b604051610861969594939291906130ea565b60405180910390a1506108746001606555565b5050505050565b61088361144e565b61088d60006120dd565b565b6033546001600160a01b031690565b6108a66114ad565b60006108b485848487611eaa565b905060006108c18661212f565b6001600160a01b038316600090815260cd60209081526040808320828501518452825280832084518452909152812060e08301518051939450919290918391829061091c57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812054938716815260cd825282812086830151825282528281208651825290915290812060e085015180519394509092829061099057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009055600081116109dc5760405162461bcd60e51b81526004016104f090612f6f565b8160e00151600081518110610a0157634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ce5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610a3f929116908590600401612eca565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9191906128aa565b5060ce5460408051639aed427960e01b815290516000926001600160a01b031691639aed4279916004808301926020929190829003018186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190612bd9565b60ce546060850151608086015160c0870151610100880151805160209091015160a08a015160e08b015160405163e91ffefd60e01b81529899506001600160a01b039097169763e91ffefd978a97610b77979096909590949093909290918d91600401613121565b6000604051808303818588803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b505050505082604001516001600160a01b03167f92560894e7925ca324b18a01bbe4bcc5ded859959687ab10489795f489cdcdeb8460200151856060015186608001518760a001518860c00151888a60e001518b6101000151600001518c610100015160200151600160ce60009054906101000a90046001600160a01b03166001600160a01b03166390665eca6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190612bd9565b610c9d91906132b8565b604051610cb39a999897969594939291906131ee565b60405180910390a2505050506105e46001606555565b610cd16114ad565b6000610cdf85848487611eaa565b90506000806000806000806000806000808e806020019051810190610d049190612bf1565b9950995099509950995099509950995099509950600060cd60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008b815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002054905060cd60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008b815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000905560008111610e155760405162461bcd60e51b81526004016104f090612f6f565b6040805160028082526060820183526000926020830190803683370190505090508181600081518110610e5857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781600181518110610e8657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505083600081518110610eb357634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ca5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610ef1929116908690600401612eca565b602060405180830381600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4391906128aa565b5060ca546040516344dd6aa560e01b81526001600160a01b03909116906344dd6aa590610f85908c9085906001908a9042908f908f908f908e90600401612e27565b602060405180830381600087803b158015610f9f57600080fd5b505af1158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190612bd9565b5060c95460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90611009908990600401612ee3565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105991906126ad565b90508d6001600160a01b03167fc3fa5dbbc53aa478b310dddcc3bd2527072ac6794c00d92e4ad7201827297fc08d8f8d8f888e8e89600160ca60009054906101000a90046001600160a01b03166001600160a01b031663930a60e88d6040518263ffffffff1660e01b81526004016110d19190612da2565b60206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190612bd9565b61112b91906132b8565b8f8f6040516111449b9a99989796959493929190613000565b60405180910390a250505050505050505050505050506105e46001606555565b61116c61144e565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156111e7576040516001600160a01b038316908290600081818185875af1925050503d80600081146111da576040519150601f19603f3d011682016040523d82523d6000602084013e6111df565b606091505b505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906112159085908590600401612eca565b602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e491906128aa565b61126f61144e565b6001600160a01b0381166112d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f0565b6112dd816120dd565b50565b600054610100900460ff16158080156113005750600054600160ff909116105b8061131a5750303b15801561131a575060005460ff166001145b61137d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104f0565b6000805460ff1916600117905580156113a0576000805461ff0019166101001790555b6113a86121a7565b6113b06121d6565b6113b8612205565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560cb805486841690831617905560ce8054928516929091169190911790558015610874576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b3361145761088f565b6001600160a01b03161461088d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f0565b600260655414156115005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f0565b6002606555565b60008160405160200161151a9190612d86565b60405160208183030381529060405280519060200120836040516020016115419190612d86565b6040516020818303038152906040528051906020012014905092915050565b600061156b83612234565b604080516002808252606082018352929350600092909160208301908036833701905050905084816000815181106115b357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508160800151816001815181106115e557634e487b7160e01b600052603260045260246000fd5b602090810291909101015260ca5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b39261162492909116908990600401612eca565b602060405180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167691906128aa565b5060ca54606083015160a084015160c085015160e0860151805160208201516040928301516101008a015193516344dd6aa560e01b81526001600160a01b03909816976344dd6aa5976116da9790968b969195909442949193909290600401612e27565b602060405180830381600087803b1580156116f457600080fd5b505af1925050508015611724575060408051601f3d908101601f1916820190925261172191810190612bd9565b60015b6118aa5760ca5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b39261175d9290911690600090600401612eca565b602060405180830381600087803b15801561177757600080fd5b505af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af91906128aa565b508460cd600084604001516001600160a01b03166001600160a01b031681526020019081526020016000206000846020015181526020019081526020016000206000846000015181526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000208190555081604001516001600160a01b03167fa79aee2abfa3037b36c3689636c9932b113a82cebda0057ac4ce2386371fc969836000015184602001518560600151878a8860e00151600001518960e00151602001518a60c001518b610100015160405161189d99989796959493929190613088565b60405180910390a2610874565b5060c95460e0830151604090810151905163626885b560e11b81526000926001600160a01b03169163c4d10b6a916118e59190600401612ee3565b60206040518083038186803b1580156118fd57600080fd5b505afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193591906126ad565b905082604001516001600160a01b03167f124f82fb68081b8c772a74ce98c0c92b659dd79e4fd3f03cf49988818eb04e8b846000015185602001518660600151888b8960e00151600001518a60e001516020015189600160ca60009054906101000a90046001600160a01b03166001600160a01b031663930a60e88d6040518263ffffffff1660e01b81526004016119cd9190612da2565b60206040518083038186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1d9190612bd9565b611a2791906132b8565b8d60c001518e6101000151604051611a499b9a99989796959493929190613000565b60405180910390a2505050505050565b6000611a648361212f565b60ce5460405163095ea7b360e01b81529192506001600160a01b038085169263095ea7b392611a999216908890600401612eca565b602060405180830381600087803b158015611ab357600080fd5b505af1158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb91906128aa565b5060ce5460408051639aed427960e01b815290516000926001600160a01b031691639aed4279916004808301926020929190829003018186803b158015611b3157600080fd5b505afa158015611b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b699190612bd9565b905060ce60009054906101000a90046001600160a01b03166001600160a01b031663e91ffefd82846060015185608001518660c0015187610100015160000151886101000151602001518960a001518d8b60e001516040518a63ffffffff1660e01b8152600401611be1989796959493929190613121565b6000604051808303818588803b158015611bfa57600080fd5b505af193505050508015611c0c575060015b611d8a5760ce5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b392611c459290911690600090600401612eca565b602060405180830381600087803b158015611c5f57600080fd5b505af1158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9791906128aa565b508460cd600084604001516001600160a01b03166001600160a01b031681526020019081526020016000206000846020015181526020019081526020016000206000846000015181526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000208190555081604001516001600160a01b03167f7d65d8bb82c4e84c52a9b363cf584e1ce4c2267912f495a43918f8641b3e3e628360200151846060015185608001518660a001518760c001518b8960e001518a6101000151600001518b61010001516020015160405161189d99989796959493929190613183565b81604001516001600160a01b03167f8ae087792dfbf19fcf7ec66a2176ac12b2ccefd4dcaa310396f2a131dfc58ccf8360200151846060015185608001518660a001518760c001518b8960e001518a6101000151600001518b610100015160200151600160ce60009054906101000a90046001600160a01b03166001600160a01b03166390665eca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3c57600080fd5b505afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e749190612bd9565b611e7e91906132b8565b604051611e949a999897969594939291906131ee565b60405180910390a25050505050565b6001606555565b60008085805190602001209050600081604051602001611ef591907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa158015611f60573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fce5760405162461bcd60e51b815260206004820152602260248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20496e76616c69642073604482015261696760f01b60648201526084016104f0565b979650505050505050565b60cb5460405163095ea7b360e01b81526060916001600160a01b038087169263095ea7b39261200e9216908790600401612eca565b602060405180830381600087803b15801561202857600080fd5b505af115801561203c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206091906128aa565b5060cb54604051631507d3c560e21b81526001600160a01b039091169063541f4f14906120a39089908190899089908c908a9042908b9060001990600401612db6565b600060405180830381600087803b1580156120bd57600080fd5b505af11580156120d1573d6000803e3d6000fd5b50505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61213761233a565b8180602001905181019061214b9190612b23565b505050608088015260c087015260a08601526001600160a01b03166040850152602080850191909152908352835161218a925084018101908401612b23565b60608b01526101008a015260e08901525095979650505050505050565b600054610100900460ff166121ce5760405162461bcd60e51b81526004016104f090612fb5565b61088d6122b0565b600054610100900460ff166121fd5760405162461bcd60e51b81526004016104f090612fb5565b61088d6122e0565b600054610100900460ff1661222c5760405162461bcd60e51b81526004016104f090612fb5565b61088d612307565b61223c6123a7565b818060200190518101906122509190612972565b60e08a015260c0890152151560a088015260808701526001600160a01b039081166060870152166040850152602080850191909152908352835161229b925084018101908401612a45565b6101008b015250979998505050505050505050565b600054610100900460ff166122d75760405162461bcd60e51b81526004016104f090612fb5565b61088d336120dd565b600054610100900460ff16611ea35760405162461bcd60e51b81526004016104f090612fb5565b600054610100900460ff1661232e5760405162461bcd60e51b81526004016104f090612fb5565b6097805460ff19169055565b604051806101200160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016123a260408051808201909152606081526000602082015290565b905290565b604051806101200160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000151581526020016060815260200161241a6040805160608082018352808252600060208301529181019190915290565b8152602001600081525090565b80516124328161331d565b919050565b600082601f830112612447578081fd5b815160206001600160401b0382111561246257612462613307565b8160051b612471828201613261565b83815282810190868401838801850189101561248b578687fd5b8693505b858410156124b65780516124a28161331d565b83526001939093019291840191840161248f565b50979650505050505050565b8051801515811461243257600080fd5b600082601f8301126124e2578081fd5b81356124f56124f082613291565b613261565b818152846020838601011115612509578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612533578081fd5b81516125416124f082613291565b818152846020838601011115612555578283fd5b6125668260208301602087016132db565b949350505050565b80516006811061243257600080fd5b60006060828403121561258e578081fd5b604051606081016001600160401b0380821183831017156125b1576125b1613307565b8160405282935084519150808211156125c957600080fd5b6125d586838701612523565b83526125e36020860161256e565b602084015260408501519150808211156125fc57600080fd5b5061260985828601612523565b6040830152505092915050565b600060408284031215612627578081fd5b604080519081016001600160401b03808211838310171561264a5761264a613307565b81604052829350845191508082111561266257600080fd5b5061266f85828601612523565b82525061267e6020840161256e565b60208201525092915050565b60006020828403121561269b578081fd5b81356126a68161331d565b9392505050565b6000602082840312156126be578081fd5b81516126a68161331d565b600080600080608085870312156126de578283fd5b84356126e98161331d565b935060208501356126f98161331d565b925060408501356127098161331d565b915060608501356127198161331d565b939692955090935050565b600080600060608486031215612738578283fd5b83356127438161331d565b925060208401356127538161331d565b929592945050506040919091013590565b600080600060608486031215612778578283fd5b83356127838161331d565b925060208401359150604084013561279a8161331d565b809150509250925092565b600080600080608085870312156127ba578182fd5b84356127c58161331d565b93506020850135925060408501356127dc8161331d565b915060608501356001600160401b038111156127f6578182fd5b612802878288016124d2565b91505092959194509250565b60008060008060808587031215612823578182fd5b843561282e8161331d565b9350602085013592506040850135915060608501356127198161331d565b600080600080600060a08688031215612863578283fd5b853561286e8161331d565b94506020860135935060408601359250606086013561288c8161331d565b9150608086013561289c81613332565b809150509295509295909350565b6000602082840312156128bb578081fd5b6126a6826124c2565b600080600080608085870312156128d9578182fd5b84356001600160401b038111156128ee578283fd5b6128fa878288016124d2565b945050602085013560ff81168114612910578283fd5b93969395505050506040820135916060013590565b600080600060608486031215612939578081fd5b83516001600160401b0381111561294e578182fd5b61295a86828701612523565b93505060208401519150604084015190509250925092565b60008060008060008060008060006101208a8c031215612990578687fd5b89516001600160401b03808211156129a6578889fd5b6129b28d838e01612523565b9a5060208c0151995060408c015198506129ce60608d01612427565b97506129dc60808d01612427565b965060a08c015195506129f160c08d016124c2565b945060e08c0151915080821115612a06578384fd5b612a128d838e01612437565b93506101008c0151915080821115612a28578283fd5b50612a358c828d0161257d565b9150509295985092959850929598565b6000806000806000806000806000806101408b8d031215612a64578384fd5b8a516001600160401b0380821115612a7a578586fd5b612a868e838f01612523565b9b5060208d01519a5060408d01519950612aa260608e01612427565b9850612ab060808e01612427565b975060a08d01519650612ac560c08e016124c2565b955060e08d0151915080821115612ada578283fd5b612ae68e838f01612437565b94506101008d0151915080821115612afc578283fd5b50612b098d828e0161257d565b9250506101208b015190509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d031215612b42578384fd5b8a516001600160401b0380821115612b58578586fd5b612b648e838f01612523565b9b5060208d01519a5060408d01519950612b8060608e01612427565b985060808d0151975060a08d0151965060c08d0151955060e08d0151915080821115612baa578485fd5b612bb68e838f01612437565b94506101008d0151915080821115612bcc578384fd5b50612b098d828e01612616565b600060208284031215612bea578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215612c10578384fd5b8a51995060208b01519850612c2760408c01612427565b9750612c3560608c01612427565b60808c015160a08d015191985096506001600160401b0380821115612c58578586fd5b612c648e838f01612523565b9650612c7260c08e0161256e565b955060e08d0151915080821115612c87578485fd5b612c938e838f01612523565b94506101008d0151915080821115612ca9578384fd5b50612b098d828e01612437565b60008060008060808587031215612ccb578182fd5b84519350602085015192506040850151612ce48161331d565b606086015190925061271981613332565b6000815180845260208085019450808401835b83811015612d2d5781516001600160a01b031687529582019590820190600101612d08565b509495945050505050565b60008151808452612d508160208601602086016132db565b601f01601f19169290920160200192915050565b60068110612d8257634e487b7160e01b600052602160045260246000fd5b9052565b60008251612d988184602087016132db565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038a811682528981166020830152881660408201526060810187905260808101869052600785900b60a082015263ffffffff841660c082015261012060e08201819052600090612e0f83820186612d38565b915050826101008301529a9950505050505050505050565b6001600160a01b038a16815261012060208083018290528a519183018290526000916101408401918c810191845b81811015612e7157835185529382019392820192600101612e55565b5050505089151560408401528281036060840152612e8f818a612cf5565b905087608084015282810360a0840152612ea98188612d38565b9050612eb860c0840187612d64565b82810360e0840152612e0f8186612d38565b6001600160a01b03929092168252602082015260400190565b6020815260006126a66020830184612d38565b608081526000612f096080830187612d38565b8560208401528460408401528281036060840152611fce8185612d38565b60208082526028908201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20616c7265616479207760408201526734ba34323930bbb760c11b606082015260800190565b60208082526026908201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20616c72656164792072604082015265195d1c9a595960d21b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006101608d83528c602084015260018060a01b03808d166040850152808c1660608501528a60808501528160a085015261303d8285018b612d38565b915061304c60c085018a612d64565b871660e0840152610100830186905282810361012084015261306e8186612cf5565b915050826101408301529c9b505050505050505050505050565b898152602081018990526001600160a01b038881166040830152871660608201526080810186905261012060a082018190526000906130c983820188612d38565b90506130d860c0840187612d64565b82810360e0840152612e0f8186612cf5565b95865260208601949094526001600160a01b039283166040860152606085019190915260070b60808401521660a082015260c00190565b60006101008a835289602084015288604084015280606084015261314781840189612d38565b90506131566080840188612d64565b8560a08401528460c084015282810360e08401526131748185612cf5565b9b9a5050505050505050505050565b60006101208b83528a60208401528960408401528860608401528760808401528660a08401528060c08401526131bb81840187612cf5565b905082810360e08401526131cf8186612d38565b9150506131e0610100830184612d64565b9a9950505050505050505050565b60006101408c83528b60208401528a60408401528960608401528860808401528760a08401528060c084015261322681840188612cf5565b905082810360e084015261323a8187612d38565b91505061324b610100830185612d64565b826101208301529b9a5050505050505050505050565b604051601f8201601f191681016001600160401b038111828210171561328957613289613307565b604052919050565b60006001600160401b038211156132aa576132aa613307565b50601f01601f191660200190565b6000828210156132d657634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156132f65781810151838201526020016132de565b838111156105e45750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112dd57600080fd5b8060070b81146112dd57600080fdfef43f17a174cd55d7d75e934475f1cec7890c2bf3fabbf376de3868f0d8ce6897a26469706673582212207d19a0799135e25345d4153fb8612ad7ae19e515936b445d7aed24863712692f64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101095760003560e01c80630597865c146101155780631dbd94ff1461014b578063292c1d921461016d578063296079f11461018d5780633a5be8cb146101ad5780633e938097146101cd5780633f8c6ae0146101ed5780634d6e8f9d1461020d578063598418881461022d5780635c975abb1461024d57806361be10f2146102705780636d269aa814610290578063715018a6146102b05780637753f47b146102c55780638907eb5c146102ed5780638da5cb5b14610339578063a088bb201461034e578063baf7f9181461036e578063cf256854146103b5578063e63ea408146103d5578063f2fde38b146103f5578063f8c8765e1461041557600080fd5b3661011057005b600080fd5b34801561012157600080fd5b5060ce54610135906001600160a01b031681565b6040516101429190612da2565b60405180910390f35b34801561015757600080fd5b5061016b61016636600461268a565b610435565b005b34801561017957600080fd5b5060cb54610135906001600160a01b031681565b34801561019957600080fd5b5060c954610135906001600160a01b031681565b3480156101b957600080fd5b5061016b6101c83660046127a5565b610488565b3480156101d957600080fd5b5061016b6101e83660046128c4565b6105ea565b3480156101f957600080fd5b5060ca54610135906001600160a01b031681565b34801561021957600080fd5b5061016b61022836600461268a565b6106cb565b34801561023957600080fd5b5061016b61024836600461268a565b61071e565b34801561025957600080fd5b5060975460ff166040519015158152602001610142565b34801561027c57600080fd5b5061016b61028b36600461268a565b610771565b34801561029c57600080fd5b5061016b6102ab36600461284c565b6107c4565b3480156102bc57600080fd5b5061016b61087b565b3480156102d157600080fd5b5061013573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3480156102f957600080fd5b5061032b610308366004612764565b60cc60209081526000938452604080852082529284528284209052825290205481565b604051908152602001610142565b34801561034557600080fd5b5061013561088f565b34801561035a57600080fd5b5061016b6103693660046128c4565b61089e565b34801561037a57600080fd5b5061032b61038936600461280e565b60cd60209081526000948552604080862082529385528385208152918452828420909152825290205481565b3480156103c157600080fd5b5061016b6103d03660046128c4565b610cc9565b3480156103e157600080fd5b5061016b6103f0366004612724565b611164565b34801561040157600080fd5b5061016b61041036600461268a565b611267565b34801561042157600080fd5b5061016b6104303660046126c9565b6112e0565b61043d61144e565b806001600160a01b0381166104655760405163d92e233d60e01b815260040160405180910390fd5b5060ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6104906114ad565b60cb546001600160a01b031633146104f95760405162461bcd60e51b815260206004820152602160248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a206e6f74206163726f736044820152607360f81b60648201526084015b60405180910390fd5b6000806000838060200190518101906105129190612925565b9250925092507fd8883c6af9aa96506569d2db74cafb52037a26374320a8aeaf9fd5cd7df3d2288383838760405161054d9493929190612ef6565b60405180910390a1610584836040518060400160405280600d81526020016c073776170416e64556e7772617609c1b815250611507565b1561059457610594868589611560565b6105c7836040518060400160405280601181526020017073776170416e64556e7772617052756e6560781b815250611507565b156105d7576105d7868589611a59565b5050506105e46001606555565b50505050565b6105f26114ad565b600061060085848487611eaa565b90506000806000808880602001905181019061061c9190612cb6565b6001600160a01b03898116600090815260cd602090815260408083208884528252808320878452825280832093861683529290529081208054919055939750919550935091508061067f5760405162461bcd60e51b81526004016104f090612f27565b61068c8686858486611fd9565b60008051602061334283398151915284868584868b6040516106b3969594939291906130ea565b60405180910390a15050505050506105e46001606555565b6106d361144e565b806001600160a01b0381166106fb5760405163d92e233d60e01b815260040160405180910390fd5b5060ca80546001600160a01b0319166001600160a01b0392909216919091179055565b61072661144e565b806001600160a01b03811661074e5760405163d92e233d60e01b815260040160405180910390fd5b5060c980546001600160a01b0319166001600160a01b0392909216919091179055565b61077961144e565b806001600160a01b0381166107a15760405163d92e233d60e01b815260040160405180910390fd5b5060cb80546001600160a01b0319166001600160a01b0392909216919091179055565b6107cc6114ad565b6107d461144e565b6001600160a01b03858116600090815260cd6020908152604080832088845282528083208784528252808320938616835292905290812080549190558061082d5760405162461bcd60e51b81526004016104f090612f27565b61083a8686858486611fd9565b60008051602061334283398151915284868584868b604051610861969594939291906130ea565b60405180910390a1506108746001606555565b5050505050565b61088361144e565b61088d60006120dd565b565b6033546001600160a01b031690565b6108a66114ad565b60006108b485848487611eaa565b905060006108c18661212f565b6001600160a01b038316600090815260cd60209081526040808320828501518452825280832084518452909152812060e08301518051939450919290918391829061091c57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812054938716815260cd825282812086830151825282528281208651825290915290812060e085015180519394509092829061099057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009055600081116109dc5760405162461bcd60e51b81526004016104f090612f6f565b8160e00151600081518110610a0157634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ce5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610a3f929116908590600401612eca565b602060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9191906128aa565b5060ce5460408051639aed427960e01b815290516000926001600160a01b031691639aed4279916004808301926020929190829003018186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f9190612bd9565b60ce546060850151608086015160c0870151610100880151805160209091015160a08a015160e08b015160405163e91ffefd60e01b81529899506001600160a01b039097169763e91ffefd978a97610b77979096909590949093909290918d91600401613121565b6000604051808303818588803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b505050505082604001516001600160a01b03167f92560894e7925ca324b18a01bbe4bcc5ded859959687ab10489795f489cdcdeb8460200151856060015186608001518760a001518860c00151888a60e001518b6101000151600001518c610100015160200151600160ce60009054906101000a90046001600160a01b03166001600160a01b03166390665eca6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190612bd9565b610c9d91906132b8565b604051610cb39a999897969594939291906131ee565b60405180910390a2505050506105e46001606555565b610cd16114ad565b6000610cdf85848487611eaa565b90506000806000806000806000806000808e806020019051810190610d049190612bf1565b9950995099509950995099509950995099509950600060cd60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008b815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002054905060cd60008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c815260200190815260200160002060008b815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000206000905560008111610e155760405162461bcd60e51b81526004016104f090612f6f565b6040805160028082526060820183526000926020830190803683370190505090508181600081518110610e5857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781600181518110610e8657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505083600081518110610eb357634e487b7160e01b600052603260045260246000fd5b602090810291909101015160ca5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610ef1929116908690600401612eca565b602060405180830381600087803b158015610f0b57600080fd5b505af1158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4391906128aa565b5060ca546040516344dd6aa560e01b81526001600160a01b03909116906344dd6aa590610f85908c9085906001908a9042908f908f908f908e90600401612e27565b602060405180830381600087803b158015610f9f57600080fd5b505af1158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190612bd9565b5060c95460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90611009908990600401612ee3565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105991906126ad565b90508d6001600160a01b03167fc3fa5dbbc53aa478b310dddcc3bd2527072ac6794c00d92e4ad7201827297fc08d8f8d8f888e8e89600160ca60009054906101000a90046001600160a01b03166001600160a01b031663930a60e88d6040518263ffffffff1660e01b81526004016110d19190612da2565b60206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190612bd9565b61112b91906132b8565b8f8f6040516111449b9a99989796959493929190613000565b60405180910390a250505050505050505050505050506105e46001606555565b61116c61144e565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156111e7576040516001600160a01b038316908290600081818185875af1925050503d80600081146111da576040519150601f19603f3d011682016040523d82523d6000602084013e6111df565b606091505b505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906112159085908590600401612eca565b602060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e491906128aa565b61126f61144e565b6001600160a01b0381166112d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f0565b6112dd816120dd565b50565b600054610100900460ff16158080156113005750600054600160ff909116105b8061131a5750303b15801561131a575060005460ff166001145b61137d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104f0565b6000805460ff1916600117905580156113a0576000805461ff0019166101001790555b6113a86121a7565b6113b06121d6565b6113b8612205565b60c980546001600160a01b038088166001600160a01b03199283161790925560ca805487841690831617905560cb805486841690831617905560ce8054928516929091169190911790558015610874576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b3361145761088f565b6001600160a01b03161461088d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f0565b600260655414156115005760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f0565b6002606555565b60008160405160200161151a9190612d86565b60405160208183030381529060405280519060200120836040516020016115419190612d86565b6040516020818303038152906040528051906020012014905092915050565b600061156b83612234565b604080516002808252606082018352929350600092909160208301908036833701905050905084816000815181106115b357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508160800151816001815181106115e557634e487b7160e01b600052603260045260246000fd5b602090810291909101015260ca5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b39261162492909116908990600401612eca565b602060405180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167691906128aa565b5060ca54606083015160a084015160c085015160e0860151805160208201516040928301516101008a015193516344dd6aa560e01b81526001600160a01b03909816976344dd6aa5976116da9790968b969195909442949193909290600401612e27565b602060405180830381600087803b1580156116f457600080fd5b505af1925050508015611724575060408051601f3d908101601f1916820190925261172191810190612bd9565b60015b6118aa5760ca5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b39261175d9290911690600090600401612eca565b602060405180830381600087803b15801561177757600080fd5b505af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af91906128aa565b508460cd600084604001516001600160a01b03166001600160a01b031681526020019081526020016000206000846020015181526020019081526020016000206000846000015181526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000208190555081604001516001600160a01b03167fa79aee2abfa3037b36c3689636c9932b113a82cebda0057ac4ce2386371fc969836000015184602001518560600151878a8860e00151600001518960e00151602001518a60c001518b610100015160405161189d99989796959493929190613088565b60405180910390a2610874565b5060c95460e0830151604090810151905163626885b560e11b81526000926001600160a01b03169163c4d10b6a916118e59190600401612ee3565b60206040518083038186803b1580156118fd57600080fd5b505afa158015611911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193591906126ad565b905082604001516001600160a01b03167f124f82fb68081b8c772a74ce98c0c92b659dd79e4fd3f03cf49988818eb04e8b846000015185602001518660600151888b8960e00151600001518a60e001516020015189600160ca60009054906101000a90046001600160a01b03166001600160a01b031663930a60e88d6040518263ffffffff1660e01b81526004016119cd9190612da2565b60206040518083038186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1d9190612bd9565b611a2791906132b8565b8d60c001518e6101000151604051611a499b9a99989796959493929190613000565b60405180910390a2505050505050565b6000611a648361212f565b60ce5460405163095ea7b360e01b81529192506001600160a01b038085169263095ea7b392611a999216908890600401612eca565b602060405180830381600087803b158015611ab357600080fd5b505af1158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb91906128aa565b5060ce5460408051639aed427960e01b815290516000926001600160a01b031691639aed4279916004808301926020929190829003018186803b158015611b3157600080fd5b505afa158015611b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b699190612bd9565b905060ce60009054906101000a90046001600160a01b03166001600160a01b031663e91ffefd82846060015185608001518660c0015187610100015160000151886101000151602001518960a001518d8b60e001516040518a63ffffffff1660e01b8152600401611be1989796959493929190613121565b6000604051808303818588803b158015611bfa57600080fd5b505af193505050508015611c0c575060015b611d8a5760ce5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b392611c459290911690600090600401612eca565b602060405180830381600087803b158015611c5f57600080fd5b505af1158015611c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9791906128aa565b508460cd600084604001516001600160a01b03166001600160a01b031681526020019081526020016000206000846020015181526020019081526020016000206000846000015181526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000208190555081604001516001600160a01b03167f7d65d8bb82c4e84c52a9b363cf584e1ce4c2267912f495a43918f8641b3e3e628360200151846060015185608001518660a001518760c001518b8960e001518a6101000151600001518b61010001516020015160405161189d99989796959493929190613183565b81604001516001600160a01b03167f8ae087792dfbf19fcf7ec66a2176ac12b2ccefd4dcaa310396f2a131dfc58ccf8360200151846060015185608001518660a001518760c001518b8960e001518a6101000151600001518b610100015160200151600160ce60009054906101000a90046001600160a01b03166001600160a01b03166390665eca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3c57600080fd5b505afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e749190612bd9565b611e7e91906132b8565b604051611e949a999897969594939291906131ee565b60405180910390a25050505050565b6001606555565b60008085805190602001209050600081604051602001611ef591907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa158015611f60573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fce5760405162461bcd60e51b815260206004820152602260248201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20496e76616c69642073604482015261696760f01b60648201526084016104f0565b979650505050505050565b60cb5460405163095ea7b360e01b81526060916001600160a01b038087169263095ea7b39261200e9216908790600401612eca565b602060405180830381600087803b15801561202857600080fd5b505af115801561203c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206091906128aa565b5060cb54604051631507d3c560e21b81526001600160a01b039091169063541f4f14906120a39089908190899089908c908a9042908b9060001990600401612db6565b600060405180830381600087803b1580156120bd57600080fd5b505af11580156120d1573d6000803e3d6000fd5b50505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61213761233a565b8180602001905181019061214b9190612b23565b505050608088015260c087015260a08601526001600160a01b03166040850152602080850191909152908352835161218a925084018101908401612b23565b60608b01526101008a015260e08901525095979650505050505050565b600054610100900460ff166121ce5760405162461bcd60e51b81526004016104f090612fb5565b61088d6122b0565b600054610100900460ff166121fd5760405162461bcd60e51b81526004016104f090612fb5565b61088d6122e0565b600054610100900460ff1661222c5760405162461bcd60e51b81526004016104f090612fb5565b61088d612307565b61223c6123a7565b818060200190518101906122509190612972565b60e08a015260c0890152151560a088015260808701526001600160a01b039081166060870152166040850152602080850191909152908352835161229b925084018101908401612a45565b6101008b015250979998505050505050505050565b600054610100900460ff166122d75760405162461bcd60e51b81526004016104f090612fb5565b61088d336120dd565b600054610100900460ff16611ea35760405162461bcd60e51b81526004016104f090612fb5565b600054610100900460ff1661232e5760405162461bcd60e51b81526004016104f090612fb5565b6097805460ff19169055565b604051806101200160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081526020016123a260408051808201909152606081526000602082015290565b905290565b604051806101200160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000151581526020016060815260200161241a6040805160608082018352808252600060208301529181019190915290565b8152602001600081525090565b80516124328161331d565b919050565b600082601f830112612447578081fd5b815160206001600160401b0382111561246257612462613307565b8160051b612471828201613261565b83815282810190868401838801850189101561248b578687fd5b8693505b858410156124b65780516124a28161331d565b83526001939093019291840191840161248f565b50979650505050505050565b8051801515811461243257600080fd5b600082601f8301126124e2578081fd5b81356124f56124f082613291565b613261565b818152846020838601011115612509578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612533578081fd5b81516125416124f082613291565b818152846020838601011115612555578283fd5b6125668260208301602087016132db565b949350505050565b80516006811061243257600080fd5b60006060828403121561258e578081fd5b604051606081016001600160401b0380821183831017156125b1576125b1613307565b8160405282935084519150808211156125c957600080fd5b6125d586838701612523565b83526125e36020860161256e565b602084015260408501519150808211156125fc57600080fd5b5061260985828601612523565b6040830152505092915050565b600060408284031215612627578081fd5b604080519081016001600160401b03808211838310171561264a5761264a613307565b81604052829350845191508082111561266257600080fd5b5061266f85828601612523565b82525061267e6020840161256e565b60208201525092915050565b60006020828403121561269b578081fd5b81356126a68161331d565b9392505050565b6000602082840312156126be578081fd5b81516126a68161331d565b600080600080608085870312156126de578283fd5b84356126e98161331d565b935060208501356126f98161331d565b925060408501356127098161331d565b915060608501356127198161331d565b939692955090935050565b600080600060608486031215612738578283fd5b83356127438161331d565b925060208401356127538161331d565b929592945050506040919091013590565b600080600060608486031215612778578283fd5b83356127838161331d565b925060208401359150604084013561279a8161331d565b809150509250925092565b600080600080608085870312156127ba578182fd5b84356127c58161331d565b93506020850135925060408501356127dc8161331d565b915060608501356001600160401b038111156127f6578182fd5b612802878288016124d2565b91505092959194509250565b60008060008060808587031215612823578182fd5b843561282e8161331d565b9350602085013592506040850135915060608501356127198161331d565b600080600080600060a08688031215612863578283fd5b853561286e8161331d565b94506020860135935060408601359250606086013561288c8161331d565b9150608086013561289c81613332565b809150509295509295909350565b6000602082840312156128bb578081fd5b6126a6826124c2565b600080600080608085870312156128d9578182fd5b84356001600160401b038111156128ee578283fd5b6128fa878288016124d2565b945050602085013560ff81168114612910578283fd5b93969395505050506040820135916060013590565b600080600060608486031215612939578081fd5b83516001600160401b0381111561294e578182fd5b61295a86828701612523565b93505060208401519150604084015190509250925092565b60008060008060008060008060006101208a8c031215612990578687fd5b89516001600160401b03808211156129a6578889fd5b6129b28d838e01612523565b9a5060208c0151995060408c015198506129ce60608d01612427565b97506129dc60808d01612427565b965060a08c015195506129f160c08d016124c2565b945060e08c0151915080821115612a06578384fd5b612a128d838e01612437565b93506101008c0151915080821115612a28578283fd5b50612a358c828d0161257d565b9150509295985092959850929598565b6000806000806000806000806000806101408b8d031215612a64578384fd5b8a516001600160401b0380821115612a7a578586fd5b612a868e838f01612523565b9b5060208d01519a5060408d01519950612aa260608e01612427565b9850612ab060808e01612427565b975060a08d01519650612ac560c08e016124c2565b955060e08d0151915080821115612ada578283fd5b612ae68e838f01612437565b94506101008d0151915080821115612afc578283fd5b50612b098d828e0161257d565b9250506101208b015190509295989b9194979a5092959850565b6000806000806000806000806000806101408b8d031215612b42578384fd5b8a516001600160401b0380821115612b58578586fd5b612b648e838f01612523565b9b5060208d01519a5060408d01519950612b8060608e01612427565b985060808d0151975060a08d0151965060c08d0151955060e08d0151915080821115612baa578485fd5b612bb68e838f01612437565b94506101008d0151915080821115612bcc578384fd5b50612b098d828e01612616565b600060208284031215612bea578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215612c10578384fd5b8a51995060208b01519850612c2760408c01612427565b9750612c3560608c01612427565b60808c015160a08d015191985096506001600160401b0380821115612c58578586fd5b612c648e838f01612523565b9650612c7260c08e0161256e565b955060e08d0151915080821115612c87578485fd5b612c938e838f01612523565b94506101008d0151915080821115612ca9578384fd5b50612b098d828e01612437565b60008060008060808587031215612ccb578182fd5b84519350602085015192506040850151612ce48161331d565b606086015190925061271981613332565b6000815180845260208085019450808401835b83811015612d2d5781516001600160a01b031687529582019590820190600101612d08565b509495945050505050565b60008151808452612d508160208601602086016132db565b601f01601f19169290920160200192915050565b60068110612d8257634e487b7160e01b600052602160045260246000fd5b9052565b60008251612d988184602087016132db565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038a811682528981166020830152881660408201526060810187905260808101869052600785900b60a082015263ffffffff841660c082015261012060e08201819052600090612e0f83820186612d38565b915050826101008301529a9950505050505050505050565b6001600160a01b038a16815261012060208083018290528a519183018290526000916101408401918c810191845b81811015612e7157835185529382019392820192600101612e55565b5050505089151560408401528281036060840152612e8f818a612cf5565b905087608084015282810360a0840152612ea98188612d38565b9050612eb860c0840187612d64565b82810360e0840152612e0f8186612d38565b6001600160a01b03929092168252602082015260400190565b6020815260006126a66020830184612d38565b608081526000612f096080830187612d38565b8560208401528460408401528281036060840152611fce8185612d38565b60208082526028908201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20616c7265616479207760408201526734ba34323930bbb760c11b606082015260800190565b60208082526026908201527f506f6c79676f6e436f6e6e6563746f724c6f6769633a20616c72656164792072604082015265195d1c9a595960d21b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006101608d83528c602084015260018060a01b03808d166040850152808c1660608501528a60808501528160a085015261303d8285018b612d38565b915061304c60c085018a612d64565b871660e0840152610100830186905282810361012084015261306e8186612cf5565b915050826101408301529c9b505050505050505050505050565b898152602081018990526001600160a01b038881166040830152871660608201526080810186905261012060a082018190526000906130c983820188612d38565b90506130d860c0840187612d64565b82810360e0840152612e0f8186612cf5565b95865260208601949094526001600160a01b039283166040860152606085019190915260070b60808401521660a082015260c00190565b60006101008a835289602084015288604084015280606084015261314781840189612d38565b90506131566080840188612d64565b8560a08401528460c084015282810360e08401526131748185612cf5565b9b9a5050505050505050505050565b60006101208b83528a60208401528960408401528860608401528760808401528660a08401528060c08401526131bb81840187612cf5565b905082810360e08401526131cf8186612d38565b9150506131e0610100830184612d64565b9a9950505050505050505050565b60006101408c83528b60208401528a60408401528960608401528860808401528760a08401528060c084015261322681840188612cf5565b905082810360e084015261323a8187612d38565b91505061324b610100830185612d64565b826101208301529b9a5050505050505050505050565b604051601f8201601f191681016001600160401b038111828210171561328957613289613307565b604052919050565b60006001600160401b038211156132aa576132aa613307565b50601f01601f191660200190565b6000828210156132d657634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156132f65781810151838201526020016132de565b838111156105e45750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112dd57600080fd5b8060070b81146112dd57600080fdfef43f17a174cd55d7d75e934475f1cec7890c2bf3fabbf376de3868f0d8ce6897a26469706673582212207d19a0799135e25345d4153fb8612ad7ae19e515936b445d7aed24863712692f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyWithdraw(address,address,uint256)": {
        "details": "Only owner can call this"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)": {
        "details": "User signs a message for retrying its request",
        "params": {
          "_message": "The signed message",
          "_r": "Signature r",
          "_s": "Signature s",
          "_v": "Signature v"
        }
      },
      "retrySwapAndUnwrapRune(bytes,uint8,bytes32,bytes32)": {
        "details": "User signs a message for retrying its request",
        "params": {
          "_message": "The signed message",
          "_r": "Signature r",
          "_s": "Signature s",
          "_v": "Signature v"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFundsToSourceChain(bytes,uint8,bytes32,bytes32)": {
        "params": {
          "_message": "The signed message",
          "_r": "Signature r",
          "_s": "Signature s",
          "_v": "Signature v"
        }
      },
      "withdrawFundsToSourceChainByOwner(address,uint256,uint256,address,int64)": {
        "details": "Owner can only set the relayer fee percentage"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address,address,uint256)": {
        "notice": "Withdraws tokens in the emergency case"
      },
      "handleV3AcrossMessage(address,uint256,address,bytes)": {
        "notice": "Process requests coming from Ethereum (using Across V3)"
      },
      "retrySwapAndUnwrap(bytes,uint8,bytes32,bytes32)": {
        "notice": "Retry to swap and unwrap tokens"
      },
      "retrySwapAndUnwrapRune(bytes,uint8,bytes32,bytes32)": {
        "notice": "Retry to swap and unwrap tokens"
      },
      "setAcross(address)": {
        "notice": "Setter for AcrossV3"
      },
      "setBurnRouterProxy(address)": {
        "notice": "Setter for BurnRouterProxy"
      },
      "setLockersProxy(address)": {
        "notice": "Setter for LockersProxy"
      },
      "setRuneRouterProxy(address)": {
        "notice": "Setter for runeRouterProxy"
      },
      "withdrawFundsToSourceChain(bytes,uint8,bytes32,bytes32)": {
        "notice": "Send back tokens to the source chain"
      },
      "withdrawFundsToSourceChainByOwner(address,uint256,uint256,address,int64)": {
        "notice": "Send back tokens to the source chain by owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 280,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 283,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1035,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 152,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 272,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 585,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 654,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 464,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 569,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2504,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "lockersProxy",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 2507,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "burnRouterProxy",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 2510,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "across",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 2519,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "failedReqs",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2530,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "newFailedReqs",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256))))"
      },
      {
        "astId": 2533,
        "contract": "contracts/chain_connectors/PolyConnectorLogic.sol:PolyConnectorLogic",
        "label": "runeRouterProxy",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(address => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}